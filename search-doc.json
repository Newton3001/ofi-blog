[{"title":"Wettbewerb: Informatik-Olympiade üöÄ","type":0,"sectionRef":"#","url":"/news/2022/08/25/Informatik-Olympiade","content":"Programmierwettbewerb f√ºr Jugendliche. Die Erste Runde findet vom 16.9-30.11.2022 online statt. Wann? 15.9-30.11.2022 Anmelden unter https://soi.ch üëâ Mehr Informationen auf soi.ch","keywords":""},{"title":"Neue Zeile ohne Nachricht abzuschicken","type":0,"sectionRef":"#","url":"/news/2022/11/07/MS-Teams-Newline","content":" ‚Äã Kurz eine Nachricht schreiben - Anrede, Text, Grussformel... Doch schickt die Anrede ab, anstatt eine neue Zeile einzuf√ºgen üòñ ... Nachricht geschickt statt neue Zeile Egal ob in Word, MS-Teams, Whatsapp oder Instagram: Soll eine neue Zeile erzeugt werden, welche noch zum vorigen Abschnitt oder zur selben Nachricht geh√∂rt, so kann dies mit + erreicht werden.","keywords":""},{"title":"Fenstermanagement unter Mac","type":0,"sectionRef":"#","url":"/news/2022/10/24/OSX-Window-Manager","content":"Unter Mac gibt es standardm√§ssig keine M√∂glichkeit, Fenster auf dem Bildschirm optimal zu positionieren, ohne dabei in den Vollbildschirm Modus zu wechseln. Fenstermanagement mit @Rectangle Gerade wenn oft zwischen Programmen gewechselt werden soll, w√§re dies aber praktisch. Das kostenlose und quelloffene Programm üëâ rectangleapp √ºbernimmt diese Aufgabe im nu und r√ºstet somit die aus Windows bekannte Funktion nach. Die Anordnung der Fenster kann dabei bequem mit Tastenshortcuts vorgenommen werden: @ Viel spass damit üòé","keywords":""},{"title":"Browser Scrollbalken","type":0,"sectionRef":"#","url":"/news/2022/10/14/Browser-Scrollbars","content":"Unter Chrome , Edge und Firefox gibt es eine versteckte Einstellungsseite, in welcher jegliche Einstellungen des Browsers konfiguriert werden kann. Moderne Scrollbars unter Windows Achtung √Ñndern Sie nur Einstellungen deren Auswirkungen Sie kennen! Scrollbars‚Äã Die Scrollbars sehen unter Windows teils etwas altbacken aus, damit Sie auf allen Ger√§tekategorien und f√ºr alle Benutzer:innen gut benutzbar sind. Dies kann aber auch nervig sein, da durch die Scrollbars viel Platz verloren geht. √úber die versteckte Einstellungsseite l√§sst sich das Aussehen √§ndern edge://flags Edge Einstellungsseite üëâ edge://flags Aussehen der Scrollbar edge://flags/#edge-overlay-scrollbars-win-style Fl√ºssiges Scrollen edge://flags/#smooth-scrolling chrome://flags Chrome Einstellungsseite üëâ chrome://flags Aussehen der Scrollbar chrome://flags/#overlay-scrollbars Fl√ºssiges Scrollen chrome://flags/#smooth-scrolling about:config Firefox Einstellungsseite üëâ about:config Scrollbars Standardm√§ssig aktiviert ‚úÖ","keywords":""},{"title":"Infrastruktur","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur","content":"Infrastruktur Ziele Sie haben die n√∂tige Software f√ºr diesen Themenblock auf Ihrem Notebook installiert Sie wissen, wozu die einzelnen Apps dienen Sie haben einen ersten Einblick in diese Apps genommen Sie haben einen ersten Eintrag in Ihrer Dokumentation geschrieben.","keywords":""},{"title":"3. Webseiten verf√ºgbar machen","type":0,"sectionRef":"#","url":"/24ef/Netzwerke/Server/share","content":"3. Webseiten verf√ºgbar machen Webserver@ Damit Sie auf die Webseiten Ihrer Kolleginnen und Kollegen zugreifen k√∂nnen m√ºssen zwei Bedingungen erf√ºllt sein: Das WLAN muss zulassen, dass die mit ihm verbundenen Computer untereinander Nachrichten austauschen k√∂nnen. Das ist im BYOD-WLAN aus Sicherheitsgr√ºnden nicht der Fall. Sie m√ºssen die IP-Adresse des Computers kennen, auf welchem der Webserver l√§uft. Aufgaben Um die erste Bedingung zu erf√ºllen, m√ºssen Sie Ihr Notebook mit dem WLAN EFIN verbinden. √ñffnen Sie nun auf Ihrem Notebook eine Powershell (Windows) oder ein Terminal (Mac). ipconfig ifconfig Suchen Sie in der Antwort nach der IP-Adresse f√ºr den WLAN-Adapter auf Ihrem Notebook und schreiben Sie diese Adresse an die Tafel. Geben Sie nun in Ihrem Browser als URL die IP-Adresse eines Notebooks im Netzwerk EFIN ein, gefolgt von der Port-Adresse 8000 ein. Z.B.http://192.168.0.12:8000Was sehen Sie? Versuchen Sie nun in Ihrem Browser auf die eigentliche Webseite Ihrer Kollegin / Ihres Kollegen zuzugreifen. Wie lautet die korrekte URL?","keywords":""},{"title":"2. Protokolle","type":0,"sectionRef":"#","url":"/24ef/Netzwerke/Protokolle","content":"2. Protokolle Grundlagen‚Äã Ein Protokoll definiert, wie zwei Einheiten miteinander kommunizieren. Nur wenn beide Einheiten sich an das vereinbarte Protokoll halten, kann ein sinnvoller Informationsaustausch stattfinden. Dies gilt unabh√§ngig davon, ob es sich bei den beteiligten Einheiten um einzelne Menschen, ganze Staaten, oder Maschinen handelt. An Stelle von Einheiten spricht man oft auch von den Parteien, welche miteinander kommunizieren. Ein Protokoll besteht aus einer Menge von m√∂glichen Nachrichten und aus einem Satz von Regeln, welche die m√∂glichen Abfolgen der Nachrichten festlegen. Beispiel aus dem Alltag, Begr√ºssung zwischen zwei Menschen: A: &quot;Guten Tag.&quot; B: &quot;Guten Tag.&quot; A: &quot;Wie geht es Ihnen?&quot; B: &quot;Danke gut.&quot; Solche Abl√§ufe werden oft in Sequenzdiagrammen dargestellt: Die vom Protokoll vorgegebene Abfolge muss eingehalten werden. H√§lt sich eine Partei nicht daran, so entsteht Verwirrung: Genau so wichtig, wie die Abfolge, ist ein korrekter Inhalt der Nachrichten: W√§hrend zwei Menschen im obigen Dialog noch knapp einen Sinn erkennen k√∂nnen, ist das f√ºr Maschinen anders. Diese sind darauf angewiesen, dass die Nachrichtinhalte bis auf's letzte Bit korrekt sind. Nachrichten von Netzwerkprotokollen m√ºssen deshalb eindeutig und unmissverst√§ndlich definiert sein. Nachrichtenformat‚Äã Eine Nachricht ist zun√§chst einfach ein Abfolge von Bytes. √úblicherweise werden diese Bytes in drei Teile aufgeteilt: Header Der Header enth√§lt Informationen, welche f√ºr das Protokoll von Bedeutung sind, z.B. Absenderadresse und Zieladresse einer Nachricht. Payload Die Payload umfasst den Teil einer Nachricht, welcher f√ºr das Protokoll zu welchem die Nachricht geh√∂rt, nicht relevant ist. Die Payload bietet die M√∂glichkeit, Informationen zu transportieren, welche dann auf einer h√∂heren Ebene von Bedeutung sind. Trailer Der Trailer ist wiederum Teil des Protokolls, zu welchem die Nachricht geh√∂rt. Er enth√§lt zum Beispiel Informationen, zur √úberpr√ºfung, ob die Nachricht vollst√§ndig und korrekt √ºbertragen wurde (z.B. Quersummen √ºber alle Bytes der Nachricht). Man kann sich das wie ein Brief vorstellen: Brief In manchen Nachrichten k√∂nnen Payload und Trailer auch fehlen. Das h√§ngt ganz vom Protokoll ab. Inerhalb des Headers und des Trailers bilden mehrere aufeinander folgende Bytes sogenannte Informationselemente. Zum Beispiel besteht eine IP-Adresse aus vier aufeinander folgenden Bytes. Nachrichtenabfolge‚Äã Um die Regeln f√ºr die Nachrichtenabfolge zu definieren wird oft eine Zustandsmachine, auch endlicher Automat genannt, verwendet. Dies ist ein Modell f√ºr das Verhalten der kommunizierenden Parteien. Eine Partei befindet sich immer in einem bestimmten Zustand. In diesem ist sie bereit nur ganz bestimmte Nachrichten zu empfangen. Alle anderen Nachrichten ignoriert sie. Wenn eine g√ºltige Nachricht empfangen wird, so wechselt die Partei in einen anderen Zustand und kann gleichzeitig eine Nachricht zur√ºcksenden. Ein solcher Zustandswechsel wird als Transition bezeichnet. Am Anfang befindet sich die Partei in einem Startzustand . Man kann solche Zustandsmaschinen durch Zustandsdiagramme darstellen. Beispiel f√ºr die Kommunikation zwischen Menschen, Zustandsdiagramm f√ºr Partei A: Startzustand Der schwarze Punkt Endzustand Der weisse Punkt . In diesem ist keine weitere Kommunikation m√∂glich. Die Zustandsmaschine m√ºsste dazu neu gestartet werden. Zwischenzust√§nde Die K√§stchen entsprechen Transitionen Die Pfeile sind die m√∂glichen Transitionen, wobei jeweils steht, durch welche empfangene Nachricht die Transition ausgel√∂st wird und, nach dem /, welche Nachricht allenfalls als Antwort gesendet wird. Vollst√§ndigkeit Das Diagramm ist nicht vollst√§ndig. Die mit ... markierten Zwischenzust√§nde sollen dies andeuten.","keywords":""},{"title":"1. Webserver und HTTP","type":0,"sectionRef":"#","url":"/24ef/Netzwerke/Server","content":"1. Webserver und HTTP Ziele Sie k√∂nnen mit Python einen Webserver erstellen Sie k√∂nnen die dar√ºber erreichbaren Webseiten (minimal) gestalten Sie haben ein Tool zur Analyse des Netzwerkverkehrs auf Ihrem Notebook installiert Sie k√∂nnen mit diesem Tool den HTTP-Verkehr zwischen Browser und Server analysieren Sie k√∂nnen am Beispiel von HTTP die Funktionsweise von Protokollen, insb. von TCP erkl√§ren Sie k√∂nnen erkl√§ren, wo die Sicherheitsl√ºcken in HTTP liegen und was man dagegen tut","keywords":""},{"title":"2. HTML","type":0,"sectionRef":"#","url":"/24ef/Netzwerke/Server/html","content":"2. HTML HTML Logo Webseiten sind Textdateien, deren Inhalt in der Markup Sprache HTML geschrieben ist. Sie haben im Snippet ein Beispiel in der Datei hello.html. HTML Hypertext Markup Language HTML ist keine Programmiersprache - sie definiert lediglich in einem f√ºr den Computer eindeutigen Art und Weise die Struktur eines Dokuments. √Ñhnlich wie Markdown werden hier Textstellen mit sog. Tags markiert. Dadurch kann man festlegen, ob eine bestimmter Text als √úberschrift, als eigener Absatz, in einer Tabelle, etc. dargestellt werden soll. Einige Tags sind Paare aus einem √∂ffnenden und einem schliessenden Tag, andere stehen f√ºr sich alleine. Tag\tMarkdown\tBeschreibung&lt;h1&gt;√ú 1&lt;/h1&gt;\t# √ú 1\t√úberschrift 1. Ordnung &lt;h2&gt;√ú 2&lt;(h2&gt;\t## √ú 2\t√úberschrift 2. Ordnung &lt;h3&gt;√ú 3&lt;(h3&gt;\t### √ú 3\t√úberschrift 3. Ordnung &lt;p /&gt;\tLeerzeile\tAbsatz &lt;br /&gt;\tDoppelte Leerzeile\tZeilenumbruch &lt;b&gt;fett&lt;/b&gt;\t**fett**\tFettschrift &lt;i&gt;kursiv&lt;/i&gt;\t*kursiv*\tKursivschrift &lt;a href=&quot;URL&quot;&gt;Linktext&lt;/a&gt;\t[Linktext](URL)\tLink &lt;img src=&quot;URL&quot; /&gt;\t![](URL)\tBild Eine gute Einf√ºhrung und Referenz in HTML finden Sie unter üëâ https://www.w3schools.com/html/default.asp. Playground Hier k√∂nnen Sie einzelne Tags ausprobieren (achtung, wird nicht gespeichert): Live Editor &lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den &lt;b&gt;SimlpeWebServer&lt;/b&gt; get√§tigt.&lt;/p&gt; &lt;h2&gt;Todos vor den Ferien&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;EF Informatik&lt;/li&gt; &lt;li&gt;Nach Hause&lt;/li&gt; &lt;li&gt;Fertig...&lt;/li&gt; &lt;/ul&gt; &lt;img src=&quot;https://www.gbsl.ch/wp-content/uploads/2020/07/Header-GBSL-1170x450.jpg&quot; width=&quot;400&quot;/&gt; &lt;/body&gt; &lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den &lt;b&gt;SimlpeWebServer&lt;/b&gt; get√§tigt.&lt;/p&gt; &lt;h2&gt;Todos vor den Ferien&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;EF Informatik&lt;/li&gt; &lt;li&gt;Nach Hause&lt;/li&gt; &lt;li&gt;Fertig...&lt;/li&gt; &lt;/ul&gt; &lt;img src=&quot;https://www.gbsl.ch/wp-content/uploads/2020/07/Header-GBSL-1170x450.jpg&quot; width=&quot;400&quot;/&gt; &lt;/body&gt; Ergebnisse Loading... Aufgabe Erstellen Sie eine zweite Webseite in Ihrem Server, mit einem kleinen Steckbrief von Ihnen. (Hilfestellung: üëâ https://www.w3schools.com/html/default.asp). Verlinken Sie Ihre eigene Seite in der schon bestehenden Seite hello.html, indem Sie dort einen Link auf Ihre eigene Seite einf√ºgen. Wie man das macht sehen Sie hier üëâ https://www.w3schools.com/html/html_links.asp. Testen Sie Ihre Webseite im Browser. Machen Sie einen Screenshot von Ihrer Seite und laden Sie diese als Antwort hoch.","keywords":""},{"title":"Git Grundlagen ","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/git","content":"Git Grundlagen üëâ https://git-scm.com/ https://www.lernmoment.de/alle/warum-git/ Warum Git? 1‚Äã Die Entwicklung von Git ist eine Erfolgsgeschichte. Als Linus Torvalds 2005 die Entwicklung von Git initiierte lag dem ein ganz pragmatisches Problem zugrunde: Als Verwalter der Entwicklung des Linux-Kernels ben√∂tigte er ein m√§chtiges, verteiltes und kollaboratives Werkzeug zur Versionsverwaltung von Quellcode. Das zuvor verwendete propriet√§re Tool bot keine M√∂glichkeit der kostenlosen Verwendung und die kostenfreien Alternativen gen√ºgten den Anforderungen von Torvalds nicht. Die Idee ein eigenes, freies Softwareprodukt zu schreiben war geboren. Seitdem wurde Git von Jahr zu Jahr popul√§rer und hat eine ganze Reihe auf Git aufsetzender Anwendungen (etwa Sourcetree und GitHub Desktop) und Webplattformen (etwa GitHub und Bitbucket) hervorgebracht. Doch warum wird Git so vielfach verwendet? Paralleles Arbeiten: Git erlaubt es mehreren Entwicklern parallel und dezentral an einem Projekt (repository) in verschiedenen Entwicklungszweigen (branches) zu arbeiten. Der eigentliche Clou liegt dabei darin, dass Git eine ganze Reihe an M√∂glichkeiten (merge, rebasing, cherry picking, etc.) bietet diese Entwicklungszweige auch wieder zusammenzuf√ºhren. Flexibilit√§t: Es ist m√∂glich verschiedenste Arbeitsweisen und Arbeitsmodelle (workflows) in Git zu realisieren. So eignet sich Git f√ºr die lokale Verwendung bei einem einzelnen Entwickler bis zur servergest√ºtzten Teamarbeit in einem internationalen Softwarekonzern. In gewisser Art und Weise baut man sich auf der Basis von Git seine eigene Versionsverwaltung auf. Einfache Beitr√§ge: Git macht es vergleichsweise einfach zu einem Projekt beizutragen bei dem man weder der Besitzer noch Teil des Kernteams ist. Bei zentralen Versionsverwaltungssystemen steht hier oft die Rechteverwaltung im Weg, doch erlaubt Git das einfache Kopieren (clone) des Quellcodes von einem gefolgten √Ñnderungsvorschlag (pull request). Performance: Selbst bei sehr gro√üen Projekten bleibt Git schnell. Auf meinem MacBook Air (11 Zoll, 2016) konnte ich von einer aktuellen Version des Quellcodes des Linux-Kernels auf eine sechs Jahre alte Version von 2010 unter einer Minute wechseln. Das mag zun√§chst gar nicht so beeindruckend klingen, doch man sollte bedenken das hier etwa 40.000 Datei√§nderungen vorlagen! Robustheit: Aufgrund der Architektur von Git ist ein gravierender Datenverlust sehr unwahrscheinlich. Pr√ºfsummen verhindern eine unbeabsichtigte Korruption von Daten, der dezentrale Aufbau sorgt daf√ºr, dass der Code auf mehreren Rechnern vorliegt und die einfache Datenstruktur sorgt f√ºr die Interpretierbarkeit der Daten. Schlussendlich erlaubt die Versionierung und Verzweigung des Quellcodes wieder zu einem funktionierenden Stand zur√ºckzukehren. Offsite und Offline: Die dezentrale und zugleich verkn√ºpfbare Struktur von Git erlaubt sowohl die Arbeit mit verteilten Entwicklungsteams als auch ‚Äì zumindest eine gewisse Zeit lang ‚Äì die Arbeit ohne Zugriff auf den Server. Erweiterbarkeit und Integrationsf√§higkeit: Git ist nahezu beliebig erweiterbar und integrierbar. Es ist offen f√ºr individuelle Anwendungen und Zusammenarbeit mit nahezu jeder belieben anderen Software. Gemeinschaft und Freiheit: Git ist nicht nur kostenlose, sondern auch freie Software. Das heisst der Quellcode steht offen bereit und Mitarbeit ist sogar erw√ºnscht. Verletzungen des Urheberrechts oder rechtliche Konflikte sind ausgeschlossen. Dar√ºber hinaus existiert ein nahezu riesiges √ñkosystem aus Dokumentationen und Erkl√§rungen, Tools, Plattformen, Dienstleistern sowie Plug-Ins. Hinsichtlich des gemeinschaftlichen Aspekts sei GitHub hervorgehoben, welches sich in den letzten Jahren zum Quasi-Standard von OpenSource-Projekten entwickelt hat. Hier findet man abertausende Entwickler und deren Softwareprojekte. Konzepte‚Äã Das Kernelement von Git sind die Repositories (Repo - ein ganz normaler Ordner, dessen Dokumente mit Git versioniert werden). Dabei wird zwischen dem remote Repos auf dem Server und den lokalen Repos auf einem Computer unterschieden. Um mit Git verwalteten Projekten zu arbeiten, muss das Repository heruntergeladen werden. Man spricht von Klonen (clone), weil sich Git die Internet-Adresse des Remote Repos merkt und man somit zu einem sp√§teren Zeitpunkt √Ñnderungen (manuell) synchronisieren kann auch alle Vorg√§ngerversionen der Projektdateien enthalten sind Repo Klonen in VS Code Anleitung, wie in VS Code ein Repository von Github geklont wird. üëâ https://code.visualstudio.com/docs/editor/github#_setting-up-a-repository Dateien in diesem Ordner sind versioniert - dies bedeutet f√ºr Git, dass zu einem gewissen Zeitpunkt √Ñnderungen vorgenommen wurden. Jede √Ñnderung ist mit einer von der Programmierer:in geschriebenen Nachricht versehen. VersionenIDNachricht Nach dem Klonen des Projektes, kann zu beliebigen sp√§teren Zeitpunkten durch einen pull der neueste Stand vom remote Repository ins lokale Repository synchronisiert werden. Dadurch stellt man sicher, dass man keine √Ñnderungen von anderen Projektmitarbeitern verpasst. √Ñnderungen vornehmen‚Äã Jetzt kann die Datei bearbeitet werden. Git kann nun anzeigen, welche Zeilen und Zeichen ver√§ndert. Dadurch k√∂nnen √Ñnderungen nochmals √ºberpr√ºft werden. def aaa(a, b): return (a + b) / 2 def durchschnitt(a, b): return (a + b) / 2 Ist man zufrieden, w√§hlt man die ver√§nderten Dateien, deren √Ñnderungen man zusammenfassen m√∂chte, aus und f√ºgt sie einem Stage hinzu (man b√ºndelt diese √Ñnderungen zusammen). Mit einer Nachricht wird beschrieben, was in dieser √Ñnderung gemacht wurde, der anschliessende Commit finalisiert das √Ñnderungspaket. Im obigen Beispiel k√∂nnte die Nachricht etwa Verwende einen sinnvollen Funktionsnamen lauten. Mit dem push Befehl wird anschliessend dieses √Ñnderungspaket an das Remote-Repository geschickt. Die wichtigste Eigenschaft von Git ist, dass es √Ñnderungen, welche von verschiedenen Personen vorgenommen wurden, zusammenf√ºhren kann, und daf√ºr sorgt, dass alle Repositories auf dem gleichen Stand sind. Dieser Vorgang wird in Git merge genannt. Visual Studio Code verf√ºgt √ºber eine eingebaute Schnittstelle zu Git. Diese werden wir im Normalfall brauchen. Manchmal ist es aber n√∂tig direkt mit Git zu arbeiten. Dazu dient die App Git Bash auf Windows. Auf dem Mac kann man dazu direkt das Terminal brauchen. Die n√∂tigen Kommandos werden wir nach und nach kennenlernen (halten Sie diese am besten in Ihrer Dokumentation fest). Quelle: Tobias Vetter ‚Ü©","keywords":""},{"title":"Git Commit Nachrichten","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/git-messages","content":"Git Commit Nachrichten Wie verfasst man gute Commit-Nachrichten? Das ist gar nicht so einfach. Schaut man sich auf Github um, so sind die meisten strukturiert verfassten Commit-Nachrichten nach dem &quot;Imperative Mood&quot; 1 aufgebaut. √úber alls Commit-Nachrichten gesehen, sind es doch immerhin fast 50% der Nachrichten, die danach verfasst sind 2. Imperative Mood‚Äã Eine Commit-Nachricht ist in zwei Teile gegliedert: Aufbau einer Commit-Nachricht Hilfestellung f√ºr die Titelzeile: If applied, this commit will... ¬´update getting started documentation¬ª Imperativ verwenden (ohne abschliessende Satzzeichen): ¬´Putz dein Zimmer¬ª ¬´Schliess die T√ºre¬ª Entferne √ºberfl√ºssige Funktion 'run' √úberarbeite code und f√ºge Kommentare hinzu Fix typo in the function name 'play' Commit-Nachrichten sollen entweder auf Englisch oder Deutsch, aber immer gleich f√ºr ein Repository. Pr√§sentation Quelle: üëâ https://www.theserverside.com/video/Follow-these-git-commit-message-guidelines ‚Ü© Quelle: üëâ https://initialcommit.com/blog/Git-Commit-Message-Imperative-Mood ‚Ü©","keywords":""},{"title":"1. Webserver mit Python","type":0,"sectionRef":"#","url":"/24ef/Netzwerke/Server/webserver","content":"1. Webserver mit Python @ Server, Client, Nachrichten, Prokolle - Die Grundlagen‚Äã Ein Webserver ist ein Computer, der darauf wartet, dass √ºber das Netzwerk Anfragen f√ºr Webseiten eintreffen, welche auf dem Webserver gespeichert sind. Der Webserver sendet dann die angefragten Seiten als Antwort zur√ºck an den Computer, von welchem die Anfrage stammt. Server Ein Computer, welcher auf Anfragen wartet und diese beantwortet. Client Ein Computer, welcher Anfragen an einen Server sendet. Request Eine Nachricht, welche vom Client an den Server gesendet wird. Response Die Antwort auf einen Request, welche vom Server an den Client gesendet wird. Man spricht bei Request und Response auch von Nachrichten, welche zwischen Client und Server ausgetauscht werden. Sowohl auf dem Client, wie auf dem Server braucht es Programme, welche die ausgetauschten Nachrichten verarbeiten k√∂nnen. Im Fall vom Web sind das der Browser auf der Clientseite und das Webserver-Programm auf der Serverseite. Webseiten sind Dateien, deren Inhalt in der Sprache HTML (Hypertext Markup Language) geschrieben ist. HTML dient dabei dazu die Darstellung der Webseite festzulegen (√úberschriften, Abschnitte Tabellen, Links auf andere Seiten, etc.). Damit sich Client und Server gegenseitig verstehen, m√ºssen die Nachrichten in einer genau festgelegten Reihenfolge und mit genau definiertem Inhalt ausgetauscht werden. Diese Vorschriften nennt man ein Protokolle (siehe auch üëâ 2. Protokolle). Im Falle des Webs heisst das Protokoll HTTP (Hypertext Transfer Protocol). HTTP Hypertext Transfer Protocol Das folgende Sequenzdiagramm verdeutlicht diese Zusammenh√§nge. Es zeigt die Reihenfolge der ausgetauschten Nachrichten f√ºr die Abfrage einer Webseite aus dem Browser heraus. Beachten Sie, dass der Browser nur ein Programm ist, welches auf dem Client-Computer l√§uft. Das entsprechende Programm auf der Serverseite ist nicht separat dargestellt. Statt dessen ist die Datei dargestellt, welche auf dem Server gespeichert ist und deren Inhalt zum Client zur√ºckgesendet wird. Webserver mit Python‚Äã Python stellt eine Library zur Verf√ºgung, mit welcher man ein einfaches Webserver-Programm erstellen kann. Ein solches ist in folgendem Snippet enthalten. Dieses Programm empf√§ngt Requests f√ºr HTML-Dateien und sendet den Inhalt dieser Dateien zur√ºck. Im Moment ist die Seite hello.html die einzige Seite, welche vom Webserver zur√ºckgeschickt werden kann. Da auf einem Server gleichzeitig verschiedene Dienste angeboten werden k√∂nnen (z.B. k√∂nnte auch noch ein E-Mail-Server laufen), muss man f√ºr jeden Dienst eine Port-Adresse festlegen, unter welcher der Dienst auf ankommende Anfragen horcht. F√ºr unseren einfachen Webserver wird im Snippet der Port mit der Nummer 8000 festgelegt. IP-Adresse Die IP-Adresse ist eine eindeutige Adresse, welche jedem Computer (somit auch jedem Server) im Internet zugewiesen wird. Localhost Lokale IP-Adresse, welche auf dem eigenen Computer verweist. Sie ist immer 127.0.0.1. Port Ein Port ist eine Nummer, welche den Dienst auf einem Computer identifiziert. Dadurch kann ein Computer mehrere Dienste gleichzeitig anbieten. URL / URI Universal Resource Locator / Universal Resource Identifier Um von einem Browser aus die Seite hello.html anzeigen zu lassen, muss man im Browser folgende URL (Universal Resource Locator) eingeben: http://Server-IP-Adresse:8000/Pfad/hello.html Hello Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den SimlpeWebServerget√§tigt. Die IP-Adresse des Servers k√∂nnte zum Beispiel 10.0.123.4 sein. Der Pfad entspricht der Ordnerreihenfolge, ausgehend vom Workspace in VSC, in dem die Datei hello.html gespeichert ist, z.B. 2258084. Python Webserver Ordner EF-Informatik/docs/Netzwerke/webserver Speichern Sie folgende Snippets in Ihrem Repository unter dem Ordner docs/Netzwerke/webserver ab. Snippets SimpleWebServer.py loading... See full example on GitHub hello.html loading... See full example on GitHub √ñffnen Sie auf Ihrem Notebook einen Browser und versuchen Sie die Seite hello.html anzuzeigen. Dazu m√ºssen Sie in Ihrem Browser die richtige URL eingeben. Weil Ihr Browser auf dem selben Computer l√§uft, wie der Webserver, k√∂nnen Sie statt der IP-Adresse Ihres Computers auch localhost oder die lokale IP-Adresse 127.0.0.1 schreiben. Beim Pfad m√ºssen Sie darauf achten, in welchen Ordner die Datei hello.html gespeichert ist. Wenn Sie erfolgreich waren, machen Sie einen Screenshot von Ihrem Browser, in welchem man die URL und die Seite sieht und laden Sie diesen als Antwort hoch (die URL soll erkennbar sein). Nun ist dies wohl eine recht umst√§ndliche URL. Jenachdem aus welchem Ordner heraus das Python-Skript gestartet wurde, √§ndert sich die URL. Um diese m√∂glichst kurz zu halten, kann man das Skript direkt im Ordner docs/Netzwerke/webserver ausf√ºhren. Dazu m√ºssen Sie in VSC links in der Ordner√ºbersicht auf den Ordner webserver rechtsklicken und dort Open in Integrated Terminal ausw√§hlen. Nun √∂ffnet sich ein Terminalfenster, welches sich im Ordner docs/Netzwerke/webserver befindet. In diesem Fenster k√∂nnen Sie nun das Python-Skript mit dem Befehl python3 simple-server.py starten. Die URL wird nun wie folgt aussehen: http://localhost:8000/hello.html.","keywords":""},{"title":"Markdown","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/markdown","content":"Markdown Die Dokumentation verfassen wir im Markdown-Format - eine Markup Langauge, welche weniger explizite Steuerzeichen als etwa HTML braucht. Tutorial Bearbeiten Sie das Tutrial inkl. der √úbungen zu Markdown auf der Seite üëâ https://commonmark.org/ und markieren Sie die Aufgabe anschliessend als erledigt. Achtung Im Tutorial wird eine M√∂glichkeit gezeigt, wie man neue Zeilen macht. Verwenden Sie die Option mit zwei Leerschl√§gen am Ende der Zeile, so dass Ihre Markdowns die gr√∂sstm√∂gliche Kompatibilit√§t aufweisen - ein \\ wird nicht immer unterst√ºzt. Steckbrief F√ºgen Sie auf in Ihrem Repository das Dokument docs/about-me.md hinzu. Verfassen Sie einen kurzen Steckbrief (mit Hobbies, Lieblingsgames, Lieblingsfilmen, Lieblingsessen,) inkl. eines Bildes (nicht zwingend von Ihnen, aber eines, das Sie heruntergeladen haben)hinzu. Machen Sie einen Commit und pushen Sie die √Ñnderungen auf Github. Markieren Sie diese Aufgabe als erledigt.","keywords":""},{"title":"EF Informatik","type":0,"sectionRef":"#","url":"/24ef/home","content":"EF Informatik Auftr√§ge am 10.02.2022‚Äã Einstieg Thema Netzwerke Python Webserver erstellen und starten HTML: Mini-Webseite Protokolle Vergangene... am 3.02.2022‚Äã NumTrip: Gegenseitige Reviews, Codeanalysen, Verbesserungs- und Erweiterungsvorschl√§ge GitHub: Pull Requests, Forken, Clonen am 9.12.2022‚Äã Es hat geschneit, judihui! Ank√ºndigung IoT-Day am 24.02.2023 üëâ Information Probe üëâ √úbungspr√ºfung NumTrip: Besprechung Flood Fill am 2.12.2022‚Äã (Auftrag, Herr Hofer ist krank ü§í) Benutzereingaben - besprechen Sie in 2-3er Gruppen, wie Sie Ihre Benutzereingabe implementiert haben. Versuchen Sie auch, sich gegenseitig zu helfen und in den Code reinzudenken, wenn es noch Probleme gibt Selbst√§ndig weiterarbeiten an Numtrip: üëâ Felder Aufdecken und ev. üëâ Felder Auff√ºllen Wichtig: In den letzten 10-15 Minuten halten Sie in einem neuen Blogeintrag fest, an was Sie heute garbeitet haben, wo Probleme aufgetreten sind, wo Sie Hilfe br√§uchten etc. am 18.11.2022‚Äã Benutzereingaben: üëâ Try-Except NumTrip: Eingabe und Start: üëâ Eingabe &amp; Start Ev. Felder Aufdecken: üëâ Felder Aufdecken am 18.11.2022‚Äã Texte untersuchen und ver√§ndern: üëâ Strings NumTrip: Top-Down Entwurf: üëâ Top Down NumTrip: Eingabe und Start: üëâ Eingabe &amp; Start am 11.11.2022‚Äã Teilnahme Informatik Biber üëâ https://wettbewerb.informatik-biber.ch EF-Website: üëâ Docusaurus auf den 11.11.2022‚Äã Kapitel Lesen &amp; √úbungen bearbeiten (Debuggen und Selbsttest): üëâ Referenzen NumTrip üëâ Aufgabe Refactoring auf den 4.11.2022‚Äã Kapitel Lesen &amp; √úbungen bearbeiten (Debuggen und Selbsttest): üëâ Referenzen √úbung 1 &amp; 2 bearbeiten: üëâ Funktionen Selbsttest Software Engineering üëâ Selbsttest (Allenfalls: unter üëâ Python Repetition √úbungen zu unbekannten Konzepten machen) auf den 28.10.2022‚Äã Kapitel Lesen: üëâ Software Engineering Kapitel Lesen: üëâ Techniken SE Aufgaben des Hangman Spiels fertigstellen. Fragen zu neu verwendeten Konzepten (if-else, while, input, funktionen) in die n√§chste Lektion mitbringen. üëâ Techniken SE (Allenfalls: unter üëâ Python Repetition √úbungen zu unbekannten Konzepten machen) Programm am 16.09.2022‚Äã üëâ Listen 2D: L√∂sungen √ºberpr√ºfen, Unklarheiten kl√§ren üëâ Listen Erzeugen Lesen, untersuchen und bearbeiten üëâ Spielfeld programmieren üëâ Referenzen in Python (noch nicht abgeschlossen!) Aufgaben bearbeiten Auftr√§ge auf 16.09.2022‚Äã üëâ Listen 2D: Aufgaben 1, 2a (create_from.py) L√∂sung nachvollziehen Aufgaben und 2b (diag.py) l√∂sen. Aufgabe 3 &quot;WAS IST DENN HIER LOS?&quot; l√∂sen/lesen Datenstruktur NumTrip festhalten... Auftr√§ge auf 09.09.2022‚Äã üëâ Listen 1D: Aufgaben 1, 2 und 3 fertig bearbeiten. Aufgabe 4 (Primzahlen): min. 20 Minuten Arbeiten und aktuellen Zustand commiten und pushen. Bei Fragen: Auf Teams nachfragen... Wer bei Aufgabe 4 nicht weiterkommt, weil die Grundlagen aus dem Grundlagefach Informatik weit zur√ºck sind: Schauen Sie sich die Repetitions-Kapitel von letzter Woche nochmals genauer an! üëâ Wiederholungen üëâ Variablen üëâ Verzweigungen Auftr√§ge auf 02.09.2022‚Äã Abschnitt üëâ Programmiersprachen lesen Blogbeitrag schreiben üëâ Auftrag Bei Turtle-Repetition selbst√§ndig die Python-Grundlagen auffrischen, insbesondere: üëâ Wiederholungen üëâ Variablen üëâ Verzweigungen Auftr√§ge auf 26.8.2022‚Äã VS Code installieren Git installieren Python installieren Github Account erstellen und Klonen (alle Aufgaben auf dieser Seite) Hintergr√ºnde zu Git lesen Markdown Tutorial durchspielen und Steckbrief erfassen Beispiel-Repository von @bh0fer: üëâ https://github.com/bh0fer/EF-Informatik Datum\tThema\tInhaltFr. 19.08.\tProgrammieren\tInfrastruktur, Installation, Git, Markdown, Python Grundlagen Fr. 26.08.\tProgrammieren\tPython Repetition Fr. 02.09.\tProgrammieren\tDatenstrukturen - Listen Fr. 09.09.\tProgrammieren\tListen, 2D-Listen, Referenzen, Spielfeld Fr. 16.09.\tProgrammieren\tArbeiten am NumTrip Game Fr. 23.09. Sonderwoche Fr. 30.09. Herbstferien Fr. 07.10. Herbstferien Fr. 14.10. Herbstferien Fr. 21.10.\tProgrammieren\tFunktionen &amp; Software Engineering Fr. 28.10.\tProgrammieren\tFunktionen, √úbungen Fr. 04.11.\tProgrammieren\tFunktionen, Scopes, Shadowing Fr. 11.11.\tProgrammieren\tInformatik Biber, Eigene Website Fr. 18.11.\tProgrammieren\tStrings, NumTrip Fr. 25.11.\tProgrammieren\tTry-Except, Input Validation Fr. 02.12.\tProgrammieren\tNumTrip Fr. 09.12.\tProgrammieren\tPr√ºfungsbesprechung, NumTrip Fr. 16.12. Programmieren\tTest Programmieren Fr. 23.12.\tProgrammieren\tNumTrip Mi. 28.12. Winterferien Do. 05.01. Winterferien Fr. 13.01.\tProgrammieren\tNumTrip Fr. 20.01. Programmieren\tAbgabe NumTrip und Lernjournal Mi. 25.01. Notenschluss Fr. 03.02. Semesterende Fr. 03.02.\tNumTrip\tCode Review, Pull Requests auf Github Fr. 10.02.\tNetzwerke\tEinstieg, Client, Server, Protokolle Fr. 17.02. Sportwoche Fr. 24.02. IoT Praktikum: Ganztags\tL√∂ten, Programmieren, Node-Red SSR","keywords":""},{"title":"Docusaurus v2.2.0","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/Docusaurus","content":"Docusaurus v2.2.0 Docusaurus ist ein praktisches Dokumentations- und Blog Framework, welches ein Projekt in eine Website verwandelt. In general, a framework is a real or conceptual structure intended to serve as a support or guide for the building of something that expands the structure into something useful. Ein Framework gibt also immer eine geiwsse Struktur vor, damit es funktionieren kann. Im vorliegenden Fall m√ºssen wir uns an die vorgegebene (bzw. konfigurierte) Ordner-Struktur, damit das Framework autmatisiert aus all unseren Markdown-Dokumenten eine Webseite erstellt. EF-Informatik # Github Repository Ordner ‚îú‚îÄ‚îÄ blog # Blog Eintr√§ge ‚îÇ ‚îú‚îÄ‚îÄ 2022-08-26-wiedereinstieg-python.md ‚îÇ ‚îî‚îÄ‚îÄ 2022-11-07-about-software-engineering ‚îÇ ‚îú‚îÄ‚îÄ images # enth√§lt alle Bilder f√ºr diesen Blog ‚îÇ | ‚îú‚îÄ‚îÄ top-down.png ‚îÇ | ‚îî‚îÄ‚îÄ bottom-up.png ‚îÇ ‚îî‚îÄ‚îÄ index.md # erzeugt die Seite /2022/11/07/about-software-engineering ‚îú‚îÄ‚îÄ docs ‚îÇ ‚îú‚îÄ‚îÄ greeting.md # erzeugt die Seite /docs/greeting ‚îÇ ‚îî‚îÄ‚îÄ guide ‚îÇ ‚îú‚îÄ‚îÄ index.md # erzeugt die Seite /docs/guide ‚îÇ ‚îî‚îÄ‚îÄ setup.md # erzeugt die Seite /docs/guide/setup ‚îú‚îÄ‚îÄ src ‚îÇ ‚îî‚îÄ‚îÄ pages | ‚îú‚îÄ‚îÄ ... # wie bei den blogs, nur werden diese Seiten nirgends direkt angezeigt, | # man muss die URL kennen... ‚îú‚îÄ‚îÄ docusaurus.config.js ‚îú‚îÄ‚îÄ ... In Ihrem Github-Repository brauchen Sie die Ordner blog und docs, jeweils mit mindestens einem Eintrag. Anleitung Material Vorkonfigurierte Dateien f√ºr Docusaurus v2.2.0 üëâ Herunterladen Uncommitete √Ñnderungen? Commit &amp; Push. Material herunterladen, entpacken und den ganzen Inhalt in Ihr Repository kopieren. Das sollte dann in etwa so aussehen: Struktur im Repository Wichtig Die Datei docs/about-me.md und den Ordner blog braucht es zwingend, sonst versucht Docusaurus etwas zu suchen, was nicht existiert ( Docusaurus Traurig Sie traurig ) Github-Benutzername und Name des Repository in docusaurus.config.js √§ndern. Beispiel f√ºr bh0fer, EF-Informatik Alle √Ñnderungen hinzuf√ºgen, Commit &amp; Push. Die Seite wird automatisch erzeugt und auf Github ver√∂ffentlicht. Es dauert jeweils 1-5 Minuten (‚òï...), bis dies geschehen ist. Um die Webseite auch unter einer URL abrufbar zu machen, muss unter Settings &gt; Pages &gt; Branch &gt; gh-pages Github Pages aktiviert werden. Private Repositories Bei kostenlosen Accounts k√∂nnen nur √∂ffentliche Repositories als Website zug√§ngig gemacht werden. Unter Settings &gt; General &gt; Danger Zone (zuunterst auf der Seite) kann die Sichtbarkeit ge√§ndert werden (Change repository visibility). Wird danach noch keine URL angezeigt, k√∂nnen Sie durch einen neu gepushten Commit bezwecken, dass die Seite neu erzeugt wird und anschliessend abrufbar ist. Individualisieren‚Äã Nat√ºrlich kann die Website nach den eigenen W√ºnschen individualisiert werden. Die gr√∂ssten Effekte haben die Websitenfarbe und das Logo. Farben‚Äã Docusaurus arbeitet mit zwei Hauptfarben - eine f√ºr den Light-Mode und eine andere f√ºr den Dark-Mode. Damit das Design konsistent wirkt, braucht es von den Hauptfarben eine ganze Farbreihe von 7 Abstufungen. Mit diesem üëâ Tool lassen sich diese Abstufungen einfach erzeugen. Der Code-Teil muss kopiert und im CSS-File src/css/custom.scss ersetzt werden: Achtung: die weiteren Werte sollten nicht ver√†ndert werden Logo‚Äã Im Ordner static/img/ befinden sich die beiden Bild-Dateien logo.svg und favicon.ico. Das Logo sollte quadratisch sein, und nicht mehr als 300kb gross sein. Falls Sie selber gerade kein inspirierendes Logo im Kopf haben: Ein Logo kann mit kostenlosen Webapps leicht zuf√§llig auf Basis einiger Stichw√∂rter erzeugt werden (dazu braucht es kein all zu grosses k√ºnstlerisches Flair üòâ). Suchen Sie nach einem entsprechenden Logo Generator... https://google.com free Logo Generator Ersetzen Sie das vorhandene Logo durch das neue. Falls das neue Logo nicht die Dateiendung .svg aufweist, so m√ºssen Sie dies im Konfigurationsfile docusaurus.config.js entsprechend anpassen gehen: Das favicon.ico ist das kleine Bildchen oben links in einem Browser-Tab. Dies kann auf Basis Ihres Logos leicht erzeugt werden. https://google.com png to ico Website Lokal ausprobieren‚Äã Um die Website lokal auszuprobieren, muss zuerst NodeJS installiert und konfiguriert werden. Anschliessend kann die Seite lokal gestartet und unter der Lokalen Netzwerkadresse beim Port 3000 (localhost:3000) gefunden werden. Anleitung f√ºr die Installation NodeJS LTS mit den Standard-Optionen installieren (vermutlich x64) üëâ https://nodejs.org/en/download/ In VS-Code unter Terminal&gt;New Terminal ein neues Terminal √∂ffnen und √ºberpr√ºfen, ob Node installiert wurde (sollte die aktuelle Version ausgeben): node --version Falls es nicht verf√ºgbar ist: Laptop neu starten und erneut versuchen (vlt. wurde es einfach nicht gefunden...) Den Paket-Manager yarn installieren, indem in die Kommandozeile/Terminal folgendes eingegeben wird: npm install --global yarn Nun m√ºssen alle Pakete f√ºr Docusaurus installiert werden: yarn install Und schliesslich Dokusaurus mit einem lokalen Server starten yarn run start Die Seite ist nun unter üëâ http://localhost:3000 erreichbar. Mit ctrl + c kann der lokale Server wieder beendet werden. √Ñnderungen an Markdowns werden direkt √ºbernommen, ohne den Server neu zu starten oder die Webseite neu zu laden.","keywords":""},{"title":"Python 3.10.6 ","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/Python","content":"Python 3.10.6 üëâ https://www.python.org/ Den Python-Installer f√ºr Ihre Platform herunterladen (Version 3.10.6) Python-Installer ausf√ºhren Installation √ºberpr√ºfen: √ñffnen Sie Python 3.10 (Python Shell) Geben Sie zum Test a = 10 + 3 print(a) ein. √úberpr√ºfen Sie das Resultat... ‚ö†Ô∏è1.‚ö†Ô∏è2.3. Python zum Pfad hinzuf√ºgen!","keywords":""},{"title":"Git 2.37.1","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/Git-install","content":"Git 2.37.1 üëâ https://git-scm.com/downloads WindowsmacOS 1.2.‚ö†Ô∏è3.4.‚ö†Ô∏è5.‚ö†Ô∏è6.7.8.9.10.‚ö†Ô∏è11.12.‚ö†Ô∏è13.14.15. Git einrichten‚Äã Damit die Einrichtung von Git abgeschlossen ist, m√ºssen wir den Namen und die Email-Adresse, welche f√ºr die Kennzeichnung von Commits verwendet wird, konfigurieren. Dies k√∂nnen wir in einer Git-Shell konfigurieren (auf Mac: im Terminal, auf Windows: in Git Bash). Dort tippen Sie folgende Kommandos ein (wobei Sie nat√ºrlich Ihren Namen (oder Github-Nickname) anstatt FooBar verwenden, ebenso bei der Mail...) git config --global user.name FooBar git config --global user.email foo@bar.ch √úberpr√ºfen obs geklappt hat: git config --global user.name git config --global user.email ","keywords":""},{"title":"VS Code 1.70","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/vscode","content":"VS Code 1.70 üëâ https://code.visualstudio.com/ 1.2.3.‚ö†Ô∏è4.5.6. Empfohlene Erweiterungen und Einstellungen Erweiterungen‚Äã python Intelli Code git-graph Einstellungen‚Äã debug.inlineValues auf 'on'","keywords":""},{"title":"GitHub","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Infrastruktur/github","content":"GitHub üëâ https://github.com Um unsere Repositories zu synchronisieren, verwenden wir GitHub. Github ist aktuell der Quasi-Standard f√ºr Opensource Software und bietet Entwicklern kostenlos die M√∂glichkeit Repositories zu erstellen. Zudem k√∂nnen wir sp√§ter unser Repository auch als Webseite - √§hnlich dieser Lernwebseite hier - erzeugen lassen. Dazu aber sp$ter mehr. Github Konto erstellen Erstellen Sie auf https://github.com ein Konto. Sie d√ºrfen einen beliebigen Namen ausw√§hlen - Ihre Projekte sind dann unter diesem Namen zu finden. Halten Sie Ihren Github-Namen hier fest, damit ich (@bh0fer) darauf zugreifen kann. Github Repository erstellen Erstellen Sie auf Github ein neues Repository (z.B. mit dem Namen EF-Informatik). achten Sie darauf, dass der Namen keine Leerschl√§ge enth√§lt* W√§hlen Sie die Option Add a README file aus. * Da wir das Repository sp√§ter als Webseite ver√∂ffentlichen, wird die Url das Format https://username.github.io/EF-Informatik haben. Da bei URL's Leerschl√§ge zu %20 umgewandelt werden, w√§re die Adresse f√ºr den Repo-Namen EF Informatik dann https://username.github.io/EF%20Informatik, was m√ºhsam zu tippen ist. Github Repository klonen Klonen Sie das Repository auf Ihren Laptop. Erstellen Sie auf Ihrem Laptop zuerst einen neuen Ordner (bspw. unter Dokumente/git_code), in welchem Sie alle git Repositories abspeichern. git repositories nicht auf OneDrive/Dropbox Git-Repositories haben ein grundlegend anderen Ansatz zur Synchronisierung von Daten. Wird ein git-Repo √ºber bspw. Dropbox synchronisiert, werden laufend die √Ñnderungen (von einem anderen Computer) synchronisiert, auch wenn die √Ñnderungen per Git noch gar nicht ver√∂ffentlicht wurden. Die Folge sind viele √Ñnderungen (und Probleme)... Klonen Sie das Repository (wie unten im (stummen) Video gezeigt: Klonen README.md bearbeiten: F√ºgen Sie einen Code-Block hinzu, schreiben Sie eine Commit-Nachricht und pushen Sie die √Ñnderungen. ```py print('Hello World') ``` Kontrollieren Sie, ob die √Ñnderungen online sichtbar sind. Markieren Sie die Aufgabe als erledigt. Repository Struktur Unser Repository EF-Informatik sollte in etwa die folgende Struktur haben: git_code/ ‚îú‚îÄ‚îÄ ... ‚îî‚îÄ‚îÄ EF-Informaik/ ‚îú‚îÄ‚îÄ docs/ ‚îÇ ‚îú‚îÄ‚îÄ git.md ‚îÇ ‚îî‚îÄ‚îÄ programmieren.md ‚îú‚îÄ‚îÄ exercises/ ‚îÇ ‚îî‚îÄ‚îÄ 01-hello-world.py ‚îú‚îÄ‚îÄ NumTrip ‚îÇ ‚îî‚îÄ‚îÄ main.py ‚îî‚îÄ‚îÄ README.md Alle Dokumente mit Notizen etc. werden in den Ordner docs als *.md abgelegt. √úbungen k√∂nnen Sie im Ordner exercises ablegen f√ºr das Spiel NumTrip werden wir die Programme im Ordner NumTrip abspeichern. Leere Ordner Leere Ordner werden von Git ignoriert, weshalb leere Ordner nicht als √Ñnderung angezeigt werden.","keywords":""},{"title":"Finaler Blogbeitrag","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/blogbeitrag","content":"Finaler Blogbeitrag Schreiben Sie einen abschliessenden Blog-Beitrag zum NumTrip-Game. Der Blogbeitrag soll dabei folgende Punkte behandeln: Ziel des Spiels Umsetzung des Spiels Voraussetzung: Was muss ich installieren, um das Spiel zu starten? Aktualisiertes Top-Down-Diagramm f√ºr das Spiel mit den von Ihnen geschriebenen Funktionen und deren Zusammenspiel. Erkl√§rung eines algorithmischen Konzepts, das Sie in Ihrem Spiel verwendet haben. (Bspw. wie das Aufdecken der Nachbarsfelder funktioniert) Zeigen Sie dazu auch Ausschnitte aus Ihrem Code. Gr√∂sste Herausforderungen, die Sie w√§hrend der Entwicklung des Spiels hatten. Tipps f√ºr andere EF-Sch√ºler:innen, die das Spiel auch umsetzen m√∂chten. Allenfalls Link zum Spiel","keywords":""},{"title":"Game Loop","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/gameloop","content":"Game Loop Wir sind fast fertig mit der Implementation des NumTrip-Spiels. Was bleibt ist, dass die Spieler:in nicht nur einen Zug machen kann, sondern so viele, wie n√∂tig sind, bis das Spiel fertig ist. In der Spielentwicklung spricht man vom Game-Loop. Wie der Name sagt ist dies eine Schleife, welche in der Regel folgende Form hat: wiederhole bis Spielende erreicht: Eingabe von Benutzer:in Eingabe verarbeiten Neuen Spielstand anzeigen Aufgabe Erg√§nzen Sie die Hauptfunktion Ihres Spiels mit einer Game-Loop, wobei vorerst unendlich viele Runden gespielt werden k√∂nnen. commit F√ºgen Sie eine √úberpr√ºfung hinzu, ob das Spiel gewonnen oder verloren wurde: Gewonnen: Eine von Ihnen festgelegte Zahl (bspw. 1024) wurde erreicht Verloren: Es gibt keine weitere M√∂glichkeit, einen Zug zu machen. (Wenn es min. ein Feld mit einem gleichwertigen Nachbarsfeld gibt, so gibt es noch eine M√∂glichkeit...) Im Anschluss soll dann die Spieler:in mitgeteilt werden, ob das Spiel gewonnen oder verloren wurde. ‚≠ê Zusatz: Score F√ºgen Sie einen Score hinzu, der angibt, wie viele Z√ºge man gebraucht hat, um das Endziel (1024) zu erreichen.","keywords":""},{"title":"‚≠ê Py Game","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/pygame","content":"‚≠ê Py Game Sie haben das NumTrip-Spiel in der Konsolenversion erfolgreich fertiggstellt. Der n√§chste Schritt ist, dazu ein grafische Benutzeroberfl√§che zu bauen. Dazu gibt es viele M√∂glichkeiten. Eine ist PyGame. Sie finden eine Einf√ºhrung unter dem folgenden Link: üëâ https://realpython.com/pygame-a-primer/ Vorgehen:‚Äã Arbeiten Sie die Einf√ºhrung soweit durch, dass Sie f√ºr die die n√§chsten Schritte bereit sind. Machen Sie eine Kopie von Ihrem NumTrip-Spiel. Erg√§nzen Sie dieses nun schrittweise mit den n√∂tigen Pygame-Anweisungen. Ein erster Schritt k√∂nnte sein, dass das Feld in einem eigenen Fenster angezeigt wird. Anschliessend k√∂nnen Sie die Game-Loop umbauen, so dass sie Pygame-Events verarbeitet. Machen Sie regelm√§ssig commits und pushs von Ihrer neuen Datei.","keywords":""},{"title":"Felder Auff√ºllen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/felder-auffuellen","content":"Felder Auff√ºllen Im vorherigen Schritt wurden alle gleichzahligen Nachbarszellen (und deren Nachbarszellen) mit einem leeren Wert ersetzt. Nun sollen die leeren Zellen zusammengeschoben werden. An der Stelle der ausgew√§hlten Zelle wird der urspr√ºngliche Wert verdoppelt. Spalte 2, Zeile 3 ausgew√§hlt (Zahl 4) 1 2 3 4 5 1 2 3 4 5 --------------------- --------------------- 1 | 2 | 4 | 1 | 8 | 8 | 1 | 2 | 4 | 1 | 8 | 8 | --------------------- --------------------- 2 | | 2 | 8 | | 1 | 2 | | 2 | 8 | | 1 | --------------------- --------------------- 3 | |[4]| | | 2 | ---&gt; 3 | | 8 | | | 2 | --------------------- --------------------- 4 | 2 | 8 | 1 | | 1 | 4 | 2 | 8 | 1 | | 1 | --------------------- --------------------- 5 | 2 | | | | | 5 | 2 | | | | | --------------------- --------------------- Jede Spalte wird von unten her durchgegangen. Ist die Zelle leer, wird der Wert mit der n√§chstm√∂glichen, nichtleeren Zelle derselben Spalte getauscht. Beispiel 1Beispiel 2Zeilen 4-1 1 2 3 4 5 | 1 2 1 2 --------------------- | ----------- ----------- 1 | 2 | 4 | 1 | 8 | 8 | | 1 | 2 | 4 | 1 | 2 | 4 | --------------------- | ----------- ----------- 2 | | 2 | 8 | | 1 | | 2 | | 2 | 2 | | 2 | --------------------- | ----------- ----------- 3 | | 8 | | | 2 | | 3 | | 8 | ---&gt; 3 | | 8 | --------------------- | ----------- ----------- 4 | 2 | 8 | 1 | | 1 | | 4 | 2 | 8 | &lt;-- oberhalb leer? Nein 4 | 2 | | &lt;-- Werte vertauscht --------------------- | ----------- / ----------- / --&gt; 5 | 2 | | | | | | 5 | 2 | | &lt;-' 5 | 2 | 8 | &lt;-' --------------------- | ----------- ----------- ^ | ^ ^ | | | | Alle Zellen werden erneut durchgegangen. Ist eine Zelle leer, so wird eine zuf√§llige ganze Zahl oder 1 als Zellenwert festgelegt. Es kommen also die Zahlen [1, 2, 4], evtl. auch noch die 8 in Frage. Lesen Sie unter üëâ Zuf√§llige Zahlen nach, welche M√∂glichkeiten zum Erzeugen von zuf√§lligen Zahlen es unter Python gibt. Aufgabe Setzen Sie obigen Algorithmus um. Markieren Sie die Aufgabe anschliessend als erledigt.","keywords":""},{"title":"NumTrip","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip","content":"NumTrip Abgabe Abgabe 24.01.2023, 12:00 Uhr M√ºndliche Pr√ºfung: üëâ Liste Ziele Entwerfen einer Funktionshierarchie f√ºr das NumTrip-Game Entwerfen der globalen Datenstrukturen f√ºr das NumTrip-Game Implementation des NumTrip-Games als konsolenbasiertes Programm ‚≠êÔ∏è Erweiterung des konsolenbasierten NumTrip-Games mit Pygame Beurteilungskriterien‚Äã Kriterien\t0 Punkte\t1 Punkte\t2 Punkte\t3 Punkte Git History‚Äã Regelm√§ssige Commits Pro Commit nur thematisch zusammengeh√∂rende √Ñnderungen Imperativ Mood Weniger als zwei Bedingungen erf√ºllt Zwei von drei Bedingungen erf√ºllt Alle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Blog / Wiki / Portfolio‚Äã Ist vollst√§ndig Ist verst√§ndlich Ist fachlich korrekt Weniger als zwei Bedingungen erf√ºllt Zwei von drei Bedingungen erf√ºllt Alle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Spielumfang, Spielbarkeit‚Äã Unspielbar z.B.: Fehler f√ºhren zum Absturz Korrekte Benutzereingabe wird falsch verarbeitet Stark eingeschr√§nkte Funktionalit√§t, z.B.: Kein Eingabevalidierung Spielende nicht erkannt Leicht eingeschr√§nkte Funktionalit√§t: Felder ausw√§hlen (ohne Nachbarfelder) Eingabevalidierung Spielende erkannt Volle Funktionalit√§t: Felder aufdecken (inkl. Nachbarfelder) Eingabevalidierung Spielende erkannt Vorbereiteter Programmierteil‚Äã Kann erkl√§ren, worum es bei diesem Teil geht Zeigen, was daran gut gelungen ist Zeigen, was daran noch verbessert werden kann Weniger als zwei Bedingungen erf√ºllt\tZwei von drei Bedingungen erf√ºllt\tAlle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Fragen zum Programm‚Äã Kann eine Stelle im Programm erkl√§ren Verwendet passende und korrekte Fachbegriffe Kann zu einem Fachbegriff (bspw. &quot;Referenzen&quot;) eine Codestelle im Programm zeigen Weniger als zwei Bedingungen erf√ºllt\tZwei von drei Bedingungen erf√ºllt\tAlle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt","keywords":""},{"title":"Top-Down Entwurf Spiel","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/topdown-entwurf","content":"Top-Down Entwurf Spiel Spielentwurf Dateiname EF-Informatik/docs/numtrip/top-down-entwurf.md Setzen Sie sich in Ihrer Gruppe zusammen und entwerfen Sie auf einem Blatt Papier einen Top-down-Entwurf f√ºr das NumTrip-Spiel. Integrieren Sie dabei die bereits bestehende Funktion f√ºr die Spielfeldausgabe in Ihren Entwurf. Begrenzen Sie dabei die Anzahl der Verfeinerungsebenen auf maximal vier Ebenen. Erstellen Sie anschliessend ein neues Markdown Dokument (jedes Gruppenmitglied f√ºr sich) mit Ihrem Entwurf.","keywords":""},{"title":"Spielstart & Eingabe","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/user-input","content":"Spielstart &amp; Eingabe Nun wird's interaktiv ü•≥ Eine Gamer:in soll ein Feld ausw√§hlen k√∂nnen. Nur Felder ausw√§hlen Die Gefahr bei diesem Schritt lauert im inneren Bed√ºrfnis, in diesem ersten Schritt bereits an alles zu Denken und das ganze Spiel zu programmieren! in diesem Schritt nicht gefragt : die Eingabe auf ung√ºltige Eingaben √ºberpr√ºfen ausgew√§hlte Felder zusammenrechnen den Spielstand angebe √ºberpr√ºfen, ob das Spiel vorbei ist Sound hinzuf√ºgen ... Spielstart und Eingabe Nur eine einzelne Eingabe einlesen und das Feld nicht mehr anzeigen... Commit &amp; Push Hinweis Eingabe Koordinaten auslesen Im Spielfeld das ausgew√§hlte Feld markieren Aktualisiertes Spielfeld anzeigen (markiertes Feld soll leer sein) Eingabe und Auswerten der Eingabe in separate Funktionen verschieben und nun diese Funktionen aufrufen... Commit &amp; Push Eine Funktion play o.√§. schreiben, welche solange das Spiel l√§uft (vorerst also unendlich lange!) den ersten Schritt wiederholt... Commit &amp; Push Hinweis Weiss man nicht im voraus, wie oft etwas wiederholt wird, so ist es immer ein Hinweis, dass eine while Schleife verwendet werden sollte. Hier eine, die unendlich lange l√§uft (bis man Ctrl + c dr√ºckt): while True: eingabe() auswerten() show() Code nochmals kurz durchgehen - machen Variablen- und Funktionsnamen Sinn? K√∂nnten gewisse Dinge einfacher verst√§ndlich (‚â†\\neqÓÄ†= weniger Code) geschrieben werden? Braucht es allenfalls irgendwo noch eine weitere Funktion?... Commit &amp; Push Kurzer Blog-Eintrag in Form eines Lernjournals - was haben Sie gemacht (evtl. mit Screenshot), wie spielen die Funktionen zusammen? Aufgabe √úberpr√ºfen Sie im NumTrip Spiel die Benutzereingaben, so dass auch bei fehlerhaften Eingaben das Programm nicht abst√ºrzt. Grundger√ºst des Spiels, vol. 2 Wichtig vor der Verwendung: √úberlegen Sie sich, wie die untenstehende Version mit Ihrem Top-Down Entwurf zusammenpasst. Die √úberpr√ºfung der Eingaben muss unbedingt noch selber implementiert werden. Es sind aktuell keine Kommentare vorhanden - beschreiben Sie mit Kommentaren jede √ºbernommene Funktion, was sie macht. stage2.py loading... See full example on GitHub","keywords":""},{"title":"Spielfeld","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/spielfeld","content":"Spielfeld Eine der ersten Aufgaben, wenn man ein neues Programm schreiben soll, ist sich zu √ºberlegen, welche Informationen das Programm verarbeiten muss und wie diese im Programm codiert werden sollen. Man spricht von Datenstrukturen. F√ºr alleinstehende Informationen, wie eine einzelne Zahl oder einen Text k√∂nnen wir auf Variablen zur√ºckgreifen. Beispiele: breite = 10 spieler_name = 'Globi' Oft hat man aber Daten, welche in irgend einer Form zusammengesetzt sind, zum Beispiel eine Adresse. Sie besteht aus mehreren Teilinformationen, wie Strasse, Hausnummer, PLZ und Ort. Hier w√§re es m√ºhsam, wenn man f√ºr die einzelnen Teile im Programm separate Variablen verwenden m√ºsste. Alle Programmiersprachen bieten deshalb M√∂glichkeiten an, solche zusammengesetzten oder strukturierten Daten auf einfache Weise in einem Programm zu repr√§sentieren. Eine davon kennen Sie. Es ist die Liste. Sie kommt immer dann zum Einsatz, wenn wir mehrere Informationen vom selben Datentyp zusammen speichern wollen. Genau einen solchen Fall von vielen gleichartigen Informationen stellt das Spielfeld unseres NumTrip Games dar. Hier haben wir eine Matrix von einzelnen Zellen. Jede Zelle widerspiegelt dabei den aktuellen, aufsummierten Zahlenwert. Aufgabe Dateiname EF-Informatik/docs/numtrip/datenstruktur.md √úberlegen Sie sich zu zweit oder zu dritt, wie Sie die oben beschriebenen Informationen zum Spielfeld in einer geeigneten Datenstruktur in einem Python-Programm darstellen k√∂nnen. Stellen Sie sich dazu folgenden Fragen: Welcher Datentyp wird in einer Zelle gespeichert? Braucht es eine Liste? Welche Dimension hat diese? Brauchen wir mehrere Listen? Fertigen Sie auf Papier eine kleine Illustration Ihrer Datenstruktur an und schreiben Sie einen kurzen Dokumentationsbeitrag zu Ihren √úberlegungen (jede Person f√ºr sich). (Fotografieren Sie Ihre Skizze und binden diese in Ihr Markdown ein). Commit &amp; Push","keywords":""},{"title":"Nachbarzellen kombinieren","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/felder-aufdecken","content":"Nachbarzellen kombinieren Wenn die Spieler:in ein Feld ausw√§hlt, m√ºssen alle Nachbarszellen √ºberpr√ºft werden, ob Sie dieselbe Zahl enthalten und dann allenfalls kombiniert werden. Falls eine Nachbarszelle dieselbe Zahl enth√§lt, so m√ºssen auch dessen Nachbarszellen √ºberpr√ºft werden, ob diese diese Zahl enthalten, usw. Das Aufdecken der Nachbarschaft endet dort, wo ein Feld aufgedeckt wird, das in seiner Nachbarschaft keine gleiche Zahl enth√§lt. 1 2 3 4 5 1 2 3 4 5 --------------------- --------------------- 1 | 2 | 4 | 1 | 8 | 8 | 1 | 2 | 4 | 1 | 8 | 8 | --------------------- --------------------- 2 | 4 | 2 | 8 | 4 | 1 | S2, Z5 2 | | 2 | 8 | | 1 | --------------------- --------&gt; --------------------- 3 | 4 | 4 | 4 | 4 | 2 | 3 | | | | | 2 | --------------------- --------------------- 4 | 2 | 8 | 1 | 4 | 1 | 4 | 2 | 8 | 1 | | 1 | --------------------- --------------------- 5 | 2 | 4 | 4 | 4 | 4 | 5 | 2 | | | | | --------------------- --------------------- Fl√§chen f√ºllen‚Äã Dieses Problem ist ein bekanntes Problem aus der Computergrafik. Es tritt zum Beispiel auf, wenn in einer Rastergrafik eine begrenzte Fl√§che mit einer bestimmten Farbe gef√ºllt werden soll. Gesucht ist also ein Algorithmus, welcher diese Problem l√∂st. Wir lernen dabei eine neue Form von Algorithmen kennen, die Rekursion. @ Die Grundidee ist folgende: Das grosse Problem &quot;ganze Fl√§che mit beliebigen Grenzen einf√§rben&quot; wird zun√§chst reduziert auf das kleinstm√∂gliche Problem, einen &quot;einzelnen Pixel einf√§rben&quot;. Daf√ºr programmieren wir eine Funktion. Diese Funktion wird nun wie folgt erg√§nzt: Im Anschluss an das Einf√§rben des einen Pixels ruft sich die Funktion f√ºr die Nachbarpixel selber wieder auf, so dass auch diese eingef√§rbt werden. Das geht immer so weiter, bis alle Pixel eingef√§rbt sind. Diese sich selber Aufrufen wird als Rekursion bezeichnet. Ganz wichtig dabei ist, zu verstehen, dass der erste Aufruf der Funktion erst dann beendet ist, wenn alle weiteren Aufrufe von sich selber beendet sind. Es entsteht bei der Rekursion also so etwas wie eine Kette von h√§ngigen Funktionsaufrufen, welche sich erst dann aufl√∂st, wenn am Ende die Funktion sich nicht weiter selber aufruft. Es braucht in der Funktion also eine Entscheidung, ob weitere Aufrufe der Funktion n√∂tig sind. Beim Einf√§rben der Pixel, ist dies der Fall, wenn wir auf einen Pixel stossen, der die Farbe des Randes tr√§gt und somit nicht eingef√§rbt werden muss. Fehlt diese Abbruchbedingung, oder ist sie falsch formuliert, l√§uft die Rekursion immer weiter. Die Kette der h√§ngigen Funktionsaufrufe wird immer l√§nger, bis irgendwann der Speicher des Computers aufgebraucht ist. Das ist die grosse Gefahr der Rekursion. Der hier skizziert Algorithmus heisst Floodfill-Algorithmus. Eine sch√∂ne Beschreibung, inkl. Python-Implementierung finden Sie hier: üëâ https://de.wikipedia.org/wiki/Floodfill. Aufgabe Studieren Sie den Abschnitt &quot;Rekursive Implementierung&quot; im Artikel und entscheiden Sie, welche der beiden Varianten f√ºr das NumTrip Spiel ben√∂tigt wird. Passen Sie dann die vorgeschlagene Python-Implementierung auf Ihre Situation im NumTrip-Spiel an. Wichtig: Vorerst &quot;l√∂schen&quot; wir nur den Zelleninhalt aller Zellen Nachbarszellen (und deren Nachbarszellen), die denselben Zahlenwert enthalten wie die ausgew√§hlte Zelle.","keywords":""},{"title":"Python","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python","content":"Python Auffrischung der im obligatorischen Fach Informatik gewonnenen Kenntnisse. üëâ offizielle Webseite: https://www.python.org Bei Python handelt es sich um eine weit verbreitete ¬´h√∂here¬ª Programmiersprache. Im Gegensatz zu vielen anderen Programmiersprachen, wird Python interpretiert. D.h. ein Python-Code l√§uft auf allen Systemen f√ºr welche Python-Interpreter existieren und diese existieren f√ºr fast jedes Betriebssystem: Windows, macOS, Linux und andere. Python-Logo Die Syntax von Python legt viel Wert auf Lesbarkeit des Codes. Dies wird vor allem durch das Einr√ºcken von Code zur Kennzeichnung von Programmierbl√∂cken erreicht. Was bei Python zur Syntax geh√∂rt, ist bei vielen anderen Programmiersprachen nur Konvention, an welche man sich nicht zwingend halten muss. Kommentare‚Äã Kommentare werden vom Interpreter ignoriert. Sie stellen keine Anweisungen dar! Aber sie k√∂nnen uns helfen den Code zu dokumentieren, Python bietet zwei Arten von Kommentaren: einzeilige Kommentare‚Äã Wird mit einem Hashtag # gekennzeichnet ‚Äì alles was rechts davon auf dieser Zeile steht gilt als Kommentar. # Das ist ein Kommentar print(42) # ab hier ist der Rest der Zeile ein Kommentar # print('Hallo') # Diese Zeile wird nicht interpretiert mehrzeilige Kommentare‚Äã Wird durch drei Anf√ºhrungszeichen &quot;&quot;&quot; eingeleitet ‚Äì alles bis zu den n√§chsten drei Anf√ºhrungszeichen gilt als Kommentar. ''' Alles zwischen den drei Hochkommas ist ein Kommentar Alle Zeilen werden von Python ignoriert ''' print(42) print-Befehl‚Äã Der print-Befehl gibt seine Argumente auf einer Zeile aus. Dabei k√∂nnen beliebig viele Argumente √ºbergeben werden. print wandelt diese automatisch in Text um. print('Hello World') print('Hello', 'World') print('Hello, i am', 16 'years old') ","keywords":""},{"title":"‚≠ê Daten speichern & laden","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/load-data","content":"‚≠ê Daten speichern &amp; laden Das NumTrip Spiel startet derzeit jedesmal wenn wir es starten von neuem. Das heisst, der Spielstand des letzten Spiels wurde nicht gespeichert. Die spielende Person muss also entweder jedes Spiel in einem Zug durchspielen, oder verliert Ihren Fortschritt. Moderne Programme und Spiele haben meistens die M√∂glichkeit, Daten und Informationen permanent zu speichern. Das bedeutet, die Daten sind auch nach dem stoppen und Neustarten des Programms noch vorhanden. Wie funktioniert speichern?‚Äã Wenn wir in Python eine Variable generieren wird diese im Arbeitsspeicher (RAM) des Rechners gespeichert. Wie Ihr bestimmt wisst, ist der Arbeitsspeicher fl√ºchtig. Das heisst, wenn der Computer ausgeschalten wird oder das Programm beendet wird gehen die Informationen verloren. Der einzige Speicher, der auch nach einem Neustart noch vorhanden ist, ist die Festplatte (z.B. SSD). Wir brauchen also eine M√∂glichkeit, die wichtigsten Informationen auf die Festplatte zu speichern. Typischerweise funktioniert dies durch Dateien auf dem Computer. Ihr kennt das schon von anderen Programmen. Wenn Ihr z.B. im Word eine Textdatei bearbeitet, werdet Ihr beim speichern gefragt wo die Datei gespeichert werden sollte und wie sie heissen soll. Referenzen Nachdem dieser Dialog ausgef√ºhrt wird ist die Datei permanent auf der Festplatte gespeichert und kann auch wieder aufgerufen werden. In Python ‚Äã Programmiersprachen verwenden oft sogenannte standardisierte Dateiformate um Daten zu Speichern. Diese sind nichts anderes, als eine Abmachung dar√ºber, in welchem Format die Datei gespeichert ist. Wenn Ihr an das Beispiel der Word Datei zur√ºckdenkt f√§llt euch bestimmt auf, das diese Dateien z.B. die Endung .docx haben. Dies dient dem Zweck, dass andere Programme wissen, in welchem Format die Informationen in dieser Datei gespeichert sind, und wie sie beim √∂ffnen interpretiert werden sollten. Ein solches Dateiformat ist JSON. Dieses kommt urspr√ºnglich von der Programmiersprache JavaScript, wurde mittlerweile aber in vielen anderen Sprachen aufgenommen, unter anderem von Python. Wenn wir mit JSON arbeiten wollen, importieren wir das Modul dazu ganz einfach: import json Wir k√∂nnen aber nicht jegliche Variablen direkt in JSON speichern! Dazu ben√∂tigen wir eine Datensammlung: daten = {} In diese Datensammlung k√∂nnen wir nun unsere Variablen hineinschreiben. Im folgenden Beispiel wird der Inhalt der Variable spielfeld in die Datensammlung daten unter dem Namen spielfeld geschrieben: daten['spielfeld'] = spielfeld Wir k√∂nnen beliebig viele Variablen in die selbe Datensammlung packen: # selbe Datensammlung 'daten' wie oben daten['hoehe'] = hoehe Speichern‚Äã Wenn die Datensammlung alle Informationen enth√§lt, die wir speichern wollen, k√∂nnen wir diese nun sehr einfach in eine Datei schreiben: dateiname = 'numtrip.json' daten = {} with open(dateiname, 'w') as f: json.dump(daten, f) Der dateiname ist das selbe, was wir bei Word beim speichern angeben - Der Name der Datei auf dem Computer. Die Option 'w' steht f√ºr write (schreiben) und bedeutet, dass wir die Datei bearbeiten wollen. Das as datei bedeutet, dass wir im Programm unter dem Namen f (f√ºr file) auf die ge√∂ffnete Datei zugreifen k√∂nnen. Sie sehen, dass nach der Zeile, welche die Datei √∂ffnet, ein Doppelpunkt und ein einger√ºckter Block folgt. Wir k√∂nnen in diesem einger√ºckten Block mit der Datei arbeiten. Sobald wir den einger√ºckten Block verlassen, wird die Datei gespeichert und wir haben keinen Zugriff mehr darauf, bis wir sie erneut √∂ffnen. Letztendlich gibt es nur noch die Zeile json.dump(daten, datei). Diese sagt dem JSON Modul, dass es die Datensammlung daten in die ge√∂ffnete Datei f speichern soll. Laden‚Äã Wenn wir Informationen in eine Datei gespeichert haben, m√∂chten wir diese nat√ºrlich auch wider ins Programm laden. Dies funktioniert ebenfalls sehr √§hnlich: with open(dateiname) as f: daten = json.load(f) spielfeld = daten['spielfeld'] Achtet darauf, dass wir hier auch die open funktion von Python benutzen um die Datei zu √∂ffnen, dieses mal fehlt aber die option w. Da wir die Daten nur lesen und laden wollen, ben√∂tigen wir nicht die Schreibrechte. Die Datei ist jetzt also im schreibgesch√ºtzten Modus ge√∂ffnet. Mit der offenen datei k√∂nnen wir die Informationen ganz einfach mit Hilfe des JSON moduls wieder in eine Datensammlung laden (daten). Nun m√ºssen wir nur noch die Informationen aus der Datensammlung in unsere Variablen kriegen. Auf die Eintr√§ge in einer Datensammlung wird mit der Notation meine_datensammlung['mein_eintrag'] zugegriffen. Ausprobieren‚Äã Aufgabe Dateiname EF-Informatik/exercises/io/1-daten-speichern.py EF-Informatik/exercises/io/2-daten-laden.py Verwenden Sie untenstehende Code-Snippets daten_speichern.py und daten_laden.py und f√ºhren Sie diese auf Ihrem Computer aus. Achten Sie darauf, dass beide im selben Ordner auf Ihrem Computer sind. F√ºhren Sie das Snippet daten_speichern.py aus. Finden sie die entstandene Datei auf ihrem Computer und schauen Sie sich deren Inhalt in einem Text-Editor an (z.B. VSCode, Notepad, etc.). F√ºhren Sie das Snippet daten_laden.py aus und schauen Sie sich den Output auf der Kommandozeile an. Bonus: √ñffnen Sie die Datei erneut im Text Editor und ver√§ndern Sie die Teilnehmerliste: Ver√§ndern Sie einen Namen, l√∂schen sie einen, oder f√ºgen Sie einen hinzu. F√ºhren Sie danach erneut das Snippet daten_laden.py aus. Was f√§llt Ihnen auf? import json def laden(dateiname): with open(dateiname) as f: datensammlung = json.load(f) return datensammlung['teilnehmer:innen'] teilnehmer = laden('daten.json') print(teilnehmer) import json def speichern(teilnehmer, dateiname): datensammlung = {} datensammlung['teilnehmer:innen'] = teilnehmer with open(dateiname, 'w') as f: json.dump(datensammlung, f) teilnehmer = ['Anna', 'Bob', 'Theo', 'Karim', 'Robert'] speichern(teilnehmer, 'daten.json') ","keywords":""},{"title":"Jetzt gehts los!","type":0,"sectionRef":"#","url":"/24ef/Programmieren/NumTrip/spielfeld-programmieren","content":"Jetzt gehts los! NumTrip numtrip.py Dateiname EF-Informatik/numtrip/game.py Programmieren Sie die Datenstruktur f√ºr das Spielfeld, so wie Sie diese in der vorhergehenden Aufgabe entworfen haben. Initialisieren Sie das Spielfeld f√ºr den Moment so, dass es einen fortgeschrittenen Spielstand eines Spiels repr√§sentiert (daher mind. eine zweistellige Zahl vorweist - welche Zahlen kommen in Frage??). Damit man auch etwas sieht, wenn Sie das Programm ausf√ºhren, programmieren Sie noch die n√∂tigen Anweisungen, welche das Spielfeld auf der Konsole anzeigt. √úberlegen Sie sich dazu, wie Sie das Spielfeld nur mit Zeichen dargestellt werden kann und dass alle Zellen immer gleich gross sind. Wenn alles zu Ihrer Zufriedenheit funktioniert, machen Sie einen Commit, pushen die √Ñnderungen und markieren diese Aufgabe als erledigt. Noch keine Spieler:inneninteraktion Es ist in diesem Schritt noch keine Interaktion mit Spielenden oder ein Spielfluss zu programmieren - nur das Anzeigen des Spielfelds... Auftrag auf Freitag, 21.10.2022 Am Freitag werden wir mit dem Spielfeld weiterarbeiten. Damit alle eine gute Ausgangslage haben, gibt es den folgenden Kurz-Auftrag: (F√ºr alle): Das Spielfeld soll wie im Beispiel unten mit einer verschachtelten Liste beschrieben werden. Die Zahlen k√∂nnen Sie selber w√§hlen. (Wer das eigene Spielfeld noch nicht fertig hat): Den untenstehenden Code √ºbernehmen und Zeile f√ºr Zeile analysieren und kommentieren. Insbesondere sollte Ihnen wieder klar werden, was folgende Syntax bezweckt: Was macht f'|{zelle}' ? was macht das end=''? Commiten und Pushen board = [ [2, 4, 1, 8, 8], [4, 2, 8, 2, 1], [4, 4, 8, 4, 2], [2, 8, 1, 4, 1], [2, 4, 4, 4, 4] ] for zeile in board: for zelle in zeile: print(' -', end='') print(' ') for zelle in zeile: print(f'|{zelle}', end='') print('|') for zelle in board[0]: print(' -', end='') print(' ') Refactoring: Funktionen verwenden‚Äã Aufgabe Packen Sie zun√§chst die Anweisungen, welche das Spielfeld auf der Konsole anzeigen aus obiger Aufgabe in eine Funktion. Erg√§nzen Sie sodann diese Funktion mit den n√∂tigen Anweisungen so, dass am Anfang jeder Zeile die Zeilennummer steht. Schreiben Sie schliesslich eine weitere Funktion, welche die Spaltennummern ausgibt und rufen Sie die beiden Funktionen im Hauptprogramm auf. Die Ausgabe auf der Konsole k√∂nnte dann wie folgt aussehen: 1 2 3 4 5 ----------- 1 |2|4|1|8|8| ----------- 2 |4|2|8|2|1| ----------- 3 |4|4|8|4|2| ----------- 4 |2|8|1|4|1| ----------- 5 |2|4|4|4|4| ----------- Wenn alles zu Ihrer Zufriedenheit funktioniert, machen Sie ein commit und push und markieren Sie die Aufgabe als erledigt. ‚≠êÔ∏è Spielfeld Farben‚Äã Konsolen-Ausgaben k√∂nnen auch koloriert werden - dazu verwendet man am besten eine Bibliothek, welche das Einf√§rben weitgehend √ºbernimmt. Bspw. üëâ https://pypi.org/project/colorama/","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/lernziele","content":"Lernziele Dauer zwei Teile, ca. 90 Minuten Form schriftlicher &amp; praktischer Teil Schriftlicher Teil Auf Papier, ohne Hilfsmittel Praktischer Teil Sie arbeiten auf VS Code an einem pers√∂nlichen Projekt Das Plugin Local History muss installiert sein und so konfiguriert, dass alle Versionen im aktuell ge√∂ffneten Ordner gespeichert werden. Abgabe √ºber einen OneDrive-Link Hilfsmittel: Open Book (alles erlaubt: Beispiele, eigener Code, Webseiten,...) Keine Kommunikation untereinander (Chat, Teams, ...) Themen (Voraussetzung: Python Repetition) Listen 1D, 2D, Listen erzeugen Referenzen Funktionen Python Scopes: Lokale und Globale Variablen Strings Umgang mit Fehlern, Try-Catch, Eingabe Besprochene Beispiele / Code Snippets Lernziele Sie k√∂nnen diese Python-Konzepte in kleinen Programmen (vergleichbar mit Code-Snippets) einsetzen Sie k√∂nnen Python Programme lesen, interpretieren und ab√§ndern Sie k√∂nnen unbekannte Befehle in gegebenen Programm-Ausschnitten im Internet recherchieren und anwenden Sie k√∂nnen mit VS Code umgehen, Projekte/Ordner √∂ffnen und mit dem Python-Debugger umgehen Sie k√∂nnen Fehlermeldungen interpretieren, die Fehler-Ursache identifizieren und allenfalls beheben Sie schreiben selber Funktionen mit Parametern, R√ºckgabewerten, globalen und lokalen Variablen","keywords":""},{"title":"Python Scopes","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/scopes","content":"Python Scopes Ausgangslage‚Äã Wieso kann die Variable word auf Zeile 1 nicht ver√§ndert werden? word = 'test' def reset(): word = 'hangman' print(word) def play(): print(word) reset() print(word) play() Pr√§sentation‚Äã Notizen‚Äã Aufgabe Quizz-Aufgaben unter üëâ https://www.codequizzes.com/python/beginner-II/variable-scope bearbeiten und Aufgabe als &quot;erledigt&quot; markieren. Quizziz (im Unterricht gespielt am 4.11.2022) üëâ https://quizizz.com/admin/quiz/6364e3f4a495f3001e2cc3f2/scope-of-variables-in-python","keywords":""},{"title":"Programmiersprachen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Programmiersprachen","content":"Programmiersprachen Jede Programmiersprache hat eigene Regeln und Richtlinien, wie ein Programm geschrieben wird. Es wird dabei zwischen der Syntax und der Semantik unterschieden. Syntax W√∂rter und Symbole, die in einer Programmiersprache verwendet werden d√ºrfen Fehler werden bereits vor dem Programmstart erkannt Semantik Inhaltliche Bedeutung des Codes Die Bedeutung ergibt sich durch die Verwendung der gegebenen Syntax Fehler werden erst zur Laufzeit erkannt Mittlerweilen gibt es eine schier un√ºberschaubar grosse Anzahl an Programmiersprachen (Liste aller Programmiersprachen). Im EF werden wir zu Beginn mit Python 3 programmieren, bevor wir dann auch Einblicke in andere Programmiersprachen und Dom√§nenspezifische Sprachen (SQL) erhalten werden. Sprachstufen‚Äã Bei der Klassifizierung von Programmiersprachen wird aktuell unter vier Typen von Programmiersprachen unterschieden: Wobei die Interpretierten Sprachen auch oft Skriptsprachen genannt werden Maschinensprache‚Äã Zu den Pionierzeiten der Computerentwicklung war die einzige M√∂glichkeit, ein Programm f√ºr einen Computer zu erstellen, dieses in bin√§rem Maschinencode zu schreiben (bzw. auf Lochkarten zu stanzen). Aufgrund ihrere f√ºr Menschen extrem schwer verst√§ndlichen Form ist die Programmierung in Maschinensprache nicht mehr gebr√§uchlich. Die Maschinensprache kann direkt von einer CPU ausgef√ºhrt werden. Achtung Maschinencode l√§uft nicht einfach auf allen Prozessoren - je nach Aufbau/Architektur des Prozessors m√ºssen andere Befehle verwendet werdeninfo unlesbar, unver√§nderbar nur Linus Torvalds, Erfinder von Linux, schreibt und √§ndert Maschinencode In einigen wenigen Spezialf√§llen (wenn z.B. der eigentliche Quellcode oder die urspr√ºngliche Programmierumgebung nicht mehr verf√ºgbar ist) kann es unter Umst√§nden erforderlich sein, direkt den Maschinencode zu bearbeiten. Assembler Sprache‚Äã In Assembler gibt es als Erleichterung f√ºr die Programmierer:in sogenannte mnemonische K√ºrzel (Mnemonics), die eine Ged√§chtnisst√ºtze f√ºr die entsprechend m√∂glichen CPU-Befehle sein sollen, bspw. addiu f√ºr die Addition von positiven ganzen Zahlen (Add Integer Unsigned). Die Assemblersprache ist gerade noch verst√§ndlich f√ºr einen Menschen und kann leicht von einem Programm, dem sogenannten Compiler in Maschinensprache √ºbersetzt werden, da f√ºr jeden Mnemonics ein CPU-Befehl existiert. Dennoch ist Assembler-Sprache bereits auf eine CPU-Architektur zugeschnitten und es muss im Voraus entschieden werden, welches Ziel man sich vornimmt (nicht jede CPU-Familie weist dieselbe Befehlspalette auf). Ein einfaches Beispiel einer Addition von zwei ganzen Zahlen sum: addiu $sp,$sp,-8 sw $fp,4($sp) move $fp,$sp sw $4,8($fp) sw $5,12($fp) lw $3,8($fp) lw $2,12($fp) nop addiu $2,$3,$2 move $sp,$fp lw $fp,4($sp) addiu $sp,$sp,8 jr $31 nop info Aufgrund der m√ºhseligen Programmierung und der fehlenden Portabilit√§t von Programmen auf unterschiedliche Systeme ist Assembler nicht f√ºr komplexe Projekte zu empfehlen. F√ºr bestimmte zeitkritische Aufgaben (Echtzeit), wo es auf Geschwindigkeit ankommt (bspw. Grafiktreiber) oder nur sehr wenig Platz zur Verf√ºgung steht (embedded systems), wird auch heute noch auf Assembler zur√ºckgegriffen. Hochsprachen‚Äã In Hochsprachen wird eine Abstraktionsschicht f√ºr komplexen Funktionen wie Speichermanagment Repetition von immer gleichen Mustern Betriebssystemabh√§ngige Unterschiede hinzugef√ºgt. Dadurch m√ºssen Programmierer:innen Algorithmen nicht f√ºr jede CPU-Architektur neu schreiben. Zudem ist der Code nochmals bedeutend besser lesbar als in der Assembler Sprache. Obiges Beispiel in Assemblersprache sieht in Hochsprachen wie folgt aus: CJavaC#PythonRubyJavaScript #include &lt;stdio.h&gt; int sum(int zahl1, int zahl2) { return zahl1 + zahl2; } int main() { printf(&quot;3 + 4 = %d&quot;, sum(3, 4)); return 0; } Finding Was f√§llt Ihnen bei den verschiedenen Programmiersprachen auf? In Hochsprachen wird zus√§tzlich unterschieden zwischen kompilierten und interpretierten Sprachen. Kompilierte Sprachen‚Äã C C# Java ... Wie bei der Assemblersprache muss ein geschriebenes Programm durch einen Compiler in Maschinensprache √ºbersetzt werden. Dieser Prozess ist bei Hochsprachen um einiges komplexer als bei Assemblersprache, da keine direkte √úbersetzung m√∂glich ist. Da das Programm nach der Kompilierung von einem Prozessor ausgef√ºhrt wird, braucht es einen vorgegebenen Einstiegspunkt - eine Funktion namens main. Zwischenschritt Bytecode Einige kompilierte Sprachen verwenden zur Erh√∂hung der Portabilit√§t eine Zwischensprache, sogenannter Bytecode verwendet. Dieser Bytecode ist quasi die Maschinensprache f√ºr eine virtuelle Maschine (VM f√ºr Virtual Machine). Um den Bytecode auszuf√ºhren, muss also lediglich die VM auf einem System installiert werden, und der Bytecode kann ausgef√ºhrt werden. Interpretierte Sprachen‚Äã Python Ruby Java Script ... F√ºr die Programmierung einer Skriptsprache braucht es keine Installation eines zus√§tzlichen Compilers. Die Programmiersprache, also bspw. Python, interpretiert den Quellcode direkt. Dazu wird der Code gelesen (Parsen) und gem√§ss der Syntax-Vorgaben in einen Syntax-Baum (AST, Abstract Syntax Tree) √ºbersetzt. Python Code def sum(zahl1, zahl2): return zahl1 + zahl2 √úbersetzer AST üëâ Jupyter Notebook zur Erzeugung eines AST1 Auf dieser Basis entscheidet der Interpreter f√ºr jeden Knoten im Baum, welche kompilierte Funktion ausgef√ºhrt werden soll. Diese kompilierten Funktionen werden oft in C geschrieben und bei der Installation der Programmiersprache in Maschinencode compiliert (bzw. bereits compiliert heruntergeladen). Da kein eigentlicher Compile-Schritt notwendig ist, muss bei Skriptsprachen auch keine main als Einstiegspunkt vorhanden sein. Zudem ist es im Gegensatz zu kompilierten Sprachen m√∂glich, den Quellcode von laufenden Programmen zu ver√§ndern. Deshalb ist es etwa auch m√∂glich, eine interaktive Code-Konsole (REPL ReadEvaluatePrintLoop) f√ºr Skriptsprachen auszuf√ºhren. Insgesamt ist das Arbeiten mit Skriptsprachen mit weniger Konfigurationsaufwand, weniger Standardcode (Boilerplate Code) verbunden und daher effizienter. Der Nachteil ist, dass die Programme deutlich langsamer (ca. 10x langsamer) ausgef√ºhrt werden. Jupyter Notebook: ‚¨áÔ∏è Visualize-AST.ipynb, Github ‚Ü©","keywords":""},{"title":"Funktionen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/functions","content":"Funktionen Kurz zusammengefasst‚Äã Funktionsaufruf‚Äã def dreieck(): print('*') print('* *') print('* * *') dreieck() ... mit Parameter‚Äã def dreieck(size): for i in range(size + 1): print('* ' * i) dreieck(3) dreieck(5) ... mit zwei Parameter‚Äã def dreieck(size, zeichen): for i in range(size + 1): print(zeichen * i) dreieck(3, '* ') dreieck(5, 'üëç') ... mit Standardwert‚Äã def dreieck(size, zeichen = '* '): for i in range(size + 1): print(zeichen * i) dreieck(3) dreieck(5, 'üëç') R√ºckgabewerte‚Äã def pythagoras(a, b): radikand = a**2 + b**2 sqrt = radikand ** 0.5 return sqrt c = pythagoras(3, 4) print(c) Einleitung‚Äã Sie haben in Ihren Programmen schon lange Funktionen gebraucht, vielleicht ohne es zu merken. Zum Beispiel wenn Sie print(...) geschrieben haben. Aber auch math.sqrt(...) (Wurzel ziehen) und math.ceil(...) (Abrunden), welche Sie im Primzahlen-Programm gebraucht haben, sind Funktionen. Allerdings stammen diese zwei aus einem Modul, welches Sie mit import math zuerst in Ihr Programm importieren mussten. Das hinschreiben eines Funktionsnamen in einem Programm bezweckt bei der Ausf√ºhrung des Programms, dass an dieser Stelle die betreffende Funktion ausgef√ºhrt wird. Man spricht von einem Funktions-Aufruf. Sobald ein Programm l√§nger, als nur ein paar Zeilen ist, spielen Funktionen eine wichtige Rolle. Man kann n√§mlich auch selber Funktionen schreiben, die man dann an verschiedenen Stellen aufrufen kann. Das hat folgende Vorteile: √úbersichtlicher Das Programm wird √ºbersichtlicher und besser verst√§ndlich, vor allem, wenn Sie f√ºr Ihre Funktionen gute Namen w√§hlen. Die Lesbarkeit ist eine wichtige Qualit√§t von Programmen, weil diese meistens nicht nur von der Autorin bearbeitet werden. Kein doppelter Code Man kann die Wiederholung von gleichlautenden Programmteilen vermeiden. Wenn dann sp√§ter eine √Ñnderung am Programm n√∂tig wird, oder ein Fehler zu korrigieren ist, so muss man nur die betreffende Funktion √§ndern. Doch was sind Funktionen eigentlich? Eine Funktion ist eine Sequenz (Abfolge) von (Python-)Anweisungen, welche unter einem eigenen Namen, gefolgt von (), zusammengefasst werden. Die Funktion kann als neuer Befehl verstanden werden, welche dann an anderen Stellen im Programm aufgerufen werden kann, indem man den Namen und () hinschreibt. 1-sequence.py loading... See full example on GitHub 2-function.py loading... See full example on GitHub Die Beispiele 1-sequence.py und 2-function.py zeigen zweimal dasselbe Programm, einmal ohne Funktion, einmal mit Funktion. Im zweiten Beispiel sieht man, wie die Funktion count_down() definiert wird (Zeile 3 bis 14). In Zeile 3 steht der Name der Funktion, w√§hrend die Zeilen 4 bis 14 die Anweisungen enthalten, welche zur Funktion geh√∂ren. Zeile 17 zeigt, wie die Funktion count_down() aufgerufen wird. Funktionen mit Parameter Damit Funktionen noch flexibler eingesetzt werden k√∂nnen, kann man ihnen beim Aufruf bestimmte Werte in Form von Parametern mitgeben. Dazu muss man bei der Definition der Funktion zwischen den () die Namen der Parameter angeben. Diese k√∂nnen dann innerhalb der Funktion wie Variablen verwendet werden. Beim Aufruf der Funktion gibt man in den () die aktuellen Werte an, mit denen die Funktion anschliessend arbeiten soll. Man nennt diese Werte beim Aufruf die Argumente. Das k√∂nnen Zahlen, Texte, aber auch die Namen von anderen Variablen sein. Wichtig Parameter k√∂nnen nur innerhalb der Funktion verwendet werden, zu welcher Sie geh√∂ren. Ausserhalb der Funktion sind sie unbekannt. Weist man einem Parameter innerhalb einer Funktion einen neuen Wert zu, so geht dieser beim Verlassen der Funktion verloren. Das n√§chste Beispiel 3-function-with-parameter.py zeigt, wie die Funktion count_down() mit einem Parameter zahl flexibler gemacht werden kann. Jetzt kann beim Aufruf der Funktion angegeben werden, wie lange der Count-down dauern soll. Das hat zur Folge, dass die Anweisungen f√ºr die Eingabe der gew√ºnschten Count-down-Zeit durch die Benutzer:in zur√ºck ins Hauptprogramm verlagert werden m√ºssen. Dies ist aber sowieso besser, da die Funktion so viel flexibler einsetzbar ist. Die Count-down-Zeit kann ja aus einer beliebigen Quelle stammen, nicht nur von der Konsole. 3-function-with-parameter.py loading... See full example on GitHub Funktionen mit R√ºckgabewert Viele Funktionen erzeugen bei ihrer Ausf√ºhrung ein Resultat, welches dann ausserhalb der Funktion weiterverwendet werden kann. Dazu gibt es die M√∂glichkeit mit return ... einen Wert als Resultat zur√ºckzugeben. Die Funktion wird dann verlassen und der Wert steht an der Stelle des Aufrufs zur Verf√ºgung und kann dort zum Beispiel einer weiteren Variablen zugewiesen werden. Im foglenden Beispiel 4-function-with-return.py ist dieses Prinzip bei der Funktion lies_zahl() zu sehen, welche als Resultat die eingegebene Zahl zur√ºckgibt. 4-function-with-return.py loading... See full example on GitHub 1. Debuggen Dateinamen EF-Informatik/exercises/fkt/1-sequence.py EF-Informatik/exercises/fkt/2-function.py EF-Informatik/exercises/fkt/3-function-with-parameter.py EF-Informatik/exercises/fkt/4-function-with-return.py Laden Sie obige Code-Beispiele in Ihr Repository herunter, und debuggen Sie die Beispiele Schritt f√ºr Schritt. Markieren Sie die Aufgabe als erledigt. 2. Sternchen-Rechteck Dateiname EF-Informatik/exercises/fkt/sternchen.py ****** * * * * * * * * ****** Gesucht ist ein Programm, welches obige Figur auf der Konsole ausgibt. Schreiben Sie zwei Funktionen f√ºr die Ausgabe der beiden unterschiedlichen Zeilen. Verwenden Sie diese Funktionen dann im Hauptprogramm um die Figur als ganzes auszugeben. Parametrisieren Sie in einem zweiten Schritt die Funktionen so, dass die Breite der Figur (in Anzahl Zeichen) beim Aufruf der Funktionen angegeben werden kann. Machen Sie in einem dritten Schritt aus dem Hauptprogramm auch eine Funktion, bei welcher √ºber je einen Parameter die die Breite der Figur (in Anzahl Zeichen) und H√∂he der Figur (in Anzahl Zeilen) angegeben werden kann. Schreiben Sie ein neues Hauptprogramm, welches diese letzte Funktion mit einigen Werten f√ºr die Breite und H√∂he der Figur aufruft. Was passiert, wenn man Ihre Funktionen mit negativen Werten aufruft? Wie k√∂nnte man das L√∂sen? Comitten und pushen Sie Ihre L√∂sung und markieren Sie diese Aufgabe als erledigt. SSR","keywords":""},{"title":"Zuf√§llige Zahlen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/random","content":"Zuf√§llige Zahlen Mit dem Python Package random k√∂nnen pseudo-zuf√§llige Zufallszahlen erzeugt werden. Viele Computer Programme basieren auf zuf√§lligen Zahlen. Programmiersprachen k√∂nnen allerdings keine wirklichen Zufallszahlen erzeugen, sondern lediglich pseudo-zuf√§llige Zahlen durch einen Algorithmus berechnen. (Der in Python verwendete Algorithmus f√ºr Zufallszahlen basiert auf dem Mersenne-Twister1). Die Python Standard-Bibliothek beinhaltet das random Modul mit vielen n√ºtzlichen Funktionen. Definition random.random()‚Äã Gibt eine zuf√§llige Zahl n zwischen 0.0 und 1.0, ohne die 1.0 zur√ºck (0&lt;=n&lt;10 &lt;= n &lt;10&lt;=n&lt;1). import random print(random.random()) Definition random.seed()‚Äã Diese Funktion initialisiert den Zufallszahlengenerator. Damit kann die &quot;Zuf√§lligkeit&quot; kontrolliert werden - wird immer derselbe Initialisierungswert verwendet, so entsteht immer dieselbe &quot;zuf√§llige Sequenz&quot;. ENtsprechend wichtig ist es, dass jedesmal ein anderer Initialer Startwert gesetzt. Python verwendet automatisch die aktuelle Systemzeit. Mit random.seed() kann der Generator mit einem beliebigen int, str, byte oder bytearray neu initialisiert werden. import random random.seed(1) print(random.random()) Definition random.randint(a, b)‚Äã Gibt eine zuf√§llige ganze Zahl n zwischen a und b (a&lt;=n&lt;=ba &lt;= n &lt;= ba&lt;=n&lt;=b) zur√ºck. import random print(random.random()) Definition random.choice(seq)‚Äã Gibt ein zuf√§lliges Element der Sequenz seq (bspw. eine Liste) zur√ºck. import random destinations = ['Rom', 'Florenz', 'Paris', 'M√ºnchen'] print('Als n√§chstes gehe ich nach:', random.choice(destinations)) Definition random.shuffle(seq)‚Äã Mischt alle Elemente der eingef√ºgten Sequenz (bspw. eine Liste) - die eingegebene Sequenz wird also ver√§ndert! import random numbers = [1, 2, 3, 4, 5, 6] random.shuffle(numbers) print(numbers) Definition random.sample(seq, n)‚Äã Gibt n zuf√§llige Elemente der Sequenz seq (bspw. eine Liste) zur√ºck. Die eingegebene Sequenz bleibt unver√§ndert! import random numbers = [1, 2, 3, 4, 5, 6] print('3 zuf√§llige Zahlen', random.sample(numbers, 3)) print('Zuf√§llig gemischte Zahlen', random.sample(numbers, len(numbers))) print('Original', numbers) Quelle: Wikipedia https://en.wikipedia.org/wiki/Mersenne_Twister ‚Ü©","keywords":""},{"title":"Python Repetition","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/turtle-repe","content":"Python Repetition Auftrag: Blogbeitrag &quot;Wiedereinstieg in Python&quot; Dateiname EF-Informatik/blog/2022-08-26-wiedereinstieg-python.md Arbeiten Sie sich durch die verschiedenen Kapitel zur Repetition von Python. Notieren Sie sich dabei stichwortartig die wichtigen Dinge inkl. Codeausschnitte. Dazu geh√∂ren bspw. auch Fehlerbilder oder wichtige Aha-Momente. Verfassen Sie anschliessend in den letzten 15 Minuten des Unterrichts einen kleinen Blogbeitrag mit dem Titel &quot;Wiedereinstieg in Python&quot; in einem neuen Ordner blog/2022-08-26-wiedereinstieg-python.md, wo Sie Ihre Erfahrungen aus dieser Lektion festhalten und beschreiben. Der Blogbeitrag darf durchaus lustig und am√ºsant zu lesen sein und daher also auch witzige, offensichtliche oder unkonventionelle Fehler aufnehmen. Sie k√∂nnen dabei selber entscheiden, ob Sie auf deutsch oder englisch schreiben. Vergessen Sie nicht, die √Ñnderungen zu Commiten und zu Pushen.","keywords":""},{"title":"Software Engineering","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Software-Engineering","content":"Software Engineering Einf√ºhrung‚Äã Die Entwicklung von grossen Programmen ist sehr anspruchsvoll. Immer wieder scheitern grosse Software-Projekte, wobei Investitionen in Millionenh√∂he verloren gehen. Schon fr√ºh wurden deshalb Methoden und Techniken entwickelt, um den Entwicklungsprozess zu steuern und m√∂glichst erfolgreich zu machen. Diese Methoden orientierten sich anf√§nglich an Vorgehensweisen, wie man sie aus anderen Ingenieur-Disziplinen, wie der Elektrotechnik, dem Bauwesen, etc. kannte. Allerdings stellte man schnell fest, dass Software-Projekte viel dynamischer verlaufen. Man kann nicht, wie beim Bau einer Maschine, einen Plan zeichnen, dann alles genau so ausf√ºhren und am Schluss hat man eine funktionierende Maschine. Oft weiss der Kunde am Anfang selber nicht genau, was er eigentlich braucht. Praktisch immer ver√§nderen sich die W√ºnsche w√§hrend der Laufzeit eines Projektes und es kommen neue W√ºnsche hinzu. Diesem Umstand muss im Software-Engineering Rechnung getragen werden. Software-Engineering-Disziplinen‚Äã Wie beim Sport, so gibt es auch im Software-Engineering verschiedene Disziplinen. In einem Software-Projekt m√ºssen alle diese Disziplinen im notwendigen Mass vetreten sein. In den folgenden Abschnitten werden die vier wichtigsten Diszplinen erkl√§rt. Analyse‚Äã Hier geht es darum zu verstehen, was der Kunde eigentlich gerne h√§tte. Oft ist das in Form von Anforderungen formuliert. Solche Anforderungen sind irgendwelche textuellen Beschreibungen, die aber teilweise unvollst√§ndig, oder gar widerspr√ºchlich sind. In der Analyse geht es darum die Anforderungen zu anlaysieren, diese zu pr√§zisieren, fehlende Teile zu erg√§nzen und Widerspr√ºche zu beheben. Entwurf‚Äã W√§hrend es in der Analyse darum geht zu verstehen, was eigentlich das Problem ist, geht es im Entwurf darum, eine m√∂glich L√∂sung f√ºr das Problem zu entwerfen. Hier geht es darum zu entscheiden, aus welchen Teilen die sp√§tere Software bestehen wird, wie die zu verarbeitenden Informationen codiert werden sollen und welche Datenstrukturen f√ºr die Speicherung n√∂tig sind. Im Entwurf geht es darum eine L√∂sung f√ºr das Problem zu skizzieren. Dabei entsteht oft ein Modell, welches die einzelnen Bestandteile der k√ºnftigen Software zeigt. Zur Darstellung von diesem Modell werden Diagramme verwendet (eine Art Baupl√§ne f√ºr Software). Implementation‚Äã Die Implementation befasst sich mit der Umsetzung der im Entwurf skizierten L√∂sung in Programmcode. In der Implementation wird das entworfene Modell in Anweisungen in der gew√§hlten Programmiersprache √ºbersetzt. Test‚Äã Jede Software enth√§lt Fehler. Im Test geht es darum m√∂glichst viele davon zu finden und zu eliminieren. Dazu muss man sich √ºberlegen, welche Situationen beim normalen Einsatz der Software vorkommen. Genau so wichtig ist aber auch, die Software unter vom Normalfall abweichenden Situationen zu testen. Was passiert, wenn der Benutzer eine ung√ºltige Eingabe macht? Kann die Software damit umgehen, oder st√ºrzt sie ab. Im Test wird eine Software unter genau definierten Bedingungen, den Testf√§llen, gepr√ºft. Ein Testfall gibt vor, welche Eingangsdaten ins System eingespiesen werden und welche Resultate erwartet werden. Vorgehensmodelle‚Äã Ein Vorgehensmodell definiert wie und wann die oben beschriebenen Disziplinen w√§hrend eines Projektes angewendet werden. Es gibt unz√§hlige solche Modelle, welche √ºber die Zeit entwickelt wurden. Zwei grunds√§tzlich unterschiedliche Modell sollen hier beschrieben werden. Wasserfall‚Äã Beim Wasserfallmodell werden die Disziplinen, beginnend mit der Analyse (im Bild als Anforderungen bezeichnet) und endend mit dem Test (im Bild √úberpr√ºfung), sch√∂n der Reihe nach durchgef√ºhrt. Man spricht jetzt von Phasen, statt von Disziplinen. Wichtig dabei ist, dass mit der nachfolgenden Phase erst dann gestartet wird, wenn die vorherige Phase vollst√§ndig abgschlossen ist. @ Und genau da liegt das Problem. Wie in der Einleitung beschrieben, √§ndern sich die W√ºnsche des Kunden w√§hrend der Projektlaufzeit, oder es kommen neue W√ºnsche hinzu. Wenn das Projekt aber schon in der Phase der Implementation angelangt ist, hat man keine M√∂glichkeit mehr zu reagieren. Man muss ja wieder zur√ºck zur Analyse und dann den Design wiederholen. Das k√∂nnte aber dazu f√ºhren, dass ein grosser Teil des bisher erstellten Programms nicht mehr passt und verloren ist. Bei kleinen Projekten ist das nicht so schlimm. Bei grossen Projekten, wo viele Leute mehrere Jahre daran arbeiten, kann das aber zu einem finanziellen Desaster f√ºhren, wenn man nach einem Jahr Analyse, einem Jahr Entwurf und einem halben Jahr Implementation wieder vorne beginnen muss. Dies ist mit ein Grund, weshalb die Kosten von Informatikprojekten in der Vergangenheit immer wieder massiv aus dem Ruder gelaufen sind. Aus diesem Grund hat man nach anderen Vorgehensweisen gesucht, welche den Anforderungen von Informatikprojekten besser gerecht werden. Iteratives Modell‚Äã Beim iterativen Modell macht man aus der Not eine Tugend. Weil es eben nicht m√∂glich ist die vier Disziplinen nur einmal und in fester Reihenfolge zu durchlaufen, zerlegt man das Projekt in kleine Zyklen, welche dann wieder nach dem Wasserfall-Modell ablaufen. In jedem Zyklus wird ein kleiner Teil des angestrebten Programms realisiert. Es resultieren viele kleine &quot;Mini-Wasserf√§lle&quot;. Man kann das Modell auch als Spirale darstellen, bei welcher man sich rundherum durch die einzelnen Disziplinen bewegt, wobei der Umfang des realisierten Programms mit jedem Zyklus gr√∂sser wird. @ Der grosse Vorteil von diesem Vorgehen ist, dass man am Anfang jedes Zyklus auf ge√§nderte oder neue Kundenw√ºnsche eingehen kann. Zwar muss man auch hier dann und wann bereits bestehende Programmteile umbauen oder gar entfernen. Das ist aber nicht so schlimm, da es sich um viel kleinere Korrekturen handelt, als wenn man wieder von vorne beginnen m√ºsste. Zudem dauern solche Zyklen nur wenige Tage oder maximal ein paar Wochen. Das heisst das finanzielle Risiko ist auch kleiner. Ein weiterer Vorteil liegt darin, dass man dem Kunden ab dem ersten vollendeten Zyklus ein lauff√§higes Programm zeigen kann und der Kunde sich so besser vorstellen kann, was er erhalten wird. Er kann auch fr√ºhzeitig eingreifen, wenn das Resultat nicht seinen Vorstellungen entspricht.","keywords":""},{"title":"Referenzen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/referenzen","content":"Referenzen Aufgabe Dateiname EF-Informatik/exercises/referenzen.py Jetzt, wo wir Listen in Python kennen, m√ºssen wir unsere bisherige Vorstellung von Variablen √ºberdenken und anpassen. Lesen Sie die untenstehende Einf√ºhrung zum Thema Referenzen durch und f√ºhren Sie im Anschluss das Programm angeh√§ngte Programm referenzen.py im Debuuger von VS Code aus. F√ºhren Sie dann das Snippet refernzen.py im Debugger Ihres Visual Studio Code aus (falls Sie es noch nicht geklont haben, m√ºssen Sie das zuerst tun). Achten Sie auf die in der Konsole (unten) angezeigten Objekt-Ids und Datentypen. Daran k√∂nnen Sie erkennen, um welches Objekt es sich jeweils handelt und welchen Datentyp es hat. Auf der linken Seite sehen Sie die aktuellen Objektwerte in den Variablen a und b. Achten Sie besonders, was dort passiert, wenn die Zeile 30 ausgef√ºhrt wird. EF-Informatik/exercises/referenzen.py referenzen.py loading... See full example on GitHub Zum Schluss den Selbsttest ganz am Ende der Seite durchf√ºhren... Bisheriges Modell f√ºr Variablen‚Äã Bisher haben wir uns Variablen als Karteik√§rtchen vorgestellt, auf welchen sich der Computer einen bestimmten Wert (eine Zahl, ein Text, etc.) merkt. Das K√§rtchen tr√§gt einen Namen. Unter diesem Namen kann die Information zu einem sp√§teren Zeitpunkt wieder hervorgeholt werden. Die Zuweisung a = 10 f√ºhrt dazu, dass eine K√§rtchen mit dem Namen a entsteht, auf welchem der Wert 10 notiert ist. a10 Wenn man der Variablen einen neuen Wert zuweist, so wird der notierte Wert √ºberschrieben und ersetzt. a = &quot;blah&quot; f√ºhrt zu: ablah Mit der Einf√ºhrung von Listen st√∂sst dieses Modell an seine Grenzen und wir brauchen ein besseres Modell. Etiketten statt Karteik√§rtchen - Referenzen und Objekte‚Äã In diesem Modell werden die Karteikarten durch Etiketten ersetzt, welche mit einer Schnur an beliebige Gegenst√§nde gebunden werden k√∂nnen. Solche Gegenst√§nde k√∂nnen alles sein, von einer einfachen Zahl, einem Text, bis zu einer langen Liste. Die Gegenst√§nde entsprechen also den Dingen, welche wir uns merken wollen, weil wir sie sp√§ter wieder brauchen. Man spricht jetzt nicht mehr von Werten, sondern von Objekten. Man kann sich Objekte auch als Beh√§lter vorstellen, welche die eigentlichen Werte enthalten. Damit man ein bestimmtes Objekt sp√§ter wieder findet, wird es mit einer Etikette versehen, auf welcher ein Name steht. Unter diesem kann sp√§ter das mit der Etikette verbundene Objekt wieder hervorgeholt werden. Man kann sich dass auch wie ein Eimer vorstellen, in welchem sich die Objekte befinden, mit denen ein Programm arbeitet. √úber den Rand des Eimers h√§ngen Schn√ºre, an welchen K√§rtchen befestigt sind. Auf jedem K√§rtchen steht ein Name, welcher dazu dient, die verschiedenen Schn√ºre zu unterscheiden. Wenn man an einer Schnur zieht, so kommt das damit verbundene Objekt hervor. Man kann nun das Objekt ver√§ndern, oder dieses gar durch ein anderes Objekt ersetzen. Referenzen@ Eine Variable ist im neuen Modell also nichts anderes, als eine Etikette, welche mit einer Schnur an ein bestimmtes Objekt gebunden ist. Die Schnur wir als Referenz bezeichnet. Der Eimer aus obigem Vergleich entspricht dann dem Speicher des Computers. In Python‚Äã Die Zuweisung a = 10 kann im neuen Modell also so dargestellt werden: Das rechteckige K√§stchen mit dem Namen a ist die Variable oder Etikette. Der Pfeil ist die Referenz oder Schnur und das runde K√§stchen ist das Objekt mit dem Wert 10. Diese Modell hat entscheidende Konsequenzen, welche wir uns im folgenden anschauen wollen. Zuweisung von Variable zu Variable‚Äã Weist man eine Variable einer anderen zu, so l√§uft dies darauf hinaus, dass Etiketten mit anderen Objekten verbunden werden. Die Zuweisung b = a f√ºhrt im neuen Modell dazu, dass die beiden Variablen a und b jetzt beide auf das Objekt mit dem Wert 10 zeigen. Erst, wenn man einer Variablen einen anderen Wert zuweist, so zeigen beide Variablen auf verschiedene Objekte. b = 11 f√ºhrt zu: Listen sind Objekte‚Äã Eine Liste ist ein Objekt, welches nicht nur einen Wert enthalten kann, sondern viele. Man kann sich eine Liste als Kette von Elementen denken. Dabei enth√§lt jedes Element eine Referenz auf das unmittelbar nachfolgende Element und zus√§tzlich eine Referenz auf den in diesem Element gespeicherten Wert. Der Wert selber ist dann nat√ºrlich wieder in einem Objekt gekapselt. Die Elemente sind also gleichzeitig so etwas, wie Objekte und Variable. Das Resultat der Zuweisung a = [1, 2, 3] kann in unserem neuen Modell folglich so gezeichnet werden: Wird die Variable a einer Variablen b zugewiesen b = a f√ºhrt diese zu folgender Situation Wenn wir in einem Programm a[1] schreiben, so wird √ºber das K√§rtchen mit dem Namen a auf das erste Element der Liste zugegriffen und von aus auf der Kette der Element entlang, bis das Element mit dem Index 1 erreicht ist. Von da wird auf das dem Elment angeh√§ngte Objekt zugegriffen. Im obigen Fall ist das die Zahl2. Interessant ist nun der Fall, wo ein einzelnes Element der Liste ver√§ndert wird: b[0] = b[0] + 1 Im Modell wird unmittelbar klar, dass es keine Rolle spielt, ob wir die Liste √ºber die Variable a oder b ansprechen. Es gibt nur die eine Liste. a[0] und b[0] beziehen sich auf ein und dasselbe Element. Aufgabe‚Äã Laden Sie zur Illustration das folgenden Snippet auf Ihren Computer und f√ºhren Sie es aus. Hintergrund‚Äã Das neue Modell f√ºr Variablen hat folgenden Hintergrund: Alle Daten, mit welchen ein Programm arbeitet, m√ºssen im RAM (Random Access Memory) des Computers gespeichert werden. Dies ist derjenige Speicher des Computer, der sehr schnell arbeitet, aber beim Ausschalten des Computers alle gespeicherten Daten verliert. Samsung RAM DDR5 Man kann sich das RAM alls riesige Tabelle mit einer Spalte vorstellen. Jede Zelle in der Tabelle umfasst 1 Byte (8 bit) und kann also ein Zahl von 0 bis 255 (=28=2^8=28 Zust√§nde) speichern. Die Zellen sind von 0 beginnend durchnummeriert. Die Nummer einer Zelle wird als deren Adresse bezeichnet. Wenn der Prozessor auf eine bestimmte Zelle zugreifen will, um dort eine Zahl zu lesen oder zu schreiben, so muss er diese Adresse kennen. Speicher@ Wenn in einem Programm eine Variable gebraucht wird, so l√§uft das darauf hinaus, dass das Programm auf eine Zelle mit einer bestimmten Adresse zugreift. Jede Variable hat also ihren festen Platz im RAM. Beim Start des Programms wird dieser Platz f√ºr alle globalen Variablen eines Programms dauerhaft festgelegt. Bei lokalen Variablen (Variablen in Funktionen und Funktionsparameter) wird der Platz unmittelbar nach dem Aufruf einer Funktion festgelegt. Damit wir nun in unseren Programmen nicht mit physischen Speicheradressen arbeiten m√ºssen, welche wir ja zum Zeitpunkt des Programmierens gar nicht kennen, verwendet man Variablennamen als Platzhalter. Speicherbedarf von Variablen‚Äã Je nachdem, welche Werte in einer Variablen gespeichert werden sollen braucht es mehr oder weniger Platz, sprich mehr oder weniger Speicherzellen. Zum Speichern einer Zahl mit Kommastellen (Datentyp float in Python) werden oft 64 bit (8 Byte) verwendet. In vielen Programmiersprachen werden auch f√ºr ganze Zahlen (Datentyp int) eine feste Anzahl Bytes verwendet (z.B. 4 Byte). Im Speicher k√∂nnte das dann so aussehen: Variablen@ Neben den Datentypen mit fester Anzahl Bytes gibt es aber auch Datentypen, deren Speicherbedarf variieren kann. Z.B. beansprucht ein Text (datentyp str f√ºr String) je nach Inhalt mehr oder weniger Bytes zu seiner Speicherung. Zus√§tzlich ist es in Python auch so, dass eine Variable im Verlaufe der Programmausf√ºhrung Werte von unterschiedlichen Datentypen speichern kann. Z.B. startet die Variable mit einer ganzen Zahl und wechselt dann sp√§ter zu einem Text. Das k√∂nnte dazu f√ºhren, dass am Ort der Variablen pl√∂tzlich mehr Speicher gebraucht wird. Was aber, wenn dort kein Speicher mehr frei ist, weil die Variablen dicht gepackt sind? Referenzen und Objekte‚Äã Um das obige Problem zu umgehen, verwendet Python ein indirektes Verfahren, um von einer Variable zu den gespeicherten Werten zu gelangen: Am Ort der Variablen ist nur eine Adresse gespeichert. Unter dieser Adresse findet man dann den eigentlichen Wert. Diese Adresse wird als Referenz bezeichnet. Der eigentliche Wert, kann nun beliebig gross sein. Sie werden in Python (und vielen anderen Programmiersprachen) als Objekt bezeichnet. Bei der Speicherung eines neuen Objektes sucht Python im Speicher nach einer Stelle, wo es genug Platz hat und tr√§gt dan bei der Variablen die Adresse des Objektes ein. Das sieht dann so aus: Speicherreferenzen@ Merke In Python werden alle Daten als Objekte gespeichert. Zur√ºck zu den Listen‚Äã Objekte k√∂nnen wiederum Referenzen auf andere Objekte enthalten. So werden beispielsweise Listen gebildet. Eine Liste besteht aus Elementobjekten, welche einerseits eine Referenz auf den an dieser Stelle in der Liste gespeicherte Wert (auch ein Objekt, siehe oben) enth√§lt und andererseits eine Referenz auf das unmittelbar nachfolgende Elementobjekt eth√§lt. Das sieht dann so aus: Eine Liste im Speicher@ Selbsttest‚Äã","keywords":""},{"title":"Umgang mit Fehlern","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/try-except","content":"Umgang mit Fehlern üëâ Voraussetzung: Kapitel Repetition#Fehler ???@ Was soll ein Programm tun, wenn er mit unpassenden Daten oder Eingaben konfrontiert wird? Normalerweise: Abst√ºrzen . Damit das Programm nicht abst√ºrzt, ist es unerl√§sslich, die Benutzerabfragen so gut es geht in die richtige Form umzuwandeln und dann auf Richtigkeit zu √ºberpr√ºfen! Dabei gibt es zwei Ans√§tze: Das Programm anweisen, die Ausf√ºhrung einer Sequenz zu versuchen. Die Eingabe bzgl. Randbedingungen untersuchen und √ºberpr√ºfen... Try Except‚Äã Es gibt in Python eine M√∂glichkeit dem Interpreter zu sagen: &quot;Es ist okay wenn hier ein Fehler auftaucht, wir erwarten das schon und haben eine Antwort darauf bereit&quot;. Dieses Konstrukt nennt sich ein Try-Except Block und kann folgendermassen aussehen: eingabe = input('Geben sie eine Zahl ein') try: eingabe = int(eingabe) except: print('das ist keine Zahl') Hier geschieht folgendes: Der code im try Segment wird normal der Reihe nach ausgef√ºhrt. Falls jetzt innerhalb dieses Segments ein Fehler generiert wird bricht das Programm nicht ab, sondern springt an den Anfang des except Segments und f√ºhrt dieses aus. Danach wird normal unter dem except weiter gemacht. Beispiel‚Äã Beispiel: Ein Produktcode eingeben... muss genau 9 Zeichen enthalten die ersten 4 Zeichen m√ºssen Zahlen sein und gr√∂sser 1000 sein Zeichen muss ein Buchstabe sein die letzten 4 Zeichen m√ºssen eine Hexadezimalzahl sein (starten mit '0x' und dann zwei Zeichen mit den aus 0-9 oder A-F). Beispiel: 1234A0xBC def transform_input(raw): try: zahl = int(raw[:4]) if zahl &lt; 1000: raise 'Zu kleine Zahl' kategorie = raw[4] hexa = int(raw[5:9], base=16) return [zahl, kategorie, hexa] except: return False eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') def transform_input(raw): raw = raw.upper().strip() if len(raw) != 9: print('Eingabe zu wenig lang!') return False if not raw[:4].isnumeric(): print('Die ersten 4 Ziffern m√ºssen Zahlen sein!') return False zahl = int(raw[:4]) if zahl &lt; 1000: print('Erste Ziffer muss gr√∂sser 0 sein!') return False kategorie = raw[4] if not kategorie.isalpha(): print('5. Zeichen muss ein Buchstabe sein!') return False raw_hexa = raw[-4:] if raw_hexa[:2] != '0X': print('Die letzten vier Zeichen m√ºssen mit 0x beginnen') return False for h in raw_hexa[-2:]: if h not in '0123456789ABCDEF': print('Die letzten zwei Zeichen m√ºssen Hexadezimalzahlen sein (0-9, A-F)') return False hexa = int(raw_hexa, base=16) return [zahl, kategorie, hexa] eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') Obigen Code analysieren? Welche Variante ist praktischer f√ºr die Programmierer:in? Welche Variante ist praktischer f√ºr die Benutzer:in? Was w√§re ein vern√ºnftiger Mittelweg? Copy-Pasten Sie sich eine vern√ºnftige Variante zusammen! io.py def transform_input(raw): ... eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') Fazit‚Äã Benutzereingaben sind m√ºhsam... Finding Es gibt keine klaren Regeln, welche Variante im Umgang mit Fehlern besser ist - entweder vorbeugen durch Sicherheitsabfragen oder Fehlerbehandlung mit try-except. Die Wahl ist oft auch einfach durch die Philosophie des Programmierers bedingt. Um die Lesbarkeit und Wartbarkeit des Programms zu verbessern, k√∂nnen Gewisse Richtlinien befolgt werden: Wenn der Fehler durch eine einfache if-Abfrage umgangen werden kann, ist dies meist die bessere L√∂sung. Wenn die n√∂tige(n) if Abfrage(n) um dem Fehler vorzubeugen, sehr lange und un√ºbersichtlich w√§re, kann ein try-except Block die bessere Wahl sein. Ein try Block sollte maximal ein par Zeilen beinhalten. Die Idee ist also nicht, ganze Funktionen in ein try packen! ... und es muss an jeden Edge-Case gedacht werden... @ @ Aufgabe √úberpr√ºfen Sie im NumTrip Spiel die Benutzereingaben, so dass auch bei fehlerhaften Eingaben das Programm nicht abst√ºrzt.","keywords":""},{"title":"√úbungsprobe","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/uebungsprobe","content":"√úbungsprobe [Schriftlich] Ein Programm soll Quadrate erzeugen, wobei die Breite und die H√∂he variabel konfigurierbar sein soll. Erstellen Sie einen Top-Down Entwurf des Problems. SSR Verschiedene Konfigurationen der Ausgabe. 0 x 0 :::: :::: 1 x 1 ::=:: || || ::=:: 5 x 3 ::=====:: || || || || ::=====:: [Schriftlich] Geben Sie jeweils die Ausgabe an: a.) def f1(): x = 15 print(x) x = 12 f1() SSR b.) x = 12 def f1(a): print(x + a) x = 20 f1(2) SSR c.) x = 5 def f1(): global x x = 4 def f2(a, b): return a + b + x f1() total = f2(1, 2) print(total) SSR d.) def f1(list_in): list_in.append(9) return id(list_in) nums = [1, 2, 3] if id(nums) == f1(nums): print('Jabba') else: print('Bazinga') print(nums) SSR e.) def f1(list_in): list_in = [] nums = [1, 2, 3] f1(nums) nums.pop(0) print(nums) SSR [Schriftlich] Erkl√§ren Sie in eigenen Worten, wie in Python eine Liste abgespeichert wird. Gehen Sie auch darauf ein, wie das Hinzuf√ºgen oder Entfernen von Listen-Elementen funktioniert. Material üëâ Download [Praktisch]: Schreiben Sie das entsprechende Programm namens square.py zu dem in (1) erzeugten Top-Down Entwurfs. Keine Benutzerinteraktion Eine Benutzerinteraktion mit Validierung der Eingaben ist nicht gefragt. 0 x 0 :::: :::: 1 x 1 ::=:: || || ::=:: 5 x 3 ::=====:: || || || || || || ::=====:: SSR Code Umschreiben Das Programm zahlen_raten.py ist in sog. Spaghetti-Code geschrieben - es werden √ºberall globale Variablen gebraucht. a. Was macht das Programm? b. Bauen Sie den Code so um, dass statt der globalen Variablen Funktionsparameter und R√ºckgabewerte verwendet werden, ohne dabei die Funktionalit√§t des Programms zu ver√§ndern. SSR","keywords":""},{"title":"Listen Erzeugen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/Listcomprehension","content":"Listen Erzeugen Aufgabe Oft w√ºnscht man Listen, welche schon mit bestimmten Werten abgef√ºllt sind, man sagt initialisiert sind. Unten sehen Sie ein paar hilfreiche Beispiele. F√ºhren Sie diese aus und bearbeiten Sie die Aufgabe. Markieren Sie anschliessend diese Aufgabe als erledigt. Hier sehen Sie, wie man auf einfache Art und Weise eine Liste erzeugen und gleich mit bestimmten Werten f√ºllen kann, man sagt intialisieren. Der Teil zwischen den [] wird als Listen-Abstraktion (englisch list comprehension) bezeichnet. Listen mit range erzeugen‚Äã Definition Mit dem von Schleifen bekannten range Befehl k√∂nnen auch Listen erzeugt werden. range(max_zahl) erzeugt einen Bereich von 0 bis (ohne mit!) max_zahl z.B. range(5) =&gt; 0, 1, 2, 3, 4 range(start, m) erzeugt einen Bereich von start bis (ohne mit!) m z.B. range(3, 7) =&gt; 3, 4, 5, 6 range(s, m, schritt) erzeugt einen Bereich von s bis (ohne mit!) m mit der gegebenen Schrittweite schritt z.B. range(3, 13, 4) =&gt; 3, 7, 11 Um aus einem Bereich (sog. Iterator) eine Liste zu erzeugen, muss der Bereich mit dem Befehl list() in eine Liste umgewandelt werden: one2ten = list(range(1, 11)) print('1 bis 10:', one2ten) odd_numbers = list(range(1, 20, 2)) print('Ungerade Zahlen:', odd_numbers) ten2zero = list(range(10, -1, -1)) print('Von Zehn r√ºckw√§rts:', ten2zero) Listen mit List Comprehension erzeugen‚Äã Definition Liste mit 1 initialisieren‚Äã Liste mit 10 Elementen. Alle enthalten den Wert 1. # Wert 1 in Liste setzen # \\ ...f√ºr alle Zahlen im Bereich 0 bis 10 # \\ / ones = [1 for i in range(10)] print(ones) Definition Zahlen von 0 bis 9‚Äã Liste mit den Zahlen 0 bis 9 initialisieren: # Aktuellen Wert des Schleifenz√§hlers i setzen # \\ ...f√ºr alle Zahlen im Bereich 0 bis 10 # \\ / zahlen = [i for i in range(10)] print(zahlen) Definition Gerade Zahlen‚Äã Liste mit 10 geraden Zahlen, beginnend bei 0. gerade_zahlen = [2*i for i in range(10)] print(gerade_zahlen) Aufgabe Initialisieren Sie mit List Comprehension eine Liste mit den ersten zehn Quadratzahlen ersten zehn Zweierpotenzen die Zweierpotenzen von 21002^{100}2100 bis 21102^{110}2110 die nat√ºrlichen Zahlen r√ºckw√§rts von 20 bis und mit 10 squares = [] # initialisierung anpassen! power2 = [] power2_100 = [] twenty2ten = [] print(squares) print(power2) print(power2_100) print(twenty2ten) SSR Definition 5x10-Matrix‚Äã 5x10-Matrix von lauter 0 (5 Zeilen, 10 Spalten) _print = print def print(mat): if type(mat).__name__ != 'list' or len(mat) &lt; 1 or type(mat[0]).__name__ != 'list': return _print(mat) max_val = max([max(z) for z in mat]) pad_sz = len(str(max_val)) _print('['); [_print(f' [{&quot;, &quot;.join(list(map(lambda v: str(v).rjust(pad_sz, &quot; &quot;), z)))}],') for z in mat]; _print(']') ### PRE zeros_5x10 = [ [0 for j in range(10)] for i in range(5) ] print(zeros_5x10) Definition 5x10-Matrix, Durchnummeriert‚Äã Elemente haben aufsteigende Werte, beginnend bei 0. Der _print = print def print(mat): if type(mat).__name__ != 'list' or len(mat) &lt; 1 or type(mat[0]).__name__ != 'list': return _print(mat) max_val = max([max(z) for z in mat]) pad_sz = len(str(max_val)) _print('['); [_print(f' [{&quot;, &quot;.join(list(map(lambda v: str(v).rjust(pad_sz, &quot; &quot;), z)))}],') for z in mat]; _print(']') ### PRE matrix = [ [i * 10 + j for j in range(10)] for i in range(5) ] print(matrix) ","keywords":""},{"title":"Python Repetition","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition","content":"Python Repetition Auftrag: Blogbeitrag &quot;Wiedereinstieg in Python&quot; Dateiname EF-Informatik/blog/2022-08-26-wiedereinstieg-python.md Arbeiten Sie sich durch die verschiedenen Kapitel zur Repetition von Python. Notieren Sie sich dabei stichwortartig die wichtigen Dinge inkl. Codeausschnitte. Dazu geh√∂ren bspw. auch Fehlerbilder oder wichtige Aha-Momente. Verfassen Sie anschliessend in den letzten 15 Minuten des Unterrichts einen kleinen Blogbeitrag mit dem Titel &quot;Wiedereinstieg in Python&quot; in einem neuen Ordner blog/2022-08-26-wiedereinstieg-python.md, wo Sie Ihre Erfahrungen aus dieser Lektion festhalten und beschreiben. Der Blogbeitrag darf durchaus lustig und am√ºsant zu lesen sein und daher also auch witzige, offensichtliche oder unkonventionelle Fehler aufnehmen. Sie k√∂nnen dabei selber entscheiden, ob Sie auf deutsch oder englisch schreiben. Vergessen Sie nicht, die √Ñnderungen zu Commiten und zu Pushen.","keywords":""},{"title":"Techniken im Software Engineering","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Software-Engineering/Techniken","content":"Techniken im Software Engineering Es gibt einige Techniken bei der Entwicklung von Software, welche sich immer wieder bew√§hrt haben. Ein paar davon sollen hier vorgestellt werden. Teile und herrsche - Reduktion der Komplexit√§t‚Äã Teile und herrsche ist eine Technik, welche wahrscheinlich schon im r√∂mischen Reich praktiziert wurde. Auch Niccol√≤ Machiavelli hat sie 1532 beschrieben. Es geht dabei um folgendes: Um eine Gruppe von Menschen zu beherrschen, ist es hilfreich diese zuvor zu entzweien, damit anschliessend jede Teilgruppe leichter beherrscht werden kann. In der Softwareentwicklung wollen wir nicht Menschen beherrschen, sondern Probleme l√∂sen. Wenn nun ein Problem zu gross, oder zu komplex ist, dass man es direkt l√∂sen kann, so sucht man nach einer Aufteilung in Teilprobleme, welche leichter zu l√∂sen sind. Anschliessend l√∂st man die Teilprobleme und f√ºgt schliesslich die Teill√∂sungen zu einer Gesamtl√∂sung zusammen. Dies kann man √ºber mehrere Stufen hinweg machen, bis die Teilprobleme gen√ºgend klein sind. Teile und herrsche ist ein so fundamentales Prinzip, dass man es √ºberall in der Informatik antrifft. Im Bereich der Algorithmen bedeutet Teile und herrsche in der Regel, dass man den Umfang des grossen Problems reduziert, die Problemstellung aber die selbe bleibt. Beispiel: Sortieren einer grossen Menge von Daten. Die Menge wird in Teilmengen aufgeteilt, welche je f√ºr sich sortiert werden. Das Problem &quot;sortieren&quot; bleibt das selbe, aber der Umfang hat abgenommen. Im Bereich des Softwareengineerings sind die Teilprobleme in der Regel unterschiedlicher Art. In der prozeduralen Programmierung sucht man nach einer Aufteilung des Programms (grosses Problem) in viele kleinere Funktionen (kleine Probleme). Eine solche Aufteilung wird auch als funktionale Dekomposition bezeichnet. Mehr dazu im Abschnitt Top-down und Bottom-up @ Top-down und Bottom-up‚Äã Hier geht es nun konkret um die Frage, wie man ein Programm (grosses Problem) in einzelne Funktionen (kleinere Probleme) aufteilt, also das Prinzip des Teile und herrsche anwendet. Wie die √úberschrift schon sagt, kann man dabei auf zwei Weisen vorgehen: Man beginnt zuoberst (top) mit dem grossen Problem (das gew√ºnschte Programm) und teilt diese in kleinere Teilprobleme auf. Jedes Teilproblem wird f√ºr sich betrachtet und allenfalls in noch kleinere Teilprobleme aufgeteilt, bis diese so klein sind, dass man zu ihrer L√∂sung eine einfache Funktion programmieren kann. Auf diese Weise entsteht zun√§chst ein Entwurf (englisch Design) f√ºr unser Programm. Jetzt kann man wieder zu den gr√∂sseren Problemen zur√ºckkehren und diese l√∂sen, indem man eine Funktion schreibt, welche die Funktionen zu den kleineren Problemen nutzt. Man beginnt zuunterst (bottom) und schreibt direkt Funktionen zur L√∂sung von einfachen Teilproblemen. Diese werden nach und nach in √ºbergeordneten Funktionen integriert, bis eine L√∂sung f√ºr das grosse Problem entstanden ist. Die Gefahr bei diesem Ansatz ist allerdings, dass man eine ung√ºnstige Aufteilung in Teilprobleme erh√§lt. Meist w√§hlt man eine Kombination von beiden Ans√§tzen. Am Anfang schaut man sich bestimmte Teilprobleme bottom-up an und gewinnt dabei erste Erfahrungen und Kenntnisse √ºber einzelne Aspekte des grossen Problems. Dann geht man zu top-down √ºber und entwirft eine m√∂glichst optimale Aufteilung des grossen Problems. Manchmal merkt man aber auch erst beim Programmieren einer Funktion, dass diese nochmals in Teilfunktionen aufgeteilt werden sollte, z.B. wenn gewisse Programmteile mehrfach vorkommen, oder eine Funktion zu kompliziert wird. Software Engineering √úberpr√ºfen Sie Ihr Verst√§ndnis durch das L√∂sen der folgenden Aufgabe. Markieren Sie die Aufgabe anschliessend als erledigt.","keywords":""},{"title":"Hangman","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Software-Engineering/Hangman","content":"Hangman Bottom-up Funktionen‚Äã Funktionen‚Äã def show(): pass def is_valid(inp): return True def eingabe(): pass def auswerten(valid_inp): pass def gewonnen(): return False def game_over(): pass def play(): pass Funktionsk√∂rper‚Äã for buchstabe in gesucht: if buchstabe not in gefunden: return False return True if valid_inp in gesucht: gefunden.append(valid_inp) else: falsch_geraten.append(valid_inp) buchstabe = input('Buchstabe? ') while not is_valid(buchstabe): buchstabe = input('Buchstabe? ') return buchstabe.lower() print('Falsche Buchstaben:', falsch_geraten) for buchstabe in gesucht: if buchstabe in gefunden: print(buchstabe, end=' ') else: print('_', end=' ') print('') Variablen‚Äã # Variablen gesucht = 'test' gefunden = [] falsch_geraten = [] Hangman Dateiname EF-Informatik/exercises/hangman.py Ordnen Sie die vorhandenen Funktionsk√∂rper den richtigen Funktionsdefinitionen zu und f√ºgen Sie die Variablen ganz oben im Skript ein. Wo werden die verschiedenen Variablen verwendet? Was wird darin gespeichert? Kommentieren Sie die Funktionen. Was machen Sie? Bei Eingaben: Was f√ºr Parameter werden erwartet? Bei R√ºckgabewerten: Was wird zur√ºckgegeben Machen Sie einen ersten Commit Implementieren Sie die Funktion play gem√§ss dem Top-down Entwurf Implementieren Sie die Funktion game_over. Die Funktion gibt True zur√ºck, falls mehr als 10 mal falsch geraten wurde oder falls das Spiel gewonnen wurde. Das Spiel funktioniert ü•≥ Doch was soll passieren, wenn mehr als ein Buchstabe oder eine Zahl eingegeben wird? Setzen Sie diese Richtlinien in der Funktionen is_valid um. Folgender Link k√∂nnte hilfreich sein üëâ https://docs.python.org/3/library/stdtypes.html#str.isalpha Commit &amp; Push ‚≠ê Generieren Sie zuf√§llige W√∂rter: üëâ Zuf√§llige W√∂rter ‚≠ê Zeigen Sie ASCII-Bilder f√ºr den Spielstand an: üëâ ASCII-Bilder Markieren Sie die Aufgabe als erledigt. SSR SSR SSR Erneut Spielen Sobald man verloren hat, soll man gefragt werden, ob man erneut spielen m√∂chte. Weiterspielen 1) Neues Wort setzen (siehe Kapitel Zuf√§llige W√∂rter generieren) 2) Spielst√§nde zur√ºcksetzen 3) Wieder spielen Programm beenden mit dem Befehl exit() das ganze Programm sofort beenden ‚≠ê Zuf√§llige W√∂rter generieren‚Äã Um zuf√§llige, deutsche W√∂rter zu generieren, kann man die Bibliothek zufallsworte installieren, indem im Python-Terminal von VS Code folgender Befehl eingegeben wird: pip3 install zufallsworte Anschliessend kann wie folgt ein zuf√§lliges Wort abgefragt werden: import zufallsworte as zufall wort = zufall.zufallswoerter(1)[0] # gibt ein Zufallswort zur√ºck ‚≠ê Hangman ASCII-Bilder‚Äã HANGMANS_RAW = ''' 18 Zeichen ergeben ein Bild... __________ __________ __________ __________ __________ __________ __________ __________ __________ | | |/ |/ | |/ | |/ | |/ | |/ | |/ | |/ | | | | | | O | O | O | O | O | O | | | | | | | | -| | -| | -|- | -|- | | | | | | | | \\ | \\ | / \\ | | | | | | | | | | GAME OVER _________ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ '''.split('\\n')[1:-1] # ohne erste und letzte Zeile # enth√§lt 11 ASCII-Bilder, f√ºr jeden Spiel-Zustand einen HANGMANS = ['\\n'.join([line[i : i + 18] for line in HANGMANS_RAW]) for i in range(0, 11 * 18, 18)] def get_hangman(nr): ''' nr: int values from 0 to 10 ''' return HANGMANS[nr] print(get_hangman(6)) ","keywords":""},{"title":"Zweidimensionale Listen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/Listen-2D","content":"Zweidimensionale Listen Zweidimensionale Liste@ Eine Liste, welche einfach eine Reihe von Zahlen oder Texten enth√§lt, ist eine eindimensionale Liste. Aus der Mathematik kennen wir auch Matrizen, oder Tabellen. Diese bestehen aus Zeilen und Spalten, haben also zwei Dimensionen. Das kann man in Python auch machen. Man muss dazu f√ºr jede Zeile eine Liste erzeugen und dann diese Listen als Elemente in einer weiteren Liste speichern. So entsteht eine Liste von Listen. # Eine Liste [ [1, 2, 3], # Zeile [4, 5, 6], # Zeile [7, 8, 9], # Zeile ] # oder √§quivalent in einer Zeile dargestellt [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Man kann in Python auch zwei- oder gar n-dimensionale Listen haben. F√ºr Python ist das nichts anderes, als eine Liste, deren Elemente wiederum Listen sind. F√ºr jede zus√§tzlich Dimension wird eine weitere Verschachtelungsstufe hinzugef√ºgt. Bei zwei Dimensionen kann man auf diese Weise in Python Matrizen, bzw. Tabellen mit mehreren Zeilen und Spalten darstellen. Definition 3 x 3 Matrix‚Äã Eine Matrix ist eine Liste von Listen matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(matrix) Definition Zugriff [][]‚Äã Auf einzelne Element in der Matrix zugreifen # kann auch auf einer Zeile geschrieben werden: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # 1. Zeile √§ndern - zugewiesener Wert muss eine Liste sein matrix[0] = [11, 12, 13] # 3. Wert in 2. Zeile ver√§ndern matrix[1][2] = 0 # Werte ausgeben print('Matrix:', matrix) print('Erste Zeile:', matrix[0]) print('Zeile 2, Spalte 3:', matrix[1][2]) print('Zeile 3, Spalte 1:', matrix[2][0]) Definition Schleife √ºber Zeilen‚Äã Schleife √ºber einzelne Zeilen Zeilen sind wieder Listen matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for zeile in matrix: print(zeile) pprint() Schreiben Sie eine Funktion pprint (Abk√ºrzung f√ºr Pretty Print), welche eine 2D-Liste √ºbersichtlich ausgibt: pprint([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Ausgabe bspw. # [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9], # ] pprint.py def pprint(mat2d): print(mat2d) pprint([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) pprint([[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]]) √úber Funktionen... Funktionen werden in Python mit dem Schl√ºsselwort def definiert. def pretty_print(matrix2d): # \\__________/ \\_______/ # Fkt. Name Parameter # die Parameter k√∂nnen im Funktionsk√∂rper (der einger√ºckte Teil) verwendet werden print(matrix2d) SSR Definition Durch alle Elemente Iterieren‚Äã Dazu wird eine verschachtelte Schleife √ºber Zeilen und Spalten verwendet. matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for zeile in matrix: for zahl in zeile: print(zahl) Oder man greift √ºber die Zeilen- (i) und Spaltenindices (j) auf die Elemente zu: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in range(3): for j in range(3): print(f'[i: {i}, j: {j}] =', matrix[i][j]) Aufgabe Obiges Beispiel funktioniert nur f√ºr eine 3x3 Matrix. √Ñndern Sie das Programm so ab, dass es f√ºr beliebige zweidimensionale Listen funktioniert. Probieren Sie Ihre L√∂sung, indem Sie die unterschiedlichen matrix Variablen einkommentieren... matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [9, 9, 9], [1, 8, 7]] # matrix = [[1, 2, 3, 4, 5],[4, 5, 6, 5, 4], [7, 8, 9, 9, 9], [9, 9, 9, 8, 7]] # matrix = [[1, 2], [4, 5], [6, 7], [8, 9], [10, 11]] for i in range(3): for j in range(3): print(f'[i: {i}, j: {j}] =', matrix[i][j]) Hinweis Die L√§nge einer Liste kann mit len abgefragt werden: print(len([2, 3, 5])) SSR 2D-Liste erstellen create_from.py‚Äã √Ñndern Sie den untenstehenden Code so ab, dass die Variabe matrix eine Matrix mit der gegebenen Anzahl Zeilen- und Spalten sowie √ºberall den Zellenwerten ZAHL enth√§lt. Schreiben Sie das Programm so, dass es auch bei ge√§nderten ZEILEN. SPALTEN und ZAHLen Werten funktioniert. create_from.py ZEILEN = 3 SPALTEN = 4 ZAHL = 1 matrix = [] print(matrix) # =&gt; [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]] Hinweis Es braucht eine doppelte Schleife, wobei in der ersten Schleife eine leere Zeilen-Liste erzeugt wird, welche dann in der zweiten (verschachtelten) Schleife mit den Zahlen gef√ºllt wird. üëâ Elemente zu einer Liste hinzuf√ºgen SSR SSR diag.py‚Äã Erstellen Sie ein Programm, welches eine SIZE x SIZE-Matrix, die in der Diagonalen von Oben-Links nach Unten-Rechts 1en enth√§lt und sonst mit 0en gef√ºllt ist. Probieren Sie Ihr Programm auch mit anderen Werten f√ºr SIZE aus. SIZE = 4 matrix = [] # =&gt; [ # [1, 0, 0, 0], # [0, 1, 0, 0], # [0, 0, 1, 0], # [0, 0, 0, 1], # ] diag.py SIZE = 4 matrix = [] print(matrix) SSR Was ist denn hier los? Dateiname EF-Informatik/docs/python/referenzen.md a = [1, 2, 3] b = a b[1] = 5 print('Liste a: ', a) print('Liste b: ', b) Wie erkl√§ren Sie sich dieses Verhalten? Lesen Sie den Abschnitt üëâ Assignment (=) in Python (The Copy Module in Python brauchen Sie nicht zu lesen). K√∂nnen Sie damit auch folgendes Ph√§nomen erkl√§ren? matrix = [] zeile = [0, 1, 0] for i in range(3): matrix.append(zeile) print(matrix) matrix[1][1] = 0 # nur den Wert in Zeile 1 in der Mitte auf 0 Setzen print(matrix) Fassen Sie obiges Verhalten nun in eigene Worte im Dokument EF-Informatik/docs/python/referenzen.md. H√§ufige Fehlerquellen Exotisches (und oft Grund f√ºr Fehler): Innere Listen sind unterschiedlich lang durch Anh√§ngen eines weiteren Elementes Anh√§ngen einer weiteren Zeile mit unterschiedlicher L√§nge ... Einf√ºgen eines String (oder irgend etwas anderes) in die √§ussere oder innere Liste matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] matrix[1].append(13) matrix.append([31]) matrix.insert(2, 'blabla') for zeile in matrix: print(zeile) ‚≠êÔ∏è Bilder als Listen darstellen‚Äã Bilder k√∂nnen im wesentlichen auch als 2- bzw 3-Dimensionale Listen betrachtet werden. Mit dem Paket üëâ pypng lassen sich einfach Bilder erzeugen. Paket installieren: In VS Code Terminal &gt; New Terminal Eintippen pip3 install pypng Fertig ü•≥ Folgender Code erzeugt nun ein kleines Smiley: import png # Paket png importieren smiley = [ [000, 000, 000, 000, 000, 000], [000, 255, 000, 000, 255, 000], [000, 000, 000, 000, 000, 000], [000, 255, 000, 000, 255, 000], [000, 000, 255, 255, 000, 000], [000, 000, 000, 000, 000, 000] ] # Erzeuge ein Graustufen-Bild (0=Schwarz, 255=Weiss) png.from_array(simley, 'L').save('small_smiley.png') Probieren Sie es aus! Graustufen-Bilder Dateiname EF-Informatik/exercises/mat-to-png.py Wie Sie bemerken, ist das entstandene Bild nur 6x6 Pixel gross - es muss entsprechend stark gezoomt werden, um das Smiley zu identifizieren. Erweitern Sie das Programm so, dass Sie mit einem Zoom-Faktor angeben k√∂nnen, auf wie viele Pixel ein Wert verteilt werden soll. ______ ______ Zoom | | | ‚ñ¢‚ñ¢ --------&gt; | | | | | | ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ ","keywords":""},{"title":"Listen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/Listen-1D","content":"Listen Zum Speichern von mehreren Werten unter einem einzigen Namen verwendet man in Python Listen. Man kann sich Listen als Tabellen mit einer Spalte vorstellen. Die Zellen in der Tabelle werden als Elemente bezeichnet und sind durchnummeriert. So kann man einzelne in der Liste gespeichert Werte unterscheiden. Die Nummer eines Elements wird als dessen Index bezeichnet. Wichtig Das erste Element in der Liste tr√§gt den Index 0. Der Index des letzten Elementes ist die L√§nge der Liste minus 1. Das folgende Bild illustriert dies f√ºr eine Liste mit 4 Noten. Die L√§nge der Liste ist 4, das letzte Element tr√§gt den Index 3. Index Wert 0 4.5 1 5 2 3.5 3 5.5 In Python kann man diese Liste wie folgt erzeugen: noten = [4.5, 5, 3.5, 5.5] print('Die vierte Note war eine', noten[3]) Im Beispiel wird die vierte Note mit dem Index 3 ausgegeben. Aufgaben‚Äã 1. listen-1d.py Dateiname EF-Informatik/exercises/listen-1d.py Erstellen Sie das folgende Programm in Ihrem Repository Programm listen-1d.py loading... See full example on GitHub F√ºhren Sie das Programm Zeile f√ºr Zeile aus und untersuchen Sie die verschiedenen Listen-Optionen. Welche Fehlermeldung erscheint beim Szenario 6? commit &amp; push... 2. Was steht geschrieben? Dateiname EF-Informatik/exercises/listen-word-riddle.py Gegeben ist ein ALPHABET und eine Nachricht MESSAGE. In der Nachricht sind die Indices der zugeh√∂rigen Buchstaben gespeichert. Schreiben Sie ein Programm, welches die Nachricht decodiert und in Buchstabenform darstellt. ALPHABET = [' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] MESSAGE = [12, 9, 19, 20, 0, 18, 9, 4, 4, 12, 5] Hinweis 3. Meine Nummer 1 Dateiname EF-Informatik/exercises/listen-word-riddle2.py Nun wurde eine weitere Zuordnungsstufe hinzugef√ºgt üòÆ. In der MESSAGE steht, an welcher Stelle im MAPPING der Index steht, an welchem der gesuchte Buchstabe zu finden ist. Finden Sie die Nachricht? ALPHABET = [' ', '_', '.', ':', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] MAPPING = [54, 58, 53, 4, 8, 60, 45, 60, 12, 41, 13, 47, 60, 4, 44, 56, 62, 4, 58, 47, 41, 60, 55, 3, 9, 45, 60, 10, 19, 2, 54, 62, 48, 54, 56, 18, 41, 53, 44, 4, 58, 43, 1, 50, 54, 13, 2, 2, 49, 6, 1, 59, 14, 58, 16, 4] MESSAGE = [32, 5, 7, 15, 51, 23, 3, 13, 48, 2, 11, 29, 14, 6, 16, 1, 9, 0, 12, 46, 41, 22, 37, 17, 38, 25, 31, 18, 20, 30, 21, 39, 40, 36, 33, 26, 55, 53, 42, 49, 8, 52, 10, 27, 4, 24, 50, 44, 54, 28, 45, 35, 47, 43, 34, 19] Hinweis print() Optionen Normalerweise f√ºgt die print-Funktion am Ende einer Ausgabe immer das Zeichen \\n an, was von der Konsole als Steuerzeichen f√ºr eine neue Zeile interpretiert wird. Das k√∂nnen Sie aber auch √§ndern, indem Sie explizit vorgeben, welche Zeichen am Ende hinzugef√ºgt werden: # Mit L√ºcke zwischen einzelnen prints for i in range(3): print(f'L√ºcke {i}', end=' ') # Ohne Zeichen zwischen einzelnen prints for i in range(3): print(f'Ohne {i}', end='') # Fancy: mit Rakete und neuer Zeile zwischen einzelnen prints for i in range(3): print(f'Hello {i}', end=' üöÄ\\n') 4. Primzahlen Dateiname EF-Informatik/exercises/primzahlen.py Schreiben Sie ein Programm welches eine Liste mit allen Primzahlen zwischen 1 und 100 erstellt und diese Liste am Schluss auf der Konsole ausgibt. Bevor Sie Programmieren: Diskutieren Sie Ihr Vorgehen mit einer Kolleg:in und besprechen Sie gemeinsam eine algorithmische L√∂sung f√ºr das Problem. Halten Sie stichwortartig fest, was Sie besprochen haben. Hinweis Um den Rest bei einer Division zu berechnen, kann der Modulo-Operator verwendet werden. Definition Modulo %‚Äã Um den ganzzahligen Rest bei der Division von zwei ganzen Zahlen zu bestimmen, wird der Modulo-Operator verwendet. Biespiel: Was ist der ganzzahlige Rest von 7/57 / 57/5? print(7 % 5) SSR SSR SSR Eindimensionale Listen‚Äã Hier nochmals in der √úbersicht die Funktionsweise von Listen in Python. Definition Liste erzeugen []‚Äã # Liste erzeugen und Variablen zuweisen noten = [3.5, 6, 5, 4.5] # Ganze Liste anzeigen print(noten) # Element mit Index 2 aus der Liste anzeigen print(noten[2]) Definition Schleife √ºber alle Elemente der Liste‚Äã noten = [3.5, 6, 5, 4.5] for note in noten: print(note) Definition Schleife √ºber Listen-Indices‚Äã noten = [3.5, 6, 5, 4.5] # (beginnt bei 0 und endet mit 1 weniger als L√§nge der Liste) for index in range(0, len(noten)): print(index, &quot;:&quot;, noten[index]) Definition Listenelemente √§ndern‚Äã noten = [3.5, 6, 5, 4.5] # Element mit Index 3 neuen Wert zuweisen noten[3] = 5.5 print(noten) Definition Fehler: IndexError‚Äã noten = [3.5, 6, 5, 4.5] # die Liste ist nicht so lang noten[7] = 6 Definition Element hinzuf√ºgen append()‚Äã noten = [3.5, 6, 5, 4.5] # Element am Ende der Liste anh√§ngen noten.append(5) print(noten) Definition Element an bestimmter Stelle hinzuf√ºgen insert()‚Äã noten = [3.5, 6, 5, 4.5, 5] # vor dem Element mit Index 3 eine &quot;4&quot; einf√ºgen noten.insert(3, 4) print(noten) Definition Aufsteigend sortieren sort()‚Äã noten = [3.5, 6, 5, 4, 4.5, 5] noten.sort() print(noten) Definition Letztes Element entfernen pop()‚Äã Letztes Element entfernen und zur√ºckgeben. noten = [3.5, 4, 4.5, 5, 5, 6] last = noten.pop() print(last) print(noten) Definition Element bei Index entfernen pop(0)‚Äã vorderstes = noten.pop(0) print(vorderstes) print(noten) Definition Element aus der Liste entfernen remove()‚Äã noten = [3.5, 5, 4.5, 4, 5, 6] # 11) Erstes Element mit dem Wert 5 aus der Liste entfernen noten.remove(5) print(noten) Definition Mittelwert statistics.mean()‚Äã import statistics noten =[3.5, 5, 4.5, 4, 5, 6] mittelwert = statistics.mean(noten) print(mittelwert) Weitere Funktionen üëâ https://docs.python.org/3/library/statistics.html Definition Leere Liste []‚Äã # Leere Liste erstellen noten = [] print(noten) Definition Liste mit Text‚Äã # Liste mit Strings noten =['gut', 'erf√ºllt', 'mangelhaft', 'erf√ºllt'] print(noten) ","keywords":""},{"title":"1. Einf√ºhrung Python üë£","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/intro","content":"1. Einf√ºhrung Python üë£ Programmieren heisst, einer Maschine Befehle zu erteilen und sie damit zu steuern. Die erste solche Maschine, die Sie steuern, ist eine kleine Schildkr√∂te (bzw. ein kleines Dreieck) auf dem Bildschirm: Die Turtle. Was kann diese Turtle und was musst du wissen, um sie zu steuern? Turtlebefehle werden grunds√§tzlich Englisch geschrieben und enden immer mit einem Klammerpaar. Dieses enth√§lt weitere Angaben zum Befehl. Selbst wenn keine weiteren Angaben n√∂tig sind, muss ein leeres Klammerpaar vorhanden sein. Die Klein-/Grossschreibung muss exakt eingehalten werden. Die Turtle kann sich innerhalb ihres Fensters bewegen und dabei eine Spur zeichnen. Um die Turtle zu bewegen, verwenden wir die drei Befehle forward(distanz), left(winkel) und right(winkel). Programmierkonzepte: Quellprogramm editieren, Programm ausf√ºhren, Programmsequenz Das erste Programm‚Äã Das erste Python-Programm zeichnet ein Quadrat. Damit die Befehle zum zeichnen verwendet werden k√∂nnen, muss zuerst eine Datei mit den entsprechenden Befehlen (ein sogenanntes Modul) turtle geladen werden. Quadrat from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) from turtle import * Damit Python die Befehle zum zeichnen verwenden kann, m√ºssen diese zuerst aus einer Bibliothek importiert werden. Damit beim Importieren nicht jeder einzelne Befehl angegeben werden muss, wird das Zeichen * verwendet welches alle verf√ºgbaren Befehle importiert. Befehle: forward, left Alle Befehle in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. forward(90) \\_____/ \\ / Parameter (Bedeutung hier: 90 Schritte vorw√§rts) Befehlsname penup() \\___/ \\ / kein Parameter Befehlsname * werden mehrere Parameter √ºbergeben, dann werden diese mit Kommas abgetrennt, z.B. goto(20, 30) Aufgabe 1 Markieren Sie im untenstehenden Programm folgende Strukturmerkmale eines Algorithmus mit den vorgegebenen Farben: Unterprogramme Aufrufe eines Unterprogramms mit orange Parameter Verwendete Parameter mit gr√ºn SSR Aufgabe 2 √Ñndern Sie die Parameter im Programm QUADRAT.PY so ab, dass: das Quadrat doppelt so gross gezeichnet wird das Quadrat um 45¬∞ nach links gedreht gezeichnet wird quatrat.py from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) ‚≠êÔ∏è Zusatz:‚Äã Die Form der Turtle kann mit dem Befehl shape ver√§ndert werden. √Ñndern Sie auf Zeile 3 die Turtleform auf eine Schildkr√∂te durch Aufrufen des Befehls shape mit dem Parameter 'turtle'. M√∂gliche Parameter f√ºr den Befehl shape 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) SSR Farben‚Äã Die Stiftfarbe kann mit dem Befehl pencolor('red') auf rot gewechselt werden. Es gibt eine vordefinierte Farbpalette f√ºr die Stiftfarben. farben from turtle import * forward(30) right(90) pencolor('red') forward(30) right(90) pencolor('blue') forward(30) right(90) pencolor('green') forward(30) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white 'string' Beachten Sie die Anf√ºhrungszeichen rund um die Farb-Namen. Damit Python die Farben als Text (eng. string) erkennt und nicht pl√∂tzlich nach einem gleichnamigen Befehl sucht, werden rund um Texte immer Anf√ºhrungszeichen verwendet. Stiftbreite‚Äã Die Stiftbreite kann mit dem Befehl pensize(2) ver√§ndert werden. Standardm√§ssig ist die Stiftbreite 1 from turtle import * forward(20) pensize(5) forward(20) pensize(10) forward(20) pensize(15) forward(20) pensize(20) forward(20) Zahlen Beachten Sie, dass bei Zahlen keine Anf√ºhrungszeichen verwendet werden. Eine Verwechslungsgefahr mit anderen Befehlen besteht nicht, da in Python keine Befehle mit einer Zahl beginnen. Aufgabe 3: Zickzack Versuchen Sie, folgendes Zickzack-Muster mit einer Stiftdicke von 5 zu zeichnen. Die Streckenl√§nge und die Winkel d√ºrfen Sie sch√§tzen. zickzack.py from turtle import * ‚≠êÔ∏è Zusatz:‚Äã Machen Sie bei jedem Richtungswechsel einen Punkt: SSR Kommentare‚Äã In Python k√∂nnen Kommentare eingef√ºgt werden, die aber auf die Ausf√ºhrung des Programms keinen Einfluss haben. Kommentare sind eine wichtige Hilfe, um Programme (Algorithmen) besser zu verstehen, oder aber um zus√§tzliche Informationen, wie den Autor des Programms, festzuhalten. # Autor: B. Hofer # Datum: 5.09.2021 from turtle import * # importiere alle Befehle der Bibliothek &quot;turtle&quot; speed(1) # verlangsame die Turtle auf die langsamste Geschwindigkeit forward(100) # 100 Schritte vorw√§rts left(120) # drehe um 120 ¬∞ nach links speed(3) # zur√ºck auf Normalgeschwindigkeit forward(100) left(120) speed(10) # Schneller... forward(100) left(120) hideturtle() # verstecke die Turtle Aufgabe 4: Programm untersuchen Versuchen Sie nachzuvollziehen, welche Zeile was macht. F√ºgen Sie auf den ersten Zeilen den Autor und das Datum hinzu. F√ºgen Sie immer dann, wenn ein Unterprogramm zum ersten Mal verwendet wird, einen Kommentar hinzu, welcher beschreibt, was dieses Unterprogramm macht und, falls vorhanden, welchen Einfluss die Parameter haben. Stift-und-Punkte from turtle import * forward(40) left(90) penup() forward(40) dot(10) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) Aufgabe 5: W√ºrfel √Ñndern Sie das Programm so ab, dass die gew√ºrfelte Zahl 5 gezeichnet wird: W√ºrfel 5 Verstecken Sie auch die Turtle am Ende! W√ºrfel__5.py from turtle import * forward(40) left(90) penup() forward(40) dot(5) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) SSR Aufgaben‚Äã Aufgabe 6: Haus von Nikolaus Das &quot;Haus vom Nikolaus&quot; ist ein Zeichenspiel f√ºr Kinder. Ziel ist es, das besagte Haus in einem Linienzug aus genau acht Strecken zu zeichnen, ohne dabei eine Strecke zweimal zu durchlaufen. Zeichnen Sie das Haus vom Nikolaus. haus__nikolaus.py from turtle import * Hinweis: Diagonale Die L√§nge der Diagonale k√∂nnen Sie mithilfe von Pythagoras und einem Taschenrechner berechnen. Oder Sie verwenden den Trick, dass die Diagonale im Quadrat gerade 2\\sqrt 22‚Äã mal l√§nger ist als eine Seitenl√§nge - bei einer Seitenl√§nge von 100100100 w√§ren das also ca. 141141141. ‚≠êÔ∏è Zusatz:‚Äã Verwenden Sie f√ºr die Zeichnung Ihre Lieblingsfarbe und eine gr√∂ssere Stiftdicke. SSR Aufgabe 7: Treppe Zeichnen Sie eine Treppe mit f√ºnf Stufen, die eine Breite von 29 Pixeln und eine H√∂he von 17 Pixeln haben. treppe.py from turtle import * SSR","keywords":""},{"title":"6. Parameter ‚äï‚äñ","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/functions-params","content":"6. Parameter ‚äï‚äñ Ein weiteres Strukturelement eines Algorithmus sind Parameter. Die Verwendung von Parametern haben wir bereits in Aktion gesehen - im Struktogramm sind alle Parameter unterstrichen, in Python werden alle Parameter als Liste, abgetrennt mit Kommas, in den runden Klammern geschrieben. Zur Erinnerung Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Beispiel: Bei einem Online-Rezept kann der Parameter Anzahl Personen mit den Kn√∂pfen ‚äï und ‚äñ variiert werden - die Mengenangaben werden dann aktualisiert. Aufgabe Markieren Sie im folgenden Programm (links) wie folgt: Parameter unterstreichen Befehlsnamen gelb markieren from turtle import * goto(20, 30) for i in range(5): left(90) forward(17) right(90) forward(29) SSR Wie k√∂nnen Unterprogramme geschrieben werden, die Parameter akzeptieren? Untersuchen Sie die folgenden Unterprogramme (f√ºhren Sie diese aus!) und notieren Sie sich, was Sie feststellen. Unterprogramme mit Parametern hello.py def hallo(name): print('Hallo', name) hallo('Maria') hallo('Reto') hallo('Hans') rechnen.py def quotient(zahl1, zahl2): print(zahl1, ':', zahl2, '=', zahl1 / zahl2) quotient(2, 3) quotient(5, 9) quotient(12, 20 + 4) ‚≠êÔ∏è Was sind die Parameter bei quotient(12, 20 + 4)? In welcher Reihenfolge werden diese verrechnet? SSR Unterprogramme mit Parametern‚Äã Parameter sind also Werte, die an ein Unterprogramm √ºbergeben werden k√∂nnen. Damit der √ºbergebene Wert im Unterprogramm wiederverwendet werden kann, braucht jeder Parameter einen Namen. Der Wert ist dann √ºber diesen Namen abrufbar. Der Parametername ist frei w√§hlbar, sollte aber seine Bedeutung widerspiegeln. Beispiel: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) color('red') quadrat(50) # ein Quadrat mit der Gr√∂sse 50 zeichnen color('blue') quadrat(100) # ein Quadrat mit der Gr√∂sse 100 zeichnen Mehrere Parameter‚Äã Manchmal ist es praktisch (oder auch n√∂tig), mehrere Parameter an ein Unterprogramm zu √ºbergeben. Das haben wir etwa beim Befehl goto(x, y) bereits gesehen. Beim obigen Programm k√∂nnte etwa auch die Farbe direkt im Unterprogramm square gesetzt werden: from turtle import * def quadrat(size, farbe): color(farbe) for i in range(4): forward(size) left(90) quadrat(50, 'red') # ein rotes Quadrat mit der Gr√∂sse 50 zeichnen quadrat(100, 'blue') # ein blaues Quadrat mit der Gr√∂sse 100 zeichnen Es ist prinzipiell m√∂glich, beliebig viele Parameter nacheinander zu √ºbergeben. H√§ufige Fehler Ein h√§ufiger Fehler sind vergessene Kommas zwischen zwei Parameternamen. Dann entsteht ein SyntaxError. Parameternamen sechseck.py from turtle import * Definieren Sie das Unterprogramm sechseck(size) welches ein Sechseck mit der Gr√∂sse size zeichnet. Rufen Sie das Programm mit sechseck(20) auf. Erzeugen Sie nun 10 Sechsecke. Das kleinste Sechseck hat die Seitenl√§nge 10, das gr√∂sste die Seitenl√§ng 100. F√ºgen Sie der Funktion sechseck(size) den Parameter farbe hinzu und erzeugen Sie mit folgendes Bild: Farben: violet, indigo, blue, green, lime, lightgreen, yellow, orange, orangered, red ‚ùì In welcher Reihenfolge m√ºssen die Sechsecke gezeichnet werden, damit genau das obige Bild entsteht? Tipp: Die Stiftdicke k√∂nnen Sie mit pensize(10) auf 10 setzen. SSR Wiederholungen‚Äã Wiederholung: üîÅ Wiederholte Ausf√ºhrung Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt. from turtle import * for i in range(4): forward(50) left(90) Wozu steht eigentlich das i im for i in range(4)? Das ist fast wie ein Parameter: i enth√§lt die Anzahl bereits ausgef√ºhrter Wiederholungen. W√§hrend Wiederholung 1: i=0, keine Wiederholung abgeschlossen ist. W√§hrend Wiederholung 2: i=1, eine Wiederholung ist bereits abgeschlossen. W√§hrend Wiederholung 3: i=2, zwei Wiederholungen sind bereits abgeschlossen. W√§hrend Wiederholung 4: i=3, drei Wiederholungen sind bereits abgeschlossen. Der Wert, welcher in i steht, kann auch verwendet werden: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) for i in range(10): quadrat(i * 10 + 10) ‚≠êÔ∏è Zusatzparameter von range() Definition range(start, ende, schritt)‚Äã Der Befehl range kann mit bis zu drei Parametern arbeiten, wobei start der erste verwendete Wert, ende das obere ganzzahlige Limit angibt, welches aber selber nie erreicht wird! und schritt den Abstand zwischen zwei Zahlen angibt. for i in range(2, 11, 3): print(i) Im obigen Beispiel startet i bei 2 und wird solange um 3 erh√∂ht, bis die Zahl 11 erreicht oder √ºberschiesst. ! 11 wird nicht angenommen. Aufgabe Kopieren Sie die Definition eines Hauses aus der letzten √úbung in dieses Programm. Modifizieren Sie das Unterprogramm haus(size) so ab, dass nun die Gr√∂sse des Hauses spezifiziert werden kann. Die Wurzel einer Zahl kann mit sqrt(zahl) berechnet werden. Schreiben Sie ein Unterprogramm move(x, y), welches die Schritte Stift heben zur Position x, y gehen Stift senken zusammenfasst. Mit dem Befehl randint(min, max) aus der Bibliothek random kann eine zuf√§llige ganze Zahl erzeugt werden. Dabei muss der kleinst und der gr√∂sstm√∂gliche Wert angegeben werden. Mit move(randint(-20, 20), randint(-20, 20)) kann also die Turtle an eine beliebige Position verschoben werden. Zeichnen Sie 20 H√§user an zuf√§lligen Positionen mit der Gr√∂sse 30. Stadt W√§hlen Sie nun auch die Gr√∂sse zuf√§llig: haus(randint(10, 100)) Nun soll auch noch die Farbe zuf√§llig gew√§hlt werden. Der Befehl choice aus der Bibliothek random gibt jeweils ein zuf√§lliges Element einer Liste zur√ºck: choice([1, 3, 5, 7, 9]) etwa w√§hlt zuf√§llig eine ungerade Zahl zwischen 1 und 10 aus. Die Liste der Farben: ['violet', 'indigo', 'blue', 'green', 'lime', 'lightgreen', 'yellow', 'orange', 'orangered', 'red'] stadt.py from turtle import * from math import sqrt from random import randint, choice SSR ‚≠êÔ∏è Zusatz Zeichnen Sie folgende Quadrate. Auf wie viele Zeilen k√∂nnen Sie Ihr Programm k√ºrzen? quadrate.py from turtle import * SSR","keywords":""},{"title":"‚≠ê Rekursion","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/koch","content":"‚≠ê Rekursion Ein Unterprogramm kann sich selber aufrufen. Das ergibt im Normalfall eine unendliche Wiederholung, so dass das Programm abst√ºrzt. Wird das Unterprogramm jedoch jedesmal mit einem ver√§nderten Parameter aufgerufen, so kann eine Abbruchbedingung erstellt werden, welche angibt, ob das Unterprogramm erneut aufgerufen werden soll oder nicht. Beispiel‚Äã Im folgenden Programm wird ein einfacher bin√§rer Baum gezeichnet: from turtle import * left(90) def baum(gr√∂sse): forward(gr√∂sse) left(45) forward(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) forward(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(40) Diesen Baum k√∂nnen wir nun so umbauen, dass jeder Ast auch wieder ein bin√§rer Baum ist: from turtle import * left(90) def baum(gr√∂sse): if gr√∂sse &lt; 5: forward(gr√∂sse) else: forward(gr√∂sse) left(45) baum(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) baum(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(100) Bemerken Sie, dass eine Abbruchbedingung eingef√ºgt wurde - falls die gr√∂sse kleiner als 5 ist, wird nur eine Strecke gezeichnet, andernfalls ein ganzer Baum. Koch Kurve‚Äã Aufgabe Eine Koch-Kurve ist wie folgt aufgebaut: wobei ein einzelnes Element wie folgt aussieht: koch.py from turtle import * ‚≠êÔ∏è Zusatz: Zeichnen Sie ein Sechseck bestehend aus 6 Koch-Kurven. ‚≠êÔ∏è Pythagorasbaum‚Äã Versuchen Sie, einen rekursiven Pythagoras-Baum zu zeichnen. Ein Pythagorasbaum Pythagorasbaum pythagoras.py from turtle import * Weitere Inspirationen f√ºr Fraktale üëâ https://natureofcode.com/book/chapter-8-fractals/","keywords":""},{"title":"2. Zeichnungsfl√§che","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/screen","content":"2. Zeichnungsfl√§che Die Zeichenfl√§che kann konfiguriert werden, z.B. mit einer Hintergrundfarbe, oder aber auch die Dimensionen des Hintergrunds. Standarm√§ssig ist keine Hintergrundfarbe gesetzt (=durchsichtig) und die Dimensionen die Koordinaten des Bildschirms sind 500x500 Pixel. Das zugrundeliegende Koordinatensystem hat den Ursprung immer in der Mitte des Bildschirms. from turtle import * # wenn die Bildschirm-Dimensionen ver√§ndert werden sollen, muss dies # zwingend als erster Befehl gemacht werden. # Die Gr√∂sse kann anschliessend nicht mehr ver√§ndert werden. turtle.set_defaults(canvwidth=200, canvheight=100) # Die Hintergrundfarbe kann auch ge√§ndert werden. Screen().bgcolor('orange') forward(100) note Wird mit Screen().bgcolor('yellow') eine Hintergrundfarbe festgelegt, kann das umgebende Rechteck der Figur (englisch Bounding Box) nicht mehr bestimmt werden und es wird immer die ganze Bildfl√§che heruntergeladen.","keywords":""},{"title":"Strings","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Python/strings","content":"Strings Texte in Python k√∂nnen auf unterschiedliche Art und weise erzeugt werden. Definition 'text', &quot;text&quot;‚Äã ob einfache- ' oder doppelte &quot; Anf√ºhrungszeichen: Beides ist gleichbedeutend! Definition f'', f&quot;&quot; Formatierter Text‚Äã Formatierter Text kann mehrere Texte zusammenf√ºgen und dabei auch Zahlen oder Listen einf√ºgen. Inhalt in geschweiften Klammern wird zuerst ausgewertet und dann dort abgedruckt. name = 'Maria' jahrgang = 1999 print(f'Hallo {name}, du bist heute {2022 - jahrgang} Jahre alt') Definition ''', &quot;&quot;&quot;, f''', f&quot;&quot;&quot; Mehrzeiliger Text‚Äã M√∂chte man Text √ºber mehrere Zeilen schreiben, kann entweder das Zeichen f√ºr eine neue Zeile (\\n) verwendet werden, oder ein mehrzeiligen String mit ''' oder &quot;&quot;&quot; starten. Ebenso k√∂nnen mehrzeilige formatierte Bl√∂cke aussehen. for name in ['Omi', 'Maria', 'Mami und Papi']: brief = f'''Hallo {name} Ich bin in den Ferien und geniesse es. Liebe Gr√ºsse, Reto''' print(brief) print('----------') Mehrzeilige Kommentare Manchmal w√ºnscht man sich einen Kommentar √ºber mehrere Zeilen zu schreiben, ohne immer ein # am Beginn der Zeile zu schreiben. In anderen Sprachen gibt es spezielle &quot;Start-&quot; und &quot;End-Kommentar&quot; Zeichen, so dass auch mehrere Zeilen auskommentiert werden k√∂nnen. (Bspw. um eine ganze Funktion auszukommentieren...). In Python gibt es dies nicht. Es kann aber aus dem kommentierten Code Text gemacht werden, so dass dieser nicht ausgef√ºhrt (aber auch nirgends in eine Variable gespeichert) wird. from math import sqrt ''' def sqrt(zahl): # berechnet die Quadratwurzel return zahl ** 0.5 ''' print('Wurzel 2 = ', sqrt(2)) Beispiel: Urspr√ºnglich wurde die Funktion sqrt selber implementiert. Nun brauchen Sie diese vermutlich nicht mehr, das diese aus der Bibliothek math importiert wird. Vorerst wollen Sie die eigene Funktion aber noch nicht l√∂schten vorerst kommentieren Sie diese. Ver√§nderbarkeit (Mutability)‚Äã Wie im Kapitel Referenzen besprochen, haben wir unsere Vorstellung des Speichermodells in Python soweit aktualisiert, dass der Computer f√ºr Variablen eine Etikette erstellt, die auf eine Speicherstelle zeigt, an welcher dann der effektive Wert gespeichert ist. Der Python Code... a = 'das ist mein string' ... kann dargestellt werden als In Python gibt es unterschiedliche Sammel-Datentypen, daher Daten, die unterschiedlich gross sein k√∂nnen - Texte und Listen haben wir bereits kennengelernt, Dictionaries und Sets sind weitere. Dabei macht Python einen grundlegenden Unterschied zwischen Ver√§nderbaren- (Mutable) und Nicht-Ver√§nderbaren (Immutable) Datentypen. Bei ver√§nderbaren Datentypen k√∂nnen nach der Erzeugung und Zuweisung √Ñnderungen an den zugrundeliegenden Speicherstellen vorgenommen werden. Listen vs. Tupel Bei Listen k√∂nnen nach dem Erzeugen einzelne Listenwerte ver√§ndert, oder gar neue Werte hinzugef√ºgt oder entfernt werden. a = [1, 2, 3] # Liste initialisieren a.append(4) # 4 hinzuf√ºgen a.pop(0) # vorderstes Element entfernen a[0] = 5 # erste Stelle auf 5 setzen print(a) Im Gegensatz dazu gibt es das unver√§nderbare √Ñquivalent dazu: Tupel. Einmal initialisiert, lassen sich dessen Werte nur noch lesen, jedoch nicht mehr ver√§ndern. Tupel werden im Gegensatz zu Listen mit runden Klammern erzeugt (initialisiert). a = (1, 2, 3) # Tupel - eine unver√§nderbare Liste print(a) a.append(4) # FEHLER! a.pop(0) # FEHLER! a[0] = 5 # FEHLER! Eine √úbersicht √ºber die g√§ngigen Datentypen in Python zeigt deren Ver√§nderbarkeit nach der Initialisierung. Strings sind also auch immutable - es ist daher nicht m√∂glich, deren Werte direkt zu ver√§ndern. Auf Buchstaben zugreifen‚Äã Wie bei Listen, lassen sich auch hier einzelne Buchstaben gezielt abrufen vorname = 'Maria' print(vorname[0]) # erster Buchstabe print(vorname[-1]) # letzter Buchstabe Definition str[start:ende:schrittweite] Zugriff‚Äã Es ist auch m√∂glich, einen Bereich anzugeben. Wie beim range() Befehl, gibt man den Startwert und die obere Grenze an, die aber selber nicht erreicht wird. vorname = 'Reto' print(vorname[0:2]) # Buchstaben von 0 bis (ohne mit!) 2 Buchstaben print(vorname[0:3]) # Buchstaben von 0 bis (ohne mit!) 3 Buchstaben Alle Buchstaben ausser der erste‚Äã vorname = 'Reto' print(vorname[1:5]) # entweder explizit &quot;L√§nge + 1&quot; angeben print(vorname[1:]) # oder das Ende nicht angeben = bis zum Schluss Jeder zweite Buchstabe‚Äã Oder nur jeden zweiten Buchstaben namen = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' print(namen[0::2]) # Bemerke: der Endwert wird nicht angegeben = bis zum Schluss fortfahren... oder r√ºckw√§rts vorname = 'Reto' # Start beim letzten Buchstaben (-1) # Bis zum Ende der Textkette (Weglassen) # Schritt zum n√§chsten Buchstaben: -1 print(vorname[-1::-1]) √úber Buchstaben iterieren‚Äã Es kann auch √ºber alle Buchstaben in einem String iteriert werden: name = 'Maria' for buchstabe in name: print(buchstabe, end='‚≠ê') √úberpr√ºfen, ob ein Textteil in einem String vorkommt‚Äã Mit in kann √ºberpr√ºft werden, ob ein String in einem anderen vorkommt. passwort = '$uperman#1' if '$' in passwort: print('Enth√§lt $') else: print('Kein Geld') Kurzaufgaben‚Äã 1. Erkl√§ren Sie, was die Programmierer:in hier erreichen wollten, und weshalb aber ein Fehler entsteht. name = 'jimmy' name[0] = 'J' print(name) 2. Why are humans known to be extremely afraid of computers? Die Antwort finden Sie, indem Sie, startend beim 3. Buchstaben, jeden 13 Buchstaben ausgeben. Versuchen Sie, die korrekte Zugriffs-Methode zu verwenden. riddle.py joke = 'nuPLSGJwVLMtirKryXiBwBu!JcTtoSRBppmvstCTjbXACQXVFDQSVjaGPNsSDKVNIwhbczEg!B UtAgZlFmFGgwFrOm,WyDfO,qUksDgSe,.SROAMzvhTDA .xyyDTP!myzQbFDCcfHTTwA,EecYrlbCTj,dbAcJFcnWoWFuz .anNFdVrWapauRudWtfFBLuzX!kspOrgrKyf.wXieCpI ZpmMamTn xoQfMYFsbwRhtoj MsDaEuGeWhIqetWHzV YpdepptwPMnlwULsycWvctXTdzeCv GjFgzPBRLoLnbaepuVw,l?EyByDi, ,ERD!ehLt!XmI??AWsxTaeeoShEC .Bk.S!KIQBMyM.ID' print(joke) Hinweis Der 3. Buchstabe ist das P in der Liste und kann mit joke[2] abgefragt werden. Methoden von Strings‚Äã Im folgenden werden diverse Methoden im Umgang mit Strings vorgestellt. Wichtig dabei zu beachten ist die Terminologie. Betrachten Sie das folgende Beispiel: index_von_welt = 'hallo, welt'.find('welt') Hier wird die Methode .find() auf den String 'hallo, welt' aufgerufen, wobei der Kontext durch den String selbst gegeben ist. Dies ist der Unterschied von Methoden zu Funktionen: Funktionen kennen keinen Kontext, alles muss mit Parametern √ºbergeben werden (bspw. bei len() muss der String √ºbergeben werden: len('Hallo, Welt')). Die Methode .find() ist hier eine vom Objekt String zur Verf√ºgung gestellte &quot;Funktion&quot;, die den eigenen Wert kennt und auf sich aufgerufen wird. Inhalt Untersuchen‚Äã Diese Methoden bieten Hilfestellung, wenn wir eine spezifische Information √ºber einen String haben wollen. Definition .startswith(wort)‚Äã Beantwortet die Frage ob ein String mit einem wort (oder auch nur einem Buchstaben) beginnt mit einem Boolean. Achtung: Gross- Kleinschreibung. a = 'Hallo' print(a.startswith('H')) print(a.startswith('h')) Definition .endswith(wort)‚Äã Beantwortet die Frage ob ein String mit einem wort (oder auch nur einem Buchstaben) endet mit einem Boolean. Achtung: Gross- Kleinschreibung. a = 'Hallo! ' print(a.endswith('!')) print(a.endswith(' ')) # auch Leerzeichen sind Zeichen! Definition .isalpha()‚Äã Beantwortet die Frage, ob ein String nur aus Buchstaben besteht mit einem Boolean. passwort = 'p4sswort' if passwort.isalpha(): print('Schlechtes PW') else: print('Gutes PW') Definition .isnumeric()‚Äã Beantwortet die Frage, ob ein String nur aus Zahlen besteht mit einem Boolean. tel = '0797001234' if tel.isnumeric(): print('K√∂nnte Telefonnummer sein') else: print('M√§√§h, keine Telefonnummer :(') Definition .find(wort)‚Äã Findet ein wort im String und gibt den Startindex des erstmaligen Auftretens zur√ºck. Bei 'Hallo'.find('l') w√§re dies also der Startindex 2, da bei 'Hallo'[2] erstmalig ein l vorkommt. Wird das wort nicht gefunden, so gibt die Method -1 zur√ºck. passwort = 'p4ssw*rt' stern_index = passwort.find('*') if stern_index &gt;= 0: print('Passwort hat ein * Zeichen') else: print('Passwort hat kein * Zeichen') Inhalt ver√§ndern‚Äã Wie vorhin festgestellt, sind Strings immutable, k√∂nnen daher nicht ver√§ndert werden. Um dennoch m√∂glichst einfach Operationen auf Texten auszuf√ºhren, wie etwa alles gross- oder kleinzuschreiben, gibt es Methoden, welche einen ver√§nderten String zur√ºckgeben, sich selber aber nicht ver√§ndern. Definition .upper()‚Äã Schreibt den String in Grossbuchstaben, Sonderzeichen werden nicht ver√§ndert. original = 'Alles Grossbuchstaben im Titel!' gross = original.upper() print(original, gross) Definition .lower()‚Äã Schreibt den String in Kleinbuchstaben, Sonderzeichen werden nicht ver√§ndert. original = 'Alles Kleinbuchstaben in der Fusszeile!' klein = original.lower() print(original, klein) Definition .strip(&lt;zeichen&gt;)‚Äã Entfernt jeglichen White-Space (&quot;weisse Zeichen&quot;, daher Leerschl√§ge, Tabulatoren, Neue Zeilen) entfernt Leerschl√§ge am Start und Ende des Strings. vorname = ''' Maria ''' print(vorname) vorname = vorname.strip() print('Vorname:', vorname) Optional k√∂nnen mit einem Parameter auch die Zeichen angegeben werden, welche am Start und Ende entfernt werden sollen. Auch die Zeichen der Standardoption (wenn also keine Optionen angegeben werden), m√ºssen spezifiziert werden (Leerzeichen, neue Zeile \\n, Tabulator \\t) vorname = '''!!! # Reto # # ''' print(vorname) vorname = vorname.strip(' \\n\\t!#') print('Vorname:', vorname) Definition .replace(wort, ersetzen)‚Äã Ersetzt alle worte im String mit dem Parameter ersetzen. Achtung: ersetzen muss auch ein String sein, .replace('f√ºnf', 5) gibt einen Fehler. text = '''I'm at home at four or five''' text = text.replace('at', '@') text = text.replace('home', 'üèöÔ∏è') text = text.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4') text = text.replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9') print(text) 3. Emoji-Sprache Erstellen Sie eine Emoji-Sprache und ersetzen Sie typische W√∂rter in das entsprechende Emoji. Beispiel: love, liebe, li√§b√§ ‚ù§Ô∏è coffee, kaffe, kafi ‚òï ... ... Erweitern Sie anschliessend Ihr Programm so, dass eine Benutzer:in einen Satz eingeben kann, und der Emoji-Satz angezeigt wird. emoji.py Strings und Listen‚Äã Manchmal hilft es, Strings in Listen umzuwandeln und manchmal m√∂chten wir eine Liste von Buchstaben oder Strings in einen String zu vereinen. Definition .join(liste)‚Äã ben√∂tigt als Parameter eine Liste von Strings. Diese werden dann zu einem ganzen String aneinandergeh√§ngt. Das Bindeglied bildet der String, auf dem die Methode aufgerufen wurde. tage = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] print('Wochentage: ', tage) woche = ' '.join(tage) print('Wochentage: ', woche) datum = ['18', '11', '2022'] datum = '-'.join(datum) print('Heute ist der ', datum) Definition .split(zeichen)‚Äã .split() ist die umgekehrte Aktion von .join(). Die Methode nimmt als Parameter ein zeichen [typ String] und trennt anschliessend den String √ºberall, wo das zeichen vorkommt. Dabei werden die zeichen selbst entfernt. datum = '05:12:2021' datum_als_liste = datum.split(':') print(datum_als_liste) monat = datum_als_liste[1] print('Monat: ', monat) # Kurzschreibweise print('Tag: ', datum.split(':')[0]) 4. Zeilenweise reverse.py text = '''\\ *----- -*---- --*--- ---*-- ----*- -----*\\ ''' print(text) Was bezwecken die beiden \\ auf Zeile 1 und 7? Erzeugen Sie ein in obigem Programm folgende Ausgabe, ohne dabei text zu ver√§ndern. *----------* -*--------*- --*------*-- ---*----*--- ----*--*---- -----**----- Hinweis Eine neue Zeile wird mit dem Newline-Zeichen \\n (inkl. Backslash!) erzeugt. SSR","keywords":""},{"title":"5. Unterprogramme üè∑","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/functions","content":"5. Unterprogramme üè∑ Einf√ºhrung‚Äã In einer Bildkomposition kommen Figuren wie Dreiecke und Quadrate mehrmals vor. Die Turtle weiss aber nicht, was ein Dreieck oder ein Quadrat ist. Da in der Bildkomposition die Dreiecke und Quadrate nicht systematisch angeordnet sind, ist die Verwendung von Wiederholungen hier nicht naheliegend. from turtle import * fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() 26 Zeilen Code?? Geht das nicht auch einfacher? Es geht einfacher! Es lassen sich n√§mlich neue Befehle festlegen, die z.B. ein Dreieck oder ein Quadrat zeichnen. from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('red') dreieck() left(120) fillcolor('green') dreieck() left(120) fillcolor('blue') dreieck() dreieck Starte Auff√ºllen 3 mal wiederholen 50 Schritte vorw√§rts 120¬∞ nach links Ende Auff√ºllen rote F√ºllfarbe dreieck zeichnen 120¬∞ nach links gr√ºne F√ºllfarbe dreieck zeichnen 120¬∞ nach links blaue F√ºllfarbe dreieck zeichnen Aufgabe 1 Im folgenden ist zweimal derselbe Algorithmus programmiert - links ohne Unterprogramme, rechts mit Unterprogrammen. √Ñndern Sie beide Programme so ab, dass die Dreiecke doppelt so gross gezeichnet werden! sequentiell.py from turtle import * fillcolor('yellow') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('orange') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('purple') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() functions.py from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('yellow') dreieck() left(60) fillcolor('orange') dreieck() left(60) fillcolor('red') dreieck() left(60) fillcolor('purple') dreieck() left(60) fillcolor('blue') dreieck() left(60) fillcolor('green') dreieck() left(60) Wie viele Zeilen mussten Sie im linken bzw. im rechten Programm √§ndern? Welche Vorteile sehen Sie bei der Verwendung von Unterprogrammen? SSR Eigene Befehle definieren‚Äã Bei Python werden Befehle auch Funktionen genannt. Definition def name():‚Äã Mit def name(): wird ein neues Unterprogramm (ein neuer Befehl) definiert. Als Name sollte immer etwas gew√§hlt werden, das die T√§tigkeit dieser Sequenz widerspiegelt. Alle Anweisungen, die zum neuen Befehl geh√∂ren, m√ºssen einger√ºckt sein! Beispiel: def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) Befehlsaufruf Die Definition alleine f√ºhrt das Programm noch nicht aus. Dazu muss der Befehl erst noch aufgerufen werden: from turtle import * def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) ### PRE zick_zack() Aufgabe 2: Struktogramm ‚Üí Python Erzeugen Sie ein Programm gem√§ss folgendem Struktogramm: stufe 95¬∞ links 20 Schritte vorw√§rts 95¬∞ rechts 30 Schritte vorw√§rts 100 Schritte vorw√§rts stufe zeichnen stufe zeichnen stufe zeichnen befehl1.py from turtle import * √Ñndern Sie obiges Programm so, dass der Winkel einer Stufe neu 110¬∞ betr√§gt. Zeichnen Sie eine Treppe mit 30 Stufen. Denken Sie dabei auch an das letzte Kapitel (Stichwort: Wiederholungen!) SSR Aufgabe 3 ‚Äì Sechsecke sechseck.py from turtle import * Zeichnen Sie ein Sechseck Verschieben Sie die Sequenz, die das Sechseck zeichnet, in einen neuen Befehl namens sechseck(). Denken Sie daran, der neue Befehl muss aufgerufen werden, damit er ausgef√ºhrt wird. Verwenden Sie den neuen Befehl, um die folgende Figur zu zeichnen, welche aus 10 Sechsecken besteht: Tipp Nach jedem Sechseck muss 36¬∞ gedreht werden. SSR Aufgabe 4 ‚Äì H√§user F√ºr diese Aufgabe k√∂nnen Sie als Ausgangslage Ihr Programm aus Kapitel 1, Aufgabe 6 &quot;Haus von Nikolaus&quot; verwenden. stadt.py from turtle import * Definieren Sie einen Befehl haus(), der ein Haus des Nikolaus zeichnet: Achten Sie darauf, dass die Turtle am Ende eines H√§uschens jeweils unten rechts ist und nach rechts schaut. Zeichnen Sie nun 4 H√§user nacheinander in unterschiedlichen Farben. SSR Aufgabe 5 ‚Äì Blume Sie werden in dieser Aufgabe unter der Verwendung mehrerer Unterprogramme eine komplexe Aufgabe schrittweise l√∂sen. blume.py from turtle import * Definieren Sie Unterprogramm bogen(), mit dem die Turtle einen Bogen zeichnet und sich dabei insgesamt um 90¬∞ nach rechts dreht. F√ºgen Sie einen weiteren Befehl blumenblatt() hinzu, welches zwei B√∂gen zeichnet. Die Turtle sollte am Ende aber wieder in Startrichtung stehen. Erg√§nzen Sie blumenblatt() so, dass ein rot gef√ºlltes Blatt gezeichnet wird. Setzen Sie mit pencolor die Stiftfarbe ebenfalls auf rot, damit die Umrandungslinie die gleiche Farbe hat. Erweitern Sie das Programm mit dem Befehl blume(), so dass eine f√ºnfbl√§ttrige Blume gezeichnet wird. ‚≠êÔ∏è Zusatz: Blume mit Stiel. Erg√§nzen Sie die Blume mit einem Stiel. SSR","keywords":""},{"title":"3. Wiederholung üîÅ","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/repeat","content":"3. Wiederholung üîÅ In der Aufgabe 8 haben Sie eine Treppe gezeichnet. Ihr Programm sieht vermutlich etwa wie folgt aus: from turtle import * left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) Was stellen Sie beim Treppen-Programm fest? Das Programm ist lang man sieht nicht auf einen Blick, wie viele Stufen die Treppe hat ob alle Stufen gleich breit und hoch sind Um die Stufenbreite oder die Stufenh√∂he anzupassen, m√ºssen viele Zeilen ver√§ndert werden Es kommt immer wieder dieselbe Sequenz vor: left(90) forward(17) right(90) forward(29) wir sind zu faul, um immer wieder dieselbe Sequenz aufzuschreiben (oder zu Copy&amp;Pasten) Wiederholen von Sequenzen‚Äã Ein Algorithmus kann Sequenzen wiederholt ausf√ºhren. In Python wird die zu wiederholende Sequenz Codeblock genannt. from turtle import * for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts Definition for i in range(n):‚Äã Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt, bevor weitere Anweisungen ausgef√ºhrt werden.Alles, was wiederholt werden soll, muss einger√ºckt sein. Beispiel‚Äã from turtle import * for i in range(4): forward(50) left(90) Struktogramm ‚Üí Python √úbersetzen Sie das Struktogramm in ein Python Programm. Was entsteht? wiederholung.py from turtle import * 9 mal wiederholen: 100 Schritte vorw√§rts 160¬∞ nach links Turtle verstecken SSR 1. Python ‚Üí Struktogramm Zeichnen Sie f√ºr folgendes Programm ein Struktogramm auf ein Blatt Papier. Fotografieren Sie es im Anschluss und halten Sie es im untenstehenden Textfeld fest. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) SSR 2. Python ‚Üí Struktogramm Zeichnen Sie auch f√ºr folgendes Programm ein Struktogramm und halten Sie dieses fest. from turtle import * for i in range(5): left(72) for i in range(4): forward(20) left(90) forward(100) SSR 3. Treppe vol. 2 Zeichnen Sie eine Treppe mit 20 Stufen. Die Treppe soll bei den Koordinaten (-200, -200) starten. W√§hlen Sie die Stufen-Breiten so, dass der verf√ºgbare Platz m√∂glichst gut ausgenutzt wird. treppe2.py from turtle import * Hinweis Verwenden Sie den Befehl goto(x, y) um die Turtle bei -200, -200 zu positionieren. SSR 4. Schneestern Zeichnen Sie einen Stern und gehen Sie wie folgt vor: Untersuchen Sie den Stern und identifizieren Sie die wiederholten Sequenzen. Programmieren Sie eine einzelne Sequenz. Die Knacknuss ist, dass am Ende der Sequenz die Turtle so ausgerichtet ist, dass man mit der Wiederholung beginnen k√∂nnte Programmieren Sie die Wiederholung schneestern.py from turtle import * SSR 5. Weihnachtsstern Zeichnen Sie einen Weihnachtsstern mit den Drehwinkeln 140¬∞ und 80¬∞. F√ºllen Sie den Stern mit Ihrer Lieblingsfarbe. Schauen Sie sich dazu den Abschnitt &quot;F√ºllen&quot; unter üëâ Turtle Befehle an. weihnachtsstern.py from turtle import * SSR 6. Quadrate Zeichnen Sie folgende Leiter. K√∂nnen Sie das Programm mit noch weniger Zeilen Code schreiben? Schaffen Sie es, nur 6 Zeilen Code zu verwenden? leiter.py from turtle import * SSR 7. Perlenkette Zeichnen Sie eine Perlenkette in Ihrer Lieblingsfarbe, die aus 18 Perlen (dots) besteht. perlenkette.py from turtle import * Hinweis Die Turtle muss nach 18 Drehungen wieder nach rechts schauen (hat sich also insgesamt um 360¬∞ gedreht) - pro Drehung also xxx Grad Python kann auch rechnen üòã - lassen Sie die Drehung von Python berechnen. Beispiel: left(360 / 4) ist dasselbe wie left(90) SSR 8. Vogel Zeichnen Sie einen Vogel, indem Sie mehrmals nacheinander folgende Befehle wiederholen: forward(2) right(3) vogel.py from turtle import * SSR","keywords":""},{"title":"9. ‚≠êÔ∏è While","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/while","content":"9. ‚≠êÔ∏è While Wiederholen, solange die Frage mit &quot;Ja&quot; beantwortet wird‚Äã Eine Wiederholung mit einer Frage f√ºhrt einen Codeblock so lange aus, bis die Frage nicht mehr mit &quot;Ja&quot; beantwortet wird. Im folgenden Beispiel wird solange eine Spirale gezeichnet, bis die Distanz der Turtle vom Zentrum mehr als 200px betr√§gt. Unendliche Schleife Diese Art von Wiederholung kann dazu f√ºhren, dass eine Frage immer mit &quot;Ja&quot; beantwortet wird und das Programm also nie endet. Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das Programm zu Dies gelingt: Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das laufende Programm zu stoppen, muss: der ganze Tab geschlossen und die Seite in einem neuen Tab ge√∂ffnet werden. (Tipp: Die URL zuerst kopieren...) (den ganzen Browser √ºber den Taskmanager schliessen) winkel = 20 setzen Ist der Abstand zum Zentrum kleiner als 200px? 5 Schritte vorw√§rts winkel¬∞ nach links winkel auf 99% des aktuellen Werts setzen from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Oft k√∂nnte man dies auch mit einer for-Schleife erreichen. Jedoch m√ºsste man dann zuerst berechnen, wie viele Schritte n√∂tig sind, bis dies der Fall ist. Im obigen Beispiel kann etwa der Schrumpf-Faktor (0.99) ver√§ndern, ohne die Frage (weniger als 200px Abstand zum Zentrum?) zu √§ndern. Aufgabe Probieren Sie es aus und spielen Sie mit dem Schrumpf-Faktor 0.99 im obigen Bispiel. Spirale.py from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Wann gibt es mehr/weniger Windungen? Wann entsteht eine unendliche Schleife? Wiederholungen mit der while-Schleife‚Äã Mit der while-Schleife k√∂nnen alle Wiederholungen, die mit der for i in range(...): Syntax erzeugt wurden, ebenfalls erzeugt werden. Dabei muss aber jeweils eine Variable, z.B. i, verwendet werden, welche sich die Anzahl Wiederholungen merkt. Nat√ºrlich muss diese Variable dann bei jeder Wiederholung um eins hochgez√§hlt werden. Eine solche Variable, die bei jeder Wiederholung erh√∂ht wird, wird Schleifenz√§hler oder Laufvariable genannt. from turtle import * i = 0 while i &lt; 4: forward(100) left(90) i = i + 1 for zu while Schreiben Sie das untenstehende Programm so um, dass nur noch while Schleifen verwendet werden. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) to-while.py from turtle import * SSR while zu for Schreiben Sie das untenstehende Programm so um, dass nur noch for Schleifen verwendet werden. from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() def quadrat(): i = 0 while i &lt; 4: forward(20) left(90) i = i + 1 zeile = 0 while zeile &lt; 5: spalte = 0 while spalte &lt; 3: move(zeile * 20, spalte * 20) quadrat() spalte = spalte + 1 zeile = zeile + 1 to-while.py from turtle import * SSR Anwendung‚Äã Die while-Schleife kommt oft bei Benutzerinteraktionen, Simulationen oder bei sich dynamisch √§ndernden Daten vor. Sonstige Wiederholungen lassen sich normalerweise einfacher mit einer for-Schleife umsetzen. Ratespiel √Ñndern Sie das Ratespiel aus dem Kapitel Verzweigungen so ab, dass die Spieler:in unendlich viele Versuche hat um die Zahl zu finden. Wurde die gesuchte Zahl gefunden, soll die Anzahl Versuche zur√ºckgemeldet werden. SSR","keywords":""},{"title":"8. Bedingte Ausf√ºhrung ‚ëÇ","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/verzweigung","content":"8. Bedingte Ausf√ºhrung ‚ëÇ Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. In Programmen m√∂chten wir w√§hrend der Ausf√ºhrung des Programms entscheiden k√∂nnen, ob Befehle ausgef√ºhrt werden oder nicht. Auch m√∂chten wir entscheiden k√∂nnen, ob eine Wiederholung abgebrochen werden soll. Vergleichen‚Äã Um zu entscheiden, ob Befehle ausgef√ºhrt werden sollen, wird immer eine eine Frage gestellt, die eindeutig mit &quot;Ja&quot; oder &quot;Nein&quot; beantwortet werden kann. Wird die Frage mit &quot;Ja&quot; beantwortet, so ist diese Aussage Wahr und die Bedingung ist erf√ºllt. Andernfalls ist die Aussage Falsch und die Bedingung ist nicht erf√ºllt. Ein Frage kann als Vergleich geschrieben werden. Beispielsweise wird die Frage &quot;Ist 4 kleiner als 2?&quot; als 4 &lt; 2 aufgeschrieben. Die offensichtliche Antwort ist &quot;Nein&quot; und entspricht in Python dem Wert False. Spannender sind vergleiche, wenn diese mit Variablen durchgef√ºhrt werden, da man nicht schon im Voraus weiss, welcher Wert in einer Variable enthalten ist. Die Frage von &quot;Ist x kleiner als 2&quot; (x &lt; 2) h√§ngt also davon ab, welcher Wert zur Zeit in der Variable x gespeichert ist. alter = Wie alt bist du? Ist das alter kleiner als 14? Ausgabe: Du darfst Velo fahren Sonst, ist das alter kleiner als 16? Ausgabe: Du darfst T√∂ffli fahren Sonst, ist das alter kleiner als 18? Ausgabe: Du darfst Roller fahren Sonst Ausgabe: Du darfst Auto fahren alter = int(input('Wie alt bist du?')) if alter &lt; 14: print('Du darfst Velo fahren') elif alter &lt; 16: print('Du darfst T√∂ffli fahren') elif alter &lt; 18: print('Du darfst Roller fahren') else: print('Du darfst Auto fahren') In Python k√∂nnen alle √ºblichen Fragen als Vergleiche von zwei Werten geschrieben werden. Name\tMathematisch\tPythongr√∂sser\t&lt;\\lt&lt;\t&lt; kleiner\t&gt;\\gt&gt;\t&gt; gr√∂sser\t‚â§\\leq‚â§\t&lt;= kleiner\t‚â•\\geq‚â•\t&gt;= gleich\t======\t== ungleich\t‚â†\\neqÓÄ†=\t!= Achtung Bei der √úberpr√ºfung auf Gleichheit werden zwei Gleichheitszeichen == geschrieben. Ausgabefenster‚Äã In Python lassen sich Ausgaben nicht nur mit print sondern auch mit dem Befehl alert() (aus der Bibliothek browser) in einer Ausgabebox anzeigen. Die Ausgabe mit alert wird hier verwendet, weil die Online-Version von Python die Ausgaben mit print erst am Ende des Programms anzeigt wird. Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Zufallszahlen erraten‚Äã Ratespiel Probieren Sie das Ratespiel aus: Ratespiel Starten Beschreiben Sie in eigenen Worten, wie das Ratespiel funktioniert. Zeichnen Sie mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. Schreiben Sie gem√§ss dem Struktogramm das Ratespiel in Python. ratespiel.py from browser import alert from random import randint Hinweis Wenn die Zahl gefunden wurde, soll die Spieler:in nicht mehr nach einer Eingabe gefragt werden. Mit dem Befehl break kann die Wiederholung abgebrochen werden. break Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus. SSR","keywords":""},{"title":"4. Fehler","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/errors","content":"4. Fehler Sie haben bereits festgestellt, dass Python sehr pingelig ist was Tippfehler und die pr√§zise Verwendung von Klammern, Anf√ºhrungszeichen, Doppelpunkten und Leerzeichen angeht. Jede Sprache hat seine eigenen Regeln, wie W√∂rter und S√§tze strukturiert sein m√ºssen. Diese Regeln sind allgemein bekannt als die Syntax einer Sprache. Bei Programmiersprachen wird mit der Syntax festgelegt, welche W√∂rter, in welcher Reihenfolge und in welchem Kontext erlaubt sind. Syntax Fehler (syntax errors)‚Äã Syntax Fehler sind kleine Fehler in einem Programm. Da das Programm nicht von einem Mensch, sondern von einem Computer &quot;gelesen&quot; und interpretiert wird, reicht ein Tippfehler, ein fehlendes Komma oder eine fehlende Klammer, dass das Programm nicht mehr verstanden werden kann. Die Python Sprache setzt sich aus folgenden Elementen zusammen: Schl√ºsselw√∂rter (Statements): W√∂rter oder Zeichen, die ohne Anf√ºhrungszeichen und ohne Klammern geschrieben werden. z.B. import, from oder for, aber auch : oder *. Sie m√ºssen in einer vordefinierten Reihenfolge vorliegen, damit diese von Python verstanden werden. (‚Ü© alle Schl√ºsselw√∂rter) Befehle (Unterprogramme, Funktionen): vordefinierte Befehle, die mit einer runden Klammer aufgerufen werden. z.B. print('hello') Variablen: Namen, die einen Wert enthalten H√§ufigste Ursachen Fehler bei Schl√ºsselw√∂rtern vergessene oder falsch eingesetzte Feldtrenner (z.B. :) Falsche Anordnung von Schl√ºsselw√∂rtern/Feldtrennern Beispiele‚Äã frm turtle import * forward(100) from turtle import * goto(100 50) from turtle import * for i in range(4) forward(25) right(90) Fehler finden Untersuchen Sie obenstehende Programmschnipsel. Was sagen Ihnen die Fehlermeldungen? Auf welcher Zeile steht die Art des Fehlers? Wo finden Sie Hinweise auf den Fehler? Flicken Sie sie... error1.py frm turtle import * forward(100) error2.py from turtle import * goto(100 50) Hinweis Was macht der Befehl goto? Schauen Sie die Funktionsweise unter Turtle Befehle#goto(x, y) nach error3.py from turtle import * for i in range(4) forward(25) right(90) SSR Namens Fehler (NameError)‚Äã Liegt ein Fehler vor, der nicht bei Schl√ºsselw√∂rtern (oder deren Anordnung) vorliegt, so handelt es sich oft um einen Namens-Fehler (NameError). Es wird also versucht, ein Unterprogramm zu √∂ffnen, das aber unter diesem Namen nicht gefunden werden kann. H√§ufigste Ursachen Die h√§ufigste Ursachen von NameErrors sind Vertipper im Namen des Befehls nicht importierte Befehle (z.B. from turtle import * fehlt) Beispiele‚Äã from turtle import * forwrd(100) Der angegebene Befehl forwrd kann nicht gefunden werden, da er weder in einer importierten Bibliothek, noch im aktuellen Programm gefunden werden kann. Der gleiche Fehler tritt auf, wenn der Befehl zwar richtig geschrieben wird, das Importieren aber vergessen geht: forward(100) Fehler finden Finden und l√∂sen Sie die entstandenen Fehler error.py from math import ceil, floor print('15.3 gerundet =', round(15.3)) print('15.8 gerundet =', round(15.8)) print('15.3 aufgerundet =', ceyl(15.3)) print('15.8 abgerundet =', flor(15.8)) Hinweis Suchen Sie die fehlerhaften Befehle in Kombination mit Python auf Google, bspw. python ceyl. SSR Einr√ºckungsfehler (IndentationError)‚Äã Python erwartet nach jedem Doppelpunkt :, dass ein einger√ºckter Codeblock kommt. Falls kein einger√ºckter Codeblock gefunden wird, entsteht ein IndentationError. Wird jedoch f√§lschlicherweise eine Zeile einger√ºckt, so wird ebenfalls dieser Fehler angezeigt. H√§ufigste Ursachen Die n√§chste Zeile nach einem Doppelunkt : ist nicht einger√ºckt Eine Zeile ist f√§lschlicherweise einger√ºckt ein Leerschlag zu wenig einger√ºckt Beispiel‚Äã Nicht einger√ºckt for i in range(5): print('Hallo') Korrektur for i in range(5): print('Hallo') Falsch einger√ºckt print('Hallo') print('wie') print('gehts?') Korrektur print('Hallo') print('wie') print('gehts?') Fehler finden Finden und l√∂sen Sie die entstandenen Fehler, so dass die Ausgabe Hallo zum 0 Hallo zum 1 Ende lautet. errors.py for i in range(2): print('Hallo zum', i) print('Ende') SSR Logikfehler‚Äã Aus der Sicht von Python funktioniert alles, top! üëç Sobald aber das Programm ausgef√ºhrt wird, macht es nicht das, was Sie sich gew√ºnscht haben - Logik-Fehler üí©... Diese Fehler sind im allgemeinen am schwierigsten zu finden. Ein h√§ufiger Fehler ist aber, dass man bei einem Befehl die runden Klammern am Ende vergisst - f√ºr Python kein Problem, da es den Befehl kennt, jedoch nicht dazu aufgefordert wird, diesen auszuf√ºhren. H√§ufigste Ursachen Checkliste f√ºr Logikfehler sind bei Befehlen die runden Klammern () am Ende angegeben? Beispiel‚Äã from turtle import * penup() goto(-10, 10) pendown for i in range(4): forward(20) left(90) Auf Zeile 4 fehlen die runden Klammern - pendown wird nicht ausgef√ºhrt! Fehler beheben: Den Befehl mit pendown() aufrufen. Fehler finden Finden und beheben Sie alle Fehler, so dass folgende Ausgabe entsteht: errors.py from turtle import * fillcolor(&quot;Rot&quot;) penup() goto(-125 125) begin_fill() for i in range(4) forward(250) left(90) end_fill() forward(150) links(90) forward(50) fillcolor(&quot;white&quot;) begin_fill() for i in range(4): forward(50) right(90) forward(50) left(90) forward(50) left(90) end_fill SSR","keywords":""},{"title":"Algebra 1","type":0,"sectionRef":"#","url":"/24w/algebra1","content":"Algebra 1 Kapitel 1‚Äã SSR Kapitel 2‚Äã SSR Kapitel 3‚Äã SSR Kapitel 5‚Äã SSR Kapitel 6‚Äã SSR Kapitel 7 (Freiwillig: Pr√ºfungsvorbereitung Probe 2)‚Äã SSR","keywords":""},{"title":"Excel Diagramme","type":0,"sectionRef":"#","url":"/24w/Excel/diagramme","content":"Excel Diagramme Daten k√∂nnen alles M√∂gliche sein: Messwerte, Ergebnisse von Umfragen, Beobachtungen und Z√§hlungen. Nicht alle diese Daten lassen sich √ºberhaupt mit Hilfe von Zahlen erfassen. Man sollte sich daher klar machen, dass es verschiedene Typen von Daten gibt. Daten sind entweder quantitativ (alles, was sich z√§hlen und messen und √ºberhaupt in Zahlen ausdr√ºcken l√§sst) oder qualitativ (alles, was man zwar beobachten und ordnen, aber nicht in Form von Zahlen angeben kann). Kreisdiagramm‚Äã Kreisdiagramme eignen sich dann besonders gut, wenn es um eine einfache Aufschl√ºsselung in genau einer Dimension geht. Anders gesagt: Verwenden Sie Kreisdiagramme, wenn Sie anhand einer Variable die Unterschiede zwischen den einzelnen Gruppen aufzeigen m√∂chten. Denken Sie immer daran, dass Kreisdiagramme nur dann eingesetzt werden sollten, wenn die Kategorien zusammengesetzt ein Ganzes ergeben.1 Kreisdiagramme werden f√ºr die Darstellung verschiedener Anteile an einem Ganzen verwendet. prozentuale Anteile der Augenfarben in der Klasse prozentualer Anteil der Haarfarben in der Bev√∂lkerung prozentuale Anteile verschiedener Altersgruppen in der Gesellschaft Vorgehen‚Äã Eine Tabelle mit der Kategorie und der effektiven Anzahl erzeugen. Die Summe aller Kategorien muss der Stichprobengr√∂sse n entsprechen! Hilfreiche Feldfunktionen: =Z√ÑHLENWENN(A1:A12;&quot;Schwarz&quot;) -&gt; Z√§hlt, wie oft der Wert &quot;Schwarz&quot; im Bereich A1:A12 vorkommt =Z√ÑHLENWENNS(A1:A12; &quot;&gt;=10&quot;; A1:A12; &quot;&lt;20&quot;) -&gt; Z√§hlt, wie viele Werte im Bereich A1:A12 zwischen 10 und 20 liegen. Bemerke, dass der Bereich zweimal angegeben werden muss. Die ganze Tabelle ausw√§hlen und √ºber Einf√ºgen&gt;2D-Kreis ein Kreisdiagramm einf√ºgen. √úber Diagrammentwurf&gt;Diagrammelemente hinzuf√ºgen die Datenbeschriftung hinzuf√ºgen. Mit einem Textfeld (Einf√ºgen&gt;Formen&gt;Textfeld) ein Textfeld f√ºr die Anzahl Datens√§tze (n) hinzuf√ºgen. Rechtsklick auf eine weisse Fl√§che des Diagramms &gt; Als Bild speichern... Finding Die Stichprobengr√∂sse n muss angegeben werden (=Anzahl der Datenpunkte) Die Prozentwerte der einzelnen Kreissegmente m√ºssen bei Diagrammen mit weniger als 10 Segmenten beschriftet werden. Entweder in einer Legende oder direkt im Segment muss die Kategorie ersichtlich sein. Liniendiagramm‚Äã @ Liniendiagramme werden f√ºr die Visualisierung von Entwicklungen im zeitlichen Verlauf verwendet. Sie werden daher vor allem dann eingesetzt, wenn die langfristige Entwicklung von Ums√§tzen oder anderen Gr√∂ssen, die f√ºr Unternehmen oder Organisationen wichtig sind, gemessen werden sollen. Sie k√∂nnen auch f√ºr den Vergleich zweier Variablen √ºber die Zeit genutzt werden. Im Beispiel wird gezeigt, wie die h√∂here staatliche Unterst√ºtzung f√ºr gesunde Lebensf√ºhrung sich √ºber einen Zeitraum von f√ºnf Jahren auf die Ums√§tze bei den S√ºsswaren ausgewirkt hat. S√§ulendiaramm‚Äã S√§ulendiagramme kommen bei der Darstellung von Gr√∂ssenvergleichen innerhalb eines Zeitraums vor. Das S√§ulendiagramm eignet sich besonders, um wenige Auspr√§gungen (bis ca. 15) zu veranschaulichen. Bei mehr Kategorien leidet die Anschaulichkeit und es sind Liniendiagramme zu bevorzugen. Auch im Falle von metrisch stetigen Daten eignet sich das S√§ulendiagramm nicht, es ist ein Histogramm zu bevorzugen. Balkendiagramm‚Äã Das Balkendiagramm ist dem S√§ulendiagramm sehr √§hnlich. Es entspricht einem S√§ulendiagramm mit vertauschten Achsen. So werden aus den vertikalen S√§ulen horizontale Balken und es w√§chst bei zunehmender Stichprobengr√∂sse in die L√§nge und nicht in die Breite. Besonders gut sind Balkendiagramme f√ºr die Darstellung von Rangfolgen geeignet. Geeignetes Diagramm Bestimmen Sie das geeignete Diagramm f√ºr die gegebene Ausgangslage. Sie m√∂chten die Ausgaben Ihres letzten Monatslohnes graphisch so darstellen, dass man sieht, wie gross die prozentualen Anteile der verschiedenen Ausgabeposten waren. Sie wollen die Preise verschiedene Smartphones vergleichen. Sie wollen in einem Diagramm die Tagesh√∂chst- und -tiefsttemperaturen des letzten Monats aufzeigen. Sie wollen grafisch darstellen, wie hoch der TV-Konsum jedes Lernenden in Ihrer Klasse w√§hrend einer Woche ist. Sie haben den Durchschnitt des t√§glichen TV-Konsums Ihrer Klasse ermittelt, und zwar w√§hrend den letzten sieben Tagen. Nun visualisieren Sie das Resultat. Sie haben bei einer Klassenumfrage die Meinungen Ihrer Mitlernenden √ºber das Angebot der Schulmensa eingeholt. Sie wollen das Resultat in einem Diagramm darstellen. Quelle: www.surveymonkey.de ‚Ü©","keywords":""},{"title":"Turtle Befehle","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/turtle-commands","content":"Turtle Befehle Bewegungen‚Äã Definition forward(n) fd(n)‚Äã Bewegt die Turtle n Pixel nach vorne. from turtle import * ### PRE forward(100) Definition backward(n) back(n) bk(n)‚Äã Bewegt die Turtle n Pixel r√ºckw√§rts. from turtle import * ### PRE backward(100) Definition left(angle) lt(angle)‚Äã Dreht die Turtle angle Grad nach links. from turtle import * ### PRE left(90) Definition right(angle) rt(angle)‚Äã Dreht die Turtle angle Grad nach rechts. from turtle import * ### PRE right(90) Definition goto(x, y)‚Äã Bewegt die Turtle zur Position mit den Koordinaten (x, y). Beispiel: goto(50, 100) from turtle import * ### PRE goto(50, -50) Definition home()‚Äã Setzt die Turtle auf die Ursprungsposition (0, 0) zur√ºck und setzt die Orientierung der Turtle auf rechts ‚ñ∂Ô∏è. from turtle import * speed(0) penup() goto(20, 30) pendown() left(30) write('(20|30), 30¬∞ links', font=('Arial', 8, 'normal')) speed(1) ### PRE home() Definition setheading(to_angle) seth(to_angle)‚Äã Dreht die Turtle, bis der angegebene Winkel erreicht ist. Winkel\tAusrichtung0\t‚ñ∂Ô∏è 90\t‚ñ≤ 180\t‚óÄÔ∏è 270\t‚ñº from turtle import * ### PRE setheading(120) Stift‚Äã Definition penup() up() pu()‚Äã Hebt den Stift an - beim Bewegen der Turtle wird keine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) Definition pendown() down() pd()‚Äã Senkt den Stift - beim Bewegen der Turtle wird wieder eine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) pendown() forward(100) Definition isdown()‚Äã √úberpr√ºft, ob der Stift aktuell gesenkt ist und gibt das Resultat als True (=Stift gesenkt) oder False (=Stift oben) zur√ºck. from turtle import * ### PRE if isdown(): penup() forward(100) Definition pencolor(color)‚Äã Legt die Stiftfarbe fest. Der Parameter color enth√§lt Text, die Farbe muss also mit Anf√ºhrungszeichen umgeben sein. Beispiel: from turtle import * ### PRE pencolor('red') forward(100) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white RGB-Farben RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) from turtle import * pencolor('rgb(255, 217, 0)') forward(100) left(120) r = 30 g = 180 b = 77 # oder variabel pencolor(f'rgb({r}, {g}, {b}') forward(100) Unterschiede zum offiziellen Turtle-Modul Das offizielle Turtle-Modul verwendet zur Anzeige von Grafiken nicht einen Browser, sonder Tkinter. Dort k√∂nnen ebenfalls RGB-Farben verwendet werden, sie werden aber mit einer anderen Syntax √ºbergeben: Mehr dazu hier üëâ https://docs.python.org/3/library/turtle.html#turtle.color Definition pensize(size)‚Äã Legt die Stiftdicke size fest. Standard: pensize(1) from turtle import * ### PRE pensize(10) forward(100) Definition dot() dot(diameter)‚Äã Zeichnet einen Punkt an der aktuellen Position mit dem angegebenen Durchmesser diameter. Wenn kein Durchmesser angegeben wird, verwendet es standardm√§ssig das doppelte der aktuellen Stiftdicke (pensize), aber mindestens einen Durchmesser von 5. from turtle import * ### PRE dot() forward(20) dot(20) Definition circle(radius)‚Äã Zeichnet einen Kreis mit dem angegebenen radius. from turtle import * ### PRE circle(100) Definition circle(radius, angle)‚Äã Zeichnet einen Kreisbogen mit dem angegebenen radius und angle. Beispiel from turtle import * ### PRE circle(50, 180) F√ºllen‚Äã Definition fillcolor(color)‚Äã Legt die color f√ºr das F√ºllen von geschlossenen Pfaden fest. Farbpalette from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition begin_fill()‚Äã Startet einen geschlossenen Pfad. from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition end_fill()‚Äã Endet die Aufzeichnung des Pfades und schliesst diesen. Beispiel from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Aussehen und Geschwindigkeit‚Äã Definition shape(form)‚Äã √Ñndert die Form der Turtle. F√ºr den Parameter form k√∂nnen folgende Werte verwendet werden: 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) from turtle import * ### PRE shape('turtle') Definition hideturtle()‚Äã Macht die Turtle unsichtbar. ‚ö†Ô∏è Der Stift wird durch das Verstecken nicht automatisch angehoben. from turtle import * ### PRE hideturtle() forward(100) Definition showturtle()‚Äã Zeigt die Turtle wieder an. ‚ö†Ô∏è Der Stift wird durch das Anzeigen nicht automatisch wieder abgesetzt. from turtle import * speed(1) ### PRE forward(20) penup() hideturtle() forward(30) showturtle() left(90) forward(50) Definition speed(v)‚Äã Legt die Geschwindigkeit v der Turtle fest. 1 am langsamsten 3 Standard 6 schnell ... (Schnellstm√∂gliche Geschwindigkeit kann mit speed(0) festgelegt werden.) from turtle import * ### PRE speed(1) forward(100) ","keywords":""},{"title":"Home 24w","type":0,"sectionRef":"#","url":"/24w/home","content":"Home 24w","keywords":""},{"title":"7. Variablen","type":0,"sectionRef":"#","url":"/24ef/Programmieren/Turtle-Repetition/variablen","content":"7. Variablen Einf√ºhrung‚Äã Im vorhergehenden Kapitel haben Sie Quadrate gezeichnet, deren Seitenl√§nge im Programm fest eingebaut waren. Manchmal m√∂chten Sie aber die Seitenl√§nge mit einem Eingabedialog einlesen. Dazu muss das Programm die eingegebene Zahl als Variable speichern. Variablen kann man sich wie eine Z√ºgelbox vorstellen, welche mit einem Namen angeschrieben ist. Der Name beschreibt, was sich in der Box befindet, damit man den Inhalt sp√§ter auch wieder findet. Variable Zuweisen Mit der Schreibweise anzahl = 12 wird eine solche Box erstellt. In Zukunft sagen wir, dass damit die Variable anzahl definiert und ihr einen Wert zugewiesen wird. Um den Inhalt der Box zu erhalten, kann der Name (ohne Anf√ºhrungszeichen) geschrieben werden. Im Struktogramm werden alle Variablen umrahmt. anzahl = 12 Ausgabe: anzahl anzahl = 12 print(anzahl) Mit Variablen rechnen anzahl = 12 print(anzahl + 13) Mehrere Variablen anzahl = 12 gewicht = 100 print(f'{anzahl} Tafeln Schokolade sind {anzahl * gewicht} g schwer') Formatierter Text: f'{anzahl} Tafeln' Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') √úberschreiben: Variablen neu Zuweisen‚Äã In einer Box kann immer nur ein einziges Objekt abgelegt werden. Wenn sp√§ter also ein neuer Wert in bereits beschriftete Z√ºgelbox gelegt wird, so wird der aktuelle Wert verdr√§ngt. K√ºnftig wird diese erneute Zuweisung √úberschreiben einer Variable genannt. Variablen √ºberschreiben anzahl = 12 print(f'Anzahl = {anzahl}') anzahl = 7 print(f'Anzahl = {anzahl}') Im obigen Beispiel wird der initiale Wert der Variable anzahl (12) mit dem neuen Wert 7 √ºberschrieben. Merke: G√ºltigkeitsbereich Die Variable wird nicht r√ºckwirkend ver√§ndert. Solange eine Variable nicht √ºberschrieben wird, besitzt sie den aktuell zugewiesenen Wert. Aufgabe Was geschieht im untenstehenden Programm? F√ºgen Sie bei jeder Zeile mit einem print einen Kommentar hinzu mit: ausgegebene Zahl aktuell gespeicherter Wert in der Variable anzahl variable.py anzahl = 2 print(anzahl) # =&gt; 2, anzahl=2 print(anzahl + 2) anzahl = 7 print(anzahl) print(anzahl + 2) anzahl = anzahl + 3 print(anzahl) anzahl = anzahl + 3 print(anzahl + 1) anzahl = anzahl + 3 print(anzahl) SSR Gleichheitszeichen Das Gleichheitszeichen hat also in Computerprogrammen nicht dieselbe Bedeutung wie in der Mathematik. Es ist keine Gleichung, sondern eine Variablendefinition oder eine Zuweisung. Variablenwert einlesen, ver√§ndern und ausgeben Im Programm kann mit Hilfe einer Eingabeboxen Werte eingelesen und einer Variable zugewiesen werden. from turtle import * speed(12) anzahl = input('Wie viele Strecken soll die Spirale haben?') anzahl = int(anzahl) seite = 10 for i in range(anzahl): forward(seite) left(90) seite = seite + 10 Eingabe In Python ist das Resultat einer Eingabe immer ein Text. Ein Text kann aber in eine Zahl umgewandelt werden, so dass dann auch damit gerechnet werden kann. Der Befehl int wandelt eine Eingabe in eine ganze Zahl um. Der Befehl float wandelt eine Eingabe in eine Dezimalzahl um. # Centimeter zu Meter gr√∂sse = input('Wie gross bist du [cm]?') gr√∂sse = int(gr√∂sse) print(f'Ich bin {gr√∂sse / 100} m gross') # Meter zu Centimeter gr√∂sse = input('Wie gross bist du [m]?') gr√∂sse = float(gr√∂sse) print(f'Ich bin {gr√∂sse * 100} cm gross') Eingabe - Struktogramm‚Äã Wird ein Wert √ºber eine Eingabeaufforderung eingelesen, so wird dies im Struktogramm mit einem Parallelogramm angezeigt, wobei auch die Variable, welcher das Resultat zugewiesen wird, festgehalten wird: gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') Aufgabe 1 - BMI √úbersetzen Sie das folgende Struktogramm in Python Code: gr√∂sse = Wie gross bist du [m]? gewicht = Wie schwer bist du [kg]? bmi = gewicht geteilt durch gr√∂sse mal gr√∂sse Ausgabe: BMI: bmi bmi.py Hinweis Was ist die Bedeutung des folgenden Fehlers? TypeError: Can't multiply sequence by non-int of type 'str' ‚Üí Der eingegebene Text kann nicht multipliziert werden - zuerst m√ºssen gewicht und gr√∂sse in Dezimalzahlen (float) umgewandelt werden: gewicht = float(gewicht). SSR Aufgabe 2 ‚Äì n-Eck Nach Eingabe der Anzahl Ecken in einer Eingabebox soll die Turtle ein regelm√§ssiges n-Eck zeichnen. Beispielsweise wird nach der Eingabe 8 ein 8-Eck gezeichnet. Den passenden Drehwinkel soll das Programm berechnen. n-eck.py from turtle import * SSR Aufgabe 3 Nach der Eingabe eines Winkels in einer Eingabebox zeichnet die Turtle 30 Strecken der L√§nge 100, wobei sie nach jeder Strecke um den gegebenen Winkel nach links dreht. Experimentieren Sie mit verschiedenen Winkeln und zeichnen Sie sch√∂ne Figuren. Mit speed(10) k√∂nnen Sie das Zeichnen beschleunigen. star.py from turtle import * SSR","keywords":""},{"title":"Cookies","type":0,"sectionRef":"#","url":"/25h/Big-Data/cookies","content":"Cookies Wie weiss Google, welche Webseiten ich besucht habe?‚Äã Viele Webseiten nutzen z.B. den Dienst &quot;Google Analytics&quot;. √ñffnen wir solch eine Webseite wird auch Google Analytics gestartet und schon legt Google ein Cookie bei uns ab (ein sogenanntes Drittanbieter-Cookie). Cookies sind kleine Datenpakete, welche eine Webseite auf dem lokalen Computer (genau genommen im Browser) speichert. √ñffnen wir danach eine andere Webseite die Google Analytics nutzt (das nutzen die meisten Webseiten) so kann Google die eigenen Cookies lesen und weiss welche Seiten wir in welcher Reihenfolge wie lange angesehen haben. Generell nutzen online-Werbeagenturen Information von ihren Drittanbieter-Cookies um nutzerspezifische Werbung schalten zu k√∂nnen. Die Browser-Ererweiterung &quot;Thunderbeam-Lightbeam&quot; f√ºr den Chrome-Browser macht die Spuren sichtbar, welche wir mit Cookies im Internet hinterlassen. Cookies Installieren Installieren Sie Sie sich die Chrome- bzw. Edge-Erweiterung Thunderbeam-Lightbeam Surfen Sie etwas herum. √ñffnen Sie nun wieder den Tab von Lightbeam und schauen Sie, wer alles etwas von Ihren Besuchen auf anderen Webseiten mitbekommen hat. Challenge: Suchen Sie eine Webseite ohne Verbindungen zu anderen Webseiten. OFI-Website Welche Cookies gibt es auf der ofi.gbsl-Website? Cookies L√∂schen‚Äã Dr√ºcken Sie die Tasten Jetzt erscheint ein Fenster, in welchem Sie die gespeicherten Browserdaten l√∂schen k√∂nnen. Sie k√∂nnen auch w√§hlen, bspw. nur die Browserdaten der letzten Stunde/Woche zu l√∂schen. Probieren Sie es aus. Alternativen zum Shortcut:‚Äã Edge: Cookies in Microsoft Edge l√∂schen Chrome: Cache leeren und Cookies l√∂schen - Computer - Google-Konto-Hilfe Firefox: Cookies und Website-Daten in Firefox l√∂schen | Hilfe zu Firefox (mozilla.org) Safari: Verwalten von Cookies und Website-Daten mit Safari auf dem Mac - Apple Support Variante In den meisten Browsern (alle ausser Safari) k√∂nnen Cookies auch direkt √ºber das kleine Schloss üîí in der Adresszeile gel√∂scht werden: Der eigentliche Zweck von Cookies‚Äã Aufgabe L√∂schen Sie alle Cookies der Seite https://ofi.gbsl.website und aktualisieren Sie die Webseite. Was stellen Sie fest? Werbe-Cookies blockieren‚Äã Werbe-Cookies lassen sich mit Erweiterungen blockieren. Hilfreich: Auch Werbeanzeigen k√∂nnen damit blockiert werden. Aktuelle Empfehlung: Die als OpenSource entwickelte Erweiterung &quot;uBlockOrigin&quot; (https://github.com/gorhill/uBlock) installieren. Der Nachfolger von Cookies: Fingerprinting‚Äã Artikel Lesen Lesen Sie den verlinkten Artikel Artikel Halten Sie Fragen fest Erkl√§ren Sie in eigenen Worten, was Fingerprinting ist Am i Unique?‚Äã Am I Unique &quot;Am I Unique&quot; ist eine Website, welche Ihren digitalen Browser Fingerabdruck auswertet und bereitstellt. Damit ist es m√∂glich zu sehen, welche Informationen durch das Aufrufen einer Website preisgegeben werden. Testen Sie Ihren Browser - wie gut sind Sie identifizierbar? Wie sieht das Resultat auf Ihrem Smartphone aus? √Ñndert sich etwas, wenn Sie den Test in einem privaten Fenster durchf√ºhren? https://amiunique.org/fp EFF Cover your tracks Mit &quot;EFF Cover your tracks&quot; k√∂nnen Sie ebenfalls Ihren digitalen Fingerabdruck testen. Zus√§tzlich gibt Ihnen diese Website aber auch Hinweise dazu, wie gut Sie bspw. gegen Cookie-Tracking abgesichert sind. Wie steht es um Ihre Absicherung? https://coveryourtracks.eff.org/","keywords":""},{"title":"Browser","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Grundlegendes/Browser","content":"Browser Begriff‚Äã Ein Webbrowser oder kurz Browser ist ein Programm, welches auf einem Benutzer-Ger√§t installiert ist. Der Browser bietet eine grafische Oberfl√§che an und fordert die f√ºr die Darstellung eine Webseite ben√∂tigten Dateien von einem Webserver an. Anschliessend analysiert es diese Dateien und stellt die Webseite entsprechend dar. Der Browser f√ºhrt auch Programme aus, welche in der Webseite enthalten sind. Produkte‚Äã Logo\tName\tHersteller\tPlattform√ºbergreifend Firefox\tMozilla Chrome\tGoogle Edge\tMicrosoft Safari\tApple nur f√ºr Apple Produkte Technologien‚Äã F√ºr moderne Webseiten werden haupts√§chlich drei Technologien verwendet: HTML (Hypertext Markup Language): Mit dieser Markup-Sprache wird die Struktur einer Webseite beschrieben. HTML-Dateien enthalten den ¬´Bauplan¬ª einer Webseite und Verweise auf alle anderen Dateien, welche f√ºr die Webseite ben√∂tigt werden. CSS (Cascading Stylesheets): Damit wir das Layout der Webseite definiert. Mit CSS werden Position, Farben, Animationseffekte und weitere Formatierungen der einzelnen Elemente der Webseite beschrieben. JS (Java Script) ist eine Programmiersprache. Moderne Webseiten enthalten teilweise umfangreiche Programme, welche vom Browser ausgef√ºhrt werden.","keywords":""},{"title":"Cloud","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Grundlegendes/cloud","content":"Cloud ¬´Cloud¬ª bedeutet, dass Ihre Dateien auf einem Server des Cloud-Betreibers gespeichert werden. Eine Cloud kann aber auch bspw. Rechenleistung zur Verf√ºgung stellen und Teile einer Anwendung ausf√ºhren. √úblicherweise steht auf dem Server ebenfalls eine Web-App zu Verf√ºgung, damit die Dateien im Browser betrachtet oder bearbeitet werden k√∂nnen. Desktop-App ‚Äã Damit die Desktop-App verwendet werden kann, muss diese erst auf dem Ger√§t installiert worden sein. Desktop-Apps bieten meistens einen gr√∂sseren Funktionsumfang, k√∂nnen ohne aktive Internetverbindung gestartet und verwendet werden und sind meist performanter. Web-App ‚Äã Die Web-App wird beim √ñffnen des Dokuments vom Server des Anbieters heruntergeladen und im Browser (daher auf dem Prozessor des Laptops) ausgef√ºhrt. Web-App Architektur@ Einzelne Berechnungen k√∂nnen auch in die Cloud ausgelagert werden, z.B. die Autokorrektur in der Word Web-App: Bei jeder √Ñnderung wird der aktuelle Abschnitt an die Cloud geschickt und auf Fehler √ºberpr√ºft: Autokorrektur in Word Onine Auf der rechten Seite ist der Datenaustausch, der f√ºr die Autokorrektur notwendig ist, vom Laptop zur Cloud zu sehen. Bei jeder √Ñnderung des Dokuments wird der ganze Inhalt des aktuellen Abschnitts an die Cloud geschickt. Web-Apps brauchen eine aktive Internetverbindung und sind oft auch etwas langsamer als Desktop-Apps. Meist ist zudem der Funktionsumfang eingeschr√§nkt. Microsoft 365‚Äã OneDrive im Browser‚Äã In OneDrive im Browser kann eine Datei wahlweise in der Web-App oder in der Desktop-App ge√∂ffnet werden. Mit einem Doppelklick wird die Datei in der Web-App ge√∂ffnet. Klicke auf die drei vertikalen Punkte ‚ãÆ, dann auf √ñffnen und In der App √∂ffnen, um die Datei in der Desktop-App zu √∂ffnen. Teams-App‚Äã In der Teams-App muss auf die drei horizontalen Punkte ‚ãÆ geklickt werden. Es gibt zus√§tzlich die M√∂glichkeit In Teams bearbeiten. In diesem Fall wird die Web-App verwendet, diese wird jedoch innerhalb der Team-App gestartet (die Teams-App kann einen Browser anzeigen).","keywords":""},{"title":"E-Mail verwenden","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Grundlegendes/E-Mail","content":"E-Mail verwenden Eine E-Mail ist ein Brief‚Äã Im Gegensatz zu einem Chat gelten bei der E-Mail-Kommunikation die gleichen Regeln wie beim Briefverkehr. Eine E-Mail enth√§lt also eine Anrede, einen h√∂flichen und sprachlich korrekten Text, sowie eine Grussformel. Bei einer E-Mail wird immer auch ein Betreff angegeben. Dieser sollte so gew√§hlt werden, dass er kurz und pr√§gnant den Inhalt der E-Mail zusammenfasst. Betreff: Wechsel Schwerpunktfach Sehr geehrter Herr Cadetg In den ersten sechs Monaten hier am Gymnasium habe ich grosse Freude am Italienischunterricht bekommen. Das von mir gew√§hlte Schwerpunktfach entspricht hingegen gar nicht meinen Vorstellungen. Deshalb frage ich Sie, ob es mir m√∂glich w√§re, in das Schwerpunktfach Italienisch zu wechseln. Freundliche Gr√ºsse Anna M√ºller Anrede‚Äã Die √ºbliche Andere ist ¬´Sehr geehrte/r Frau/Herr¬ª. Sind mehrere Personen angesprochen, schreibt man ¬´Sehr geehrte Damen und Herren¬ª. Wenn die angesprochene Person unbekannt ist (z.B. bei einer Support-E-Mail-Adresse), so kann man ¬´Guten Tag¬ª schreiben. Ist man mit der angeschriebenen Person vertrauter, schreibt man ¬´Liebe/r¬ª. Am Schluss der Anrede steht kein Satzzeichen. Es folgt eine Leerzeile, dann der erste Satz. Grussformel‚Äã Zwischen Text und Grussformel befindet sich eine Leerzeile. Die Grussformel lautet ¬´Freundliche Gr√ºsse¬ª ohne Satzzeichen. Ist man vertrauter, schreibt man ¬´Liebe Gr√ºsse¬ª. Wann antworten? Wann nicht?‚Äã Benutzen Sie die Antworten-Funktion nur, wenn Sie wirklich eine Antwort auf eine Mail schreiben. So kann eine l√§ngere E-Mail-Konversation vom Mailprogramm sauber dargestellt und nachvollzogen werden. Wenn Sie jemandem eine neue Nachricht schreiben, sich also nicht auf vorhergehenden E-Mail-Verkehr beziehen, dann sollten Sie die Antworten-Funktion nicht verwenden, sondern einfach eine neue E-Mail schreiben. Allen Antworten‚Äã Die Funktion allen Antworten sollte man normalerweise nicht benutzen. Optionen CC und BCC‚Äã Optionen im Mailprogramm Kopie/CC In das An-Feld wird der eigentliche Empf√§nger geschrieben. Will man gleichzeitig eine Kopie der E-Mail versenden, nutzt man das Cc-Feld. Die Abk√ºrzung Cc steht f√ºr Carbon copy und bedeutet so viel wie Kohlepapierdurchschlag. Es ist √ºblich, dass die Personen, die in Cc stehen, die E-Mail lediglich zur Kenntnis bekommen. Die Empf√§nger in den Feldern An und Cc k√∂nnen die E-Mail-Adressen der anderen lesen und wissen somit, wer die E-Mail noch bekommen hat. Und hier lauert die Gefahr! Denn diese Art der Versendung sollte man nur w√§hlen, wenn es sich um eine geschlossene Nutzergruppe, wie z.B. innerhalb einer Organisation handelt.1 Blindkopie/BCC M√∂chte man dagegen eine E-Mail an mehrere Empf√§nger versenden, die sich untereinander nicht kennen, sollte man auf jeden Fall das Bcc-Feld nutzen. Bcc steht f√ºr Blind carbon copy und wird mit ‚Äûunsichtbarer Durchschlag‚Äú √ºbersetzt. Der Name sagt es schon: Die Empf√§nger in diesem Feld werden weder von den anderen Empf√§ngern gesehen, noch k√∂nnen sie selbst andere Adressen sehen. Lediglich das An-Feld ist f√ºr alle Teilnehmer sichtbar.1 Quelle: An-Cc-Bcc: scope-and-focus.com ‚Ü©","keywords":""},{"title":"Suchmaschinen","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Grundlegendes/Suchmaschine","content":"Suchmaschinen Suchmaschinen werden verwendet, um im World Wide Web nach Informationen zu suchen. Die bekannteste Suchmaschine ist Google mit einem Marktanteil von √ºber 90%. Einschr√§nkungen Suchmaschinen‚Ä¶ k√∂nnen nicht alles finden -&gt; Deep Web k√∂nnen beeinflusst werden -&gt; SEO: Search Engine Optimization beeinlussen die Suchergebnisse -&gt; Filterblase Funktionsweise‚Äã Eine Suchmaschine hat drei Hauptaufgaben: Erstellen eines Index Verarbeiten von Suchanfragen Bewerten und Filtern der Suchergebnisse Bevor eine Suchmaschine eine Abfrage beantworten kann, muss erst eine Datenbank mit entsprechenden Informationen zu Webseiten erstellt werden. Diese Aufgabe wird von automatischen Programmen, sogenannten Webcrawlern, √ºbernommen. Sie durchsuchen das World Wide Web st√§ndig nach neuen und ge√§nderten Seiten. Die Seiten werden analysiert und in einer riesigen Datenbank eingetragen. Dabei wird jeder Eintrag mit Stichworten versehen, welche sich aus der Analyse ergeben. Wenn eine Benutzer:in eine Suchanfrage an die Maschine schickt, wird die Anfrage erst sprachlich analysiert. Beispielsweise werden falsch geschrieben Worte korrigiert. Anschliessend wird in der Datenbank nach Eintr√§gen gesucht, deren Stichworte m√∂glichst gut mit der Anfrage √ºbereinstimmen. Schliesslich werden die Resultate bewertet und entsprechend geordnet. Achtung Suchergebnisse werden von einem automatischen Lernsystem (k√ºnstliche Intelligenz) beeinflusst. Zus√§tzlich erfassbare Informationen wie Person, Ort, Ger√§t oder der verwendete Browser geben der Suchmaschine Hinweise darauf, welche Informationen relevanter sind.","keywords":""},{"title":"Statsistische Kenngr√∂ssen","type":0,"sectionRef":"#","url":"/24w/Excel/Lageparameter","content":"Statsistische Kenngr√∂ssen Lageparameter beschrieben, wo die Stichprobe liegt, d.h. um welchen Wert sie sich gruppiert. Mittelwert‚Äã Der Mittelwert ist der Durchschnitt aller Werte. xÀâ=x1+x2+x3+...+xnn\\bar{x} = \\frac{x_1+x_2+x_3+...+x_n}{n}xÀâ=nx1‚Äã+x2‚Äã+x3‚Äã+...+xn‚Äã‚Äã In Excel kann der Mittelwert im Bereich A1:A12 mit der Funktion =MITTELWERT(A1:A12) berechnet werden. Modus‚Äã Der Modus (Modalwert) ist der Wert, der im Datensatz am h√§ufigsten vorkommt. Er ist vor allem dann wichtig, wenn man es nicht mit quantitativen Merkmalen (etwa K√∂rpergr√∂ssen) zu tun hat, sondern mit qualitativen Daten erfassbaren Daten, etwa mit verschiedenen m√∂glichen Antworten auf eine Frage. Median‚Äã Der Median ist der mittlere Wert. Er kommt also zustande, indem alle Werte der Gr√∂sse nach geordnet werden, und der Mittlere Wert ausgelesen wird. @ Im Bild Oben w√§re der Median entsprechend 8 kg. Sind in einem Datensatz eine gerade Anzahl Datens√§tze vorhanden, so berechnet sich der Median als Durchschnitt der beiden mittleren Werte. Vorteil gegen√ºber dem Mittelwert‚Äã Median vs. Mittelwert Berechnen Sie f√ºr die folgenden Gewichte den Mittelwert und den Median. Welcher Wert beschreibt die Lage des mittleren Gewichts am besten? @ Erkenntnisse Modus und Median sind einfach zu ermitteln und sind im Vergleich zum Mittelwert statistisch robust, d.h. sie reagieren wenig sensibel auf statistische Ausreisser. Die Aussage ist jedoch nicht die gleiche und insbesondere der Modus ist weniger aussagekr√§ftig! Streuungsparameter‚Äã Streuparameter beschrieben, wie Breit die Stichprobe um den Mittelwert streut, d.h. wie weit sie im Mittel vom Mittelwert entfernt sind. Spannweite‚Äã Die Spannweite ist der Abstand (die Differenz) zwischen dem kleinsten und dem gr√∂ssten Wert. Sie ist sehr einfach zu ermitteln, sagt aber wenig aus. Hauptnachteil: Die Spannweite ist nicht robust, d.h. statistische Ausreisser (einzelne Werte, die viel tiefer oder h√∂her sind als fast alle √ºbrigen ‚Äì nicht selten infolge von Messfehlern oder falsch eingegebenen Daten) fallen viel zu stark ins Gewicht. Varianz s2s^2s2‚Äã Die Varianz s2s^2s2 ist die mittlere quadratische Abweichung der Ergebnisse vom Mittelwert: s2=(x1‚àíxÀâ)2+(x2‚àíxÀâ)2+...+(xn‚àíxÀâ)2n‚àí1s^2 = \\frac{(x_1-\\bar{x})^2+(x_2-\\bar{x})^2+...+(x_n-\\bar{x})^2}{n-1}s2=n‚àí1(x1‚Äã‚àíxÀâ)2+(x2‚Äã‚àíxÀâ)2+...+(xn‚Äã‚àíxÀâ)2‚Äã wobei n die Gr√∂sse der Stichprobe, x1x_1x1‚Äã, x2x_2x2‚Äã, xnx_nxn‚Äã die verschiedenen Messwerte und xÀâ\\bar{x}xÀâ der Mittewlert darstellen. In Excel kann die Standardabweichung mit der Funktion =VAR.S berechnet werden. Zum Beispiel =VAR.S(A1:A12) f√ºr die Werte der Zellen A1 bis A12. Standardabwichung sss‚Äã Vereinfacht gesagt, ist die Standardabweichung die durchschnittliche Entfernung aller gemessenen Auspr√§gungen eines Merkmals vom Durchschnitt. Die Standardabweichung besitzt immer die gleiche Masseinheit wie das zu untersuchende Merkmal. Dadurch ist im Vergleich zur Varianz eine Interpretation einfacher. Eine kleinere Standardabweichung gibt in der Regel an, dass die gemessenen Auspr√§gungen eines Merkmals eher enger um den Mittelwert liegen, eine gr√∂ssere Standardabweichung gibt eine st√§rkere Streuung an. Die Standardabweichung sss ist die Quadratwurzel aus der Varianz: s=s2=(x1‚àíxÀâ)2+(x2‚àíxÀâ)2+...+(xn‚àíxÀâ)2n‚àí1s=\\sqrt{s^2} = \\sqrt{\\frac{(x_1-\\bar{x})^2+(x_2-\\bar{x})^2+...+(x_n-\\bar{x})^2}{n-1}}s=s2‚Äã=n‚àí1(x1‚Äã‚àíxÀâ)2+(x2‚Äã‚àíxÀâ)2+...+(xn‚Äã‚àíxÀâ)2‚Äã‚Äã In Excel kann die Standardabweichung mit der Funktion =STABW.S berechnet werden. Zum Beispiel =STABW.S(A1:A12) f√ºr die Werte der Zellen A1 bis A12. Weitere Aussagekraft F√ºr normalverteilte Merkmale (nur f√ºr solche!) gilt die Faustregel, dass innerhalb der Entfernung einer Standardabweichung nach oben und unten vom Mittelwert rund 686868 Prozent aller Datenpunkte liegen. Im Umkreis von zwei Standardabweichungen sind es rund 959595 Prozent aller Werte. Bei gr√∂sseren Abweichungen spricht man von Ausreissern. Verteilung von normalverteilten Merkmalen Boxplot‚Äã Der Boxplot stellt die Lageparameter graphisch dar. Er besteht immer aus einem Rechteck, genannt Box, und zwei Linien, die dieses Rechteck verl√§ngern. Diese Linien werden als ‚ÄûAntenne&quot; bezeichnet und werden durch einen Strich abgeschlossen. Der Strich in der Box repr√§sentiert den Median der Verteilung. Als Ausreisser werden Daten bezeichnet, die mehr als das 1.5-fache des Interquartilsabstands (der Abstand vom oberen zum unteren Quartil) vom untern bzw. oberen Quartil entfernt sind. Solche Ausreisser passen nicht zum Rest des Datensatzes und verzerren die statistischen Kenngr√∂ssen unn√∂tig. Solche Datenpunkte kommen entweder durch Messfehler oder durch Randerscheinungen zustande. Im obigen Beispiel wird bspw. der Wert 67 als Ausreisser taxiert.","keywords":""},{"title":"Datenverlust","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Sicherheit/Datenverlust","content":"Datenverlust Eine oft untersch√§tzte Gefahr ist der Verlust von Daten. @ Ursachen‚Äã F√ºr den Verlust von Daten gibt es verschiedene Ursachen, beispielsweise: Defekt des Ger√§ts, auf welchem die Daten gespeichert sind, Verlust des Ger√§ts, auf welchem die Daten gespeichert sind, Zerst√∂rung der Daten durch Schadsoftware, Verschl√ºsselung der Daten durch Schadsoftware. Massnahmen‚Äã Cloudspeicher verwenden‚Äã Daten sollten nie auf nur einem Ger√§t gespeichert werden. Mit Cloud-L√∂sung werden Daten automatisch zwischen mehreren Ger√§ten und einem Cloudspeicher synchronisiert. Damit stehen die Daten auch noch zu Verf√ºgung, wenn ein Ger√§t verloren geht oder einen Defekt hat. Schutz vor Schadsoftware‚Äã Kapitel Schadsoftware","keywords":""},{"title":"Passw√∂rter","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Sicherheit/Passwoerter","content":"Passw√∂rter Unter https://howsecureismypassword.net/ kann die Sicherheit Ihres Passworts analysiert werden - insbesondere spannend ist die gesch√§tzte Zeit, um das Passwort zu knacken. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwort √ºberpr√ºfen‚Äã Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. 4. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (Empfehlung) - gute Basis-Funktionen und einfaches Handling. KeePass LastPass","keywords":""},{"title":"Schadsoftware","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Sicherheit/Schadsoftware","content":"Schadsoftware Ransomware Wanna Cry@ Schadsoftware oder Schadprogramm (auch Malware) sind Computerprogramme, welche entwickelt wurden, um aus Sicht der Betroffenen unerw√ºnschte und sch√§dliche Funktionen auszuf√ºhren. Bezeichnungen‚Äã Computerviren sind Programme, welche sich selbst√§ndig und automatisch auf m√∂glichst viele Ger√§te kopieren. Trojaner sind Schadprogramme, welche sich als andere App, beispielsweise als Spiel tarnen. Ransomware sind Schadsoftware, welche die Daten auf den infizierten Ger√§ten verschl√ºsseln und f√ºr deren Entschl√ºsselung ein L√∂segeld verlangen. Spyware sind Schadprogramme, welche den Benutzer ausspionieren, indem sie Daten und Aktivit√§ten am Ger√§t an Dritte weiterleiten. Aufgabe Wer hat den ersten Computervirus geschrieben? Wie heisst der Virus? Wie hat sich das Virus verbreitet? Computerschutz‚Äã Damit ein Schadprogramm auf dem Computer ausgef√ºhrt werden kann, muss es zuerst einmal dorthin kommen. Damit dies klappt muss entweder ein Benutzer einen Trojaner installieren oder ein Computervirus kann einbrechen. Die Voraussetzung dass ein Computervirus ein System infizieren kann, sind Sicherheitsl√ºcken. Das sind nicht bedachte Wege, √ºber welche Programme auf einem Computer ausgef√ºhrt werden k√∂nnen, ohne dass dazu eine Best√§tigung der Anwender:in n√∂tig ist (normalerweise muss beim bspw. beim Installieren eines Programms die Installation abgesegnet werden.). Diese Wege sind meist ausgekl√ºgelt und sehr clever. Um sich vor Schadsoftware zu sch√ºtzen, gilt es folgende Punkte zu beachten: gesunder Menschenverstand - die Herausgeber:innen von Programmen sollten verifizierbar und vertrauensw√ºrdig sein. Heruntergeladene Programme von dubiosen Seiten sollte grunds√§tzlich misstraut werden. das System aktuell halten - Updates nerve zwar gewaltig; sie flicken jedoch entdeckte L√ºcken, so dass der Computer Schritt-f√ºr-Schritt sicherer wird. Virenprogramme verwenden - Dubiose Aktivit√§ten von Programmen (Netzwerkverkehr, Festplatten- oder Arbeitsspeicherzugriffe), sowie der Inhalt von Dateien k√∂nnen von Virenprogrammen analysiert und ggf. blockiert werden. Virenprogramme‚Äã Aktuelle Versionen von Windows und Mac OS Computer sind mit den Grundeinstellungen gen√ºgend gegen allt√§gliche Bedrohungen gesch√ºtzt. Bei Mac passiert der Virenschutz ausschliesslich im Hintergrund (mit XProtect), bei Windows heisst der Virenschutz Microsoft Defender und besitzt auch eine grafische Oberfl√§che. Auf beiden Betriebssystemen werden bspw. heruntergeladene Dateien auf bekannte Schadsoftware analysiert. Der Virenschutz hinkt dabei immer ein bisschen hinterher - sobald eine neue L√ºcke ausgenutzt wird, muss diese geschlossen werden und die Ausf√ºhrung der entsprechenden Schadprogramme sollte durch den Virenschutz verhindert werden. Damit auch aktuelle So Die Anwender:in bekommt von diesem Schutz nur dann etwas mit, wenn ein m√∂glicherweise gef√§hrliche Software heruntergeladen wurde updates ausgef√ºhrt werden m√ºssen. Funktioniert mein Virenschutz? Damit getestet werden kann, ob der Virenschutz auf einem System funktioniert, gibt es eine EICAR-Testdatei (erzeugt vom European Institute for Computer Antivirus Research (EICAR)), die unsch√§dlich ist, aber von jedem g√§ngigen Antivirus-Programm erkannt werden muss. Der Inhalt der Datei sieht wie folgt aus: EICAR-Testdatei X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* Aufgabe: Laden Sie die EICAR-Testdatei herunter und √ºberpr√ºfen Sie, dass ihr System Alarm schl√§gt. Download","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Grundlegendes/URLs","content":"Links Ein Link oder URL (engl. uniform resource locator) ist eine globale, weltweit eindeutige Adresse f√ºr eine Datei. Die URL definiert, wie mit dem anderen Computer kommuniziert wird, wo dieser Computer zu finden ist, und welche Datei auf dem Computer gemeint ist. Die URL setzt sich aus vier Teilen zusammen: https:// gbsl.ch /gym/aktuelles/news/ ?language=de&amp;filter=gym ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Protokoll Server Dateipfad Suchanfrage Das Protokoll ist die √úbertragungsart der Datei, normalerweise https://, was bedeutet, dass die √úbertragung verschl√ºsselt ist. Achtung! Wenn das unverschl√ºsselte Protokoll http:// verwendet wird, k√∂nnen die √ºbertragenen Informationen von anderen Personen im gleichen Netzwerk mitgelesen werden. Dadurch k√∂nnen Passw√∂rter oder Kreditkarteninformationen leicht abgegriffen werden! Gerade bei Zahlungen muss unbedingt darauf geachtet werden, dass das https:// Protokoll verwendet wird. Der Name des Servers oder Dom√§nenname ist ein weltweit eindeutiger Name f√ºr den Computer, auf welchem die Datei gespeichert ist. Der Dateipfad ist eine eindeutige Bezeichnung einer Datei pro Computer. Die Suchanfrage enth√§lt Benutzereingaben, die auf interaktiven Webseiten erfasst werden. Aufgabe Wie lauten die vier Teile des folgenden URL? https://www.google.ch/search?q=Quellenangabe SSR Verf√ºgbarkeit von Links‚Äã Oft sind Links nicht lange g√ºltig. Wenn beispielsweise eine Website restrukturiert wird, stimmen die Links oft nicht mehr. Deshalb ist es in schriftlichen Arbeiten bei der Quellenangabe wichtig, dass das Datum des Zugriffs angegeben wird. So kann nachvollzogen werden, wann die verlinkte Website verf√ºgbar war. Aufgabe Die folgenden Quellenangaben stammen aus einem PDF zum korrekten Zitieren und Bibliographieren. Die Links funktionieren aber nicht mehr. Versuchen Sie, den richtigen Link zu finden: Goethe-Universit√§t Frankfurt a. M.: Neurolinguistik (ge√§ndert am 6. November 2007) http://www1.uni-frankfurt.de/fb/fb10/KogLi/Lehrstuehle/ehem__Lehrstuhl_Leuninger/Neurolinguistik/index.html (abgerufen am 03.03.2018). Baader, S.: Geometrie ‚Äì Vorlesungsscript. Mitschrift von Alex Aeberli und Raoul Bourquin, Wintersemester 07. [PDF], Skript zur Vorlesung Geometrie an der ETHZ im Wintersemester 2007, (2007) https://www.mitschriften.ethz.ch/main.php?page=3&amp;scrid=1&amp;pid=29&amp;eid=1 (abgerufen am 31.01.2018). ParlCH: ¬´Erkl√§r mir das Parlament¬ª. 18.02.2016 https://www.youtube.com/watchv=vtfEG0txhOU (abgerufen am 31.01.2018). Web Archiv - Einmal im Internet, immer im Internet‚Äã Websites die einmal online gestellt wurden, sind oft auch Jahre nachdem sie abgeschaltet wurden, noch zug√§nglich. Ein Tool, welches dies erm√∂glicht, ist bspw. das Web Archiv Wayback Machine. Diese Website l√§dt regelm√§ssig die √ºber Suchmaschinen verf√ºgbaren Websiten herunter und archiviert diese. So k√∂nnen teilweise auch alte, heute nicht mehr verf√ºgbare Websiten ge√∂ffnet werden. Achtung Da die Websiten archiviert sind, dauert es sehr lange, bis eine Website geladen ist. Die Versionen der Seite srf.ch Aufgabe Seit wann ist unter srf.ch die heutige Website vom Schweizer Radio und Fernsehen zu finden? Wem hat die Webseite vor diesem Zeitpunkt geh√∂rt? Wie erkl√§ren Sie sich die unterschiedlichen Wechsel? SSR","keywords":""},{"title":"Gesellschaft","type":0,"sectionRef":"#","url":"/25h/Big-Data/intro","content":"Gesellschaft Big Data‚Äã Mobiltelefone, Uhren, Sensoren, Kameras und Webseiten sammeln andauernd Informationen √ºber uns. Algorithmen suchen mit Hilfe von K√ºnstlicher Intelligenz in diesen riesigen Datensammlungen nach Mustern und teilen uns in Kategorien ein. Dies wird als ¬´Big Data¬ª bezeichnet. Hannah Fry zeigt in ihrem Buch ¬´Hello World¬ª f√ºr verschiedene Bereiche anhand von Beispielen auf, was heute mit ¬´Big Data¬ª gemacht wird und welche Auswirkungen das auf unser Leben hat. Es stellt sich die Frage, wann ¬´Big Data¬ª w√ºnschenswert und hilfreich ist und wann unangenehm oder sogar gef√§hrlich. @ Herunterladen * In der n√§chsten Zeit setzen Sie sich anhand des Buchs von Hannah Fry gruppenweise mit diesem Thema auseinander und halten einen Vortrag dazu. * Die Buchausschnitte sind urheberrechtlich gesch√ºtzt und d√ºrfen ausschliesslich f√ºr den schulischen Gebrauch verwendet werden. Die Weitergabe ist verboten. Ablauf‚Äã 1. Themenwahl und Gruppenbildung‚Äã Im Buch gibt es sechs Kapitel zu Spezialthemen. Sie w√§hlen eines dieser Themen und setzen sich vertieft damit auseinander: Daten (Facebook) Justiz Medizin Autos Kriminalit√§t Kunst Jedes Thema kann von maximal vier Sch√ºler:innen gew√§hlt werden. Jede Gruppe bestimmt eine Gruppenchef:in. 2. Lesen‚Äã Alle lesen zwei bis drei Kapitel - die Einleitung und die zum Thema passenden Kapitel gem. untenstehender Tabelle. Thema\tKapitel\tGruppeDaten\tEinleitung, Daten\tJael, Noemi, Rownok, Matteo Justiz\tEinleitung, Justiz\tUma, Alessia, Kyra, Annic Medizin\tEinleitung, Medizin\tMia, Berenike, Eline Autos\tEinleitung, Autos\tMa√´lle N., Ma√´lle A., Luana Kriminalit√§t\tEinleitung, Kriminalit√§t\tCedric, Julien, Emil Macht / Kunst\tEinleitung, Macht, Kunst\tCindy, L√©onie, Jana, Riana Machen Sie sich Notizen, damit Sie sich sp√§ter schnell wieder im Buch zurecht finden. Selbstverst√§ndlich d√ºrfen Sie auch weitere Kapitel oder gar das ganze Buch lesen. 3. Zus√§tzliche Quellen‚Äã Informieren Sie sich bei zus√§tzlichen Quellen √ºber Ihr Thema: Zus√§tzliche Quellen Allgemein‚Äã https://www.heise.de/hintergrund/Automatische-Ungerechtigkeit-fuer-einen-ganzen-Jahrgang-britischer-Schueler-4984692.html 1. Daten‚Äã https://www.deutschlandfunk.de/alles-unter-kontrolle-chinas-intelligenter-schule-entgeht.680.de.html?dram:article_id=438868 https://netzpolitik.org/2014/algorithmen-allmaechtig-freiheit-in-den-zeiten-der-statistik/ https://www.srf.ch/news/schweiz/automatische-gesichtserkennung-wir-muessen-vorsichtiger-mit-unseren-fotos-umgehen https://www.srf.ch/news/wirtschaft/datenauskunft-post-von-amazon-164-zip-files 2. Justiz‚Äã https://www.srf.ch/news/schweiz/datenschuetzer-raet-davon-ab-neue-fahndungs-app-sammelt-ueber-drei-milliarden-internet-fotos https://heise.de/-5001003 TV Serie: Bull https://www.vijilent.com/real-data-scientist-reviews-tv-trial-science/ 3. Medizin‚Äã https://www.datarevenue.com/de-blog/kuenstliche-intelligenz-in-der-medizin https://www.nzz.ch/wissenschaft/ki-in-der-medizin-hilfe-bei-einfachen-und-repetitiven-aufgaben-ld.1497525 NZZ-Artikel https://www.srf.ch/news/panorama/schlechter-datenschutz-menstruations-apps-intimste-angaben-landen-bei-facebook https://www.nzz.ch/meinung/ki-in-der-medizin-es-braucht-vor-allem-menschliche-intelligenz-ld.1521205 NZZ-Kommentar 4. Autos‚Äã https://www.srf.ch/audio/regionaljournal-zuerich-schaffhausen/selbstfahrender-bus-in-neuhausen-in-unfall-verwickelt?id=11558691 https://heise.de/-4852995 5. Kriminalit√§t‚Äã https://geschichtedergegenwart.ch/die-pre-cops-wie-algorithmen-die-polizeiarbeit-veraendern/ https://magazin.nzz.ch/wirtschaft/kameras-in-der-migros-datenschuetzer-greifen-ein-ld.1536443 NZZ-Artikel https://youtu.be/sxRkwdDI9Yg https://www.srf.ch/news/panorama/automatische-gesichtserkennung-heute-im-stadion-morgen-ueberall 6. Kunst‚Äã https://srf.ch/play/tv/redirect/detail/4b6a8647-b179-4dd8-89ec-3445e01dcda5 https://mixed.de/neue-bild-ki-zeigt-das-potenzial-riesiger-ki-modelle/ 4. Gruppendiskussion‚Äã Nachdem Sie alle die Kapitel gelesen haben, diskutieren Sie in der Gruppe dar√ºber. Die Gruppendiskussion findet zu einem vorgegebenen Zeitpunkt w√§hrend des Unterrichts statt. In der Gruppe besprechen Sie die folgenden Punkte: allgemeiner Gedankenaustausch zum Gelesenen Welche Abschnitte sind besonders wichtig und sollten in den Vortrag einfliessen? Einigen Sie sich in der Gruppe auf eine zentrale Fragestellung und eine Meinung inklusive Begr√ºndung dazu. Wie kann im Vortrag am besten ein Erz√§hlungsbogen eingebaut werden? In welcher Reihenfolge sollen die Themen vorgestellt werden? Wie wird der Vortrag in der Gruppe aufgeteilt? Wie sollen die Folien gestaltet werden? Halten Sie schriftlich in einem Protokoll fest, was Sie diskutiert haben. Das Protokoll geben Sie als PDF-Datei per E-Mail am Ende der Doppellektion ab. Es fliesst in die Bewertung mit ein. 5. Vortrag vorbereiten‚Äã Sie erstellen in der Gruppe Folien f√ºr Ihre Pr√§sentation. Dabei beachten Sie die Hinweise f√ºr gute Pr√§sentationen. Abgabe Folien Die Folien geben Sie als PDF per E-Mail bis um 17.00 Uhr am Abend vor der Pr√§sentation ab. 6. Vortrag halten‚Äã Der Vortrag dauert ca. 10 bis 15 Minuten. Sie f√ºhren den Vortrag als Gruppe durch. Das bedeutet, dass alle Gruppenmitglieder ein Teil des Vortrags halten und alle w√§hrend der ganzen Dauer des Vortrags vorne stehen. 7. Bewertung‚Äã Die folgenden Kriterien werden mit je 1 bis 4 Punkten bewertet. Es k√∂nnen also maximal 24 Punkte erreicht werden. Gruppenbewertung Inhalt: sich intensiv und kritisch mit dem Thema auseinandersetzen, die wichtigsten Aspekte des Themas auf den Punkt bringen und dem Publikum vermitteln Visualisierung: gestalterisch passende und ansprechende Folien gestalten, welche mit passenden Visualisierungstechniken den Inhalt des Vortrags gut unterst√ºtzen. Strukturierung: eine gute Einleitung, roter Faden, angemessener Inhaltsrahmen und Zeitrahmen (10-15 Minuten) Sprache: Laut und deutlich sprechen, frei sprechen (d.h. nicht ablesen), nicht zu schnell sprechen, keine F√ºlllaute wie ¬´√§hm¬ª verwenden Haltung: Gerade und stabil stehen, Publikum anschauen, Gestik Arbeitsprozess Lernziele‚Äã Informatik und Gesellschaft Sie setzen sich kritisch mit der Sammlung von personenbezogenen Daten und deren Auswertung durch intelligente Algorithmen auseinander. Sie k√∂nnen absch√§tzen, wo in unserer Gesellschaft grosse Datenmengen und k√ºnstliche Intelligenz eingesetzt werden um Entscheidungen zu treffen. Sie bilden sich eine Meinung zum Einsatz von grossen Datenmengen und k√ºnstlicher Intelligenz in verschiedenen Bereichen der Gesellschaft. Lernziele Gestaltung von Folien Sie gestalten Folien mit einem ansprechenden, einheitlichen Layout. Sie setzen gezielt passende Visualisierungen ein (Bilder, Grafiken, Symbole, Diagramme). Sie vermeiden die Verwendung von zu viel Text auf den Folien. Sie verwenden grosse Bilder in einer passenden Aufl√∂sung und einem passenden Dateiformat (Transparenz!).","keywords":""},{"title":"Powerpoint","type":0,"sectionRef":"#","url":"/25h/Big-Data/powerpoint","content":"Powerpoint Pr√§sentieren Zeit: 15 Minuten Lesen Sie die folgenden Kapitel auf ict.mygymer.ch: URL\tLesearthttps://ict.mygymer.ch/praesentation/praesentieren\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/allgemein/bilder\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/animation\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/videos\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/master\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/referentenansicht\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/notizen\t‚≠êÔ∏è Halten Sie einige Take-Home Messages fest: Aufgabe Erstellen Sie eine Powerpoint Pr√§sentation, welche folgende Kriterien erf√ºllt: Im Folienmaster wird ein Logo in der Kopfzeile eingef√ºgt wird die pers√∂nliche Mail-Adresse unten rechts eingef√ºgt Die Titelseite hat ein Hintergrundbild einen gut lesbaren Titel zeigt das heutige Datum Die zweite Folie zeigt eine animierte Auflistung mit min. 5 Eintr√§gen (bei jedem Klick wird ein Bullet-Point hinzugef√ºgt) hat zus√§tzliche Notizen f√ºr die Referent:in. Die dritte Folie zeigt die folgende, selber nachgebaute Animation: Hinweis Verwenden Sie eine benutzerdefinierte Pfadanimation (Kurve Zeichnen). Lassen Sie die Animationen unendlich lange wiederholen, wobei die &quot;Animations Dauer&quot; bei einem Objekt bspw. 6 s und beim anderen Objekt 5 s dauert. Achten Sie zudem darauf, bei den Effektoptionen die Haken bei Sanft Starten und Sanfte Enden zu entfernen. Laden Sie die fertige Pr√§sentation hier hoch: Upload","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/ICT/Sicherheit/Authentifizierung","content":"Authentifizierung Authentifizierung (engl. authentication) ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Basics","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/overview","content":"Basics Basics Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/betriebssystem","content":"Betriebssystem Globale Suche‚Äã WindowsmacOS Startmen√º mit √∂ffnen und direkt mit Tippen beginnen. Auf die Lupe klicken und Suchanfrage starten. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. WindowsmacOS Video","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/dateiexplorer","content":"Dateiexplorer WindowsmacOS Dateiexplorer Ansichten‚Äã WindowsmacOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã Sie k√∂nnen Dateien in einem Ordner nach unterschiedlichen Kriterien sortieren. Im Downloads Ordner ist etwa die Sortierung nach dem &quot;Erstellungsdatum&quot; sinnvoll, bei Aufr√§umarbeiten wo die gr√∂ssten Dateien gel√∂scht werden sollen, die &quot;Gr√∂sse&quot; oder beim Aufsuchen eines Bildes (oder eines anderen spezifischen Dateityps) das Sortieren nach dem &quot;Dateityp&quot; (bzw. nach der &quot;Art&quot;). Standardm√§ssig wird nach dem &quot;Namen&quot; sortiert. WindowsmacOS Video Ordner Erstellen‚Äã Ein Ordner gruppiert mehrere Dateien an einem Ort. Eine Datei in einem Ordner besitzt den Ordnernamen im Dateipfad. Sie k√∂nnen einen neuen Ordner mit einem gew√ºnschten Namen erstellen: √ºber das Kontextmen√º √ºber das Men√ºband WindowsmacOS Video Dokumente verschieben‚Äã Sie k√∂nnen Dateien zwischen verschiedenen Ordnern, die allenfalls auf unterschiedlichen Laufwerken liegen, verschieben. per Drag&amp;Drop (mit der Maus Packen und in einen anderen Ordner Ziehen) (oder √ºber Kopieren bzw. Ausschneiden und anschliessendes Einf√ºgen) WindowsmacOS Ausschneiden&amp;Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dateien und Dokumente umbenennen‚Äã WindowsmacOS Mit F2 (je nach Tastatur auch Fn+F2) Mit rechtsklick &quot;Umbenennen&quot; ZIP Dateien‚Äã Dateien k√∂nnen komprimiert werden - sie brauchen dann weniger Speicherplatz auf Ihrem Ger√§t, k√∂nnen im Gegenzug aber nicht mehr bearbeitet werden (ausser Sie entpacken die Dateien wieder). Komprimieren‚Äã WindowsmacOS Video Entpacken‚Äã WindowsmacOS Video","keywords":""},{"title":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/material_python","content":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung ‚¨á Download BYOD Material Alle Python-Bezogenen Aufgabe sollen direkt auf dieser Seite gemacht werden. hello__world.py print(&quot;Hello World! It's a beautiful Day.&quot;) create__mesh.py from turtle import * from math import sqrt import random SQRT3 = sqrt(3) COLORS = ['red', 'blue', 'orange', 'green', 'purple', 'brown'] speed(7) for index_x in range(5): for index_y in range(5): x = index_x * 30 if index_y % 2 == 1: x = x - 15 y = index_y * 15 * SQRT3 penup() goto(x, y) pendown() for i in range(3): color(random.sample(COLORS, 1)[0]) forward(30) left(120) klammern.py ","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/navigation","content":"Systemnavigation Tastatur‚Äã WindowsmacOS , Win Windows-Taste , Shift (oder Umschalttaste) Alt (oder Wahltaste) Ctrl (oder Control-Taste) Feststelltaste (oder Caps-Lock-Taste), Tabulator-Taste Escape-Taste Funktionstaste Fn Tastenk√ºrzel‚Äã WindowsmacOS Ctrl + X: Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl + C: Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl + V: Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl + Z: &quot;R√ºckg√§ngig machen&quot; - Den vorherigen Befehl widerrufen. Sie k√∂nnen anschliessend zum Wiederholen den TastaturkurzbefehlShift + Ctrl + Z dr√ºcken, um den Widerrufen-Befehl umzukehren. Ctrl + A: Alle Objekte ausw√§hlen. Ctrl + F: Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl + P: Das aktuelle Dokument drucken. Ctrl + S: Das aktuelle Dokument sichern. Ctrl + T: Einen neuen Tab √∂ffnen. + Tabulatortaste : Alle ge√∂ffneten Apps anzeigen. Alt + Tabulatortaste : Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift + Enter : Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) Pfeiltasten‚Äã WindowsmacOS Shift + Pfeiltasten Text ausw√§hlen Ctrl + Pfeiltasten ganze W√∂rter √ºberspringen Ctrl + Shift + Pfeiltasten ganze W√∂rter selektieren Win + Pfeiltasten Fenster auf dem Bildschirm anordnen Klammern‚Äã WindowsmacOS ( Shift + 8 ) Shift + 9 { Normalerweise Alt Gr + √§ } Normalerweise Alt Gr + $ [ Normalerweise Alt Gr + √º ] Normalerweise Alt Gr + ! Weitere g√§ngige Zeichen‚Äã WindowsmacOS ` Shift + ^ + Leerschlage (Backtick) @ Alt Gr + 2 # Alt Gr + 3 * Shift + 3 * Shift + 3 % Shift + 5 &amp; Shift + 6 / Shift + 7 \\ Shift + 7 &lt; &lt; &gt; Shift + &lt; Link √ñffnen‚Äã Links in bspw. in Word/Powerpoint √∂ffnen Link auf einer Webseite in einem neuen Tab √∂ffnen ... Cmd + Click Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. WindowsmacOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werden. WindowsmacOS Scrollen‚Äã WindowsmacOS Alle Programme Anzeigen‚Äã WindowsmacOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen. Erstellen‚Äã WindowsmacOS Virtuelle Desktops: Mit +Tabulator alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* WindowsmacOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. WindowsmacOS Weitere Gesten hier","keywords":""},{"title":"2. QR Code","type":0,"sectionRef":"#","url":"/25h/Codierung/Anwendungen/qr-code","content":"2. QR Code Was enth√§lt der QR-Code? üè¥‚Äç‚ò†Ô∏è‚ò†Ô∏èùúã Auftrag Recherchieren Sie in einer 2er bis 3er Gruppe wie ein QR-Code funktioniert welche Elemente darin vorkommen wie viele Zeichen darin codiert werden k√∂nnen weshalb der Inhalt immer noch lesbar ist, auch wenn ein Teil des QR-Codes abgedeckt ist weitere spannende Fakten, denen Sie begegnen Halten Sie Ihre Erkenntnisse auf einem A3-Plakat fest. Loading... PDF-Quelle 1 Quelle: swisseduc.ch ‚Ü©","keywords":""},{"title":"1. Morsecode","type":0,"sectionRef":"#","url":"/25h/Codierung/Anwendungen/morsecode","content":"1. Morsecode Der Morsecode (auch Morsealphabet oder Morsezeichen genannt) ist ein gebr√§uchlicher Code zur telegrafischen √úbermittlung von Buchstaben, Ziffern und weiterer Zeichen. Er bestimmt das Zeitschema, nach dem ein diskretes Signal ein- und ausgeschaltet wird.1 Morsetaste der Firma Hasler Bern, ca. 1900@ Tabelle zur Codierung‚Äã Buchstabe\tCode\tBuchstabe\tCode\tBuchstabe\tCodeA\t¬∑‚àí\tK\t-¬∑-\tU\t¬∑¬∑- B\t-¬∑¬∑¬∑\tL\t¬∑-¬∑¬∑\tV\t¬∑¬∑¬∑- C\t-¬∑-¬∑\tM\t--\tW\t¬∑-- D\t-¬∑¬∑\tN\t-¬∑\tX\t-¬∑¬∑- E\t¬∑\tO\t---\tY\t-¬∑-- F\t¬∑¬∑-¬∑\tP\t¬∑--¬∑\tZ\t--¬∑¬∑ G\t--¬∑\tQ\t--¬∑-\t√Ñ\t¬∑-¬∑- H\t¬∑¬∑¬∑¬∑\tR\t¬∑-¬∑\t√ñ\t---¬∑ I\t¬∑¬∑\tS\t¬∑¬∑¬∑\t√ú\t¬∑¬∑-- J\t¬∑---\tT\t-\tCH\t---- Morse-Code Schreiben Sie ein Wort mit 6 Buchstaben in Morse-Code. Entziffern Sie die codierten Worte Ihrer Pultnachbar:innen. Wie viele Zeichen wurden verwendet? Was hat der Morsecode mit der Huffman-Codierung zu tun? Finden Sie Parallelen? Erstellen Sie eine praktischere Tabelle f√ºr die Decodierung von Nachrichten SSR Verwendung Recherchieren Sie im Internet, √ºber welche Medien Morsezeichen √ºbertragen werden k√∂nnen (bspw. als elektrischer Puls √ºber eine Leitung) wo Morsezeichen auch heute noch eingesetzt werden. Akkustischer Morsecode Gehen Sie in Vierergruppen zu einem Treppengel√§nder, jeweils zwei Personen an einem Ende des Gel√§nders. K√∂nnen Sie sich ausschliesslich √ºber akkustische Morsezeichen verst√§ndigen? Verschicken- und empfangen Sie jeweils ein Wort mit mindestens 6 Buchstaben. Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Pr√ºfung‚Äã Es werden Ihnen 10 der untenstehenden Szenarien zugelost Sie haben min. 2 Minuten Zeit, um die Fragen vorg√§ngig zu sortieren Die Pr√ºfung beginnt mit einem leeren Desktop und ohne vorg√§ngig ge√∂ffnete Programme. Die heruntergeladenen Dateien m√ºssen im Original vorliegen und die Programme auf der Website m√ºssen zur√ºckgesetzt sein. Sie haben 5 Minuten Zeit, um die Szenarien vorzuzeigen F√ºr jedes korrekt vorgezeigte Szenario erhalten Sie 1 Punkt, f√ºr teilweise korrekte Szenarien (bspw. Maus statt Tastatur verwendet) gibt es 0.5 Punkte. Notenskala Punkte\tNote10\t6 9.5\t6 9\t5.7 8.5\t5.5 8\t5.2 7.5\t4.9 7\t4.7 6.5\t4.4 6\t4.2 5.5\t3.9 5\t3.6 4.5\t3.4 4\t3.1 3.5\t2.8 3\t2.6 2.5\t2.3 2\t2.1 1.5\t1.8 1\t1.5 0.5\t1.3 0\t1 Szenario 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Szenario 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Szenario 3‚Äã WindowsmacOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Szenario 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Szenario 5‚Äã √ñffnen Sie das Bild &quot;sonnenuntergang.jpg&quot; und f√ºgen Sie die Beschriftungen &quot;Palme&quot; und &quot;Sonne&quot; hinzu. Edited Die Schriftfarbe &amp; Gr√∂sse kann frei gew√§hlt werden, sie muss aber lesbar sein. Szenario 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop Powerpoint starten Szenario 7‚Äã sonnenuntergang.docx √∂ffnen (ab jetzt nur mit der Tastatur und ohne Maus!) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Absatz ausw√§hlen und l√∂schen Dokument abspeichern Szenario 8‚Äã Datei-Explorer und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Szenario 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Szenario 10‚Äã Das Programm create_mesh.py √∂ffnen und den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Szenario 11‚Äã Das Programm create_mesh.py √∂ffnen Ein Bildschrim-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschrimaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Szenario 12‚Äã Die kompirmierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Szenario 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Szenario 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Szenario 15‚Äã Das Programm hello_world.py √∂ffnen (ab jetzt nur noch mit der Tastatur ohne Maus!) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Szenario 16‚Äã Das Programm hello_world.py √∂ffnen (ab jetzt nur noch mit der Tastatur ohne Maus!) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Szenario 17‚Äã Das Programm create_mesh.py √∂ffnen Nach der Zahl 3 suchen. Wie oft kommt es im Programm vor? Szenario 18‚Äã Das Programm klammern.py √∂ffnen im Python-Programm folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) Das Programm ausf√ºhren Szenario 19‚Äã Das Programm klammern.py √∂ffnen im Python-Programm folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) Programm ausf√ºhren Szenario 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Absenzenheft unterschreiben lassen&quot; Szenario 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2021 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Szenario 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopiereneinen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Szenario 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Szenario 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Szenario 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Szenario 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Szenario 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Online im OneDrive Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen √úberpr√ºfen dass die Datei wieder auf Ihren Laptop synchronisiert wird.","keywords":""},{"title":"2. Informationsgehalt","type":0,"sectionRef":"#","url":"/25h/Codierung/Compression/redundancy","content":"2. Informationsgehalt Buchstabenh√§ufigkeit‚Äã Die Buchstabenh√§ufigkeit gibt an, wie oft ein Buchstabe in einem Text vorkommen. Die H√§ufigkeit der einzelnen Buchstaben ist je nach Sprache unterschiedlich. Das folgende Diagramm zeigt die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten1: Informationsgehalt‚Äã Wir f√ºhren ein Experiment durch. Aus einem deutschen Text werden etwa 40% der Buchstaben entfernt. Zuerst werden die vier h√§ufigsten Buchstaben E, N, R und I entfernt. Danach werden diese Buchstaben sowie T, S und A beibehalten und die restlichen entfernt. Obschon etwa die gleiche Menge Buchstaben entfernt worden sind, bleibt der Text nach dem Entfernen der h√§ufigen Buchstaben verst√§ndlicher. Notizen Buchstaben Redundanz Originaltext H√§ufige EntfernenSeltene entfernen Ausgabe Ohne: E, N, I, R Offenbar tragen die h√§ufigen Buchstaben weniger zum Inhalt des Textes bei. Sie haben einen kleineren Informationsgehalt. Take-Home Message ‚≠êÔ∏è Huffman Codierung f√ºr die deutsche Sprache Die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten kann der folgenden Tabelle entnommen werden: E\t15.99%\tA\t6.34%\tO\t2.75%\tW\t1.40%\tJ\t0.27 % N\t9.59%\tD\t4.92%\tM\t2.75%\tZ\t1.22%\t√ñ\t0.24 % R\t7.71%\tH\t4.11%\tC\t2.71%\tP\t1.06%\t√ü\t0.15 % I\t7.60%\tU\t3.76%\tB\t2.21%\tV\t0.94%\tY\t0.13 % T\t6.43%\tL\t3.72%\tF\t1.80%\t√ú\t0.63%\tX\t0.07 % S\t6.41%\tG\t3.02%\tK\t1.50%\t√Ñ\t0.54%\tQ\t0.04 % Daraus ergibt sich Codebaum der Huffman-Codierung f√ºr deutsche Texte Zeichen\tCode\tZeichen\tCode(leer)\t100\tO\t01001 A\t0101\tP\t1010111 B\t111000\tQ\t11100110111 C\t01111\tR\t1111 D\t0110\tS\t0011 E\t110\tT\t0010 F\t000110\tU\t11101 G\t01000\tV\t1110010 H\t10100\tW\t1010100 I\t0000\tX\t11100110110 J\t111001100\tY\t1110011010 K\t000111\tZ\t1010101 L\t000100\t√Ñ\t10101101 M\t01110\t√ñ\t111001110 N\t1011\t√ú\t10101100 Practical Cryptography: German Letter Frequencies ‚Ü©","keywords":""},{"title":"1. Grundlagen","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/basics","content":"1. Grundlagen Raster- und Vektorgrafik‚Äã Bei der Speicherung von Grafiken und Bildern im Computer wird zwischen zwei grundlegenden Darstellungsarten unterschieden: der Raster- und der Vektorgrafik. Smiley als Rastergrafik@ Smiley als Vektorgrafik@ Rastergrafik‚Äã Bei einer Rastergrafik wird das Bild in viele kleine Quadrate unterteilt. Jedes Quadrat wird mit genau einer Farbe eingef√§rbt. Diese Quadrate werden Pixel genannt. Die Anzahl Pixel, welche f√ºr eine Rastergrafik verwendet werden, wird als Aufl√∂sung des Bildes bezeichnet. Sie berechnet sich aus der Breite bbb und H√∂he hhh der Grafik in Pixel. Eine Rastergrafik mit hoher Aufl√∂sung hat eine bessere Qualit√§t, ben√∂tigt allerdings auch mehr Speicherplatz. Den theoretischen Speicherbedarf einer Rastergrafik h√§ngt von der Anzahl Pixel und dem verwendeten Farbmodell ab. Farbtiefe‚Äã Die Farbtiefe gibt an, in wie vielen Abstufungen jeder Farbkanal vorliegt. Im interaktiven Tool l√§sst sich die Farbtiefe untersuchen. Farbtiefen Farbabstufungen 2 M√∂gliche Farben8 Ben√∂tigte Bits pro Farbkanal1 Farbtiefe pro Farbkanal1 bit Farbtiefe3 bits 1. Aufgabe: Farbtiefe Erkennen Sie das System, wie die Farbtiefe mit der Anzahl m√∂glicher Farben zusammenh√§ngt? Wie viele Farben sind bei einer Farbabstufung von 4, 8, 16, 128 oder 256 Stufen m√∂glich? Wie viel bits sind f√ºr die Darstellung eines Farbkanals bei 4, 8, 16, 128 oder 256 Abstufungen n√∂tig? SSR F√ºr jedes Pixel werden eine bestimmte Anzahl Bit zur Darstellung der Farben verwendet. Diese Anzahl wird Farbtiefe genannt. Typische Farbtiefen sind: Farbmodell\tFarbtiefe\tPlatzbedarf in ByteFarbe\t3 Byte\tb‚ãÖh‚ãÖ3b \\cdot h \\cdot 3b‚ãÖh‚ãÖ3 Farbe mit Transparenz\t4 Byte\tb‚ãÖh‚ãÖ4b \\cdot h \\cdot 4b‚ãÖh‚ãÖ4 Graustufen\t1 Byte\tb‚ãÖhb \\cdot hb‚ãÖh Schwarzweiss\t1 Bit\tb‚ãÖh‚ãÖ18b \\cdot h \\cdot \\frac{1}{8}b‚ãÖh‚ãÖ81‚Äã Rastergrafiken werden in erster Linie zur Speicherung von Fotos verwendet. Vektorgrafik‚Äã Bei einer Vektorgrafik wird das darzustellende Bild aus geometrischen Objekten wie Linien, Kreise oder Rechtecken zusammengesetzt. Das Prinzip ist dasselbe wie bei der Turtle-Grafik - jeder Pfad wird in einem Koordinatensystem beschrieben. Durch Hinein- oder Herauszoomen kann das Bild beliebig vergr√∂ssert oder verkleinert werden, ohne dass mehr Speicherplatz ben√∂tigt wird. Vektorgrafiken haben also zwei grosse Vorteile gegen√ºber Pixelgrafiken. Erstens ben√∂tigen sie normalerweise deutlich weniger Speicherplatz als eine entsprechende Pixelgrafik, da mit einem Objekt die Farbe von vielen Pixeln festgelegt wird. Zweitens k√∂nnen Vektorgrafiken ohne Qualit√§tseinbusse beliebig vergr√∂ssert und verkleinert werden. Die einzelnen Objekte k√∂nnen einfarbig sein oder einen Farbverlauf haben, sowie teilweise transparent sein. Vektorgrafiken werden deshalb insbesondere f√ºr folgende Anwendungen eingesetzt: Logos Illustrationen Symbole, Icons Schriftarten Strassen- und Landkarten","keywords":""},{"title":"1. Huffman-Codierung","type":0,"sectionRef":"#","url":"/25h/Codierung/Compression/huffman","content":"1. Huffman-Codierung David Huffman hat 1952 ein Verfahren entwickelt, mit welchem Zeichen platzsparender codiert werden k√∂nnen. Seine Idee ist, dass Zeichen, welche h√§ufig im Text vorkommen, einen k√ºrzeren Code erhalten, als Zeichen, welche selten im Text vorkommen. Alltagsbezug Die Huffman-Codierung und √§hnliche Verfahren werden f√ºr das Komprimieren von Dateiformaten wie DOCX, JPG oder MP3 eingesetzt. 1 Codebaum‚Äã Ein Codebaum ist eine Struktur mit einem Startknoten. Von diesem aus geht es entweder nach links oder rechts unten weiter. Eine 0 im Code bedeutet nach links gehen, eine 1 nach rechts gehen. Wenn ein Knoten mit einem Buchstaben erreicht wird, hat man ein Zeichen decodiert, man beginnt wieder von vorne. Erstellen eines Huffman-Baumes‚Äã Am Beispiel der Codierung des Texts ¬´EINTRITT FREI¬ª soll der Huffman-Algorithmus erl√§utert werden. Zuerst z√§hlt man, wie oft jedes Zeichen im Text vorkommt und erstellt eine H√§ufigkeitstabelle. Zeichen\tH√§ufigkeit‚ê£\t1 F\t1 N\t1 R\t2 E\t2 I\t3 T\t3 Nun geht es darum, einen Codierungsbaum zu erstellen. Die H√§ufigkeiten der Buchstaben bilden je einen Knoten. Die H√§ufigkeit steht im Knoten, der Buchstaben darunter. Die Knoten werden nach H√§ufigkeit sortiert: Nun werden die zwei Knoten mit den kleinsten H√§ufigkeiten an einen neuen Knoten angeh√§ngt. Der neue Knoten enth√§lt die Summe der H√§ufigkeiten der urspr√ºnglichen Knoten: Dies wird wiederholt bis alle Knoten miteinander verbunden sind. Wenn zwei Knoten die gleiche H√§ufigkeit haben, spielt es keine Rolle, welcher gew√§hlt wird. Im n√§chsten Schritt wird der kleinste Knoten ¬´N¬ª mit ¬´R¬ª zusammengefasst. Man k√∂nnte aber ¬´N¬ª auch mit ¬´E¬ª oder dem neuen Knoten ¬´2¬ª zusammenfassen. Wichtig ist, dass immer die kleinsten Knoten zusammengefasst werden. Hier werden die zwei Knoten mit H√§ufigkeit 2 zusammengefasst: Wenn der Baum fertig ist, werden alle √Ñste, welche nach links zeigen, mit einer ¬´0¬ª markiert, alle die nach rechts zeigen mit einer ¬´1¬ª. Nun kann eine Codierungstabelle erstellt werden, indem der Code f√ºr jedes Zeichen vom Baum abgelesen wird: Zeichen\tCodeI\t00 T\t01 N\t100 R\t101 E\t111 ‚éµ\t1100 F\t1101 Zusammenfassung‚Äã √úbungen‚Äã 1. Decodieren Decodieren Sie diese Bitfolge mit dem obenstehenden Codebaum. Das Symbol ‚éµ steht f√ºr das Leerzeichen. 0111101011000110110101 2. Huffman-Codierung 1 Erstellen Sie zum Wort ¬´MISSISSIPPI¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum Codieren Sie das Wort. Angenommen, der Text w√ºrde mit UTF-8 codiert. Wie viele Bits k√∂nnen eingespart werden? Angenommen die 4 Buchstaben w√ºrden ohne Huffman-Baum Codiert. Wie viele Bits w√§ren dann n√∂tig? Wie viele Bits werden im Vergleich dazu eingespart? SSR 3. Huffman-Codierung 2 Erstellen Sie zum Wort ¬´EXTERNER EFFEKT¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum Codieren Sie das Wort. Lohnt sich die Huffman-Codierung? Wo w√ºrden Sie diese allenfalls einsetzen? SSR Take-Home Message Quelle: Wikipedia: Huffman coding ‚Ü©","keywords":""},{"title":"6. Dateiformate erkennen","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/files","content":"6. Dateiformate erkennen Eine Datei ist eine Ansammlung bin√§rer Daten, also eine Aneinanderreihung von Bits. Die bin√§re Darstellung der Datei, in welcher dieser Text gespeichert ist, beginnt so: 00100011 00100000 01000100 01100001 01110100 01100101 01101001 01100101 01101110 00001010 00101101 00101101 00101101 00001010 00001010 01000101 01101001 01101110 01100101 00100000 01000100 01100001 01110100 01100101 ‚Ä¶ Dateiformat‚Äã Die f√ºr eine Datei verwendete Codierung wird auch Dateiformat genannt. Anhand der bin√§ren Daten alleine ist nicht erkennbar, was f√ºr eine Codierung f√ºr eine Datei verwendet wurde. Ohne diese zus√§tzliche Information k√∂nnen die Daten aber nicht decodiert werden. Bei jeder Datei muss also zus√§tzlich angegeben werden, welche Codierung f√ºr diese Datei verwendet wurde. Es gibt drei Ans√§tze, das Dateiformat (also die Codierung) einer Datei zu erkennen: Dateiendung Magische Bytes Internet Media Type Dateiendung‚Äã Eine Dateiendung wie .docx oder .jpg wird an den Dateinamen angeh√§ngt. Eine Dateiendung beginnt immer mit einem Punkt. So wird sie vom Dateinamen abgetrennt. Ein Betriebssystem wie Windows oder macOS verwendet die Dateiendung, um zu ermitteln, mit welcher Anwendung eine Datei ge√∂ffnet werden soll. Magische Bytes‚Äã Viele Dateiformate verwenden magische Bytes am Dateianfang zur Kennzeichnung, wie die enthaltenen Informationen codiert sind. Beispielsweise beginnt jede .jpg-Datei mit der Bitfolge 11111111 11011000 11111111. Diese Darstellung ist etwas lang und umst√§ndlich, daher wird h√§ufig das Hexadezimalsystem (16-er System) verwendet. Internet Media Type‚Äã Der Internet Media Type oder MIME-Type ist ein Standard, mit welchem Codierungen f√ºr die √úbermittlung von Daten im Internet angegeben werden. So teilt ein Webserver einem Browser per Internet Media Type mit, ob er einen Text, ein Bild oder ein Video √ºbermittelt. Auch bei der √úbermittlung von E-Mails wird dieses System verwendet. Ein Internet Media Type besteht immer aus einem Haupt- und einem Untertype. Es gibt folgende Haupttypen: Typ\tBedeutungapplication\tanwendungsspezifische Codierungen audio\tAudiodaten image\tGrafiken text\tf√ºr Text video\tf√ºr Videomaterial Wichtige Dateiformate‚Äã Bezeichnung\tDateiendung\tInternet Media Type\tMagische BytesJPEG-Bild\t.jpg / .jpeg\timage/jpeg\tFF D8 FF Portable Network Graphics\t.png\timage/png\t89 50 4E 47 0D 0A 1A 0A ZIP-Datei\t.zip\tapplication/zip\t50 4B 03 04 Word-Datei\t.docx\tapplication/vnd.openxmlformats‚Ä¶\t50 4B 03 04 (ist eigentlich eine ZIP-Datei) Excel-Datei\t.xlsx\tapplication/vnd.openxmlformats‚Ä¶\t50 4B 03 04 (ist eigentlich eine ZIP-Datei) Portable Document Format\t.pdf\tapplication/pdf\t25 50 44 46 2D Textdatei\t.txt\ttext/plain\treine Textdatei (ohne magische Bytes) Webseite\t.html\ttext/html\treine Textdatei (ohne magische Bytes) Python-Programm\t.py\ttext/python\treine Textdatei (ohne magische Bytes) Verlorene Dateiendungen Bei den folgenden Dateien ging die Dateiendung verloren. Finden Sie mit https://hexed.it/ heraus, welche Dateiendung die jeweilige Datei hat, f√ºgen Sie die Dateiendung hinzu und √∂ffnen Sie diese. download","keywords":""},{"title":"3. Rastergrafik","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/raster","content":"3. Rastergrafik Theoretische Speichergr√∂sse‚Äã Die theoretische Speichergr√∂sse einer Rastergrafik wird berechnet, indem die Anzahl Pixel aaa mit der Farbtiefe fff multipliziert wird. Die Farbtiefe gibt an, welche Datenmenge f√ºr die Darstellung einer Farbe ben√∂tigt wird. Die Anzahl Pixel wird aus der Aufl√∂sung, also der Breite bbb und H√∂he hhh des Bildes in Pixel berechnet. F√ºr die Speichergr√∂sse rechnen wird also wie folgt: b‚ãÖh‚ãÖfb\\cdot h\\cdot fb‚ãÖh‚ãÖf Beispiel Ein Bild mit einer Aufl√∂sung von 1920√ó1080 Pixel und der Farbtiefe 3 Byte ben√∂tigt einen Speicherplatz von: 1920‚ãÖ1080‚ãÖ3=6220800‚ÄâB=6.2‚ÄâMB1920\\cdot 1080\\cdot 3 = 6220800 \\,\\text{B} = 6.2 \\,\\text{MB}1920‚ãÖ1080‚ãÖ3=6220800B=6.2MB JPEG-Grafikformat‚Äã Das Grafikformat der Joint Photographic Experts Group ist ein beliebtes Format zu Speicherung von Fotos. Es kann den ben√∂tigten Speicherplatz gegen√ºber der theoretischen Gr√∂sse von Rastergrafiken sehr stark reduzieren. Dazu wird ein komplexer mathematischer Algorithmus verwendet, welcher bewirkt, dass das urspr√ºngliche Bild nicht mehr genau Pixel f√ºr Pixel rekonstruiert werden kann. Deshalb spricht man hier von einer verlustbehafteten Kompression. Der Algorithmus kann durch die Angabe der Qualit√§t in Prozent beeinflusst werden. Die folgenden Bildausschnitte illustrieren, wie die Qualit√§t und die Speichergr√∂sse zusammenh√§ngen: h√∂chste Qualit√§t (162 kB)@ hohe Qualit√§t (42 kB)@ mittlere Qualit√§t (18 kB)@ niedrige Qualit√§t (9 kB)@ An den Bildern wird sichtbar, dass die JPEG-Kompression besonders entlang von R√§ndern St√∂rungen (¬´Artefakte¬ª) verursacht. Bei Fotos f√§llt dies weniger auf. Die folgenden zwei Bilder sind beide mit mittlerer JPEG-Qualit√§t gespeichert worden: JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ Das JPEG-Datei eignet sich also besonders, um Fotografien platzsparend zu speichern. PNG-Grafikformat‚Äã Das Portable Network Graphics-Format wird f√ºr verlustfreie Speicherung von Rastergrafiken mit Transparenz verwendet. Es eignet sich beispielsweise f√ºr Bildschirmfotos und Grafiken f√ºr Webseiten oder Computerspiele. Das folgende Beispiel zeigt links einen Baum als PNG-Grafik mit Transparenz gespeichert. Rechts ist das gleiche Bild als JPG-Grafik mit hoher Qualit√§t gespeichert. PNG-Grafik (32 kB)@ JPEG-Grafik (13 kB)@ Durch die Speicherung als JPG-Grafik geht die Transparenz verloren, das Bild kann z.B. nicht mehr auf farbigen Folien verwendet werden. Ausserdem sind JPEG-Artefakte sichtbar. Gr√∂ssenvergleich der Dateiformate‚Äã Die folgende Tabelle zeigt die Dateigr√∂ssen des gleichen Bildes (640√ó360) mit verschiedenen Dateiformaten: Format\tDateigr√∂sse\trelativtheoretische Gr√∂sse\t691 kB\t100% PNG\t146 kB\t21% JPG h√∂chste Qualit√§t\t162 kB\t23% JPG hohe Qualit√§t\t42 kB\t6% JPG mittlere Qualit√§t\t18 kB\t3% JPG tiefe Qualit√§t\t9 kB\t1%","keywords":""},{"title":"Rastergrafik praktisch","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/uebung","content":"Rastergrafik praktisch 1. JPEG-Format Das folgende Foto hat im Original eine Aufl√∂sung von 6016√ó4016 Pixel mit einer Farbtiefe von 3 Byte. Berechnen Sie die theoretische Speichergr√∂sse in Megabyte. Laden Sie das Originalbild unter dem folgenden Link herunter: Originalbild Finden Sie heraus, wie gross der tats√§chliche Speicherplatz des Bildes in Megabyte ist. Notieren Sie diese Zahl. √ñffnen Sie das Bild in der Foto-App. √Ñndern Sie die Gr√∂sse des Bildes auf 20%. Exportieren Sie das Bild mehrmals nacheinander als JPEG-Datei mit den Qualit√§ten 100%, 75%, 50% und 0%. Vergleichen Sie die Bilder und die Dateigr√∂ssen. Was stellen Sie fest? Island@ TGA-Grafikformat‚Äã Das Targa Image File ist ein veraltetes Dateiformat, welches Pixeldaten unkomprimiert speichert. Deshalb k√∂nnen TGA-Dateien mit dem HexEd.it betrachtet und bearbeitet werden. Der Dateikopf einer TGA-Datei enth√§lt Informationen dazu, wie die Datei aufgebaut ist. Byte(s)\tBedeutung\tBeispiel1\tL√§nge der Bild-ID\t0 2\tFarbpalette vorhanden?\t0 3\tBildtyp\t2 4 - 8\tFarbpalette\t0 0 0 9 - 12\tKoordinaten\t0 0 0 13 - 14\tBreite\t10 00 15 - 16\tH√∂he\t10 00 17\tFarbaufl√∂sung\t18 18\tAlphakanal\t20 Am wichtigsten sind die Felder ¬´Breite¬ª und ¬´H√∂he¬ª, welche die Dimension des Bildes angeben. Dabei sind die beiden Bytes vertauscht. Um die korrekte Zahl zu erhalten, m√ºssen sie vertauscht und dann als Bin√§rzahl interpretiert werden. TGA-Datei Laden Sie die folgende TGA-Datei herunter: Vorlage √ñffnen Sie die Datei in HexEd.it: HexEd.it Laden Sie die ge√§nderte Datei auf den Computer und √∂ffnen Sie es.","keywords":""},{"title":"3D Schl√ºsselanh√§nger","type":0,"sectionRef":"#","url":"/25h/Codierung/Anwendungen/3d-druck/qr","content":"3D Schl√ºsselanh√§nger Mit einem 3D-Drucker lassen sich dreidimensionale Objekte erzeugen. Dabei arbeiten alle g√§ngigen Druckverfahren schichtweise - das Objekt wird aus mehreren Schichten zusammengesetzt, wobei eine einzelne Schicht zweidimensional auf die darunterliegende Schicht aufgetragen wird. @ @ @ @ Um ein Objekt zu drucken, muss in einem ersten Schritt ein 3D-Modell erstellt werden und in einem zweiten Schritt muss dieses Modell in einen konkreten Druck-Ablaufplan erstellt werden, welcher Schicht-f√ºr-Schicht vorgibt, wo sich der Druck-Kopf durchbewegen soll. Dazu werden zwei Tools gebraucht: 3D Modell erstellen und bearbeiten mit tinkercad.com Druck-Ablaufplan Plan f√ºr das Modell berechnen und die Farben ausw√§hlen mit dem Slicer QR Code 3D-Modell‚Äã Das Grundger√ºst f√ºr den QR-Code kann direkt √ºber die Webapplikation von https://printer.tools/qrcode2stl/ erzeugt werden. QR Code3D ModellSpeichern QR Code Options Der heruntergeladene .zip-Ordner enth√§lt die einzelnen Teile des 3D-Modells, so auch den QR-Code selbst: qrcode-1645205191753.stl: Das Modell des QR-Codes Slicer installieren‚Äã Der Prusa Slicer wird f√ºr den 3D-Druck an der Schule verwendet. Laden Sie ihn herunter und installieren Sie ihn: https://www.prusa3d.com/de/page/prusaslicer_424/ 1.2.‚ö†Ô∏è3.4.5.6.7.8.9.‚ö†Ô∏è10.‚ö†Ô∏è11. Installieren Offene Kanten Leider gibt es unterschiedliche Konventionen f√ºr die Erzeugung von 3D-Objektmodellen. Obwohl unser erzeugter QR-Code auf den ersten Blick gut aussieht, wurden bei der Erzeugung nicht alle Kanten miteinander verbunden, so dass einige Fl√§chen im Modell nicht abgeschlossen sind. Dies kann automatisch behoben werden: WindowsmacOS Die heruntergeladene Datei im slicer √∂ffnen. Doppelklicken auf das Symbol Das Dateiformat √§ndert sich durch die Reparatur zu .3mf. Um im n√§chsten Schritt das 3D-Modell selber anzupassen, muss das Dateiformat aber wieder auf .stl ge√§ndert werden. Dies gelingt mit dem slicer, welcher .3mf in .stl Dateien konvertieren kann: 3D-Modell erstellen: Tinkercad‚Äã Das geflickte Modell kann nun in Tinkercad weiter bearbeitet werden. Melden Sie sich bei Ihrer Klasse mit ihrem &quot;Nickname&quot; bestehend aus vorname.nachname an. 24f25h https://www.tinkercad.com/joinclass/1W8JWGIB7DWG 1.2.‚ö†Ô∏è3.4.5.6.7.8.9. Das im Slicer geflickte und zu .stl exportierte Modell kann nun in Tinkercad weiter bearbeitet werden. Dazu muss es importiert werden. Die Standardeinstellungen beim Importieren passen. Import Druck vorbereiten im Slicer‚Äã Im letzten Schritt wird nun der Druck vorbereitet. Das exportierte .stl Modell wird mit dem Prusa Slicer ge√∂ffnet. Nun k√∂nnen die unterschiedlichen Fl√§chen mit dem gew√ºnschten Filament belegt werden: Schliesslich kann das Modell &quot;geslicet&quot; werden und als G-Code f√ºr den Drucker heruntergeladen werden. .3mf Dateien zusammenf√ºgen Damit mehrere Modelle in einem Umgang gedruckt werden k√∂nnen, m√ºssen die entsprechenden Modelle zusammengef√ºgt werden. Dazu muss das Projekt im .3mf-Format gespeichert werden. Diejenige Person, welche alle Modelle zusammenf√ºgt, importiert die entsprechenden .3mf Dateien der anderen Gruppen und positioniert die Objekte auf der Druckplatte ohne √úberlagerung.","keywords":""},{"title":"5. Vektorgrafik","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/vector","content":"5. Vektorgrafik Eine SVG-Datei ist eine Textdatei, welche ¬´Befehle¬ª enth√§lt, wie Formen gezeichnet werden sollen. Grundstruktur‚Äã Eine SVG-Datei hat folgende Grundstruktur: &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt;&lt;/svg&gt; Vorbereitung √ñffnen Sie in den Texteditor. Kopieren Sie die Grundstruktur in den Texteditor. Speichern Sie die Datei unter dem Namen Aufgabe.svg. Rechtecke‚Äã Das folgende Beispiel stellt die franz√∂sische Flagge dar: &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; width=&quot;300&quot; legt die Breite des Bildes auf 300 Pixel fest. height=&quot;200&quot; legt die H√∂he des Bildes auf 200 Pixel fest. &lt;rect ...&gt; zeichnet ein Rechteck an den angegebenen Koordinaten mit der angegebenen Breite, H√∂he und Farbe. Deutsche Flagge Erstellen Sie eine SVG-Datei, welche die Deutsche Flagge darstellt. Die Flagge ist 500 Pixel breit, jeder Streifen ist 100 Pixel hoch. Das Rot ist rein (d.h. 255 Rot, 0 Gr√ºn und 0 Blau). Das Gelb hat einen Rotanteil von 255 und einen Gr√ºnanteil von 204. Grundformen‚Äã Auf der folgenden Seite sind die Grundformen von SVG zusammengefasst: SVG-Grundformen Grundformen Erstellen Sie eine neue SVG-Datei und probieren Sie die Grundformen aus. Eigene Zeichnung Erstellen Sie mit SVG eine winterliche oder festliche Grafik.","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/25h/BYOD-Basics/Skills/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã WindowsmacOS Ausschneiden und Skizzieren Unter dem Startmen√º nach Ausschneiden und Skizzieren (franz√∂sisch: Capture et croquis) suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: der ganze Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã WindowsmacOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen &gt; Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - mittels rechtsklick auf das Video und dann &quot;Medien speichern unter...&quot;. Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. WindowsmacOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Direkt zuschneiden oder drehen (Alternativ: Bearbeiten &gt; Bearbeiten) Video zuschneiden‚Äã WindowsmacOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl+f oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl+p) Neuer Tab √∂ffnen (Ctrl+t) Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Eine Mail-Signatur hinzuf√ºgen/√§ndern. Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) WindowsmacOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365 An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã WindowsmacOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã WindowsmacOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"3. Fehlerkorrektur","type":0,"sectionRef":"#","url":"/25h/Codierung/Anwendungen/fehlerkorrektur","content":"3. Fehlerkorrektur @ Im Unterricht haben Sie gesehen, wie die umgedrehte Karte sofort entdeckt wurde - Zauberei!?!? Aufgaben Beschreiben Sie, nach welchem Prinzip Herr Hofer das 5x5-Muster zu einem 6x6-Muster erg√§nzt hat. Spielen Sie das XO-Spiel1 mit verschiedenen Mustern durch. Jede Spieler:in darf zweimal ‚Äûraten‚Äú. Von nun an soll das gelegte 6x6-Muster nicht mehr ge√§ndert werden. √úberpr√ºfen Sie, ob es eine Position in diesen 6x6-Muster gibt, bei der die Drehung einer Karte nicht erkannt wird. Zwei nebeneinander liegende K√§rtchen werden umgedreht. √úberpr√ºfen Sie, ob der Fehler erkannt werden kann. Wenn ja, k√∂nnen Sie den Fehler auch korrigieren? Nun werden zwei beliebige K√§rtchen umgedreht. √úberpr√ºfen Sie wieder, ob der Fehler erkannt und korrigiert werden kann. Geben Sie an, wie viele M√∂glichkeiten zur Korrektur gefunden werden k√∂nnen. Markieren Sie farbig (zusammengeh√∂rende K√§rtchenpaare jeweils in einer Farbe) in den abgegebenen leeren 6x6-Raster diejenigen Positionen von K√§rtchen, welche zur Korrektur in Frage kommen. Wiederholen Sie Aufgabe 5 noch zwei bis drei weitere Male und erg√§nzen Sie die K√§stchen. Halten Sie Ihre Erkenntnisse mit einem Bild unten fest. Parit√§tspr√ºfung (Parit√§tsbit)‚Äã Eine Information soll bin√§r codiert und anschliessend √ºbertragen werden. Dabei soll erkannt werden, ob diese fehlerfrei √ºbertragen wurde. Eine sehr einfache Methode zur Fehlererkennung bei bin√§r codierten Informationen ist die Parit√§tspr√ºfung. Dabei wird die Anzahl der Einsen der bin√§r codierten Information gez√§hlt: Ist sie ungerade, wird an die Bitfolge eine ‚Äû1‚Äú angeh√§ngt, so dass die Anzahl der ‚ÄûEinsen‚Äú gerade wird. Ist sie gerade, wird an die Bitfolge eine ‚Äû0‚Äú angeh√§ngt, so dass die Anzahl der Einsen gerade bleibt. Man spricht hierbei von einer geraden Parit√§t. Das angeh√§ngte Bit wird Parit√§tsbit genannt. Beispiel‚Äã Bin√§r codierte Information (7 Bit lang): 100110 Zu √ºbertragender Code mit Parit√§tsbit (7+1 Bit lang): 1001101 Das Parit√§tsbit ist hier 1. Parit√§tsbit Schreiben Sie mit Parit√§tsbit: Sie erhalten 10 Bit-Sequenzen, wobei jede Sequenz mit einem Parit√§tsbit abgeschlossen ist. 10110100 11000011 11101011 01000011 11100001 11001010 11100100 01110011 11001010 11010010 Entfernen die fehlerhaft √ºbertragenen Sequenzen und entfernen Sie alle Parit√§ts-Bits. Welche Nachricht wird angezeigt? Bin√§r Decodierer Wieso wird ein p statt der Buchstabe b angezeigt? (b ist bin√§r 1100010). Weshalb wurde dies nicht als Fehler erkannt? EAN-13‚Äã Letzthin beim Vorbereiten im Kaffee nebenan, wollte ich eine Packung Kaffee kaufen - doch das Einscannen des Codes ging nicht, so dass der Strichcode einer anderen Packung eingelesen werden musste... Doch wie funktioniert das? Weshalb wurde erkannt, dass der Code kaputt war? Nach einer kurzen Recherche: Die Strichcodes auf Verpackungen sind sog. EAN-13-Codes (EAN = European Article Number). Doch wie funktionieren diese? EAN 13 Aufgabe Was k√∂nnte passieren, wenn ein Strichcode verdreckt oder besch√§digt ist? Die ersten 12 Stellen des (richtigen) EAN-13 Codes der Baslercaf√© Verpackung lautet: 7610 4430 0204. Wie berechnet sich daraus nun die letzte Stelle, die Pr√ºfziffer? Erkennen Sie das System? (Einfachheitshalber wurde eine weitere EAN-Nummer abgedruckt 4260 0806 8005). F√ºhren Sie zu diesen Codierungen die beiden untenstehende Rechnungen aus und halten Sie die Ergebnisse fest. Ermitteln Sie anhand der beiden Beispiele, wie die letzte Ziffer mit der Rechnung zusammenh√§ngt und beschreiben Sie das gefundene Verfahren. Berechnen Sie auch f√ºr die folgenden Strichcodes die Pr√ºfziffer: Inspirationsquelle: lehrerfortbildung-bw.de ‚Ü©","keywords":""},{"title":"2. Farbdarstellung","type":0,"sectionRef":"#","url":"/25h/Codierung/Grafikformate/colors","content":"2. Farbdarstellung Farbkan√§le‚Äã F√ºr die digitale Verarbeitung m√ºssen Farben in Zahlen umgewandelt werden. Das geschieht, indem die Farben in verschiedene Komponenten, sogenannte Farbkan√§le aufgeteilt werden. Pro Pixel kann so die Intensit√§t je Farbkanal als Zahl bestimmt werden. Die zwei wichtigsten Ans√§tze, wie diese Aufteilung in verschiedene Kan√§le erfolgt, werden im folgenden vorgestellt. RGB-Farbmodell‚Äã Das RGB-Farbmodell basiert auf der Funktionsweise des menschlichen Auges. Dieses nimmt Farben mit Hilfe von drei Arten von sogenannten Z√§pfchen wahr, die f√ºr Licht unterschiedlicher Wellenl√§ngen empfindlich sind. So werden vom Menschen die Grundfarben Rot, Gr√ºn und Blau wahrgenommen. Farbwahrnehmung des menschlichen Auges@ Diese Eigenschaft des Auges wird bei der additiven Farbdarstellung ausgenutzt, indem sich √ºberlagernde Lichtquellen in den drei Grundfarben Rot, Gr√ºn und Blau verwendet werden. Durch die Regulierung der Helligkeit der einzelnen Lichtquellen k√∂nnen s√§mtliche Farben erzeugt werden. Dieses Farbmodell kommt √ºberall dort zum Einsatz, wo Licht verwendet wird, um ein Bild zu erzeugen, insbesondere bei Bildschirmen und Videoprojektoren (¬´Beamer¬ª). Die Farben auf einem Bildschirm werden erzeugt, indem drei nahe beieinanderliegende Leuchtdioden in den Farben Rot, Gr√ºn und Blau in unterschiedlicher Helligkeit leuchten. Ein solches Trio von Leuchtdioden wird Pixel genannt. Additives Farbmodell@ Pixel auf einem Bildschirm@ Umgekehrt kann man bei einem Bild die Rot-, Gr√ºn- und Blauanteile jedes Bildpunkts bestimmen. Man sagt, dass man das Bild in Rot-, Gr√ºn- und Blaukanal aufteilt: Aufteilung in Rot-, Gr√ºn- und Blaukanal@ Im entsprechenden RGB-Farbsystem wird eine Farbe definiert, indem die Helligkeit der Rot-, Gr√ºn- und Blauanteils durch eine Zahl zwischen 0 und 255 ausgedr√ºckt wird. Um eine Farbe bin√§r darzustellen, werden die bin√§ren Darstellungen der Zahlen f√ºr Rot, Gr√ºn und Blau nacheinander aufgeschrieben. So hat beispielsweise die Farbe mit den RGB-Werten 255, 220, 150 die bin√§re Darstellung 11111111 11011100 10010110. RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) RGBA-Farbmodell‚Äã F√ºr das RGBA-Farbmodell wird das RBG-Farbmodell um einen Kanal erweitert. Dieser heisst Alphakanal und dr√ºckt aus, wie stark die Deckkraft der Farbe ist. Ein Wert von 0 bedeutet gar keine Deckkraft und somit volle Transparenz. Ein maximaler Wert bedeutet maximale Deckkraft und somit keine Transparenz. RGBA Rot 255 Gr√ºn 217 Blau 0 Alpha 0.86 Bin√§r00000000 CSS-Farbergba(255, 217, 0, 0.86) Farben ausprobieren F√ºllen Sie die drei Kreise mit unterschiedlichen Farben - Sie k√∂nnen direkt den hex Wert einsetzen, z.b. color('#3ed92161'). farben.py from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() move(0, 50) circle(100) move(50, -43) circle(100) move(-50, -43) circle(100) CMYK-Farbmodell‚Äã Das CMYK-Farbmodell basiert auf der Weise, wie Gegenst√§nde farbig erscheinen. Ein Gegenstand wird √ºblicherweise mit weissem Licht, also Licht verschiedener Wellenl√§ngen (Rot, Gr√ºn und Blau) angestrahlt. Beispielsweise erscheint ein gelber Gegenstand deshalb in dieser Farbe, weil er blaues Licht absorbiert und rotes und gr√ºnes Licht reflektiert. subtraktives Farbmodell@ Bei der subtraktiven Farbdarstellung werden auf weissem Material die drei Grundfarben Cyan, Magenta (Fuchsia) und Yellow (Gelb) verwendet, welche rotes, gr√ºnes bzw. blaues Licht absorbieren. Zus√§tzlich wird schwarze Farbe (Key-Kanal) verwendet, welche alles Licht absorbiert. Aufteilung in Cyan-, Magenta-, Yellow- und Key-Kanal@ Dieses Farbmodell kommt beim Drucken zum Einsatz. CMYK Cyan 90 % Magenta 70 % Yellow 50 % Key 30 % CSS-Farbergb(0, 0, 0) ‚≠êÔ∏è Umrechnung CMYK ‚Äì RGB F√ºr die Umrechnung einer CMYK-Farbangabe nach RGB wird folgender Formelsatz verwendet: r=(1‚àíc)‚ãÖ(1‚àík)g=(1‚àím)‚ãÖ(1‚àík)b=(1‚àíy)‚ãÖ(1‚àík)\\begin{aligned} r &amp;= (1 - c) \\cdot (1 - k) \\\\ g &amp;= (1 - m) \\cdot (1 - k) \\\\ b &amp;= (1 - y) \\cdot (1 - k) \\\\ \\end{aligned}rgb‚Äã=(1‚àíc)‚ãÖ(1‚àík)=(1‚àím)‚ãÖ(1‚àík)=(1‚àíy)‚ãÖ(1‚àík)‚Äã Dabei wird vorausgesetzt, dass s√§mtliche Werte im Bereich 0 bis 1 liegen. Wenn beispielsweise die CMYK-Werte in Prozent angegeben werden und die RGB-Werte mit einem Byte codiert werden, ergeben sich folgende Formeln: r=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)g=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)b=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)\\begin{aligned} r &amp;= 255 \\cdot (1 - c \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ g &amp;= 255 \\cdot (1 - m \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ b &amp;= 255 \\cdot (1 - y \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ \\end{aligned}rgb‚Äã=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)‚Äã def sanitize(wert): # Wandelt Prozent-Werte zu Zahlen zwischen 0 und 1 um if wert &gt; 1: return wert / 100 return wert def cmyk2rgb(c, m, y, k): faktor = 1 - sanitize(k) r = (1 - sanitize(c)) * faktor g = (1 - sanitize(m)) * faktor b = (1 - sanitize(y)) * faktor return [r, g, b] print('rgb: ', cmyk2rgb(80, 60, 40, 20)) Farbtiefe‚Äã Die Anzahl Bits oder Bytes, welche insgesamt f√ºr die Speicherung einer Farbe verwendet werden, wird Farbtiefe genannt. Damit wird festgelegt, wie viele unterschiedliche Abstufungen pro Farbkanal dargestellt werden k√∂nnen. Beim RGB-Farbmodell wird √ºblicherweise eine Farbtiefe von 3 Byte oder 24 Bit verwendet. Dies ergibt pro Farbkanal acht Bit, also ein Byte. Somit k√∂nnen 256√ó256√ó256 = 16.7 Millionen unterschiedliche Farben dargestellt werden. Farbmodell\tFarbtiefe\tPixel ‚Üí BytesRGB (True Colour)\t3 Byte\t√ó3 CMYK\t4 Byte\t√ó4 Graustufen\t1 Byte\t√ó1 Schwarzweiss\t1 Bit\t√∑8","keywords":""},{"title":"Lernziele Codes und Daten","type":0,"sectionRef":"#","url":"/25h/Codierung/Lernziele","content":"Lernziele Codes und Daten Pr√ºfung Die Pr√ºfung findet auf Papier statt Erlaubte Hilfsmittel: Taschenrechner (Codierungs-Tabellen werden zur Verf√ºgung gestellt) Gewichtung der Note: 1 Zeit: 60 Minuten Codes, Daten und Informationen Sie kennen die Begriffe &quot;Code&quot;, &quot;Codieren&quot; und &quot;Decodieren&quot;, k√∂nnen diese Begriffe in eigenen Worten definieren und identifizieren Codes in ihrem Alltag. Sie verstehen, dass es zwischen Daten und Informationen Unterschiede gibt, die Sie selber aufzeigen k√∂nnen. Zahlensysteme Sie wissen was ein Stellenwertsystem ist und wie es aufgebaut ist. Sie transformieren Bin√§re Zahlen zu Dezimalzahlen Sie transformieren Dezimalzahlen zu Bin√§rzahlen Zeichencodierung Sie k√∂nnen bei einer gegebenen Codierung (Latin1, UTF8, Sehstern...) Text Codieren und auch wieder Decodieren. Sie sind sich der Schwierigkeiten bei der √úbermittlung von bin√§ren Daten bewusst und kennen Strategien, wie diese behoben werden k√∂nnen. Farbe und Grafikformate Sie k√∂nnen die Unterschiede zwischen Vektor- und Rastergrafiken aufzeigen. Sie wissen, wie Farben digital abgespeichert werden und interpretieren Farben als RGB und RGBA Werte. Sie sind sich bewusst, dass mit Qualit√§tsverlust die Gr√∂sse von Bildern reduziert werden kann. Kompression und Informationsgehalt Sie kennen den Huffman-Algorithmus und k√∂nnen anhand eines Textes einen Huffman-Baum aufbauen, oder anhand eines solchen Baumes Text decodieren. Sie k√∂nnen argumentieren, wann die Huffman-Codierung eingesetzt wird. Sie k√∂nnen Berechnen, wie viele Datenbits bei der Anwendung der Huffman-Codierung eingespart werden k√∂nnen. Anwendungen Sie kennen verschiedene Anwendungen von Codes im Alltag Sie erkennen die grundlegenden Elemente eines QR-Codes Sie wissen, wie der Morsecode aufgebaut ist. (Es wird nicht erwartet, dass Sie die Codierungstabelle auswendig kennen) Sie wissen, wie eine Fehlererkennung erzeugt werden kann (Parit√§tsbit) Sie wissen, was wie ein EAN-13 Code aufgebaut ist und wie die Pr√ºfsumme berechnet wird. Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"1. Begriff","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Begriff","content":"1. Begriff Aufgabe Wo befindet sich der Ort k√∂nigin.gesehen.damals? Verwenden Sie die Seite what3words.com. Bei welchen drei W√∂rtern wohnen Sie? In welchen Situationen ist dieser Code vorteilhafter als eine Adresse? Code Information Unter einer Information versteht man ¬´das Wissen, das ein Sender einem Empf√§nger √ºber einen Informationskanal √ºbermittelt¬ª.[1] Daten Daten sind Zeichen oder Symbole, die Informationen darstellen. Daten k√∂nnen gesendet, empfangen und verarbeitet werden. Code Ein Code ist eine ¬´Sprache¬ª, die festlegt, wie Informationen vom Sender in Daten √ºbersetzt und vom Empf√§nger wieder interpretiert werden. @ Code‚Äã Die Informations√ºbertragung kann nur funktionieren, wenn Sender und Empf√§nger den gleichen Code verwenden. Bei zwischenmenschlicher Kommunikation ist der Code normalerweise nicht explizit festgelegt. Dann muss der Empf√§nger den Code erraten, was zu Missverst√§ndnissen f√ºhren kann. Ein Code ist eine Vorschrift, welche Daten von einer Darstellung in eine andere umwandelt. Dabei darf keine Information verloren gehen, eine R√ºckumwandlung muss m√∂glich sein. Beispiel eines Codes: Umwandlung von Braillezeichen in Buchstaben und umgekehrt. Das Ziel dieser Umwandlung ist es, eine f√ºr einen bestimmten Zweck optimierte Darstellung Informationen zu erreichen. So ist die Brailleschrift daf√ºr optimiert, per Tastsinn gelesen werden zu k√∂nnen. Beispiele f√ºr Codes‚Äã Brailleschrift‚Äã ASCII‚Äã Genetischer Code‚Äã QR-Code‚Äã ISBN‚Äã what3words.com‚Äã","keywords":""},{"title":"8. Sehsterne","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Sehsterne","content":"8. Sehsterne @ Sehsterne (das sind Seesterne mit Augen) kennen nur die f√ºnf Buchstaben A ,C, I, N, T, die sie auf einem gesunkenen Schiff entdeckt haben. Alle W√∂rter setzen sie aus diesen Buchstaben zusammen. ACINT-Code‚Äã Die Sehsterninformatiker haben eine bin√§ren Code f√ºr ihr Alphabet entwickelt, den sie ACINT-Code nennen: 1. ACINT Decodieren Sie die folgende Nachricht: ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÖ ‚òÖ‚òÜ‚òÖ ‚òÜ‚òÖ‚òÖ SSR Codieren Sie die folgende Nachricht in ACINT-Code: A CAT CAN ACT SSR @ Geb√§rdensprache‚Äã Die Sehsterne haben keinen Mund. Sie kommunizieren, indem sie nacheinander f√ºr jeden Buchstaben den entsprechenden Arm heben. Eines Tages entdecken die Sehsterne ein weiteres gesunkenes Schiff mit f√ºnf neuen Buchstaben: E, H, J, M, R. 2. Geb√§rdensprache Schlagen Sie den Sehsternen ein System vor, wie sie alle zehn Buchstaben durch Heben der f√ºnf Arme darstellen k√∂nnen. SSR Wie viele unterschiedliche Buchstaben k√∂nnen Sehsterne maximal durch heben der f√ºnf Arme darstellen? SSR @ Erweiterter ACINT-Code‚Äã Die Sehstern-Informatiker m√∂chten einen neuen bin√§ren Code entwickeln, um die neuen Buchstaben darstellen zu k√∂nnen. Der neue Code soll aber kompatibel mit dem bisherigen ACINT-Code sein. 3. Erweiterung ACINT-Code Machen Sie einen Vorschlag f√ºr einen solchen Code. SSR ‚≠êÔ∏è Gesunkenes Schiff (Bonus)‚Äã 4. Gesunkenes Schiff Wie lautet der Name des ersten gesunkenen Schiffs? SSR","keywords":""},{"title":"√úbungen UTF-8","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Uebungen","content":"√úbungen UTF-8 1. Wie viele Zeichen? Wie viele Zeichen sind in folgender bit-Squenz codiert? 11100010 10011101 10000000 01000110 11010011 10111111 11110110 10011010 10101010 10001111 00010010 2. UTF-8 Decodieren Folgende bit-Sequenzen sind UTF-8 Codiert. Welche Dezimalzahlen sind codiert? 11000010 10011001 11100001 10000000 10001111 3. UTF-8 Codieren Codieren Sie folgende bit-Sequenz zu UTF-8: 1100 10010101 10010110 Codieren Sie die Zahl 260 zu UTF-8: 4. UTF-8 Emojis Codieren Sie drei Weihnachts-Emojis zu UTF-8: Verwenden Sie Python, um die Ordnungszahl der Emojis herauszufinden. Wandeln Sie die Ordnungszahlen ins Bin√§re um (auch hier darf Python verwendet werden) Codieren Sie die Bin√§rzeichen-Kette zu UTF-8 und halten Sie das Resultat fest. Probieren Sie Ihre L√∂sung im UTF-8 Decodier-Modus Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin","keywords":""},{"title":"Computer","type":0,"sectionRef":"#","url":"/25h/Computer","content":"Computer Computer sind unglaublich schnell, genau und dumm. Menschen sind unglaublich langsam, ungenau und brillant. Zusammen sind sie m√§chtig jenseits aller Vorstellungskraft. ‚Äì Albert Einstein","keywords":""},{"title":"1. Grundlagen","type":0,"sectionRef":"#","url":"/25h/Computer/basics","content":"1. Grundlagen Definition ¬´Computer¬ª‚Äã Ein Computer oder Rechner ist ein Ger√§t, das mittels programmierbarer Rechenvorschriften (Algorithmen) Daten verarbeitet. ‚Äì Wikipedia Komponenten eines COmputer@","keywords":""},{"title":"5. UTF-8","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/UTF8","content":"5. UTF-8 Werden Unicode-Zeichen ins bin√§re √ºbersetzt wird klar, dass diese Zahlen nicht mehr nur mit einem Byte dargestellt werden k√∂nnen. Beispielsweise ist dem Affen-Emoji üêí die Zahl 12801810128018_{10}12801810‚Äã zugewiesen, was der Bin√§rzahl 00000001‚ÄÖ11110100‚ÄÖ00010010200000001\\:11110100\\:00010010_{2}0000000111110100000100102‚Äã entspricht, also 3 Bytes Speicherplatz ben√∂tigt. info 1 Byte entspricht 888 Bit 1 Megabit entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bit 1 Megabyte entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bytes oder 8‚Ä≤000‚Ä≤0008'000'0008‚Ä≤000‚Ä≤000 Bit UTF-8 ist ein Code, der Unicode-Zeichen in Bitmuster √ºbersetzt. Ein Unicode-Zeichen wird mit ein bis vier Bytes (daher 8-32 bit) dargestellt. Die folgende Tabelle zeigt, wie die Codierung funktioniert: Unicode-Bereich\tBitmuster\tAnzahl Bit\tByte 1: Anzahl Kontroll-Bits0 bis 127\t0xxxxxxx\t7\t1 128 bis 2047\t110xxxxx 10xxxxxx\t11\t3 2048 bis 65535\t1110xxxx 10xxxxxx 10xxxxxx\t16\t4 ab 65536\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\t21\t5 Unicode-Zeichen mit einer Nummer zwischen 0 und 127 werden mit einem Byte dargestellt, welches mit 0 beginnt. Somit ist UTF-8 in diesem Bereich identisch mit ASCII (und Latin 1). F√ºr die anderen Zeichen wird mehr als ein Byte verwendet. Dabei beginnt jedes Byte mit einer oder mehreren 1, gefolgt von einer 0. Die Anzahl 1 im ersten Byte definieren, wie viele Bytes f√ºr das Zeichen verwendet werden. Die folgenden Bytes werden mit 10 markiert. Die x werden mit der Bin√§rdarstellung der Unicode-Nummer aufgef√ºllt. Zeichen\tNummer\tBitmusterA\t65\t01000001 √§\t228\t11000011 10100100 Schwarze Sonne mit Strahlen ‚òÄ\t9728\t11100010 10011000 10000000 Affe üêí\t128018\t11110000 10011111 10010000 10010010 Der Vorteil dieser Codierung ist, dass anhand der ersten Bits eines Bytes erkannt wird, ob es sich um den Anfang oder die Fortsetzung eines Zeichens handelt. Beginn\tBedeutung0‚Ä¶\tASCII-Zeichen 10‚Ä¶\tFortsetzung eines Zeichens mit mehreren Bytes 110‚Ä¶\tBeginn eines Zeichens mit zwei Bytes 1110‚Ä¶\tBeginn eines Zeichens mit drei Bytes 11110‚Ä¶\tBeginn eines Zeichens mit vier Bytes Dies wird noch deutlicher, wenn man dies als Bin√§rbaum darstellt: UTF-8 Pr√§fix Ausprobieren‚Äã Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin Aufgabe Codieren Sie Ihre zwei lieblings Emojis als UTF-8 Bin√§r-Kette. Verwenden Sie f√ºr das Herausfinden der bin√§ren Codierung die Hilfe von Python. Mehrstufige Codierung 1‚Äã Oft werden Informationen mehrstufig codiert. So wird beispielsweise die Information ¬´Ich bin m√ºde.¬ª als Emoji dargestellt. Das Handy ordnet dem Emoji die entsprechende Unicode-Nummer zu. Diese wird mit UTF-8 in eine Bitfolge √ºbersetzt, welche √ºber das Mobilfunknetz √ºbermittelt wird. Das Handy des Empf√§ngers √ºbersetzt die Bitfolge wieder zur√ºck in eine Unicode-Nummer und das entsprechende Emoji. Die Interpretation des Emojis muss vom Empf√§nger selbst vorgenommen werden. Unicode zu UTF-8 Remix rothe.io ‚Ü©","keywords":""},{"title":"2. EVAS-Prinzip","type":0,"sectionRef":"#","url":"/25h/Computer/basics/EVAS","content":"2. EVAS-Prinzip Das EVAS-Prinzip beschreibt ein Grundprinzip der Datenverarbeitung. Die Abk√ºrzung leitet sich aus den ersten Buchstaben der Begriffe Eingabe, Verarbeitung, Ausgabe und Speicherung ab. Daten m√ºssen zuerst in den Computer gelangen. Dazu ist ein Eingabeger√§t notwendig, welches Informationen aus der Umwelt in digitale Daten umwandelt. Diese Informationen k√∂nnen Bewegungen oder Aktionen der Benutzer:innen, Messwerte oder digitale Nachrichten eines anderen Computers sein. Im Ger√§t werden die Daten gespeichert und verarbeitet. Ein Ausgabeger√§t wandelt Daten wieder in Informationen f√ºr die Umwelt um. Diese k√∂nnen beispielsweise visuell oder akustisch sein, um die Sinne der Benutzer:innen anzusprechen. Es kann sich aber auch um digitale Nachrichten handeln, die an andere Computer weitergeleitet werden. Ein- und Ausgabeger√§te‚Äã Typische Ein- und Ausgabeger√§te f√ºr Computer sind: Tastatur@ Maus@ Webcam@ Drucker@ Bildschirm@ Lautsprecher@ Aufgabe Welche M√∂glichkeiten f√ºr die Ein- und Ausgabe von Daten hat Ihr Smartphone? Versuchen Sie, m√∂glichst alle aufzuschreiben. Bilden Sie dabei folgende Kategorien: nur Eingabeger√§t Ein- und Ausgabeger√§t nur Ausgabeger√§t Hilfreiche App: üëâ PhyPhox","keywords":""},{"title":"9. Ebenen","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Ebenen","content":"9. Ebenen Wie die Netzwerke kann auch der Computer selber auf verschiedenen Ebenen betrachtet werden. Hardware-Ebenen@ Elektronik‚Äã Auf der Ebene der Elektronik werden die Zust√§nde 0 und 1 durch unterschiedliche Spannungen dargestellt. Das grundlegende Bauelement f√ºr digitale Schaltungen ist der Transistor. Transistoren Sehen Sie sich das obige Video an. Und beschreiben Sie in eigenen Worten: welche Analogie aus dem Alltag passt zum Transistor? wozu wird ein Transistor bei Computern eingesetzt? Digitale Logik‚Äã In der digitalen Logik werden aus den Grundelementen (logische Gatter) komplexe Schaltungen aufgebaut, welche z.B. Zahlen addieren oder Werte speichern k√∂nnen. Rechnerarchitektur‚Äã Die Rechnerarchitektur legt fest, wie verschiedene Bauelemente (wie z.B. Rechenwerk und Speicher) miteinander verkn√ºpft werden und in welcher zeitlichen Abfolge Daten untereinander ausgetauscht werden. Daraus ergeben sich die grundlegenden Befehle (Maschinencode), welche der Computer versteht. Betriebssystem‚Äã Das Betriebssystem kontrolliert und koordiniert den Zugriff auf die Hardware f√ºr die verschiedenen Anwendungen, welche auf dem Computer ausgef√ºhrt werden. Es stellt grundlegende Funktionen wie die Dateiverwaltung und Netzwerkkommunikation zu Verf√ºgung. Das Betriebssystem enth√§lt viel Programmcode, der speziell f√ºr die eingesetzte Rechnerarchitektur und -hardware geschrieben ist. Anwendungen‚Äã Die Anwendungen unterst√ºtzen den/die Benutzer/in in der t√§glichen Arbeit. Sie werden in h√∂heren Programmiersprachen geschrieben, d.h. sie brauchen sich dank des Betriebssystems nicht um die eingesetzte Hardware zu k√ºmmern. Solche Programme k√∂nnen vom Prozessor nicht direkt ausgef√ºhrt, sondern m√ºssen zuerst noch von einem Compiler in Maschinencode √ºbersetzt werden. Dies erleichtert uns Menschen die Arbeit beim Programmieren, da der Programmcode nicht an bestimmte Hardware und Architektur gebunden und damit allgemeing√ºltiger und einfacher ist.","keywords":""},{"title":"3. Prozessor (CPU)","type":0,"sectionRef":"#","url":"/25h/Computer/basics/cpu","content":"3. Prozessor (CPU) Der Prozessor ist f√ºr die Verarbeitung von Daten im Computer zust√§ndig. Ausserdem √ºberwacht und steuert er den Ablauf von Programmen. Moderne Prozessoren enthalten mehrere Kerne, welche unabh√§ngig voneinander Programme ausf√ºhren und Berechnungen vornehmen k√∂nnen. Kenngr√∂ssen‚Äã F√ºr den Prozessor gibt es folgende wichtige Kenngr√∂ssen: Die Anzahl Kerne gibt an, wie viele Berechnungen ein Prozessor gleichzeitig, also parallel, ausf√ºhren kann. Die Taktfrequenz gibt an, wie schnell der Prozessor Berechnungen durchf√ºhren kann. Sie wird in der Einheit Hertz angegeben, was ¬´pro Sekunde¬ª bedeutet. 2.1 GHz sind &quot;2.1 Gigahertz&quot;, also 2'100'000'000 Hz und somit 2.1 Milliarden Operationen, die pro Sekunde berechnet werden k√∂nnen. AMD Ryzen-Prozessor@ Pins auf Unterseite@ ge√∂ffneter Prozessor@ Kerne - wichtig f√ºr parallele Berechnungen‚Äã Jeder Kern einer CPU kann unabh√§ngig von den anderen Kernen Berechnungen durchf√ºhren. Die Herausforderung dabei ist, dass die einzelnen Kerne nur mit grossen H√ºrden Zwischen- oder Endresultate austauschen k√∂nnen. Deshalb sind mehr Kerne nicht immer besser. Es kommt darauf an, wie die einzelnen Kerne genutzt werden. Aufgaben‚Äã Der Prozessor hat zwei Hauptaufgaben. Einerseits kontrolliert er die Ausf√ºhrung der Programmanweisungen. Dabei steuert er alle anderen Komponenten des Computers. Andererseits verarbeitet der Prozessor Daten. Das heisst, er f√ºhrt mathematische oder logische Operationen mit bin√§ren Zahlen aus, beispielsweise: Vergleichen Addieren Multiplizieren Bits um eine Stelle nach links schieben Im Kapitel Rechnerarchitektur wird die Funktionsweise des Prozessors genauer erkl√§rt. Weitere Funktionen‚Äã In moderne Prozessor-Chips werden auch weitere Funktionen integriert, welche fr√ºher von separaten Bauteilen √ºbernommen wurden. Moderne Desktop-Prozessoren enthalten normalerweise eine Grafikeinheit, welche die Darstellung von Text, Bild und Video auf einem Bildschirm √ºbernimmt. Bei Prozessoren f√ºr Mobiltelefone werden √ºblicherweise spezialisierte Funktionen f√ºr GPS, W-LAN, Mobilfunk und Bluetooth auf dem Chip integriert. Dabei spricht man von einem Ein-Chip-System oder SoC (engl. system on a chip). Meine CPU Welche Merkmale weist der Prozessor Ihres Laptops auf (Modell, Taktfrequenz)? Vergleichen Sie Ihre Werte mit herk√∂mmlichen Prozessoren f√ºr Desktop-Computer auf Digitec. Beschr√§nken Sie sich dabei auf Prozessoren von den beiden gr√∂ssten CPU-Herstellern AMD und Intel. üëâ Digitec Prozessoren Welche Taktrate hat die g√ºnstigste/teuerste CPU, wenn die CPU dieselbe Anzahl Kerne hat wie Ihr Ger√§t? Worin k√∂nnte der grosse Unterschied bei den Taktraten zwischen Laptop- und Desktop-Computer liegen?","keywords":""},{"title":"4. Unicode","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Unicode","content":"4. Unicode Unicode ist ein internationaler Standard f√ºr Schriftzeichen und Symbole. Das Unicode-Konsortium erstellt einen Katalog von allen sinnvollen Schriftzeichen, welcher st√§ndig erweitert wird. In der Version 40.0, welche im Oktober 2021 ver√∂ffentlicht wurde, umfasst Unicode ca. 140‚Ä≤000140'000140‚Ä≤000 Zeichen. Hier sind ein paar Zeichen aufgef√ºhrt, um zu illustrieren wie umfangreich Unicode ist: Lateinischer Grossbuchstaben A, 656565 oder U+0041 Hiragana-Buchstabe Ya, 124201242012420 oder U+3084 Cherokee-Buchstabe S, 506950695069 oder U+13CD Spielkarte Neun der Herzen, 127161127161127161 oder U+1F0B9 Entsetztes Gesicht mit explodierendem Kopf, 129327129327129327 oder U+1F92F Affe, 128018128018128018 oder U+1F412 Power-Symbol, 921192119211 oder U+23FB √Ñgyptische Hieroplyphe Nl012, 783807838078380 oder U+1322C Quelle: UT - Unicode Table Jedes Unicode-Zeichen hat eine eindeutige Unicode-Nummer, welche h√§ufig als hexadezimale Zahl geschrieben wird, aber nat√ºrlich auch dezimal oder bin√§r dargestellt werden kann. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 ","keywords":""},{"title":"1. Computerkategorien","type":0,"sectionRef":"#","url":"/25h/Computer/basics/kategorien","content":"1. Computerkategorien Computer gibt es in sehr unterschiedlichen Gr√∂ssen. Supercomputer f√ºllen grosse Hallen. Deutlich kleiner sind allt√§gliche Computersysteme wie Laptops oder Smartphones. Die kleinsten Computersysteme finden auf einem einzigen Mikrochip platz und werden in vielen allt√§glichen Ger√§ten verbaut. Sie k√∂nnen grob in folgende sieben Kategorien unterteilt werden1: Typ\tAnwendungsbeispiel\tPreis (USD)Wegwerfcomputer\tKarten, RFID-Tags\t0.5 Mikrocontroller\tUhren, Autos, Ger√§te\t5 Mobile Computer, Spielkonsolen\tHeimvideospiele und Smartphones\t50 Personalcomputer (PC)\tDesktop- oder Notebook-Computer\t500 Server\tNetzwerkserver\t5'000 Grossrechner (Mainframe)\tZahlungsverarbeitung in einer Bank\t5'000'000 Supercomputer\tForschung\t100'000'000 Smart Card@ Arduino Lilypad@ Smartphone@ Notebook@ Server@ Kei Supercomputer@ Andrew S. Tanenbaum und Todd Austin: Rechnerarchitektur, 2014, 6. Auflage, S. 49 ‚Ü©","keywords":""},{"title":"7. Textcodierung","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Textcodierung","content":"7. Textcodierung In dieser praktischen √úbung speichern Sie auf Ihrem Computer eine Textdatei und √ºberpr√ºfst anschliessend, ob die in der Datei gespeicherten Bits tats√§chlich der Unicode/UTF-8-Codierung des Texts entsprechen. 1. Texteditor √∂ffnen Der Editor ist eine App, in welcher man Textdateien erstellen und bearbeiten kann. Das kann man auch mit Word, dies ist jedoch umst√§ndlicher. Word-Dateien sind keine reinen Textdateien, sie enthalten auch andere Daten wie Formatierungen und Bilder. WindowsWindows 10macOS Starten Sie die Editor-App, indem Sie im Startmen√º nach ¬´editor¬ª suchen: 2. Text eingeben Geben Sie einen kurzen Text ein. Dieser sollte nicht nur ASCII-Zeichen enthalten, sondern auch ein Umlaut wie ¬´√§¬ª und Emojis. WindowsmacOS Emojis k√∂nnen unter Windows mit dem Tastenk√ºrzel + . eingef√ºgt werden. Alternativ findet man unter üëâ Emojipedia viele weitere Emojis. WindowsmacOS 3. Textdatei speichern Speichern Sie die Textdatei unter dem Namen Unicode-Test.txt indem Sie WindowsmacOS die Tastenkombination Ctrl+s dr√ºcken oder den Men√ºpunkt Datei &gt; Speichern ausw√§hlen. 4. Datei als Bytes betrachten Mit dem Online-Tool HexEd.it k√∂nnen Sie eine beliebige Datei Byte f√ºr Byte betrachten: üëâ HexEd.it Klicken Sie auf Datei √∂ffnen und w√§hlen Sie die vorhin gespeicherte Textdatei aus. Nun sehen Sie die einzelnen Bytes, welche die Datei enth√§lt, beispielsweise: 54 73 63 68 C3 BC 73 73 20 F0 9F 98 80 21 Die Bytes werden wie in der Informatik √ºblich als Hexadezimalzahlen angegeben. Wenn man √ºber die einzelnen Bytes navigiert (mit den Pfeiltasten), sieht man auf der linken Seite die entsprechende Bin√§rcodierung. Alternativ finden Sie hier auch einen Umrechner zwischen Bin√§r-, Dezimal- und Hexadezimalzahlen. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 Dec - Bin - Hex Dezimal Bin√§r Hexadezimal Text: Hex - Bin Hexadezimal 08 Bin√§r 00001000 In der bin√§ren Darstellung sehen Sie sofort die Zeichen, welche mehrere Bytes ben√∂tigen. Sie beginnen mit einer 1. So ist 11000011 10111100 die Codierung des Buchstabens ¬´√º¬ª. Nun k√∂nnen Sie mit folgenden Hilfsmitteln √ºberpr√ºfen, ob die Bytes tats√§chlich der Unicode/UTF-8-Codierung Ihres Textes entsprechen: üëâ ASCII-Tabelle f√ºr Bytes, die mit einer 0 starten üëâ Unicode-Tabelle f√ºr zusammengesetzte Zeichen mit mehreren Bytes Halten Sie die Hexadezimalzeichen Ihres Textes fest. Wo ist das erste Emoji? √úberpr√ºfen Sie, ob Sie den Dezimalwert des Emojis entziffern und auf üëâ https://unicode-table.com/de/ finden Hinweis Im vorliegenden Beispiel sieht das so aus: Byte(s)\tZeichen54\tT 73\ts 63\tc 68\th C3 BC\t√º 73\ts 73\ts 20\t‚ê£ F0 9F 98 80\tüòÄ 21\t! ‚≠êÔ∏è Zusatzaufgabe - Andere Dateien Betrachten Sie andere Dateien in HexEd.it und achten Sie auf folgendes: Finden Sie in anderen Dateien auch Unicode-codierten Text? Erkennen Sie ein Muster bei den ersten paar Bytes von Dateien des gleichen Typs?","keywords":""},{"title":"3. Zeichencodierung","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Zeichencodierung","content":"3. Zeichencodierung Datenpakete bestehen aus verschiedenen Zahlen und Zeichen. Wie lassen sich diese in Einsen und Nullen √ºbersetzen? Auf dem Computer ist jedem Zeichen eine eindeutige Zahl zugeordnet - eine sog. Zeichencodierung. Eine g√§ngige Zeichencodierung ist etwa ASCII, 128 Zeichen, wobei f√ºr ein Zeichen genau 7 bit, also 7 Stellen mit 0 oder 1, notwendig sind. In diesen 128 m√∂glichen Zeichen sind 33 Steuerzeichen und 95 normale Zeichen enthalten. Steuerzeichen spezielle Zeichen wie bspw. das Zeichen \\n f√ºr einen Zeilenumbruch oder \\t f√ºr einen Tabulator. Die ASCII-Codierung enth√§lt noch keine Umlaute, weshalb mit Latin 1, 256 Zeichen der Informationsgehalt um ein Bit erh√∂ht wurde, so dass insgesamt 256 Zeichen codiert werden k√∂nnen - die ersten 128 Zeichen sind dabei identisch mit ASCII. Zeichen\tDezimal\tBin√§r\\n\t10\t00001010 ‚éµ\t32\t00100000 !\t33\t00100001 &amp;\t38\t00100110 .\t46\t00101110 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 =\t61\t00111101 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 Zeichen\tDezimal\tBin√§rD\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 V\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 Zeichen\tDezimal\tBin√§rd\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 √§\t228\t11100100 √∂\t246\t11110110 √º\t252\t11111100 Komplette Latin 1 Tabelle Zeichen\tDezimal\tBin√§r\t0\t00000000 1\t00000001 2\t00000010 3\t00000011 4\t00000100 5\t00000101 6\t00000110 7\t00000111 8\t00001000 \\t\t9\t00001001 \\n\t10\t00001010 11\t00001011 12\t00001100 13\t00001101 14\t00001110 15\t00001111 16\t00010000 17\t00010001 18\t00010010 19\t00010011 20\t00010100 21\t00010101 22\t00010110 23\t00010111 24\t00011000 25\t00011001 26\t00011010 27\t00011011 28\t00011100 \u001d\t29\t00011101 30\t00011110 31\t00011111 ‚éµ\t32\t00100000 !\t33\t00100001 &quot;\t34\t00100010 #\t35\t00100011 $\t36\t00100100 %\t37\t00100101 &amp;\t38\t00100110 '\t39\t00100111 (\t40\t00101000 )\t41\t00101001 *\t42\t00101010 +\t43\t00101011 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 ;\t59\t00111011 &lt;\t60\t00111100 =\t61\t00111101 &gt;\t62\t00111110 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 D\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 Zeichen\tDezimal\tBin√§rV\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 [\t91\t01011011 \\\t92\t01011100 ]\t93\t01011101 ^\t94\t01011110 _\t95\t01011111 `\t96\t01100000 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 d\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 {\t123\t01111011 |\t124\t01111100 }\t125\t01111101 ~\t126\t01111110 \t127\t01111111 ¬Ä\t128\t10000000 ¬Å\t129\t10000001 ¬Ç\t130\t10000010 ¬É\t131\t10000011 ¬Ñ\t132\t10000100 ¬Ö\t133\t10000101 ¬Ü\t134\t10000110 ¬á\t135\t10000111 ¬à\t136\t10001000 ¬â\t137\t10001001 ¬ä\t138\t10001010 ¬ã\t139\t10001011 ¬å\t140\t10001100 141\t10001101 142\t10001110 143\t10001111 144\t10010000 ¬ë\t145\t10010001 ¬í\t146\t10010010 ¬ì\t147\t10010011 ¬î\t148\t10010100 ¬ï\t149\t10010101 ¬ñ\t150\t10010110 ¬ó\t151\t10010111 ¬ò\t152\t10011000 ¬ô\t153\t10011001 ¬ö\t154\t10011010 ¬õ\t155\t10011011 ¬ú\t156\t10011100 157\t10011101 158\t10011110 ¬ü\t159\t10011111 160\t10100000 ¬°\t161\t10100001 ¬¢\t162\t10100010 ¬£\t163\t10100011 ¬§\t164\t10100100 ¬•\t165\t10100101 ¬¶\t166\t10100110 ¬ß\t167\t10100111 ¬®\t168\t10101000 ¬©\t169\t10101001 ¬™\t170\t10101010 Zeichen\tDezimal\tBin√§r¬´\t171\t10101011 ¬¨\t172\t10101100 173\t10101101 ¬Æ\t174\t10101110 ¬Ø\t175\t10101111 ¬∞\t176\t10110000 ¬±\t177\t10110001 ¬≤\t178\t10110010 ¬≥\t179\t10110011 ¬¥\t180\t10110100 ¬µ\t181\t10110101 ¬∂\t182\t10110110 ¬∑\t183\t10110111 ¬∏\t184\t10111000 ¬π\t185\t10111001 ¬∫\t186\t10111010 ¬ª\t187\t10111011 ¬º\t188\t10111100 ¬Ω\t189\t10111101 ¬æ\t190\t10111110 ¬ø\t191\t10111111 √Ä\t192\t11000000 √Å\t193\t11000001 √Ç\t194\t11000010 √É\t195\t11000011 √Ñ\t196\t11000100 √Ö\t197\t11000101 √Ü\t198\t11000110 √á\t199\t11000111 √à\t200\t11001000 √â\t201\t11001001 √ä\t202\t11001010 √ã\t203\t11001011 √å\t204\t11001100 √ç\t205\t11001101 √é\t206\t11001110 √è\t207\t11001111 √ê\t208\t11010000 √ë\t209\t11010001 √í\t210\t11010010 √ì\t211\t11010011 √î\t212\t11010100 √ï\t213\t11010101 √ñ\t214\t11010110 √ó\t215\t11010111 √ò\t216\t11011000 √ô\t217\t11011001 √ö\t218\t11011010 √õ\t219\t11011011 √ú\t220\t11011100 √ù\t221\t11011101 √û\t222\t11011110 √ü\t223\t11011111 √†\t224\t11100000 √°\t225\t11100001 √¢\t226\t11100010 √£\t227\t11100011 √§\t228\t11100100 √•\t229\t11100101 √¶\t230\t11100110 √ß\t231\t11100111 √®\t232\t11101000 √©\t233\t11101001 √™\t234\t11101010 √´\t235\t11101011 √¨\t236\t11101100 √≠\t237\t11101101 √Æ\t238\t11101110 √Ø\t239\t11101111 √∞\t240\t11110000 √±\t241\t11110001 √≤\t242\t11110010 √≥\t243\t11110011 √¥\t244\t11110100 √µ\t245\t11110101 √∂\t246\t11110110 √∑\t247\t11110111 √∏\t248\t11111000 √π\t249\t11111001 √∫\t250\t11111010 √ª\t251\t11111011 √º\t252\t11111100 √Ω\t253\t11111101 √æ\t254\t11111110 √ø\t255\t11111111 Python‚Äã Auch in Python werden im Hintergrund Zahlen f√ºr Buchstaben und Bin√§rcodes f√ºr Dezimalzahlen verwendet. In Python l√§sst sich die sog. Ordnungszahl eines Buchstabens mit der Funktion ord einfach in Erfahrung bringen. Definition ord(&lt;Buchstabe&gt;)‚Äã Die sogenannte Ordnungszahl f√ºr einen (einzelnen!) Buchstaben kann mit dem Befehl ord bestimmt werden. ord_A = ord('A') ord_a = ord('a') print('Ordnungszahl A:', ord_A) print('Ordnungszahl a:', ord_a) Definition bin(&lt;Zahl&gt;)‚Äã Eine Dezimalzahl kann in eine Bin√§r-Zahl umgewandelt werden. binaer = bin(65) print(binaer) Hinweis Mit dem 0b zu Beginn zeigt Python an, dass es sich um eine Bin√§rzahl handelt. Analog zu der Subskript-Schreibweise 100000121000001_210000012‚Äã schreibt Python 0b1000001. Definition int(&lt;Bin√§rzahl&gt;), int(&lt;Bin√§rZahl&gt;, 2)‚Äã Der Befehl int (Abk√ºrzung f√ºr Integer, also Ganze Zahl) kann eine Bin√§rzahl in eine Dezimalzahl √ºbersetzen. Dabei gibt es mehrere M√∂glichkeiten: zahl = int(0b1001) # das 0b zeigt Python, dass es sich um eine bin√§re Zahl handelt print('1001 bin√§r = ', zahl) # Achtung! folgende Umwandlung klappt nicht, da jetzt ein Text √ºbergeben wird: # zahl = int('0b1001') # oder man teilt Python explizit mit, dass es sich um die Basis 2 handelt zahl2 = int('1011', 2) print('1011 bin√§r = ', zahl2) Hinweis Der zweite Parameter gibt die Basis des Zahlensystems an, hier also f√ºr Bin√§r 2. Definition chr(&lt;Zahl&gt;)‚Äã Gibt den zu einer Ordnungszahl geh√∂renden Buchstaben zur√ºck. buchstabe = chr(77) print(buchstabe) Name-&gt;Bin √Ñndern Sie das Programm unten so ab, dass Ihr Name ausgegeben wird. print(bin(ord('R'))) print(bin(ord('e'))) print(bin(ord('t'))) print(bin(ord('o'))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, bin und ord ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin-&gt;Name √Ñndern Sie das Programm unten so ab, dass Ihr Name aus dem Bin√§ren wieder in Text umgewandelt wird. print(chr(int('1010010', 2))) print(chr(int('1100101', 2))) print(chr(int('1110100', 2))) print(chr(int('1101111', 2))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, chr und int ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin√§rer Codierer‚Äã Aufgabe Schreiben Sie einen bin√§ren Codierer, welcher einen Text ins bin√§re √ºbersetzt. Im vorgegebenen Code sehen Sie, wie √ºber jeden Buchstaben eines Wortes iteriert werden kann. for buchstabe in 'Hallo': print(buchstabe) Aufh√ºbschen: Das 0b kann weggeschnitten werden, indem nur die Buchstaben nach dem zweiten Buchstaben verwendet werden: binaer = bin(11) # = 0b1011 binaer = binaer[2:] # alles (:) nach dem zweiten Buchstaben wird verwendet print(binaer) Jeder Buchstabe soll genau 1 Byte, also 8 Zeichen, umfassen. Dies erreicht man, wenn man mit Nullen (engl. Zeros) auff√ºllt: binaer = '1011' binaer = binaer.zfill(8) print(binaer) Statt immer eine neue Zeile zu verwenden, kann der print-Befehl auch angewiesen werden, am Ende ein Leerschlag einzuf√ºgen: for buchstabe in 'Hallo': print(buchstabe, end=' ') SSR","keywords":""},{"title":"7. Hauptplatine","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Mainboard","content":"7. Hauptplatine Der Grundbestandteil eines jeden Computers ist seine Hauptplatine (engl. mainbaord oder auch motherboard genannt). Die Elektronik auf der Hauptplatine verbindet Prozessor, RAM, etliche weitere verbaute Chips und s√§mtliche Peripherie, die √ºber die zahlreichen Anschl√ºssen mit dem Computer verbunden werden kann. ASRock Mainboard@ Aufbau‚Äã Hauptplatinen von modernen Computern sind stets √§hnlich aufgebaut, sie bestehen aus den beiden wichtigen Komponenten Northbridge und Southbridge, die gemeinsam als Chipsatz bezeichnet werden. Im nachfolgenden Schema sieht man gut, dass √ºber die Northbridge diejenigen Computerkomponenten verbunden sind, die besonders schnell miteinander kommunizieren m√ºssen: Prozessor, RAM und allenfalls schnelle Grafikkarten. √úber die Southbridge werden die restlichen Komponenten verbunden, so zum Beispiel Festplatten, Erweiterungskarten (wie z.B. Grafik- oder Netzwerkkarten) und das BIOS (basic input and output system). Schema einer Hauptplatine@ In modernen Systemen wird die Northbridge oft auch direkt im Prozessor integriert, zudem enth√§lt die Southbridge meist einen Netzwerk- und Grafikkontroller, so dass die grundlegende Ausgabe- und Netzwerkfunktionalit√§t bereits gegeben ist. Aufgabe Hauptplatine Betrachten Sie das ASRock Mainboard. Wo werden die folgenden Komponenten eingesteckt? Prozessor RAM Festplatten allenfalls ben√∂tigte zus√§tzliche Grafik- und Netzwerkkarten Wie wird die Hauptplatine mit Strom versorgt? Welche externen Anschl√ºsse (f√ºr Peripherie wie Bildschirm, Maus, ...) gibt es auf dieser Hauptplatine? Finden Sie auf dem ASRock Mainboard die North- und die Southbridge. Womit werden die beiden Chips verdeckt? Begr√ºnden Sie! BIOS‚Äã Beim Starten des Computers wird als erstes das BIOS (engl. basic input and output system) aktiv. Das BIOS erkennt und √ºberpr√ºft die vorhandene Hardware und sorgt daf√ºr, dass ein Betriebssystem gestartet werden kann. Basierend auf der gespeicherten Konfiguration entscheidet das BIOS, welcher Datentr√§ger als Grundlage f√ºr den Startvorgang dient. Dies ist in der Regel eine eingebaute Festplatte, kann aber auch eine CD/DVD oder ein USB-Stick sein. Um die BIOS-Konfiguration zu √§ndern, muss kurz nach dem Start eine bestimmte Taste gedr√ºckt werden. In der Regel wird dies kurz auf dem Bildschirm eingeblendet. Die h√§ufigsten Tasten sind: F1, F2, Del oder Enter, bei Mac sind es die Wahltaste (‚å•) oder Alt. Windows Schnellstart Da heutige Laptops die vorhandene Hardware bereits in Sekundenbruchteilen √ºberpr√ºft hat, oder f√ºr einen schnelleren Start bei einem sog. &quot;Fastboot&quot; nicht alle Komponenten neu √ºberpr√ºft, bleibt zu wenig Zeit um die richtige Taste zu dr√ºcken. Um dennoch ins BIOS zu kommen, muss der Computer speziell √ºber den &quot;Erweiterten Start&quot; neu gestartet werden. Dann gelangt man automatisch ins BIOS: https://www.pc-magazin.de/ratgeber/bios-uefi-starten-windows-10-3201227.html Je nach Konfiguration muss noch ein Passwort eingegeben werden, bevor die BIOS-Einstellungen angezeigt oder ver√§ndert werden k√∂nnen. Es gibt verschiedene BIOS-Hersteller. Die Oberfl√§che ist sehr schlicht und einfach gestaltet. Man navigiert mit den Pfeiltasten, w√§hlt mit Enter einen Eintrag aus und beendet ein Men√º mit Hilfe von Esc. Nachfolgend zwei Beispiele: AMI BIOS@ Award BIOS@ UEFI Der grafisch aufgepeppte Nachfolger von BIOS ist UEFI (Unified Extensible Firmware Interface). Es kann im Gegensatz zum BIOS auch per Maus gesteuert werden, erf√ºllt aber dieselbe Aufgabe wie das oben beschriebene BIOS.","keywords":""},{"title":"8. Stromversorgung","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Stromversorgung","content":"8. Stromversorgung Die Stromversorgung eines Computers erfolgt √ºber Gleichstrom (DC), das heisst, dass der Wechselstrom unseres Stromnetzes zuerst in Gleichstrom umgewandelt werden muss. Diese Funktion √ºbernimmt das Netzteil. Das Netzteil eines Desktop-Computers ist stets eingebaut. Bei einem Notebook hingegen √ºbernimmt ein externes Netzteil die Stromtransformation, da im Innern des Notebooks nicht gen√ºgend Platz daf√ºr vorhanden ist. Kenngr√∂ssen‚Äã F√ºr das Netzteil gibt es die folgende wichtige Kenngr√∂sse: Die Leistung gibt an, wie viel Energie das Netzteil in einer bestimmten Zeit den Komponenten maximal zur Verf√ºgung stellen kann. Die Leistung wird gemessen in Watt. ATX-Netzteil@ Notebook-Netzteil@ Leistung und W√§rme‚Äã Die meiste Leistung verpufft als Abw√§rme, darum brauchen Desktop-PCs (und leistungsf√§hige Grafikkarten) eine aktive Prozessork√ºhlung, d.h. einen K√ºhlk√∂rper mit grosser Oberfl√§che und dar√ºber einen starken L√ºfter, um die W√§rme vom Prozessor wegzubringen. Notebooks verwenden stromsparendere Prozessoren, daher reicht dort ein kleinerer L√ºfter aus, oder sie haben gar nur eine passive K√ºhlung ohne aktiven L√ºfter. K√ºhlk√∂rper und Ventilator@ Notebook-Mainboard mit Prozessork√ºhler@ Stromversorgung Recherchieren Sie im Internet und finden Sie heraus, wie viel Leistung (Watt) folgende Ger√§te typischerweise im Betrieb beziehen: Staubsauger Desktop-PC-Netzteil Notebook-Netzteil Smartphone-Ladeger√§t LED-Lampe Wie beurteilen Sie folgende Aussagen? Ist das erw√§hnte Ger√§t neu oder alt? Ein Notebook verbraucht zum Bearbeiten eines Textdokuments oder Surfen im Internet ca. 7W. Ein Desktopcomputer braucht ein 1500W-Netzteil. Eine Stereoanlage verbraucht im Standbyzustand knapp 15W. Ein Beamer hat einen Standbystromverbrauch von ca. 0.5W.","keywords":""},{"title":"25h","type":0,"sectionRef":"#","url":"/25h/home","content":"25h Datum\tThema\tInhaltMi. 22.02.\tComputer\tEinstieg Mi. 01.03.\tComputer\tLogische Schaltungen 1 Mi. 08.03.\tComputer\tLogische Schaltungen 2 Mi. 15.03.\tComputer\tAddierer Mi. 22.03.\tComputer\tLogische Bausteine: Video erstellen Mi. 29.03.\tComputer\tVideo finalisieren&amp;schneiden So. 02.04. Abgabe Screencast\tum 22:00 Uhr Mi. 05.04. Sonderwoche Mi. 12.04. Fr√ºhlingsferien Mi. 19.04. Fr√ºhlingsferien Mi. 26.04.\tComputer\tRechnerarchitektur Mi. 03.05.\tComputer\tRechnerarchitektur Mi. 10.05.\tComputer\tüößüößüöß Mi. 17.05.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Mi. 24.05.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Sa. 01.07.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Do. 01.06.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Mi. 07.06.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Mi. 14.06. Pr√§ventionswoche Mi. 21.06.\tProjekt\tüöÄüö¶üß®ü™ö‚öôÔ∏èüå°ü§ñ Mi. 21.06. Abgabe Projekt\tum 22:00 Uhr Mi. 28.06.\tProjekt\tProjekte Vorstellen Do. 29.06. Notenschluss Mi. 05.07.\tüößüößüöß Fr. 07.07. Schulschluss 1. Semester EinzellektionPraktikum Datum\tThema\tInhaltFr. 20.08.\tEinstieg\tICT Einstieg Fr. 27.08.\tICT\tBYOD-Basics Fr. 03.09.\tICT\tOffice: Layout und Gliederung Fr. 10.09.\tICT\tOffice: Layout und Gliederung Fr. 17.09.\tICT\tOffice: Layout und Gliederung Fr. 24.09. ICT\tKurztest Office Fr. 01.10. Klassenwoche Leukerbad Fr. 08.10. Herbstferien Fr. 15.10. Herbstferien Fr. 22.10. Herbstferien Mo. 25.10. Start BYOD Pr√ºfungen Fr. 29.10.\tCodes und Daten\tZahlensysteme Fr. 05.11.\tCodes und Daten\tZahlensysteme Fr. 12.11.\tCodes und Daten\tFarbdarstellung Fr. 19.11.\tCodes und Daten\tTextcodierung Fr. 03.12.\tCodes und Daten\tTextcodierung Fr. 10.12.\tCodes und Daten\tQR Codes Fr. 17.12.\tCodes und Daten\tGrafikformate Fr. 24.12. Winterferien Fr. 31.12. Winterferien Fr. 07.01. Winterferien Fr. 14.01.\tCodes und Daten\tAnwendungen Mi. 19.01. Notenschluss Fr. 21.01.\tCodes und Daten\tAnwendungen Fr. 28.01. Codes und Daten\tTest (schriftlich) 2. Semester Datum\tThema\tInhaltFr. 04.02.\tCodes und Daten\tTextcodierung Fr. 11.02.\tCodes und Daten\tFarbdarstellung Fr. 18.02. Sportwoche Fr. 25.02.\tCodes und Daten\tGrafikformate Fr. 04.03.\tCodes und Daten\tKompression Fr. 11.03.\tCodes und Daten\tAnwendungen Fr. 18.03.\tCodes und Daten\tWiederholung Fr. 25.03. Codes und Daten\tTest Fr. 01.04.\tCodes und Daten\tQR Codes Fr. 08.04. Sonderwoche Fr. 15.04. Fr√ºhlingsferien Fr. 22.04. Fr√ºhlingsferien Fr. 29.04.\tBig Data\tGesellschaft Fr. 06.05.\tBig Data\tPr√§sentieren Fr. 13.05.\tBig Data\tGesellschaft - Gruppendiskussion Fr. 20.05.\tBig Data\tGesellschaft Fr. 27.05. Auffahrt Fr. 03.06. Big Data\tVortr√§ge Fr. 10.06. Big Data\tVortr√§ge Fr. 17.06. Sportwoche Fr. 24.06.\tTabellenkalkulation Do. 30.06. Notenschluss Fr. 01.07.\tTabellenkalkulation Fr. 01.07. Filmanlass Fr. 08.07. Schulschluss 3. Semester Datum\tThema\tInhaltMi. 17.08.\tNetzwerke\tSchichtenmodell, TCP/IP Mi. 24.08.\tNetzwerke\tRouting, IP-Adresse, Codierung Mi. 31.08.\tNetzwerke\tRouting &amp; DNS Mi. 07.09.\tNetzwerke\tProtokolle, World Wide Web Mi. 14.09.\tNetzwerke\tWorkshop Mi. 21.09. Sonderwoche Mi. 28.09. Herbstferien Mi. 05.10. Herbstferien Mi. 12.10. Herbstferien Mi. 19.10.\tNetzwerke\tWiederholung Mi. 26.10. Netzwerke\tTest Mi. 02.11.\tKryptologie\tAntike Verschl√ºsselungsverfahren Mi. 09.11. Informatik Biber\tWettbewerb Mi. 09.11.\tKryptologie\tSymmetrische Verschl√ºsselung Mi. 16.11.\tKryptologie\tAsymmetrische Verschl√ºsselung Mi. 23.11.\tKryptologie\tHashfunktion Mi. 30.11.\tKryptologie\tDigitale Signaturen Mi. 07.12.\tKryptologie\tKryptologie im Alltag Mi. 14.12. Kryptologie\tTest Mi. 21.12.\tKryptologie\tSteganographie Mi. 28.12. Winterferien Do. 05.01. Winterferien Do. 12.01.\tProgrammieren 2\tListen &amp; Game Do. 19.01.\tProgrammieren 2\tGame Mi. 25.01. Notenschluss Do. 26.01.\tProgrammieren 2\tGame Do. 02.02.\tProgrammieren 2\tGame Fr. 03.02. Semesterende Mi. 08.02.\tProgrammieren 2\tGame fertigstellen und spielen Mi. 15.02. Sportwoche\t","keywords":""},{"title":"6. Netzwerkkarte","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Netzwerkkarte","content":"6. Netzwerkkarte Ein Computer ohne M√∂glichkeiten zur Kommunikation ist nicht mehr vorstellbar. Damit ein Computer sich in ein LAN einbinden kann, ben√∂tigt er eine Netzwerkkarte ‚Äì sei es eine mit Kabelanschluss oder eine drahtlose f√ºr die Teilnahme in einem WLAN. Kenngr√∂ssen‚Äã F√ºr die Netzwerkkarte gibt es folgende wichtige Kenngr√∂sse: Die maximale √úbertragungsrate gibt an, wie viele Daten pro Sekunde (im Idealfall) √ºbertragen werden k√∂nnen. Sie wird in der Einheit Mbps oder Gbps angegeben, was ¬´Mega- resp. Gigabit pro Sekunde¬ª bedeutet. Gemessen wird hier also nicht in Byte sondern in Bit, was etwas ungew√∂hnlich ist. Netzwerkkarte‚Äã Heute ist die Netzwerkkarte meist direkt auf dem Mainboard integriert und muss nicht als Steckkarte hinzugef√ºgt werden. Allerdings kann ein Computer (insbesondere Server) so immer noch aufger√ºstet und mit mehreren Netzwerkkarten ausger√ºstet werden. Netzwerkkarte mit RJ45-Buchse@ Netzwerkkabel mit RJ45-Stecker@ Drahtlose Netzwerkkarte‚Äã Netzwerkkarten zur Verbindung mit einem drahtlosen Netzwerk (WLAN) gibt es in etlichen Ausf√ºhrungen. Einerseits kann sie in PCs und Server wie andere Steckkarten eingebaut werden, andererseits gibt es sie in kleineren Ausf√ºhrungen f√ºr Notebooks oder sogar als USB-Stecker im Miniformat. Drahtlose Netzwerkkarte mit Antenne f√ºr PCs@ Drahtlose Netzwerkkarte f√ºr Notebooks@ Drahtlose Netzwerkkarte f√ºr USB-Anschluss@ Netzwerkkarte Sie wollen f√ºr die Ferien einige Filme von Netflix offline verf√ºgbar machen und m√ºssen insgesamt 10 GB Daten herunterladen. Ihr WLAN kann in ihr Zimmer maximal 150 Mbps √ºbertragen. Wie viel Zeit gewinnen Sie, wenn Sie aufstehen um das Ger√§t per Ethernet an Ihren Glasfaser-Router mit 1 Gbps anschliessen?* Berechnen Sie: die Download Dauer per WLAN die Download Dauer per Ethernet den Zeitgewinn * Die Voraussetzung f√ºr diesen Vergleich w√§re nat√ºrlich, dass die Netflix-Server die Filme auch effektiv mit 1Gbps bereitstellen w√ºrden.","keywords":""},{"title":"4. Speicher","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Speicher","content":"4. Speicher Datenspeicher speichern Daten √ºblicherweise in bin√§rer Form. Ein Datenspeicher besteht aus einem Speichermedium, auf welchem die Bits physikalisch repr√§sentiert werden. Kenngr√∂ssen‚Äã F√ºr Speicher gibt es drei wichtige Kenngr√∂ssen: Die Speicherkapazit√§t ist die Datenmenge, welcher der Speicher maximal aufnehmen kann. Sie wird in Byte angegeben. Die Zugriffszeit ist die Zeit, die ben√∂tigt wird, um eine Dateneinheit (z.B. ein Byte) aus dem Speicher auszulesen. Die Zugriffszeit f√ºr das Speichern von Daten ist oft gr√∂sser als die Zugriffszeit f√ºr das Laden. Aus der Zugriffszeit kann die Daten√ºbertragungsrate berechnet werden, also die Datenmenge, die innerhalb einer bestimmten Zeit geladen oder gespeichert werden kann. Die Daten√ºbertragungsrate wird in Byte pro Sekunde angegeben. Arbeitsspeicher (RAM)‚Äã Der Arbeitsspeicher oder das RAM (engl. random access memory) enth√§lt die Befehle und Daten der aktuell ge√∂ffneten Programme oder Apps. Der Prozessor muss m√∂glichst schnell auf diese Daten zugreifen k√∂nnen. Der Arbeitsspeicher muss also eine m√∂glichst kleine Zugriffszeit haben. Daf√ºr werden Nachteile in Kauf genommen. So ist die Speicherkapazit√§t von Arbeitsspeicher eher klein. Ausserdem ist Arbeitsspeicher fl√ºchtig. Dies bedeutet, dass die Daten verloren gehen, sobald der Speicher nicht mehr mit Strom versorgt wird. Heute wird in Computern normalerweise sogenanntes DDR-SDRAM1 eingesetzt. Es zeichnet sich dadurch aus, dass die Daten alle paar Millisekunden wieder neu geschrieben werden m√ºssen (Refresh). DDR SDRAM@ RAM in meinem Smartphone/Laptop Wie viel Arbeitsspeicher besitzt Ihr Laptop / Ihr Smartphone? Hinweis Dies kann in den Systemeinstellungen oder im (unter Windows) im Taskmanager nachgeschaut werden. Festplatten‚Äã Der Festplatten- oder Massenspeicher erf√ºllt ganz andere Anforderungen als der Arbeitsspeicher. Wichtig ist hier, dass Daten in grossen Mengen permanent gespeichert k√∂nnen, ohne dass eine durchgehende Stromzufuhr n√∂tig ist. Dass die Daten√ºbertragungsrate deutlich langsamer als beim Arbeitsspeicher ist, spielt deshalb eine untergeordnete Rolle. Er wird ‚Äì im Gegensatz zum Arbeitsspeicher ‚Äì nicht direkt auf das Mainboard gesteckt, sondern mittels Strom- und Datenkabel angeschlossen. Heute gibt des den Festplattenspeicher in zwei Ausf√ºhrungen: herk√∂mmliche Harddisks oder HDD (engl. hard disk drive) SSDs (engl. solid state disk) Harddisk (HDD)‚Äã Der Aufbau einer herk√∂mmlichen Harddisk gleicht einem Plattenspieler. Im Innern der Harddisk drehen sich mehrere Platten, auf denen durch Magnetisierung einzelner Bereiche Daten gespeichert werden. Auf dem nachfolgenden Bild (rechts) sieht man den Arm zum Auslesen resp. Schreiben der Daten (er befindet sich momentan in der Parkposition neben den Scheiben). Dieser Speicher wird heute noch eingesetzt, um grosse Datenmengen g√ºnstig zu speichern. Er ist relativ langsam und anf√§llig auf Transportsch√§den, da es sich um einen mechanischen Speicher mit beweglichen Teilen handelt. Die Drehgeschwindigkeit der Platten ist beschr√§nkt, sie bestimmt Lese-/Schreibgeschwindigkeit. Zudem muss vor dem effektiven Zugriff stets noch gewartet werden, bis sich der Arm an der richtigen Position befindet. Harddisk@ ge√∂fffnete Harddisk@ Solid State Disk (SSD)‚Äã Der Aufbau einer SSD gleicht in keiner Weise demjenigen einer HDD. Wie der Name schon sagt, enth√§lt sie keine beweglichen Teile und ist daher robuster, schneller, leichter und verbraucht weniger Strom. Allerdings gibt es zwei gewichtige Nachteile: SSDs kosten ein Mehrfaches im Vergleich zu herk√∂mmlichen HDDs. Auf dem Markt sind nicht so grosse (in Bezug auf die Speicherkapazit√§t) SSDs erh√§ltlich wie HDDs. SSD@ ge√∂fffnete SSD@ HDD/SSD in meinem Smartphone/Laptop Wie viel Speicherplatz besitzt Ihr Smartphone, ihr Laptop? Wie viel davon ist noch frei? Laptop Wie viel Speicherplatz wird von Word, Excel, PowerPoint, ... Teams, Adobe Produkten verwendet? Smartphone Wie viel Speicherplatz wird von Ihrem Musikplayer (Spotify, Apple Music, ...) Whatsapp Instagram, Snapchat oder Tiktok belegt? Anschlusskabel‚Äã Festplatten werden mit sogenannten SATA-Kabeln angeschlossen. Die Abk√ºrzung SATA steht f√ºr serial at attachment. Das schmalere Kabel dient zur Daten√ºbertragung, das breitere f√ºr die Stromzufuhr. SATA-Kabel @ SATA-Stromanschluss @ Speicherhierarchie‚Äã Aus technischen Gr√ºnden sind schnelle Speicher viel teurer als langsame Speicher. Ausserdem sind schnelle Speicher fl√ºchtig, sie ben√∂tigen eine Stromzufuhr, um den Speicherinhalt bewahren zu k√∂nnen. Das f√ºhrt dazu, dass schneller Speicher in viel kleineren Mengen und nur wo unbedingt n√∂tig eingesetzt wird. Es ergibt sich in Computersystemen eine Hierarchie von verschiedenen Speichern. Je n√§her der Speicher beim Prozessor ist, desto schneller muss er sein. Speicherhierarchie Speicher Wieso enth√§lt ein Computer so viele verschiedene Speicherarten? √úberlegen Sie sich, welche Daten auf den einzelnen Ebenen der oben abgebildeten Speicherhierarchie gespeichert werden. Wieso kann eine Datei auf einer Festplatte viel schneller gel√∂scht als gespeichert werden? Speicherkosten und Datendurchsatz F√ºhren Sie auf üëâ Digitec eine Recherche zu den Speicherpreisen und dem Datendurchsatz (wie schnell k√∂nnen Daten geschrieben/gelesen werden) durch. Bestimmen Sie jeweils den Preis pro GB (selber berechnen) und den Datendurchsatz f√ºrs Schreiben und Lesen. f√ºr ein Modell im mittleren Preissegment. SSD, Mobile SSD, HDD, Externe HDD, USB-Stick, SD/microSD Karte DDR-SDRAM: engl. Double Data Rate Synchronous Dynamic Random Access Memory ‚Ü©","keywords":""},{"title":"5. Grafikkarte","type":0,"sectionRef":"#","url":"/25h/Computer/basics/Grafikkarte","content":"5. Grafikkarte Die Grafikkarte ist neben dem Prozessor die zweite wichtige Komponente, welche im Computer f√ºr die Verarbeitung von Daten zust√§ndig ist. Grafikkarten haben folgende Aufgaben: Erzeugen einer Pixelgrafik aus einer anderen Darstellungsform, Speichern dieser Pixelgrafik, des Bildschirminhalts, Steuerung des Bildschirms, damit er den Bildschirminhalt anzeigt. Kenngr√∂ssen‚Äã F√ºr Grafikkarten gibt es drei wichtige Kenngr√∂ssen: Die maximale Aufl√∂sung, also die Anzahl der Bildpunkte (z.B. 7680√ó4320). Die Taktfrequenz gibt an, wie schnell der Grafikkarten-Prozessor Berechnungen durchf√ºhren kann. Sie wird in der Einheit Hertz angegeben, was ¬´pro Sekunde¬ª bedeutet. Die Grafikkarte hat also auch einen eigenen leistungsf√§higen Prozessor. Die Speicherkapazit√§t ist die Datenmenge, welcher der Speicher maximal aufnehmen kann. Sie wird in Byte angegeben. Die Grafikkarte besitzt also auch einen eigenen Arbeitsspeicher. Im Gegensatz zu den CPU Prozessoren, welche in der Regel wenige (&lt; 32) Kerne aufweisen, ist eine Grafikkarte hochgradig auf parallelisierte Berechnungen ausgelegt und besitzt entsprechend viele Kerne. Sequentiell vs. Parallel Schauen Sie sich das folgenden Video an und versuchen Sie zu verstehen, was die Unterschiede zwischen sequentieller und paralleler Verarbeitung sind. Halten Sie Ihre Erkenntnisse fest. Hercules-Grafikkarte@ Hercules Graphics Card‚Äã Hochaufl√∂sende monochrome Grafikkarte (720√ó348 Pixel, 1 Bit Farbe) mit 64 KB Video-RAM aus dem Jahr 1982. NVIDIA RTX 3080 Ti Trinity-Grafikkarte NVIDIA RTX 3080 Ti Trinity‚Äã Aktuelle Grafikkarte aus dem Jahr 2022 mit einer maximalen Aufl√∂sung von 7680√ó4320 Pixel pro Bildschirm, 12 GB Video-RAM und Unterst√ºtzung von Echtzeit-Raytracing. Fr√ºhe Grafikkarten konnten nur aus Text selbst√§ndig eine Pixelgrafik erzeugen. Um etwas anderes auf dem Bildschirm darzustellen, mussten Programme oder das Betriebssystem die Grafik selbst berechnen und pixelweise an die Grafikkarte √ºbermitteln. Mit der Zeit konnten neuere Grafikkarten immer mehr Funktionen der Bilderzeugung √ºbernehmen: 2D-Rasterung: Zeichnen von Linien, Rechtecken und Kreisen, 3D-Rasterung: Verdeckungsberechnung und Lichtsimulation, 3D-Raytracing: fotorealistische Berechnung basierend auf der Simulation von Lichtstrahlen. Ausserdem werden heute Grafikkarten auch f√ºr aufw√§ndige Berechnungen in anderen Bereichen eingesetzt, z.B. f√ºr neuronale Netze oder f√ºr das Mining von Kryptow√§hrungen. ‚≠êÔ∏è Raytracing Was ist Raytracing und was bringt es mir? Steuerung des Bildschirms‚Äã F√ºr die Steuerung des Bildschirms gibt es vier aktuelle Technologien. Display Port (DP)@ Digital Visual Interface (DVI)@ High-Definition Multimedia Interface (HDMI)@ Video Graphics Array (VGA)@ USB-C Heutige Laptops haben oft keine separaten Ausg√§nge f√ºr Bildschirme - dank USB-C. Die verwendete Technologie sowie die Protokolle bleiben aber dieselben, weshalb ohne weiteres Adapter f√ºr entsprechende Technologien (DP, DVI, HDMI, VGA) angeschlossen werden k√∂nnen. USB-C Displayadapter Aufgabe Grafikkarte: Rendering Recherchieren Sie den Begriff &quot;Rendering&quot;. Welche Aufgaben erfordern eine hohe Rendering-Leistung? F√ºr welche Zielgruppen nebst Gamern sind gute Grafikkarten essenziell?","keywords":""},{"title":"2. Zahlensysteme","type":0,"sectionRef":"#","url":"/25h/Codierung/Zeichencodierung/Zahlensysteme","content":"2. Zahlensysteme Aktuelle Computer kennen im wesentlichen zwei Zust√§nde: Strom- oder Nicht-Strom. Da es nichts dazwischen gibt, werden diese Zust√§nde auch &quot;bin√§r&quot; genannt. Dies kann mit Zahlen wie folgt dargestellt werden: 0 ‚Üí kein Strom 1 ‚Üí Strom Da wir Menschen uns besser im Zehnersystem zurechtfinden, wo es 10 eindeutige Zeichen gibt, brauchen wir eine M√∂glichkeit, zwischen diesen System hin- und herzurechnen. Jedes dieser sog. Stellenwertsysteme ist gleich aufgebaut. Schaut man sich das Zehnersystem an, bemerkt man, dass jede Stelle mit einer 10er Potenz multipliziert wird. Zehnersystem‚Äã 328=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100\\ \\begin{aligned} 328 &amp;= 300 + 20 + 8 \\\\ &amp;= 3 \\cdot 100 + 2 \\cdot 10 + 8 \\cdot 1 \\\\ &amp;= 3 \\cdot 10^2 + 2 \\cdot 10^1 + 8 \\cdot 10^0 \\\\ \\end{aligned}¬†328‚Äã=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100‚Äã Bin√§rsystem‚Äã Das Bin√§rsystem wird auch Dualsystem oder Zweiersystem genannt Nun gibt es nur zwei eindeutige Zeichen, 0 und 1, und jede Stelle wird mit einer Zweierpotenz multipliziert. In der folgenden Tabelle sind die ersten 12 Dezimalzahlen auch als Bin√§rzahl angegeben. Bin√§r\tDezimal020_202‚Äã\t0100_{10}010‚Äã 121_212‚Äã\t1101_{10}110‚Äã 10210_2102‚Äã\t2102_{10}210‚Äã 11211_2112‚Äã\t3103_{10}310‚Äã 1002100_21002‚Äã\t4104_{10}410‚Äã 1012101_21012‚Äã\t5105_{10}510‚Äã Bin√§r\tDezimal1102110_21102‚Äã\t6106_{10}610‚Äã 1112111_21112‚Äã\t7107_{10}710‚Äã 100021000_210002‚Äã\t8108_{10}810‚Äã 100121001_210012‚Äã\t9109_{10}910‚Äã 101021010_210102‚Äã\t101010_{10}1010‚Äã 101121011_210112‚Äã\t111011_{10}1110‚Äã Hinweis: Subskript Die tiefgestellte 2 bzw. 10 zeigt an, in welchem Zahlensystem die Zahl dargestellt ist und wird Subskript genannt. Durch das Subskript wird ersichtlich, ob bspw. mit 101 dezimal &quot;Hundert und Eins&quot; oder bin√§r &quot;Eins Null Eins&quot; gemeint ist. Bin√§r ‚Üí Dezimal‚Äã Die Umrechnung vom Bin√§rsystem ins Dezimalsystem erfolgt durch Ausmultiplizieren mit den entsprechenden Zweierpotenzen. Beispiel: 1011 Zweierpotenz\t232^323\t222^222\t212^121\t202^020 Bin√§rzahl\t111\t000\t111\t111 Summanden\t888\t000\t222\t111 Resultat 111111 oder mathematisch formuliert: 10112=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110\\begin{aligned} 1011_2 &amp;= 1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 \\\\ &amp;= 1 \\cdot 8 + 0 \\cdot 4 + 1 \\cdot 2 + 1 \\cdot 1 \\\\ &amp;= 11_{10} \\end{aligned}10112‚Äã‚Äã=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110‚Äã‚Äã Dezimalsystem ‚Üí Bin√§rsystem‚Äã F√ºr die Umrechnung vom Dezimalsystem zum Bin√§rsystem ist die Tabelle der Zweierpotenzen essenziell: 282^828\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020256\t128\t64\t32\t16\t8\t4\t2\t1 Beispiel: 143 Die erste Zweierpotenz, die kleiner ist als 143 ist, ist 27=1282^7 = 12827=128 ‚Üí die Bin√§rzahl hat also 8 Stellen. Nun wird f√ºr jede Stelle √ºberpr√ºft, ob die entsprechende Zweierpotenz zur Zwischensumme dazuaddiert werden kann, oder ob man dadurch bereits eine zu grosse Zahl erh√§lt. 2er-Potenz\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020\tZwischensummeRechnungsschritte\t128\t64\t32\t16\t8\t4\t2\t1 1. 128 &lt;143\\lt 143&lt;143\t1 128 2. 128 + 64 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0 128 3. 128 + 32 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0 128 4. 128 + 16 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0\t0 128 5. 128 + 8 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1 136 6. 136 + 4 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1 140 7. 140 + 2&lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1\t1 142 8. 142 + 1=143= 143=143\t1\t0\t0\t0\t1\t1\t1\t1\t143 Bin ‚Üí Dez Wandeln Sie vom vom Bin√§r- ins Dezimalsystem um. Dez ‚Üí Bin Wandeln Sie vom Dezimal- ins Bin√§rsystem um.","keywords":""},{"title":"Kryptologie","type":0,"sectionRef":"#","url":"/25h/Kryptologie","content":"Kryptologie Der Begriff Kryptologie setzt sich zusammen aus dem altgriechischen Œ∫œÅœÖœÄœÑœåœÇ (also krypt√≥s), was verborgen bedeutet, und ŒªœåŒ≥ŒøœÇ (also l√≥gos), was Lehre, Kunde bedeutet. Kryptologie bezeichnet die Wissenschaft, die sich mit der Ver- und Entschl√ºsselung von Informationen (also mit Informationssicherheit) besch√§ftigt. Kryptologie, Kryptographie und Kryptoanalyse@ Kryptographie und Kryptoanalyse‚Äã Die Kryptologie kann grob in zwei Teilbereiche unterteilt werden: die Kryptographie (Œ≥œÅŒ¨œÜŒµŒπŒΩ, also gr√°phein, was schreiben bedeutet) und die Kryptoanalyse. W√§hrend sich die Kryptographie mit dem Finden von sicheren Verschl√ºsselungsverfahren besch√§ftigt, liegt der Fokus der Kryptoanalyse beim ¬´Brechen¬ª oder ¬´Knacken¬ª solcher Verfahren. Klartext, Geheimtext und Schl√ºssel‚Äã Symbol\tdeutscher Begriff\tenglischer Begriff\tBedeutungppp\tKlartext\tplaintext\tunverschl√ºsselte Nachricht ccc\tGeheimtext\tciphertext\tverschl√ºsselte Nachricht kkk\tSchl√ºssel\tkey\tInformation, welche ben√∂tigt wird, um den Klartext zu ver- bzw. den Geheimtext zu entschl√ºsseln Verschl√ºsselungsverfahren‚Äã Ein Verschl√ºsselungsverfahren ist ein Algorithmus, welcher einen Klartext unter Verwendung eines Schl√ºssels in einen Geheimtext √ºberf√ºhrt oder umgekehrt. Zusammenhang zwischen Klartext, Geheimtext und Schl√ºssel@ Schl√ºsselraum‚Äã Der Begriff Schl√ºsselraum bezeichnet die Anzahl m√∂glicher Schl√ºssel f√ºr ein bestimmtes Verschl√ºsselungsverfahren. Die Sicherheit eines Verschl√ºsselungsverfahrens h√§ngt stark von der Gr√∂sse des Schl√ºsselraums ab. Die Gr√∂sse des Schl√ºsselraums wird in bit (d.h. als bin√§rer Logarithmus) angegeben. Bei zwei m√∂glichen Schl√ºsseln (=21=2^1=21) spricht man von 1 bit, bei 1024 m√∂glichen Schl√ºsseln (=210=2^{10}=210) von 10 bit. Schl√ºsselr√§ume Geben Sie die Gr√∂sse des Schl√ºsselraumes f√ºr die folgenden Verschl√ºsselungsverfahren an: Skytale‚Äã Caesar‚Äã ROT13‚Äã Substitution‚Äã allgemeine monoalphabetische Substitution SSR","keywords":""},{"title":"Browserzertifikate","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Alltag/browser-zertifikate","content":"Browserzertifikate W√§hrend fr√ºher s√§mtliche Informationen im Internet unverschl√ºsselt √ºbertragen worden sind, werden die meisten Verbindungen heutzutage mit kryptographischen Mitteln gesch√ºtzt. Insbesondere nutzen momentan (Dezember 2022) gem√§ss W3Techs1 √ºber 80% aller Webseiten HTTPS. HTTPS ist eine Erweiterung des HyperText Transfer Protocols, der Buchstabe ¬´S¬ª steht f√ºr Secure. Damit wird der Datenverkehr in beiden Richtungen verschl√ºsselt: alle Daten, die vom Webserver zum Browser √ºbertragen werden (also der Inhalt der Seite wie z.B. Text, Bilder, Videos, heruntergeladene Dateien, ...) alle Daten, die vom Browser zu Webserver √ºbertragen werden (also ausgef√ºllte Formulare wie z.B. Benutzernamen und Passw√∂rter, aber auch alle Texte, die wir eingeben sowie s√§mtliche hochgeladenen Dateien, ...) Symmetrische und asymmetrische Verschl√ºsselung‚Äã Die Daten werden symmetrisch mit einem Sitzungsschl√ºssel (mit begrenzter G√ºltigkeitsdauer) verschl√ºsselt, wobei der Sitzungsschl√ºssel der asymmetrisch verschl√ºsselt √ºbertragen wird. Da die Browser nicht jeden einzelnen √∂ffentlichen Schl√ºssel der Webseiten (dies sind gem√§ss internet live stats hunderte Millionen2) kennen k√∂nnen, vertrauen sie ausgew√§hlten Zertifizierungsstellen. Der √∂ffentliche Schl√ºssel einer Webseite wird von einer Zertifizierungsstelle digital signiert. Das so entstandene Zertifikat wird beim Verbindungsaufbau √ºbertragen und kann vom Browser √ºberpr√ºft werden. Webseitenzertifikate Das Schloss vor der URL zeigt die Verwendung von HTTPS (und Webseitenzertifikaten) an. Beim Klicken auf das Schloss k√∂nnen ¬´Weitere Informationen¬ª zur Verbindung angezeigt werden (unter Firefox): Informationen zur Webseite Webseitenzertifikat Was finden Sie alles √ºber die Zertifikate der Webseite des Gymnasiums Biel-Seeland heraus? Kryptographische Details Im Screenshot oben sehen Sie die technische Angabe `TLS_AES_128_GCM_SHA256, 128-Bit Schl√ºssel, TLS 1.3`. Finden Sie heraus, was die einzelnen Teile aussagen? Zertifizierungsstellen Finden Sie die im Browser gespeicherten ¬´vertrauensw√ºrdigen Zertifizierungsstellen¬ª? Zertifikatswarnungen Besuchen Sie die Webseite BadSSL und testen Sie mit verschiedenen Browsern verschiedene Konfigurationen. So lernen Sie die m√∂gliche Zertifikatswarnungen kennen. Achtung vor falscher Sicherheit‚Äã Die Tatsache, dass bei einer bestimmten Webseite das Schloss angezeigt wird, heisst noch lange nicht, dass die Webseite sicher ist. Denn das Wort sicher hat mehrere Bedeutungen. Was genau sagt das Schloss also aus? Worauf k√∂nnen wir vertrauen? Was hingegen kann trotzdem noch schiefgehen? Was bedeutet sicher in diesem Zusammenhang? Die Verbindung ist vertraulich ‚Äì niemand unterwegs kann mitlesen. Wir k√∂nnen sicher sein, dass wir mit dem genannten Server (resp. mit der angegebenen Webseite) kommunizieren. Die √ºbertragenen Inhalte sind vor Manipulation gesch√ºtzt. Wo ist trotzdem Vorsicht geboten? Die URL (also die Webseitenadresse) muss ganz genau kontrolliert werden. Es n√ºtzt nichts, wenn die Verbindung verschl√ºsselt ist und der Server √ºberpr√ºft wurde, wenn wir mit dem falschen Server sprechen, weil wir zu wenig genau auf die URL achten. www.bekb.com.evil.com/login ist keine g√ºltige Webseite von BEKB, sondern eine Unterseite (Subdomain) von evil.com. www.vaIiant.ch ist nicht dasselbe wie www.valiant.ch ‚Äì auch wenn es fast identisch aussieht (achten Sie genau auf das ¬´L¬ª). In einer anderen Schriftart sieht man den Fehler besser: www.vaIiant.ch Absicherung mit Passwortmanager Die Plugins von Passwortmanagern erkennen diese kaum sichtbaren details, so dass bei solchen Seiten kein Vorschlag zum automatischen Ausf√ºllen angezeigt wird. Die Webseite kann z.B. Malware verbreiten resp. gehackt worden sein. D.h. der ¬´Inhalt¬ª wird nicht √ºberpr√ºft. Quelle: W3Techs ‚Ü© Quelle: internet live stats ‚Ü©","keywords":""},{"title":"Ziele der Kryptologie","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Alltag/konzepte","content":"Ziele der Kryptologie Als Zusammenfassung betrachten wir die Ziele der Kryptographie im √úberblick: Vertraulichkeit Informationen m√ºssen so gespeichert oder √ºber ungesch√ºtzte Kan√§le √ºbertragen werden k√∂nnen, dass nur Berechtigte sie lesen k√∂nnen. Um die Vertraulichkeit (oder den Schutz vor unbefugtem Zugriff) zu gew√§hrleisten, werden Nachrichten symmetrisch verschl√ºsselt. Integrit√§t Daten d√ºrfen (unterwegs) nicht unentdeckt manipuliert werden k√∂nnen. Sie m√ºssen nachweisbar vollst√§ndig und unver√§ndert sein. Um die Integrit√§t (oder Unversehrtheit) zu gew√§hrleisten, werden Hashwerte berechnet. Authentizit√§t Andere d√ºrfen sich nicht als mich ausgeben. Eine Person muss eindeutig identifizierbar sein. Um die Authentizit√§t (oder Echtheit/√úberpr√ºfbarkeit) zu gew√§hrleisten, werden asymmetrische Verfahren eingesetzt. Verbindlichkeit Unterschriebene Vertr√§ge sollen nicht bestritten werden k√∂nnen. Um die Verbindlichkeit (oder Nichtabstreitbarkeit) zu gew√§hrleisten, werden digitale Signaturen eingesetzt.","keywords":""},{"title":"WhatsApp-Verschl√ºsselung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Alltag/whatsapp","content":"WhatsApp-Verschl√ºsselung Gem√§ss WhatsApp sind s√§mtliche WhatsApp-Nachrichten Ende-zu-Ende verschl√ºsselt.1 WhatsApp-Verschl√ºsselung Was meint WhatsApp mit ¬´Ende-zu-Ende-Verschl√ºsselung¬ª? Diskutieren Sie zu zweit, wie die WhatsApp-Verschl√ºsselung funktionieren k√∂nnte. Sicherheitsnummer WhatsApp bietet die M√∂glichkeit, eine Sicherheitsnummer anzuzeigen und zu √ºberpr√ºfen. Ende-zu-Ende-Verschl√ºsselung eines Chats verifizieren: √ñffnen Sie Ihren gemeinsamen Chat. Tippen Sie auf den Namen des Kontakts, um den Kontaktinfo-Bildschirm zu √∂ffnen. Tippen Sie auf Verschl√ºsselung, um den QR-Code und die 60-stellige Sicherheitsnummer anzuzeigen. Sie k√∂nnen den angezeigten QR-Code gegenseitig scannen, um nicht die 60-stellige Zahl kontrollieren zu m√ºssen. Probieren Sie es zu zweit aus und diskutieren Sie, wie diese Nummer zustande kommt und was sie bedeutet. Quelle: whatsapp.com ‚Ü©","keywords":""},{"title":"Caesar-Chiffre","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/Caesar","content":"Caesar-Chiffre Der r√∂mische Feldherr Gaius Julius Caesar hat seine milit√§rischen Nachrichten verschl√ºsselt. Der r√∂mische Schriftsteller Sueton hat Folgendes √ºberliefert: ‚Ä¶ si qua occultius perferenda erant, per notas scripsit, id est sic structo litterarum ordine, ut nullum verbum effici posset: quae si qui investigare et persequi velit, quartam elementorum litteram, id est D pro A et perinde reliquas commutet. √úbersetzt... ‚Ä¶ wenn etwas Geheimes zu √ºberbringen war, schrieb er in Zeichen, das heisst, er ordnete die Buchstaben so, dass kein Wort gelesen werden konnte: Um diese zu lesen, tauscht man den vierten Buchstaben, also D f√ºr A aus, und ebenso mit den restlichen. Caesar hat also jeden Buchstaben seiner Nachrichten durch den Buchstaben ersetzt, welcher im Alphabet drei Stellen weiter hinten steht. Der Buchstabe D, welcher f√ºr A eingesetzt wird, wird Schl√ºssel genannt. Er muss bekannt sein, um die Nachricht wieder entschl√ºsseln zu k√∂nnen. Schema der Caesar-Verschl√ºsselung@ Die Verschl√ºsselung erfolgt, indem man in der folgenden Tabelle einen Klartextbuchstaben im Klartextalphabet sucht und durch den Buchstaben des Geheimtextalphabets ersetzt, der genau unterhalb steht. Die Entschl√ºsselung erfolgt in umgekehrter Richtung: Caesar-Chiffre\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tD E F G H I J K L M N O P Q R S T U V W X Y Z A B C Merke Heute wird jede Verschl√ºsselung, die auf einer Verschiebung des Alphabets beruht, eine Casear-Verschl√ºsselung genannt. Die Nachricht MORGEN UM ZEHN wird verschl√ºsselt zu PRUJHQ XP CHKQ. ROT13‚Äã ROT13 ist eine Caesar-Verschl√ºsselung, bei welcher die Buchstaben um 13 Stellen ‚Äì also exakt um die H√§lfte des Alphabets ‚Äì verschoben werden. Der Buchstabe A wird folglich auf N abgebildet. Das Spezielle an dieser Verschl√ºsselung ist, dass man durch eine erneute Verschl√ºsselung wieder den Klartext erh√§lt. Oder anders formuliert: Es spielt keine Rolle, ob man ver- oder entschl√ºsselt. Sie k√∂nnen dies in der folgenden Tabelle einfach nachvollziehen: ROT-13\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tN O P Q R S T U V W X Y Z A B C D E F G H I J K L M Eigentlich braucht man bei ROT13 nur die halbe Tabelle: ROT13@ Die Nachricht KOMM ALLEINE wird verschl√ºsselt zu XBZZ NYYRVAR. Caesar-Chiffre ausprobieren‚Äã Caesar-Chiffre Klartext Schl√ºssel: D ABCDEFGHIJKLMNOPQRSTUVWXYZ Geheimtext","keywords":""},{"title":"H√§ufigkeitsanalyse","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/frequency-analysis","content":"H√§ufigkeitsanalyse Buchstabenh√§ufigkeit in der deutschen Sprache 1‚Äã Nicht alle Buchstaben kommen in der deutschen Sprache gleich h√§ufig vor. Nachfolgend findest du eine Auflistung der 10. h√§ufigsten Buchstaben der deutschen Sprache: 1.\t2.\t3.\t4.\t5.\t6.\t7.\t8.\t9.\t10.Buchstabe\tE\tN\tI\tS\tR\tA\tT\tD\tH\tU H√§ufigkeit\t17,40 %\t9,78 %\t7,55 %\t7,27 %\t7,00 %\t6,51 %\t6,15 %\t5,08 %\t4,76 %\t4,35 % al-Kindi 2‚Äã Im neunten Jahrhundert hat der arabische Gelehrte Ab≈´ Ya'q≈´b ibn IshƒÅq al-Kindƒ´ (oder kurz al-Kindi) durch eine Analyse des Korans entdeckt, dass die einzelnen Zeichen der arabischen Schrift in bestimmten H√§ufigkeiten auftreten. In seiner Abhandlung √ºber die Entzifferung kryptographischer Botschaften schrieb er Folgendes: @ Eine M√∂glichkeit, eine verschl√ºsselte Botschaft zu entziffern, vorausgesetzt, wir kennen ihre Sprache, besteht darin, einen anderen Klartext in derselben Sprache zu finden, der lang genug ist, um ein oder zwei Bl√§tter zu f√ºllen, und dann zu z√§hlen, wie oft jeder Buchstabe vorkommt. Wir nennen den h√§ufigsten Buchstaben den ¬´ersten¬ª, den zweith√§ufigsten den ¬´zweiten¬ª, den folgenden den ¬´dritten¬ª und so weiter, bis wir alle Buchstaben in der Klartextprobe durchgez√§hlt haben. Dann betrachten wir den Geheimtext, den wir entschl√ºsseln wollen, und ordnen auch seine Symbole. Wir finden das h√§ufigste Symbol und geben ihm die Gestalt des ¬´ersten¬ª Buchstabens der Klartextprobe, das zweith√§ufigste Symbol wird zum ¬´zweiten¬ª Buchstaben, das dritth√§ufigste zum ¬´dritten¬ª Buchstaben und so weiter, bis wir alle Symbole des Kryptogramms, das wir entschl√ºsseln wollen, auf diese Weise zugeordnet haben. Entschl√ºsselung durch H√§ufigkeitsanalyse‚Äã Durch die H√§ufigkeitsanalyse werden Geheimtexte, die durch eine monoalphabetische Substitution verschl√ºsselt worden sind, grunds√§tzlich entzifferbar. Das heisst, sie k√∂nnen ohne Kenntnis des Schl√ºssels decodiert werden, indem eine H√§ufigkeitsanalyse vorgenommen wird. F√ºr die Entzifferung einer Caesar-Chiffre gen√ºgt es, den h√§ufigsten Buchstaben zu suchen und anschliessend denjenigen Schl√ºssel zu w√§hlen, der E auf diesen h√§ufigsten Buchstaben abbildet. H√§ufigkeitsanalyse durchf√ºhren‚Äã H√§ufigkeitsanalyse Klartext Hallo Sortiere alphabetisch Alle Zeichen Platzhalter f√ºr vorkommende Buchstaben Aufgabe Entschl√ºsseln Sie mithilfe der H√§ufigkeitsanalyse folgende geheime Nachricht: CJQHLGDGYAW AKL VAW DWZJW VWK NWJTGJYWFWF. VAW CJQHLGDGYAW MEXSKKL VAW XGDYWFVWF ROWA LWADYWTAWLW: CJQHLGYJSHZAW MFV CJQHLGSFSDQKW. CJQHLGYJSHZAW TWRWAUZFWL VAW CMFKL VWK NWJKUZDMWKKWDFK, OSWZJWFV KAUZ VAW CJQHLGSFSDQKW VSEAL TWKUZSWXLAYL, SMK NWJKUZDMWKKWDLWF TGLKUZSXLWF AFXGJESLAGFWF RM YWOAFFWF, KHJAUZ, KAW RM CFSUCWF. Halten Sie Ihr Vorgehen genau fest. Quelle Wikipedia ‚Ü© Quelle Qikipedia ‚Ü©","keywords":""},{"title":"Polybios-Chiffre","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/Polybios","content":"Polybios-Chiffre Die Polybios-Chiffre wurde vom griechischen Geschichtsschreiber Polybios (200 v.Chr. bis 120 v.Chr.) entwickelt. Bei der Polybios-Verschl√ºsselung wird zun√§chst ein Quadrat mit den Buchstaben des Alphabets gef√ºllt. Die Anordnung der Buchstaben kann grunds√§tzlich beliebig gew√§hlt werden. Polybios hat das griechische Alphabet mit 24 Buchstaben verwendet. √úbertragen auf das lateinische Alphabet sieht dies folgendermassen aus: @ Die beiden Buchstaben J und V finden keinen Platz in der Tabelle. J wird mit I zusammengefasst, V mit U. Die Zeilen und Spalten im Quadrat werden durchnummeriert. Nun kann ein Buchstabe verschl√ºsselt werden, indem seine Zeilen- und Spaltennummer aufgeschrieben wird. So wird der Klartext HALLO zum Geheimtext 23 11 31 31 34. Polybios ausprobieren‚Äã Polybios-Chiffre Klartext Geheimtext","keywords":""},{"title":"Vign√®re-Chiffre","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/Vignere","content":"Vign√®re-Chiffre Die Vigen√®re-Chiffre wurde vom Franzosen Blaise de Vigen√®re (1523-1596) erfunden und galt fast 300 Jahre lang als unknackbar. Es handelt sich um ein polyalphabetisches Verschl√ºsselungsverfahren, da mehrere Alphabete genutzt werden. Als Schl√ºssel dient ein Wort, das die Anzahl der verwendeten Substitutions-Alphabete bestimmt: F√ºr jeden Buchstaben des Schl√ºsselwortes wird die Caesar-Chiffre mit dem jeweiligen Buchstaben als Schl√ºssel verwendet. Die Buchstaben des Klartextes werden abwechslungsweise durch diese Caesar-Chiffren verschl√ºsselt. Vign√®re-Verschl√ºsselung@ Aufgabe Verschl√ºsseln Sie den Text RUDERN AUF DEM SEE mit der Vigen√®re-Chiffre. Verwenden Sie dazu den Schl√ºssel GBSL.","keywords":""},{"title":"Schl√ºsselaustausch","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/key-exchange","content":"Schl√ºsselaustausch Alice und Bob m√∂chten sich geheime Unterlagen senden. Doch wie k√∂nnen sie den Schl√ºssel austauschen? Schl√ºsselaustausch@ Vielleicht hilft es, wenn wir uns in Erinnerung rufen, dass im Handel mehrere Schl√∂sser mit unterschiedlichen Schl√ºsseln zu kaufen sind: Schl√ºsselaustausch@ Schl√ºsselaustausch Finden Sie eine M√∂glichkeit, den Inhalt der Truhe sicher zu √ºbertragen? Versetzen Sie sich dabei in die Rollen der anderen Krypto-Charaktere! Hinweis: Variante 1 Variante 1: Eigene Schl√∂sser Verteilen‚Äã @ K√∂nnen Sie sich zusammenreimen, wie die geheimen Unterlagen versendet werden? Wo liegen allenfalls Probleme? SSR Hinweis: Variante 2 Variante 2: Eigene Schl√∂sser Verteilen‚Äã @ Wie k√∂nnen die Unterlagen sicher zugestellt werden? Wo liegen allenfalls Probleme? SSR Hinweis: Variante 3 Variante 3: Schl√∂sser beim vertrauensw√ºrdigen Trent beziehen‚Äã @ Wie k√∂nnen die Unterlagen sicher zugestellt werden? Wo liegen allenfalls Probleme? SSR","keywords":""},{"title":"Skytale","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/Skytale","content":"Skytale Um ca. 500 v. Chr. nutzten die Spartaner eine Skytale (griechisch f√ºr &quot;Stock&quot; oder &quot;Stab&quot;), um wichtige milit√§rische Botschaften zu √ºbermitteln. Der Absender wickelte dabei einen Streifen aus Pergament oder Leder spiralf√∂rmig um die Skytale und schrieb die Nachricht l√§ngs des Stabes auf das aufgewickelte Band. Auf dem abgewickelten Streifen, der dem Empf√§nger √ºbermittelt wird, steht nun eine scheinbar sinnlose Buchstabenfolge. Der Empf√§nger kann die Botschaft mit einer Skytale vom selben Durchmesser aber wieder entziffern. Nachbildung einer Skytale@ Transposition‚Äã Die Skytale ist ein Beispiel einer Verschl√ºsselung durch Transposition. Das heisst, dass die Zeichen des Geheimtextes nicht ersetzt, sondern nur umgestellt (transponiert) werden. Skytale ausprobieren‚Äã Skytale Klartext Schl√ºssel Geheimtext","keywords":""},{"title":"Monoalphabetische Substitution","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/substitution","content":"Monoalphabetische Substitution Allgemein wird ein Verschl√ºsselungsverfahren, bei welchem jedes Zeichen durch ein festgelegtes anderes Zeichen ersetzt wird, eine monoalphabetische Substitution genannt. Das Verfahren wird ¬´monoalphabetisch¬ª genannt, weil zum Verschl√ºsseln eines Textes nur ein Alphabet zum Einsatz kommt. Im Gegensatz dazu werden bei ¬´polyalphabetischen¬ª Verfahren f√ºr die Verschl√ºsselung eines einzigen Textes mehrere verschiedene Alphabete verwendet (siehe z.B. Vigen√®re). Monoalphabetische Substitution\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tM B T C H J F S A E Y O R D N Z W I U P G X Q K L V Es ist ersichtlich, dass eine Entschl√ºsselung nun viel aufw√§ndiger ist, da keine Alphabet-Verschiebung mehr stattfindet, sondern eine wilde Vertauschung (= Substitution) der Buchstaben. Die Nachricht EIN KLEINER RABE FLIEGT AM TAGE wird verschl√ºsselt zu HAD YOHADHI IMBH JOAHFP MR PMFH. info Die Tatsache, dass der Buchstabe B im obigen Beispiel ¬´nicht¬ª verschl√ºsselt wird (also auch im Geheimtext ein B ist), stellt √ºberhaupt kein Problem dar ‚Äì im Gegenteil, es w√ºrde die Anzahl M√∂glichkeiten einschr√§nken, wenn es verboten w√§re, dass einzelne Buchstaben auch unver√§ndert bleiben d√ºrfen. Bei dieser Substitution h√§ngt die Anzahl m√∂glicher Verschl√ºsselungen von der Gr√∂sse des zugrundeliegenden Zeichensatzes ab. Wenn nnn Zeichen verwendet werden, gibt es n!n!n! unterschiedliche Verschl√ºsselungen. (n!n!n! bedeutet &quot;n Fakult√§t&quot; und ist das Produkt aller nat√ºrlicher Zahlen bis zur angegebenen Zahl, Beispiel: 4!=4‚ãÖ3‚ãÖ2‚ãÖ1=244! = 4 \\cdot 3 \\cdot 2 \\cdot 1 = 244!=4‚ãÖ3‚ãÖ2‚ãÖ1=24). Substitutions-Chiffre ausprobieren‚Äã Substitutions-Chiffre Klartext Schl√ºssel Zuf√§llig Setzen Im Schl√ºssel fehlende Buchstaben:ABCDEFGHIJKLMNOPQRSTUVWXYZ Im Schl√ºssel doppelt vorhandene Buchstaben:ABCDEFGHIJKLMNOPQRSTUVWXYZ Geheimtext","keywords":""},{"title":"Krypto-Familie","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/krypto-family","content":"Krypto-Familie Alice@ Alice und Bob kommunizieren h√§ufig miteinander ‚Äì dies nat√ºrlich verschl√ºsselt. Bob@ Anstelle von ¬´Person A¬ª und ¬´Person B¬ª spricht man von Alice und Bob. Charlie@ Wird eine dritte Person ben√∂tigt, kommt Charlie ins Spiel. Eve@ Eve wird meist dann eingesetzt, wenn Verbindungen abgeh√∂rt (engl. eavesdropping) werden. Sie ist also eine passive Zuh√∂rerin. Mallory@ Mallory ist ein b√∂sartiger, aktiver Angreifer (engl. malicious). Trent@ Wird eine vertrauensw√ºrdige dritte Stelle verwendet, wird Trent (engl. f√ºr trusted entity) eingesetzt.","keywords":""},{"title":"‚≠êÔ∏è Antike Verschl√ºsselung mit Python","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Antike/python-tools","content":"‚≠êÔ∏è Antike Verschl√ºsselung mit Python Skytale‚Äã to__skytale.py klartext = 'Skytale' schl√ºssel = 3 zeilen = [] # f√ºge f√ºr jede Zeile einen leeren Text ein for i in range(schl√ºssel): zeilen.append('') # verteile die Buchstaben auf die Zeilen nr = 0 for buchstabe in klartext: zeilen[nr] = zeilen[nr] + buchstabe nr = nr + 1 if nr == schl√ºssel: nr = 0 # alle Zeilen mit einer neuen Zeile verkn√ºpfen verschl√ºsselt = '\\n'.join(zeilen) print(verschl√ºsselt) from__skytale.py verschl√ºsselt = '''\\ Ste ka yl''' zeilen = verschl√ºsselt.splitlines() # die erste Zeile gibt vor, wie viele Spalten es gibt spalten = len(zeilen[0]) klartext = '' # f√ºr jede Spalte... for spalte in range(spalten): # wird in jeder Zeile... for zeile in zeilen: if len(zeile) &gt; spalte: # der Buchstabe in dieser Spalte dem Text hinzugef√ºgt klartext = klartext + zeile[spalte] print(klartext) Polybios‚Äã to__polybios.py QUADRAT = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'E', 'X', 'Y', 'Z', ' ' ] klartext = 'Hallo' klartext = klartext.upper().replace('J', 'I').replace('V', 'U') verschl√ºsselt = '' for buchstabe in klartext: index = QUADRAT.index(buchstabe) spalte = index % 5 # berechnet den ganzzahligen Rest bei einer Division durch 5 zeile = index // 5 # berechnet die ganzzahlige Division durch 5 verschl√ºsselt = verschl√ºsselt + f'{zeile + 1}{spalte + 1} ' print(verschl√ºsselt.strip()) # strip entfernt Leerzeichen an den R√§ndern Aufgabe Lesen Sie das Programm durch und versuchen Sie, jede Zeile zu verstehen. Flicken Sie den Code, so dass der verschl√ºsselte Text lesbar wird. from__polybios.py QUADRAT = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'E', 'X', 'Y', 'Z', ' ' ] verschl√ºsselt = '35 34 31 53 12 24 34 43' klartext = '' zahlen = verschl√ºsselt.split(' ') for zahl in zahlen: zeile = int(zahl[0]) spalte = int(zahl[1]) index = 0 klartext = klartext + QUADRAT[index] print(klartext) Caesar-Chiffre‚Äã to__caesar.py ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' SCHL√úSSEL = 'D' ROT = ALPHABET.index(SCHL√úSSEL) klartext = 'CAESAR' klartext = klartext.upper() verschl√ºsselt = '' for buchstabe in klartext: index = ALPHABET.index(buchstabe) + ROT index = index % 26 # ganzzahliger Rest bei Division durch 26 verschl√ºsselt = verschl√ºsselt + ALPHABET[index] print(verschl√ºsselt) Aufgabe √Ñndern Sie den Code so ab, dass der verschl√ºsselte Text wieder entschl√ºsselt werden kann. from__caesar.py ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' SCHL√úSSEL = 'D' ROT = ALPHABET.index(SCHL√úSSEL) verschl√ºsselt = 'JDLXV' klartext = '' verschl√ºsselt = klartext.upper() for buchstabe in verschl√ºsselt: index = 0 klartext = klartext + ALPHABET[index] print(klartext) ‚≠êÔ∏è Zusatz Sie haben eine geheime Nachricht abgefangen, kennen aber den Schl√ºssel nicht. Sie wissen aber, dass ALCZLJ ein sinnvolles Wort ergeben muss. Schreiben Sie ein Programm, das alle m√∂glichen Schl√ºssel durchprobiert und jeweils den entschl√ºsselten Text ausdruckt. Verwenden Sie die Ausgangslage aus dem obigen Programm. hack__caesar.py verschl√ºsselt = 'ALCZLJ' Substitutions-Chiffre‚Äã to__substitution.py ALPHABET = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') SCHL√úSSEL = 'I S X D L Y A V E B F G C W M Z N K O R H Q J P U T'.split(' ') klartext = 'HEUTE GEHE ICH IM WALD JOGGEN' klartext = klartext.upper() verschl√ºsselt = '' for buchstabe in klartext: if buchstabe in ALPHABET: index = ALPHABET.index(buchstabe) verschl√ºsselt = verschl√ºsselt + SCHL√úSSEL[index] else: verschl√ºsselt = verschl√ºsselt + buchstabe print(verschl√ºsselt) from__substitution.py ALPHABET = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') SCHL√úSSEL = 'I S X D L Y A V E B F G C W M Z N K O R H Q J P U T'.split(' ') verschl√ºsselt = 'EXV SEFL QMW CIAAGEWALW WIXV SELG' verschl√ºsselt = verschl√ºsselt.upper() klartext = '' for buchstabe in verschl√ºsselt: if buchstabe in SCHL√úSSEL: index = SCHL√úSSEL.index(buchstabe) klartext = klartext + ALPHABET[index] else: klartext = klartext + buchstabe print(klartext) schl√ºssel.py from random import shuffle schl√ºssel='A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') shuffle(schl√ºssel) print(' '.join(schl√ºssel)) ","keywords":""},{"title":"Asymmetrie","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/asymmetrie","content":"Asymmetrie Wir haben in den beiden vorherigen Abschnitten gesehen, dass es Vorg√§nge gibt, die in die eine Richtung einfach durchzuf√ºhren sind, in die entgegengesetzte Richtung allerdings sehr aufw√§ndig oder gar unm√∂glich: einfacher Vorgang\taufw√§ndiger/schwieriger Vorgangoffenes B√ºgelschloss schliessen\tB√ºgelschloss ohne Schl√ºssel √∂ffnen Farben mischen\tFarben trennen Diese Beispiele zeigen deutlich, worauf die asymmetrische Verschl√ºsselung basiert: Asymmetrische Verschl√ºsselung Die asymmetrische Verschl√ºsselung basiert auf Aufgaben, die in eine Richtung einfach auszuf√ºhren sind, w√§hrend man eine geheime Information braucht, um den Vorgang r√ºckg√§ngig zu machen. Verf√ºgt jemand nicht √ºber diese geheime Information, ist die Umkehrung des Vorgangs nicht in sinnvoller Zeit zu bew√§ltigen. Ein mathematisches Problem dieser Art‚Äã Auch in der Mathematik gibt es Operationen, die einfach und schnell auszuf√ºhren sind. Die Umkehrung jedoch ist selbst f√ºr einen Computer aufw√§ndig und kann Jahre dauern. Ein Beispiel daf√ºr ist das Multiplizieren zweier (Prim-)Zahlen. Jeder Computer kann pro Sekunde mehrere Milliarden Multiplikationen ausf√ºhren. Ein Produkt zweier Primzahlen in die beiden Faktoren zu zerlegen, ist jedoch ungleich aufw√§ndiger ‚Äì insbesondere wenn die Zahlen mehrere hundert Stellen lang sind. Multiplizieren vs. Faktorisieren Berechnen Sie 41‚ãÖ8341 \\cdot 8341‚ãÖ83 auf Papier. √úberlegen Sie sich dabei, wie Sie vorgehen. Schaffen Sie es, die Zahl 339733973397 in ihre zwei Primfaktoren zu zerlegen? Und 111711171117? Wie k√∂nnte man dabei vorgehen? Aufwand f√ºr den Computer Wie schnell kann der Computer multiplizieren und faktorisieren? √úberpr√ºfen Sie mit dem folgenden Tool, wie schnell Ihr Computer beim Multiplizieren und Faktorisieren ist. Nehmen Sie f√ºr Primzahlen mit 6, 7 und 8 Stellen einige (&gt;3) Messungen vor. Halten Sie die Messergebnisse fest (kopieren Sie den Plot und f√ºgen diesen in der Antwort ein...) Was bedeutet es f√ºr eine kryptographische Anwendungen, wenn die beiden Primzahlen statt 8 Stellen mehrere mehrere hundert Stellen lang sind? Zeitanalyse Primfaktorzerlegung Primzahlen mit 678 Stellen Zwei Primzahlen zwische 0 und 0 w√§hlen","keywords":""},{"title":"Kombinierte Verfahren","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/kombiniert","content":"Kombinierte Verfahren Vergleich symmetrischer und asymmetrischer Verschl√ºsselung‚Äã Wir haben in der letzten Aufgabe gesehen, dass asymmetrische Verschl√ºsselung auch Nachteile hat. Wir wollen die Vor- und Nachteile einander gegen√ºberstellen. Symmetrische Verschl√ºsselung\tAsymmetrische Verschl√ºsselung‚úî sehr schnell\t‚úò ~ 1'000x langsamer ‚úî 1 Nachricht f√ºr alle\t‚úò 1 Nachricht pro Person ‚úò geheimen Schl√ºssel austauschen\t‚úî Public Key ist √∂ffentlich ‚Üí nur 1 gemeinsamer Schl√ºssel\t‚Üí 1 Schl√ºsselpaar pro Person Beide Verfahren kombinieren‚Äã In kryptographischen Verfahren, die heutzutage eingesetzt werden, ist das Ziel, die Vorteile beider Verfahren zu nutzen und die Nachteile zu eliminieren. Daher werden zur Verschl√ºsselung von Daten beide Verfahren eingesetzt: Symmetrische und asymmetrische Verschl√ºsselung kombiniert@ Symmetrische Verfahren zur Verschl√ºsselung der Daten‚Äã Da asymmetrische Verfahren ca. 1'000x langsamer sind als symmetrische Verfahren, werden zur Verschl√ºsselung der Daten symmetrische Verfahren eingesetzt. Denn kryptographische Verfahren werden nicht nur zur Verschl√ºsselung kurzer Nachrichten (wie z.B. Textnachrichten) eingesetzt, h√§ufig m√ºssen auch grosse Datenmengen (z.B. hochaufl√∂sende Bilder, Tondokumente, Videos, ...) verschl√ºsselt werden, folglich spielt die Geschwindigkeit eine zentrale Rolle. Zudem ist bei symmetrischer Verschl√ºsselung praktisch, dass die Daten f√ºr s√§mtliche Empf√§nger gleich verschl√ºsselt sind und somit nicht mehrmals verschl√ºsselt werden m√ºssen (Zeitbedarf) und in derselben Nachricht an alle Empf√§nger verschickt werden k√∂nnen, ohne dass die Nachricht unn√∂tig ein Mehrfaches ihrer urspr√ºnglichen L√§nge erreicht (Platzbedarf). Asymmetrische Verfahren zur sicheren Schl√ºssel√ºbertragung‚Äã Asymmetrische Verfahren sind langsamer, aber zur Verschl√ºsselung des symmetrischen Schl√ºssels perfekt geeignet, da dieser sehr kurz ist und im Vergleich zu den Daten Geschwindigkeit keine Rolle spielt. Zudem ist auch der verschl√ºsselte symmetrische Schl√ºssel sehr kurz, so dass die Nachricht nur unwesentlich l√§nger wird, wenn diese f√ºr mehrere Personen verfasst wird. Zus√§tzlicher Vorteil‚Äã Der symmetrische Schl√ºssel kann so vom Computer gew√§hlt werden. Dies hat zwei Vorteile: Der Schl√ºssel ist wirklich zuf√§llig und gleichverteilt im gesamten Schl√ºsselraum (ein Passwort, das von einer Person gew√§hlt wird, schafft dies nicht). Der Schl√ºssel kann f√ºr jede Nachricht neu gew√§hlt werden. Somit erh√§lt jede Nachricht einen eigenen Schl√ºssel. Man spricht daher von einem Sitzungsschl√ºssel (engl. session key) f√ºr die symmetrische Verschl√ºsselung. Die folgende √úbersicht stellt prinzipiell dasselbe dar wie die Abbildung oben, allerdings mit einem anderem Fokus. Symmetrische und asymmetrische Verschl√ºsselung kombiniert@ Auch symmetrische Verfahren sind sicher! Asymmetrische Verfahren sind also nicht besser als symmetrische! Sie erf√ºllen einen anderen Zweck und werden gleichzeitig mit symmetrischen Verfahren eingesetzt. Symmetrische Verfahren sind also nicht unsicher, einzig die Erstellung des Schl√ºssels und der Schl√ºsselaustausch sind ein Problem. Kombinierte Entschl√ºsselung Stellen Sie dar, wie die Umkehrung ‚Äì also die Entschl√ºsselung ‚Äì funktioniert, wenn symmetrische und asymmetrische Verfahren kombiniert verwendet werden. SSR","keywords":""},{"title":"Zusammenfassung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Digitale-Signaturen/the-big-picture","content":"Zusammenfassung Das grosse Ganze‚Äã Verschl√ºsselte, signierte Nachrichten: Verkn√ºpfung aller Verfahren. Bemerke Charlie berechnet den Hashwert der Nachricht. Charlie verwendet seinen privaten Schl√ºssel um den Hashwert zu signieren. Den signierten Hashwert kann von jeder Empf√§nger:in mit Charlies √∂ffentlichem Schl√ºssel entschl√ºsselt werden. Jedoch kann der Hash von niemandem ver√§ndert werden, da niemand den privaten Schl√ºssel von Charlie besitzt. Die signierte Nachricht wird mit einem Sitzungsschl√ºssel symmetrisch verschl√ºsselt. Der Sitzungsschl√ºssel wird mit Alices √∂ffentlichem Schl√ºssel verschl√ºsselt. Alice kann nun den Sitzungsschl√ºssel mit ihrem privaten Schl√ºssel entschl√ºsseln mit dem Sitzungsschl√ºssel den Klartext entschl√ºsseln mit dem √∂ffentlichen Schl√ºssel von Charlie durch Entschl√ºsselung der Signatur die Echtheit best√§tigen mit der entschl√ºsselten Signatur (=der von Charlie berechneten Hashwert) und dem selbst berechneten Hashwert der erhaltenen Nachricht die Integrit√§t der Nachricht verifizieren, wenn die beiden Hashwerte √ºbereinstimmen.","keywords":""},{"title":"Geheime Farbe","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/secret-color","content":"Geheime Farbe Alice und Bob arbeiten an einem neuen Kunstwerk, auf das die √ñffentlichkeit gespannt wartet. Die beiden m√∂chten daf√ºr eine ganz besondere Farbe verwenden. Diese Farbe soll aber unbedingt bis zur Vernissage geheim bleiben. Alice und Bob wohnen weit auseinander und k√∂nnen sich nicht treffen, um die geheime Farbe gemeinsam herzustellen, sie k√∂nnen sich lediglich Farbk√ºbel per Post zusenden. Alice und Bob‚Äã Sie haben eine Idee und gehen wie folgt vor: Private Farbe Schritt 1: Alice und Bob mischen sich je in einem Farbk√ºbel eine pers√∂nliche, geheime Farbe, die sie niemandem mitteilen (private Farbe genannt). √ñffentliche Farbe Schritt 2 Alice w√§hlt nun zus√§tzlich eine Farbe, die nicht geheim gehalten wird. Sie f√ºllt zwei grosse Farbk√ºbel mit dieser Farbe, einen beh√§lt sie f√ºr sich selbst, den anderen schickt sie per Post an Bob (√∂ffentliche Farbe genannt). Zwischenfarbe Schritt 3: Im n√§chsten Schritt mischen sich Alice und Bob je in einem leeren Farbk√ºbel eine neue Farbe: Sie nehmen dazu genau dieselbe Menge der eigenen privaten Farbe und der gemeinsamen Farbe. Diese neue Farbe schicken sie sich wieder gegenseitig zu. Zielfarbe Schritt 4: Im letzten Schritt erzeugen Sie die Zielfarbe f√ºrs Kunstwerk. Dazu nehmen sie zwei Einheiten der soeben erhaltenen Farbe und eine Einheit der privaten Farbe und erhalten die gemeinsame private Farbe, mit der sie die Teile des neuen Kunstwerks bemalen. Eve‚Äã Die neugierige Journalistin Eve m√∂chte unbedingt wissen, was Alice und Bob aushecken, um noch vor der Vernissage einen exklusiven Zeitungsbericht zu ver√∂ffentlichen. Daher versucht sie, an die gemeinsame private Farbe zu gelangen. Sie √ºberwacht die Post und f√ºllt sich von jeder transportierten Farbe ein wenig in eigene Beh√§lter ab. Ausprobieren‚Äã Geheime Farbe herausfinden Bestimmen Sie je eine Farbe f√ºr Alice und Bob und schauen Sie sich die Ergebnisse an. Wieso erhalten Alice und Bob schlussendlich dieselbe Farbe? Wieso kennt Eve die geheime Farbe nicht? √úberlegen Sie sich: wieso kann Eve aus den verschickten Farben die geheime Farbe nicht herstellen? Alice's Geheimfarbe √ñffentlich Eve üï∂ Bob's Geheimfarbe Alice+√ñffentlich √ñffentlich+Bob Alice+Mischung Mischung+Bob ‚≠êÔ∏è Digitale Farben ‚â† Echte Farben Im obigen Modell musste getrickst werden: In der digitalen Welt werden Farben durch die Erzeugung von Lichtwellen unterschiedlicher Wellenl√§nge erzeugt. Dabei wird bei der √úberlagerung aller Frequenzspektren weisses Licht erzeugt. Dies wird auch additives Farbmodell genannt. Im Gegensatz dazu werden Farben in der realen Welt je nach Oberfl√§che nur gewisse Wellenl√§nfen reflektiert und die anderen werden von der Oberfl√§che &quot;verschluckt&quot;. Werden mehrere Farben gemischt, f√ºhrt dies dazu, dass alle sichtbaren Wellenl√§ngen &quot;verschluckt&quot; werden und daher ein Braun/Schwarz entsteht. Dieses ist das subtraktive Farbmodell. digitales (links) und reales (rechts) Farbmodell@","keywords":""},{"title":"Asymmetrie umkehren","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Digitale-Signaturen/Asymmetrie-Unkehren","content":"Asymmetrie umkehren Asymmetrische Verschl√ºsselungs Box Privater Schl√ºssel (rechts drehend) √ñffentlicher Schl√ºssel (links drehend) aus dem Unterricht... Halten Sie kurz fest, wie die Boxen und ihre Schl√ºssel funktionieren. Aufgabe Bedeutung des Gedankenexperimentes a. Was bedeutet es, wenn jemand einen Text mit seinem eigenen privaten Schl√ºssel ¬´verschl√ºsselt¬ª, so dass der Geheimtext nur mit dem zugeh√∂rigen √∂ffentlichen Schl√ºssel ¬´entschl√ºsselt¬ª werden kann? b. Was sagt die Tatsache, dass man einen solchen Geheimtext mit einem fremden (nicht dem eigenen) √∂ffentlichen Schl√ºssel entschl√ºsseln kann, aus? SSR Digitale Signatur‚Äã Wir haben soeben das Prinzip der digitalen Signatur entdeckt. Digitale Signatur@ Digitale Signatur Wenn Bob die Nachricht mit dem √∂ffentlichen Schl√ºssel von Alice entschl√ºsseln kann, dann muss diese Nachricht vorher mit dem privaten Schl√ºssel von Alice verschl√ºsselt worden sein. Somit kann sie von niemandem anders stammen als von Alice. D.h. diese Nachricht ist quasi digital signiert. Aufgabe mehrere Leute √úberlegen Sie sich, wie ein signiertes Dokument von mehr als zwei Personen angeschaut und √ºberpr√ºft wird. Welche Schl√ºssel werden verwendet? SSR Nachteile‚Äã Die bisher kennengelernte Art der digitalen Signatur ist nicht optimal, denn es gibt mehrere Probleme: Wegen der ¬´Signatur¬ª ist der Klartext nicht mehr lesbar (er ist ja nun speziell ¬´verschl√ºsselt¬ª). Dies ist umst√§ndlich, denn wenn Sie ein Dokument auf Papier unterschreiben, bleibt dieses trotzdem lesbar. Asymmetrische Verfahren sind langsam, d.h. wenn wir ein grosses Dokument (z.B. ein Video) signieren, dauert dieser Vorgang unn√∂tig lange ‚Äì ebenso das √úberpr√ºfen der Signatur (also das Entschl√ºsseln).","keywords":""},{"title":"Integrit√§t","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Digitale-Signaturen/Integritaet","content":"Integrit√§t Lesbarkeit und Signatur‚Äã Das im letzten Kapitel beschriebene Verfahren hat den grossen Nachteil, dass ein Dokument erst lesbar ist, wenn es ¬´entschl√ºsselt¬ª ‚Äì oder anders ausgedr√ºckt: wenn die Signatur entfernt ‚Äì wurde. Das ist unpraktisch, schliesslich sind s√§mtliche deine von Hand unterschriebenen Dokumente trotzdem stets lesbar. Sobald das Dokument entschl√ºsselt (also lesbar) ist, ist aber auch die Signatur verschwunden ‚Äì und somit auch die √úberpr√ºfbarkeit, welche Person was unterschrieben hat. Wir suchen folglich eine L√∂sung, die das gleichzeitige Betrachten des Dokuments und der Signatur erm√∂glicht. Manipulationen erkennen‚Äã Ist der Klartext stets sichtbar, so m√ºssen wir sicherstellen, dass er nicht manipuliert werden kann. Schliesslich wollen wir nicht, dass ein Vertrag nach dem Signieren noch unentdeckt ver√§ndert werden kann. Hashwerte‚Äã Hashwerte kennen wir bisher nur zur sicheren Speicherung von Passw√∂rtern. Hashfunktionen k√∂nnen allerdings nicht nur Passw√∂rter in Hashwerte umwandeln, sondern irgendwelche Daten. Wir haben gesehen, dass Hashwerte eine Art digitale Fingerabdr√ºcke sind. Es ist extrem schwierig (resp. in vern√ºnftiger Zeit nicht m√∂glich), zu einem bestehenden Text einen anderen zu finden, der denselben Hashwert erzeugt. Hashwerte sind digitale Fingerabdr√ºcke@ Auch wenn verschiedene Personen den Hashwert desselben Textes berechnen, ergibt sich stets derselbe Hashwert ‚Äì aber nat√ºrlich nur, wenn dieselbe Hashfunktion verwendet wird. Ist ein Text auch nur ein wenig anders (wie im untenstehenden Beispiel gezeigt), so ergibt sich sofort ein v√∂llig anderer Hashwert, womit leicht zu erkennen ist, dass die Texte nicht √ºbereinstimmen. Hashwerte von verschiedenen Mitteilungen@","keywords":""},{"title":"Asymmetrische Verschl√ºsselung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/asymm-encryption","content":"Asymmetrische Verschl√ºsselung Das Prinzip der asymmetrischen Verschl√ºsselung beruht also auf zwei verschiedenen Schl√ºsseln, dem sogenannten Schl√ºsselpaar (engl. key pair). Die beiden Schl√ºssel eines Schl√ºsselpaars nennt man √∂ffentlichen und privaten Schl√ºssel (engl. public und private key). Da f√ºr den Verschl√ºsselungsvorgang nicht derselbe Schl√ºssel verwendet wird wie f√ºr den Entschl√ºsselungsvorgang, spricht man von einem asymmetrischen Verfahren. Asymmetrische Ver- und Entschl√ºsselung mit verschiedenen Schl√ºsseln@ Generierung des Schl√ºsselpaares f√ºr die asymmetrische Verschl√ºsselung@ Schl√ºsselpaar‚Äã Jede Person besitzt ein eigenes Schl√ºsselpaar, so auch Bob. Die beiden Schl√ºssel, die dieses Schl√ºsselpaar bilden, sind mathematisch verwandt. Der private Schl√ºssel l√§sst sich jedoch nicht in sinnvoller Zeit aus dem √∂ffentlichen Schl√ºssel berechnen. Bobs √∂ffentlicher Schl√ºssel entspricht also dem B√ºgelschloss aus unserem ersten Beispiel. Bobs privater Schl√ºssel ist der Schl√ºssel, der zum B√ºgelschloss passt. Das Schloss kann (in ge√∂ffneter Form nat√ºrlich) bei einer vertrauensw√ºrdigen Stelle (Trent) deponiert werden, wo es von Alice abgeholt werden kann. Den Schl√ºssel beh√§lt Bob stets f√ºr sich. Jede Person besitzt ein Schl√ºsselpaar@ Verschl√ºsselung‚Äã In der folgenden Abbildung sieht man auf der linken Seite, dass Alice bei der Verschl√ºsselung den √∂ffentlichen Schl√ºssel von Bob (und nicht den eigenen) verwendet. Dieser √∂ffentliche Schl√ºssel enth√§lt keine geheime Information und ist f√ºr alle Leute zug√§nglich (z.B. via eine vertrauensw√ºrdige Stelle), somit k√∂nnen alle eine Nachricht f√ºr Bob verschl√ºsseln. Asymmetrische Verschl√ºsselung@ Entschl√ºsselung‚Äã In derselben Abbildung ist zu sehen, dass Bob bei der Entschl√ºsselung seinen privaten Schl√ºssel verwenden muss. Somit ist sichergestellt, dass nur Bob die Nachricht entschl√ºsseln kann. Achtung Um Verwechslungen zu vermeiden, spricht man bei der symmetrischen Verschl√ºsselung vom geheimen Schl√ºssel (engl. secret key), w√§hrend man bei asymmetrischen Verfahren vom privaten Schl√ºssel spricht und nicht vom geheimen Schl√ºssel, weil jede involvierte Person ein eigenes Schl√ºsselpaar und somit einen eigenen privaten Schl√ºssel besitzt. Asymmetrische Verschl√ºsselung √úberlegen Sie sich, wie die Verschl√ºsselung funktioniert, wenn ein Dokument an verschiedene Leute versendet wird. Machen Sie sich dazu eine Skizze. Welche Nachteile erkennen Sie? SSR","keywords":""},{"title":"Zertifizierungsstellen","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Digitale-Signaturen/Zertifizierungsstellen","content":"Zertifizierungsstellen √úbertragung √∂ffentlicher Schl√ºssel‚Äã √ñffentliche Schl√ºssel enthalten keine geheime Information, k√∂nnen also problemlos √ºber einen offenen Kanal √ºbertragen werden. Oder? Angriff auf den √∂ffentlichen Schl√ºssel Aufgabe Angriff auf den √∂ffentlichen Schl√ºssel Alice schickt ihren √∂ffentlichen Schl√ºssel (also ihr √∂ffentlicher Verschliessmechanismus) per Post an Bob. √úberlegen Sie sich, was der b√∂sartige Mallory anstellen k√∂nnte, um Alice und Bob zu √ºberlisten. SSR Schutz gegen Man-in-the-Middle-Attacken‚Äã Wie k√∂nnen wir uns vor Man-in-the-Middle-Attacken sch√ºtzen? Kann uns Trent helfen? Die Rolle von Trent@ Aufgabe Zertifizierungsstellen Wie k√∂nnte Trent daf√ºr sorgen, dass die √∂ffentlichen Schl√ºssel besser √ºberpr√ºfbar sind? SSR Wieso kann sich Mallory nicht zwischen Trent und Bob einschleichen?‚Äã Da im Internet nicht offensichtlich ist, mit wem man kommuniziert, k√∂nnte sich Mallory als Alice ausgeben. Trent wird nur ben√∂tigt, um eine Absicherung zu erhalten, dass Alice's √∂ffentlicher Schl√ºssel auch wirklich ihr geh√∂rt. Bei der √úbermittlung des √∂ffentlichen Schl√ºssels wird HTTPS verwendet, so dass sich Mallory nicht dazwischenschleichen kann. Auch Alice und Bob k√∂nnten HTTPS verwenden, doch dann weiss Bob immer noch nicht, ob er nicht f√§lschlicherweise eine Verbindung mit Mallory statt Alice aufgebaut hat... Das Aufbauen einer HTTPS Verbindung verwendet √ºbrigens auch die Integrit√§tspr√ºfung. Durch eine signierte Nachricht wird die IP Adresse des Servers √ºberpr√ºft. Aufgrund der Signatur kann die Nachricht nicht von Mallory stammen, da er keinen Zugriff auf den Verbindungsserver hat und das f√§lschen der IP-Adresse wegen der Signatur nicht m√∂glich ist. Anschliessend wird gem√§ss dem Farbmischprinzip ein gemeinsamer Sitzungsschl√ºssel f√ºr die Verschl√ºsselung der Verbindung erzeugt. So ist es f√ºr Mallory unm√∂glich, sich zwischen Trent und Bob zu stellen - sofern Bob die richtige IP-Adresse zu Trent besitzt.","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Hashfunktionen/Authentifizierung","content":"Authentifizierung Authentifizierung [engl. authentication] ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Sichere Passw√∂rter","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Hashfunktionen/passwords","content":"Sichere Passw√∂rter @ Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (üèÖ Empfehlung) - gute Basis-Funktionen und einfaches Handling, zudem Open Source (Kerckhoffs Prinzip üòâ) KeePass - auch Open Source LastPass","keywords":""},{"title":"Hashfunktionen","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Hashfunktionen/hash-funktionen","content":"Hashfunktionen Hashfunktion ¬´Eine Hashfunktion ist eine Abbildung, die eine grosse Eingabemenge auf eine kleinere Zielmenge abbildet.¬ª Da eine Eingabe beliebiger L√§nge auf eine Ausgabe mit fester L√§nge abgebildet, ist Injektivit√§t unm√∂glich. Die Eingabemenge ist folglich unendlich gross (Texte, Videos und Tonaufnahmen beliebiger L√§nge, Bilder beliebiger Gr√∂sse, ...). Die Ausgabemenge ist allerdings endlich, da die Hashwerte (also die Pr√ºfsummen) eine fixe L√§nge haben. Hashfunktion@ Hashfunktion‚Äã In der Abbildung oben sieht man, dass die Menge der Passw√∂rter nur eine Teilmenge aller theoretisch m√∂glichen Eingaben darstellt. Es ist nicht zu verhindern, dass Kollisionen auftreten. Kollisionsresistenz Um gen√ºgend Sicherheit zu bieten, soll eine gute kryptographische Hashfunktion folglich kollisionsresistent sein. Das heisst, es soll praktisch unm√∂glich sein, Kollisionen zu finden. Hashwert‚Äã Die Ausgabe der Hashfunktion ‚Äì also die Pr√ºfsumme ‚Äì wird Hashwert genannt. Man kann einen Hashwert mit einem Fingerabdruck vergleichen, weil er gewissermassen eindeutig zu einem Passwort passt wie ein Fingerabdruck zu einem Menschen. Ein Hashwert ist wie ein Fingerabdruck@ Aktuelle Beispiele‚Äã Es gibt verschiedene aktuelle Hashfunktionen. Nachfolgend ein Tool, welches SHA-2 Hashes (Secure Hash Algorithm Version 2) berechnet. SHA-2 Hash Input SHA-2 Hash Aufgabe Halten Sie den SHA-2 Hash ihres Namens und ihrer E-Mail Adresse fest. Wie viele Buchstaben √§ndern sich, wenn Sie einen einzigen Tippfehler machen? Finding Die letzten beiden Beispiele zeigen, dass bereits kleinste √Ñnderungen zu komplett anderen Hashwerten f√ºhren. Kryptographische Hashfunktion sind so konstruiert, dass bei einer √Ñnderung an einem Bit min. 50% der Hashwert-Bits √§ndern.","keywords":""},{"title":"Umwandlung ins Bin√§rsystem","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/binaer","content":"Umwandlung ins Bin√§rsystem In diesem Kapitel dringen wir in unsere Zeit vor. Wir verwenden Computer, die mit bin√§ren Zahlen arbeiten. Somit muss der Klartext vor der Verschl√ºsselung in bin√§re Zahlen umgewandelt werden. Prozess der Verschl√ºsselung‚Äã Das Verfahren wird etwas umst√§ndlicher, da jeweils in die bin√§re Computersprache √ºbersetzt werden muss: Der Geheimtext wird in eine Folge von bin√§ren Zahlen codiert (Klartext ‚Üí bin√§rer Klartext) Verschl√ºsselung dieser Zahlenfolge (bin√§rer Klartext ‚Üí bin√§rer Geheimtext) ... (Versand, Abspeichern, ...) Decodierung des bin√§ren Geheimtextes (bin√§rer Geheimtext ‚Üí Geheimtext) Unterschied ¬´Codierung¬ª und ¬´Verschl√ºsselung¬ª Es ist wichtig, dass die Begriffe Codierung und Verschl√ºsselung unterschieden werden: Codierung Eine Codierung ist eine Umwandlung in eine andere Darstellungsform (z.B. Text ‚Üí Zahlen, Bild ‚Üí Text, Zahlen ‚Üí bin√§re Zahlen, ...). Eine Codierung hat das Ziel, eine Information in ein bestimmtes Datenformat umzuwandeln, sie bietet keine Sicherheit. Verschl√ºsselung Eine Verschl√ºsselung oder Chiffre hat das Ziel zu verhindern, dass Aussenstehende an eine bestimmte Information gelangen, indem Daten mithilfe eines Schl√ºssels so ver√§ndert werden, dass ohne Kenntnis des Schl√ºssels nicht mehr auf die urspr√ºngliche Form geschlossen werden kann. Ein grosser Vorteil‚Äã Die vorg√§ngige Codierung bedeutet zwar beim Erarbeiten einen Mehraufwand, bietet jedoch einen erheblichen Vorteil: Alles, was sich in bin√§rer Form darstellen l√§sst, kann ohne weitere Anpassung des Verfahrens verschl√ºsselt werden! Texte (unabh√§ngig von der Sprache resp. den verwendeten Schriftzeichen) Bilder Ton Videos Dies war in der Antike nicht n√∂tig, heute ist es allerdings unumg√§nglich. Codierung‚Äã Wie im Kapitel ¬´Codes und Daten¬ª besprochen, gibt es dazu eine Vielzahl von Codierungen. Beispielsweise k√∂nnte dazu die ASCII-Codierung oder die UTF-8 Codierung verwendet werden. F√ºr die folgenden Beispiele verwenden wir den etwas k√ºrzeren Pentacode.","keywords":""},{"title":"Passw√∂rter speichern","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Hashfunktionen/save-passwords","content":"Passw√∂rter speichern Passw√∂rter sind wichtig, wir sollten sie besch√ºtzen. Doch dies gilt nicht nur f√ºr unsere eigenen Passw√∂rter, auch Firmen sollten die Passw√∂rter ihrer Kunden sch√ºtzen. Passw√∂rter speichern‚Äã Wie w√ºrden Sie die Passw√∂rter Ihrer Kunden speichern, falls Sie einen Webshop erstellen w√ºrden? Nat√ºrlich nicht im Klartext, oder? Dass die Passw√∂rter ¬´verschl√ºsselt¬ª werden m√ºssen, scheint logisch. Also sollten die Passw√∂rter wohl auf dem Firmenserver verschl√ºsselt werden, damit sie nicht ausgelesen werden k√∂nnen ‚Äì weder von Hackern noch von neugierigen Mitarbeitenden. Doch gerade dies ist ein grosses Problem: Der Firmenserver soll die Kunden anhand ihres Passwortes authentifizieren k√∂nnen, die Mitarbeitenden d√ºrfen allerdings keinen Zugriff auf die Kundenpassw√∂rter haben. Alle bisherigen Verschl√ºsselungsverfahren arbeiten mit einem Schl√ºssel (oder mit mehreren). Wer den richtigen Schl√ºssel kennt, kann die Passw√∂rter entschl√ºsseln. Wird der Schl√ºssel auf den Firmenservern gespeichert, so haben zumindest gewisse Mitarbeitende Zugriff. Hier kommen wir momentan nicht weiter. Wir tasten uns von einer anderen Seite an die L√∂sung heran. Pr√ºfsumme‚Äã Wir k√∂nnen jedoch ‚Äì anstelle eines Passwortes ‚Äì eine Pr√ºfsumme speichern: Benutzername\tPasswort\tIterierte Quersumme\tAlternierende Quersummealice\t12345\t6\t3 bob\t123456 charlie\t12345678 donald\t123456789 eve\t1234567890 frederick\t11111111 grace\t123123 hanna\tpassword ian\tpicture1 Die Iterierte Quersumme ist die Quersumme, die entsteht, wenn man solange immer wieder die Quersumme ausrechnet, bis nur noch eine einzige Ziffer √ºbrig bleibt. F√ºr die Zahl 97 lautet die normale Quersumme 16, berechnet man davon wiederum die Quersumme, so entsteht die iterierte Quersumme: 7. Die Alternierende Quersumme entsteht durch abwechslungweises Addieren und Subtrahieren der einzelnen Ziffern (f√ºr 1234 lautet diese 1 - 2 + 3 - 4 = -2). Tabelle vervollst√§ndigen Vervollst√§ndigen Sie die oben stehende Tabelle. Anstelle der in den Passw√∂rtern enthaltenen Buchstaben k√∂nnen Sie die unten stehenden Zahlen einsetzen. Buchstaben\tA B C D E F G H I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z Zahlen\t1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Welche der beiden Funktionen w√ºrden Sie w√§hlen, um die Passw√∂rter zu speichern? Welche Probleme sehen Sie bei beiden Funktionen? Wunsch: Injektivi√§t Zu jeder Pr√ºfsumme geh√∂rt h√∂chstens ein Passwort. Oder anders formuliert: Kollisionen sollen vermieden werden. Das bedeutet, dass jedes Passwort eine andere Pr√ºfsumme erhalten soll. Injektivit√§t@ Bessere Pr√ºfsummen?!‚Äã Nachfolgend eine weitere Liste mit Vorschl√§gen f√ºr Pr√ºfsummen. Benutzername\tPasswort\t???\t???\t???alice\t1234567\t7654321\t3456789\t5040 bob\tqwerty\tytrewq\tsygtva\t17595000 charlie\tabc123\t321cba\tcde345\t36 donald\tmillion2\t2noillim\toknnkqp4\t63685440 eve\t000000\t000000\t222222\t0 frederick\t1234\t4321\t3456\t24 grace\tiloveyou\tuoyevoli\tknqygaqw\t1403325000 hanna\tpassword1\t1drowssap\trcuuyqtf3\t143475840 ian\tqqww1122\t2211wwqq\tssyy3344\t611524 Aufgabe Funktionen erkennen Erkennen Sie, wie die Pr√ºfsummen in den hintersten drei Spalten berechnet werden? Wunsch: Unumkehrbarkeit Aus der Pr√ºfsumme soll nicht auf das Passwort geschlossen werden k√∂nnen.","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Lernziele","content":"Lernziele Verschl√ºsselungsverfahren Sie verstehen das Prinzip symmetrischer Verschl√ºsselungsverfahren und verwenden das Wissen in Beispielen mit antiken Verfahren an. Sie knacken antike symmetrische Verfahren (H√§ufigkeitsanalysen, Brute Force, ...). Sie wissen, wie der ECB und CBC Modus funktionieren und k√∂nnen diese exemplarisch mit XOR als Verschl√ºsselungsalgorithums anwenden. Sie kennen das Prinzip von Kerckhoffs und k√∂nnen nachvollziehen, wieso es sinnvoll ist, die Funktionsweise von Algorithmen nicht geheimzuhalten (Security through Obscurity). Sie wissen, dass moderne symmetrische Verfahren mit Bitfolgen anstelle von Buchstaben arbeiten und mathematisch viel komplexer sind. Sie erkennen das Problem des Schl√ºsselaustauschs bei symmetrischen Verfahren. Sie kennen Man-in-the-Middle-Angriffe und verstehen, dass auch √∂ffentliche Schl√ºssel auf ihre Echtheit √ºberpr√ºft werden m√ºssen. Sie begreifen asymmetrische Verfahren mit ihren Schl√ºsselpaaren als Hilfsmittel f√ºr einen sicheren Austausch (z.B. Vorh√§ngeschloss/Schl√ºssel-Analogie oder Box mit einem Verschluss zum schliessen und einem zum √∂ffnen). Sie verstehen, dass Zertifikate zur Best√§tigung der Echtheit von √∂ffentlichen Schl√ºsseln durch eine vertrauensw√ºrdige Stelle mit Hilfe einer digitalen Signatur (z.B. bei HTTPS) verwendet werden. Hashfunktionen Sie wissen, dass Passw√∂rter nicht im Klartext gespeichert werden. Sie kennen die Zielsetzung und die Funktionsweise von Hashverfahren (Stichworte sicheres Speichern von Passw√∂rtern, Intregrit√§tspr√ºfung) Sie kennen Angriffsm√∂glichkeiten auf Passworthashes (Dictionnary, Brute Force). Sie k√∂nnen die St√§rke von Passw√∂rtern einsch√§tzen und wissen, dass die L√§nge die massgebende Gr√∂sse f√ºr ein sicheres Passwort ist. Digitale Signaturen Sie verstehen, dass das Prinzip der asymmetrischen Verschl√ºsselung auch f√ºr digitale Signaturen eingesetzt werden kann. Sie verstehen die Rolle von Zertifizierungsstellen und k√∂nnen nachvollziehen, was Webseitenzertifikate bedeuten. Angriffe Sie sind sich bewusst, dass f√ºr erfolgreiche Angriffe auf Systeme h√§ufig ein Fehlverhalten von Personen verantwortlich ist. Sie wissen, dass Personen daher ein beliebtes Angriffsziel sind (z.B. Social Engineering, Phishing). Sie wissen, dass Systeme Schwachstellen aufweisen und somit Angriffsfl√§chen bieten. Sie verstehen, dass regelm√§ssige Softwareupdates, aktuelle Antivirensoftware und eine aktive Firewall f√ºr die Systemsicherheit zentral sind. Sie verstehen die Wichtigkeit, dieselben Passw√∂rter nicht f√ºr mehrere Dienste/Systeme einzusetzen und kennen M√∂glichkeiten der Passwortverwaltung (z.B. Passwortmanager). Sie verstehen, dass das Passwort des E-Mail-Accounts besonders wichtig ist (z.B. wegen der Passwortr√ºcksetzung via E-Mail). Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"Verfahren kombinieren","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Digitale-Signaturen/Verfahren-kombinieren","content":"Verfahren kombinieren F√ºr uns ist Wichtig: Die Dokumente sind stets lesbar und trotzdem vor Manipulationen gesch√ºtzt. Asymmetrische Verfahren sollen eingesetzt werden, aber nicht zum Verschl√ºsseln des ganzen Dokuments, weil dies langsam ist. Aus diesem Grund m√ºssen wir ‚Äì √§hnlich wie bei der asymmetrischen Verschl√ºsselung ‚Äì auch bei den digitalen Signaturen ¬´nachbessern¬ª, wenn es um den konkreten Einsatz im Alltag geht. Hashwerte‚Äã Hashwerte derselben Hashfunktion haben stets dieselbe L√§nge. Sie sind im Vergleich zum eingegebenen Text sehr kurz (wie der Fingerabdruck eines Menschen sehr klein ist im Vergleich zu all dem, was den Menschen mit diesem Fingerabdruck ausmacht). Anstelle des gesamten Textes signieren wir nur den Hashwert, was die beiden obengenannten Nachteile beseitigt. Digitale Signaturen richtig verwenden‚Äã Wir versuchen, mehrere Verfahren zu kombinieren um deren Vorteile zu nutzen. Einerseits berechnen wir den Hashwert eines Dokuments, andererseits ¬´verschl√ºsseln¬ª wir nur diesen Hashwert asymmetrisch. Somit reduziert sich der Einsatz von asymmetrischer Verschl√ºsselung wiederum auf ganz kurze Werte. Zudem bleibt das Dokument intakt und stets lesbar. Digitale Signatur: Hashwert und asymmetrische Verschl√ºsselung@ Digitale Signaturen √ºberpr√ºfen √úberlegen Sie sich, wie man eine solche digital signierte Nachricht √ºberpr√ºfen kann. Zeichnen Sie die ben√∂tigten Schritte auf. SSR","keywords":""},{"title":"Symmetrische Verschl√ºsselung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch","content":"Symmetrische Verschl√ºsselung Bei s√§mtlichen VErschl√ºsselungsverfahren in diesem Kapitel handelt es sich um symmetrische Verfahren, d.h. zum Verschl√ºsseln und Entschl√ºsseln wird derselbe Schl√ºssel verwendet: @","keywords":""},{"title":"Blockchiffre","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/blockchiffre","content":"Blockchiffre Im vorherigen Beispiel war der Schl√ºssel gleich lang wie der Klartext. Da dies in der Realit√§t schwierig zu bewerkstelligen ist, wurden Blockchiffren erfunden. Sie heissen so, weil der Text nicht mehr als ganzes, sondern in Bl√∂cken verschl√ºsselt wird. Aktuelle Verschl√ºsselungsverfahren Aktuelle Verschl√ºsselungsverfahren sind so komplex, dass wir sie unm√∂glich in dieser kurzen Zeit verstehen k√∂nnen. Daher werden wir viele der nachfolgend erw√§hnten Verfahren nur anhand von Analogien und nicht auf mathematischer Ebene kennenlernen. Beim Thema Blockchiffren wollen wir aber ins technische eintauchen und uns anhand einer einfachen Verschl√ºsselung (XOR) anschauen, wie moderne Verschl√ºsselung funktioniert. Blockl√§nge‚Äã Klartext GEHEIMNACHRICHT Key PENTA Da der Klartext dreimal so lange ist wie der Schl√ºssel, muss der Text in drei Teile aufgeteilt werden, welche wir separat verschl√ºsseln. Die Blockl√§nge entspricht also der Schl√ºssell√§nge. Verschl√ºsselung in Bl√∂cken‚Äã Im folgenden Beispiel wird der oben bereits erw√§hnte Klartext mit dem Schl√ºssel bitweise mit XOR verschl√ºsselt: Block 1‚Äã ‚†Ä\tText\tPentacode Block 1\tGeheimtextp\tGEHEI\t00111 00101 01000 00101 01001 k\tPENTA\t10000 00101 01110 10100 00001 c 10111 00000 00110 10001 01000\tW FQH Block 2‚Äã ‚†Ä\tText\tPentacode Block 2\tGeheimtextp\tMNACH\t01101 00101 10011 10100 10010 k\tPENTA\t10000 00101 01110 10100 00001 c 11101 00000 11101 00000 10011\t. . S Block 3‚Äã ‚†Ä\tText\tPentacode Block 3\tGeheimtextp\tRICHT\t00101 00110 00110 00101 01110 k\tPENTA\t10000 00101 01110 10100 00001 c 10101 00011 01000 10001 01111\tUCHQO Aufgabe XOR-Blockchiffre Pentacode Klartext Pentacode Verschl√ºsseln Sie den folgenden Text mit der XOR-Blockchiffre: Text PAKET ZUGESTELLT Schl√ºssel BETA Codieren Sie zuerst den Text mit Pentacode Codieren Sie anschliessend den Schl√ºssel mit Pentacode. Verschl√ºsseln Sie den bin√§r dargestellten Text anschliessend mit dem bin√§r dargestellten Schl√ºssel mittels XOR-Blockchiffre. Decodieren Sie diesen wiederum mit Pentacode und √ºberpr√ºfen Sie die L√∂sung. Halten Sie Ihren L√∂sungsweg unten fest: L√∂sung‚Äã","keywords":""},{"title":"Verkettung von Bl√∂cken","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/block-chaining","content":"Verkettung von Bl√∂cken Im letzten Kapitel wurde der Geheimtext zur Ver- bzw. Entschl√ºsselung in Bl√∂cke aufgeteilt, die exakt so lang sind wie der Schl√ºssel. Die Bl√∂cke werden anschliessend einzeln durch die XOR-Funktion mit dem Schl√ºssel ver- bzw. entschl√ºsselt. Allgemeine Blockchiffre Prinzipiell kann anstelle der XOR-Funktion jede beliebige mathematische Funktion (resp. Verkettung von Funktionen) zur Verschl√ºsselung verwendet werden (in den unten aufgef√ºhrten Grafiken daher mit dem allgemeinen Begriff block cipher encryption bezeichnet). Wir beschr√§nken uns hier allerdings auf die einfache und gut verst√§ndliche XOR-Verschl√ºsselung. Der Betriebsmodus ¬´Electronic Code Book¬ª (ECB)‚Äã Falls jeder Block mit dem immer gleichen Schl√ºssel verschl√ºsselt wird, spricht man vom ¬´Electronic Code Book¬ª (ECB) Betriebsmodus. Schematisch dargestellt sieht dieser wie folgt aus: @ In der Abbildung wird deutlich, dass ECB kein eigenes Verschl√ºsselungsverfahren ist, sondern nur ein Modus ist. Er definiert, wie die einzelnen Bl√∂cke verwendet werden. Die konkrete Verschl√ºsselungsfunktion ist in dieser Darstellung nicht genauer angegeben ‚Äì wir verwenden der Einfachheit halber hier die XOR-Funktion. Die Entschl√ºsselung funktioniert analog: Der Geheimtext wird wiederum in Bl√∂cke aufgeteilt, welche separat mit dem Schl√ºssel entschl√ºsselt werden. Die dabei entstandenen Klartext-Bl√∂cke ergeben aneinander gereiht den gesamten Klartext. @ Tool‚Äã XOR Blockchiffre Modus ECBCBC Klartext Schl√ºssel Geheimtext Aufgabe ECB-Modus Verschl√ºsseln Sie den Text EINE SEHR KLEINE SENSATION mit dem Schl√ºssel ZUSE. Schauen Sie sich den Klartext und den Geheimtext genau an. Gibt es Schwachstellen im ECB-Modus? Was ist verd√§chtig? Hinweis √úberlegen Sie sich, was passiert, wenn zwei Bl√∂cke identisch sind (z.B. weil eine bestimmte Passage des Textes erneut vorkommt). Welche Auswirkung hat dies auf den Geheimtext? Der Betriebsmodus ¬´Cipher Block Chaining¬ª (CBC)‚Äã Im CBC-Modus werden die Bl√∂cke nicht mehr getrennt voneinander verarbeitet. Wie in der folgenden Abbildung ersichtlich ist, dient jeder Geheimtext-Block (ausser der letzte) im nachfolgenden Schritt zus√§tzlich als Input. So werden gleiche Klartext-Bl√∂cke trotz identischem Schl√ºssel zu unterschiedlichen Geheimtextbl√∂cken verschl√ºsselt. Das Plus-Zeichen ich Kreis steht hier ebenfalls f√ºr die XOR-Operation. Diese ist gegeben, w√§hrend die Verschl√ºsselung im grossen Rechteck mit der Bezeichnung block cipher encryption frei gew√§hlt werden kann (also bspw. auch ein aktuell sicheres Verfahren). Es wird also in unseren Beispielen sowohl f√ºr die Verrechnung des Klartextblocks mit dem vorherigen Geheimtextblock wie auch f√ºr eigentliche Verschl√ºsselung die XOR-Operation verwendet. Da bei der Verarbeitung des ersten Blocks noch kein Geheimtext-Block zur Verf√ºgung steht, wird ein sogenannter ¬´Initialisierungsvektor¬ª (IV) verwendet. @ √Ñndert man 1 Bit im IV, f√ºhrt dies zu √Ñnderungen im gesamten Geheimtext. √Ñndert man 1 Bit im Klartext, so √§ndern sich auch s√§mtliche darauffolgenden Bl√∂cke im Geheimtext. Ein Nachteil des CBC-Modus ist allerdings, dass die Verschl√ºsselung der verschiedenen Bl√∂cke nicht gleichzeitig (also parallel) berechnet werden k√∂nnen, da das Resultat des vorherigen Blocks f√ºr die Verschl√ºsselung des aktuellen Blocks ben√∂tigt wird. D.h. ein bestimmter Klartext-Block kann erst verschl√ºsselt werden, wenn s√§mtliche vorherigen Bl√∂cke bereits verschl√ºsselt sind. Bei der Entschl√ºsselung sieht es anders aus. Da sofort s√§mtliche Geheimtextbl√∂cke vorliegen, kann die Entschl√ºsselung problemlos parallelisiert werden, wie Sie in der folgenden Abbildung nachvollziehen k√∂nnen: @ Bemerkenswert Auf den ersten Blick erstaunlich ist die Tatsache, dass die Entschl√ºsselung mit falschem IV nur dazu f√ºhrt, dass der erste Klartext-Block unleserlich ist, w√§hrend die restlichen Bl√∂cke korrekt entschl√ºsselt werden. Aufgabe CBC-Modus Verschl√ºsseln Sie nochmals denselben Text, diesmal allerdings im CBC-Modus: Klartext EINE SEHR KLEINE SENSATION Schl√ºssel ZUSE Achten Sie wiederum auf die Bl√∂cke, die im Klartext √ºbereinstimmen. Was passiert jetzt? W√§hlen Sie verschiedene Initialisierungsvektoren. Wie unterscheiden sich die Resultate? Aufgabe Initialisierungsvektor √úberlegen Sie sich zusammen mit Ihrer Pultnachbar:in, mit welcher einfachen Massnahme man darauf verzichten k√∂nnte, neben dem Schl√ºssel auch den Initialisierungsvektor mit der Kommunikationspartner:in abzusprechen. Aufgabe Angriff auf die XOR-Blockchiffre Setzen Sie sich in Dreiergruppen zusammen und diskutieren Sie folgende Fragen: Welche Faktoren beeinflussen die Sicherheit unserer XOR-Blockchiffre? Stellen Sie zu jedem Faktor eine Aussage auf, die aufzeigt, wie eine m√∂glichst hohe Sicherheit erreicht werden kann. Wie sicher ist die Verwendung von XOR (¬´block cipher encryption/decryption¬ª) im Vergleich zu Blockchiffren-Verfahren (ECB)? XOR-Blockchiffre Selbstverst√§ndlich ist XOR als Verschl√ºsselungsfunktion aus kryptologischer Sicht nicht ideal ‚Äì daf√ºr aber f√ºr uns gut verst√§ndlich, √ºberschaubar und einfach anzuwenden. In der Realit√§t ist es besonders wichtig, dass die Verschl√ºsselungsfunktion s√§mtliche Bits des aktuellen Blocks stark ¬´vermischt¬ª. Damit ist gemeint, dass eine winzige √Ñnderung an einer bestimmten Stelle im Klartextblock nicht nur zu einer kleinen √Ñnderung an derselben Stelle im Geheimtextblock f√ºhrt (wie dies bei XOR wegen der bitweisen Verarbeitung der Fall), sondern dass durch die kleine √Ñnderung viele Bits √ºberall im Block ver√§ndert werden. Aus diesem Grund arbeiten aktuelle Verschl√ºsselungsfunktionen von Blockchiffren in mehreren Runden.","keywords":""},{"title":"Black Box","type":0,"sectionRef":"#","url":"/25h/Math/BlackBox","content":"Black Box 0 0 0 0 0 0 0","keywords":""},{"title":"Pentacode","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/codierung","content":"Pentacode Der Pentacode ist keine offizielle Codierung. Sie wurde von Stefan Rothe und Tom Jampen f√ºr den Unterricht entwickelt, um erstens ein kurzes Alphabet ohne unn√∂tige Zeichen zu verwenden und zweitens einen m√∂glichst kurzen Bin√§rcode zu erhalten. Albhabet‚Äã Mit 5 Bits ([Penta bedeutet 5]) k√∂nnen 25=322^5 = 3225=32 Zeichen codiert werden. Neben dem Leerschlag hat es Platz f√ºr die Sonderzeichen ?, ., ,, - und @. Penta-Tabelle Buchstabe\tZahl\tBin√§rLeerschlag\t0\t00000 A\t1\t00001 B\t2\t00010 C\t3\t00011 D\t4\t00100 E\t5\t00101 F\t6\t00110 G\t7\t00111 H\t8\t01000 I\t9\t01001 J\t10\t01010 K\t11\t01011 L\t12\t01100 M\t13\t01101 N\t14\t01110 O\t15\t01111 Buchstabe\tZahl\tBin√§rP\t16\t10000 Q\t17\t10001 R\t18\t10010 S\t19\t10011 T\t20\t10100 U\t21\t10101 V\t22\t10110 W\t23\t10111 X\t24\t11000 Y\t25\t11001 Z\t26\t11010 ,\t27\t11011 -\t28\t11100 .\t29\t11101 ?\t30\t11110 @\t31\t11111 Editor‚Äã Pentacode Klartext Pentacode Schwarzweiss-Bild‚Äã Pixel-Editor +- 00000 00000 00000 00000 00000","keywords":""},{"title":"Taschenrechner","type":0,"sectionRef":"#","url":"/25h/Math/Taschenrechner","content":"Taschenrechner Erlaubte Taschenrechner TI-30 eco RS TI-30X IIS Winkel‚Äã Umrechnung mit Minuten/Sekunden‚Äã Diese Umrechnung ist gedacht f√ºr Winkeleinheiten (Dezimal zu Grad ¬∞, Minuten ', Sekunden '' und umgekehrt). DD steht f√ºr die Dezimaleinheit (Decimal Degree), DMS f√ºr Grad, Minuten, Sekunden (Degree, Minutes, Seconds). TI-30 eco RSTI-30X IIS DD‚ñ∫DMS‚Äã Beispiel: 2.66¬∞=2¬∞39‚Ä≤36‚Ä≤‚Ä≤2.66¬∞ = 2¬∞ 39' 36''2.66¬∞=2¬∞39‚Ä≤36‚Ä≤‚Ä≤ Eingabe: 2.66 &gt; 2nd &gt; DD‚ñ∫DMS DMS‚ñ∫DD‚Äã Beispiel: 2¬∞50‚Ä≤24‚Ä≤‚Ä≤=2.842¬∞ 50' 24'' = 2.842¬∞50‚Ä≤24‚Ä≤‚Ä≤=2.84 Eingabe: 2.5024 &gt; 2nd &gt; DMS‚ñ∫DD danger Minuten und Sekunden m√ºssen in obiger Schreibweise immer zwei Stellen aufweisen! 3¬∞8‚Ä≤9‚Ä≤‚Ä≤3¬∞ 8' 9''3¬∞8‚Ä≤9‚Ä≤‚Ä≤ muss also als 3.0809 &gt; 2nd &gt; DMS‚ñ∫DD eingegeben werden.","keywords":""},{"title":"Wie funktioniert das Internet?","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Begriffe/internet","content":"Wie funktioniert das Internet? Die Urspr√ºnge des heutigen Internets reichen zur√ºck ins Jahr 1969, als am 29. Oktober das Arpanet startete. Das Arpanet hatte zum Ziel, die Rechenleistung der wenigen Grossrechnern an Universit√§ten orts√ºbergreifend zusammenzuschliessen. Dieses Ziel wurde weitgehend verfehlt und stattdessen etablierte sich ab dem Jahr 1971 die E-Mail - und hat sich bis heute als wichtiger Informationskanal gehalten. Erst 1989 wurde am CERN in Genf die Grundlagen des World Wide Webs entwickelt, so dass Internetdokumente untereinander verlinkt werden konnten. Bis 1993 konnten wurden Internetdokumente jedoch nicht in einem Browser graphisch dargestellt, sondern auf der Kommandozeile ausgegeben. Eine der √§ltesten Websites, die seit 1986 unver√§ndert als Fossil im Internet herumgeistert, ist http://itcorp.com/. In einer Kommandozeile dargestellt sah die Seite in etwa so aus: &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;ITcorp.com&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;CENTER&gt; &lt;H1&gt;Interrupt Technology Corporation&lt;/H1&gt; &lt;/CENTER&gt; &lt;P&gt; This is the home page of Interrupt Technology Corporation. If you are looking for another company that calls itself &quot;ITcorp&quot;, you'll have to try typing the company's full name into a search engine. &lt;H2&gt;What Do We Do?&lt;/H2&gt; &lt;P&gt; We are a small, privately held software consulting firm specializing in file systems, storage systems, and computer measurement. We also provide expert-witness services in those areas. If you have a need for our services, you may contact itcorp at itcorp.com (replacing the &quot;at&quot; with an @ sign). &lt;H2&gt;Why Is This Web Page So Plain?&lt;/H2&gt; &lt;P&gt; We do not actively seek outside business. This Web page exists primarily to satisfy the needs of those who expect every domain to have a Web presence. &lt;/BODY&gt; &lt;/HTML&gt; Erst 1993 wurde der erste graphische Browser Mosaic ver√∂ffentlicht und machte das Internet f√ºr die breite Bev√∂lkerung nutzbar.","keywords":""},{"title":"Kerckhoffs' Prinzip","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/kerckhoffs","content":"Kerckhoffs' Prinzip In der Kryptologie ist der wichtigste Punkt stets die Sicherheit. Dabei ist es wichtig, Sicherheit von Schein-Sicherheit zu unterscheiden. Das Prinzip von Kerckhoffs‚Äã Eines der wichtigsten Prinzipien in der Kryptologie stammt von August Kerckhoffs: ¬´Die Sicherheit eines Kryptosystems darf nicht von der Geheimhaltung des Algorithmus abh√§ngen. Die Sicherheit gr√ºndet sich nur auf die Geheimhaltung des Schl√ºssels.¬ª ‚Äì Auguste Kerckhoffs (1835 - 1903) Auguste Kerckhoffs@ Formulierung von Claude Shannon‚Äã Claude Shannon hat dasselbe kurz und pr√§gnant ausgedr√ºckt: ¬´The enemy knows the system!¬ª ‚Äì Claude Shannon (1916 - 2001) Claude Shannon@ Erkl√§rung von Bruce Schneier‚Äã Der renommierte Kryptologe Bruce Schneier erkl√§rt das Prinzip von Kerckhoffs' mit einer kurzen Geschichte 2: ¬´Man unterscheidet zwei Arten von Verschl√ºsselung: Verschl√ºsselung, die deine kleine Schwester daran hindert, deine Dateien zu lesen, und die Verschl√ºsselung, die bedeutende Regierungen daran hindert, sie zu lesen.¬ª ‚Äì Bruce Schneier ¬´Wenn ich einen Brief in einen Safe einschliesse, diesen irgendwo in New York verstecke und dir dann sage, du sollst den Brief lesen, hat dies nichts mit Sicherheit zu tun. Das ist Verschleierung. Angenommen, ich schliesse einen Brief in einen Safe ein, √ºbergebe dir den Safe mitsamt Bauplan, hundert weiteren, identischen Safes und deren geheimer Kombination, so dass du und die besten Codeknacker den Schliessmechanismus studieren k√∂nnen. Wenn du den Brief trotzdem nicht lesen kannst, dann spricht man von Sicherheit.¬ª ‚Äì Bruce Schneier Bruce Schneier@ Quelle: Applied Cryptography, Bruce Schneier, Vorwort ‚Ü©","keywords":""},{"title":"√úbungen","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/uebungen","content":"√úbungen L√∂sen Sie die √úbungen von Hand (daher nur mit dem Pentacode-Editor als Hilfsmittel). ECB Modus‚Äã Pentacode Klartext Pentacode 1. XOR Verschl√ºsselung Verschl√ºsseln Sie den Text BUCHSTABENSPIELE mit dem Schl√ºssel AKRONYM 2. XOR Entschl√ºsseln Entschl√ºsseln Sie den Text XWVJZWEKK,XWVJIK mit dem Schl√ºssel VVXKZ CBC Modus‚Äã Hinweis CBC-Modus Jeder Block hat genau so viele Bits wie der Schl√ºssel. (Hier werden also meist 2 Buchstaben (=10 bits) pro Antwort in einem Block verwendet.) c1 ist ein Zwischenresultat, damit wird weitergearbeitet... 3. CBC-Modus: Verschl√ºsseln CBC: Verschl√ºsseln@ Verschl√ºsseln Sie den Text WINTER mit dem Schl√ºssel NY und dem IV AZ. (Antworten als Penta-Bin√§rcode) Block 1 Nach XOR mit IV Nach XOR mit Schl√ºssel Block 2 Nach XOR mit IV Nach XOR mit Schl√ºssel Block 3 Nach XOR mit IV Nach XOR mit Schl√ºssel 4. CBC-Modus: Entschl√ºsseln CBC Entschl√ºsseln@ Entschl√ºsseln Sie den Text NNHDFBA mit dem Schl√ºssel BE und beliebigem IV. (Antworten als Penta-Bin√§rcode) Block 1 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 2 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 3 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 4 Nach XOR mit Schl√ºssel Nach XOR mit IV ","keywords":""},{"title":"XOR-Verschl√ºsselung","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Symmetrisch/xor","content":"XOR-Verschl√ºsselung Da wir nun mit Bits arbeiten und nicht mehr mit Buchstaben, m√ºssen wir nach anderen M√∂glichkeiten zur Verschl√ºsselung suchen. Alphabetverschiebungen wie bei Caesar und Substitutionen sind nicht mehr geeignete Mittel, wenn nur die Zahlen 0 und 1 zur Verf√ºgung stehen. Nebst den bekannten Operationen, Addition, SUbtraktion, Multiplikation und Division, kann ein Computer auch noch weitere Operationen auf zwei Bin√§rzahlen anwenden. Eine solche Operation ist das XOR (Exklusives Oder, Exclusive OR): Exclusive or exclusive disjunction is a logical operation that is 1 if, and only if its arguments differ (one is 1, the other is 0).1 XOR kann auch zur Verschl√ºsselung verwendet werden. Dabei wird jeweils 1 Bit des Klartextes mit einem Bit des Schl√ºssels verrechnet. Das Ergebnis ist 1 Bit des Geheimtextes. Die Wahrheitstabelle sieht folgendermassen aus: Verschl√ºsselung‚Äã p\tk\tc = p XOR k0\t0\t0 0\t1\t1 1\t0\t1 1\t1\t0 p plain text (Klartext) k key (Schl√ºssel) c cipher (Verschl√ºsselt) Entschl√ºsselung‚Äã c\tk\tp = c XOR k0\t0\t0 1\t1\t0 1\t0\t1 0\t1\t1 Analog zu ROT13 gilt auch hier: Die Verschl√ºsselung ist identisch mit der Entschl√ºsselung, da Folgendes gilt: c¬†XOR¬†k=(p¬†XOR¬†k)¬†XOR¬†k=p\\ c \\text{ XOR } k = (p \\text{ XOR } k) \\text{ XOR } k = p¬†c¬†XOR¬†k=(p¬†XOR¬†k)¬†XOR¬†k=p Dies k√∂nnen Sie mit den Tabellen oben leicht √ºberpr√ºfen. Aufgabe XOR-Verschl√ºsselung Verschl√ºsseln Sie die Bitfolge mit dem angegebenen Schl√ºssel 10100 11101 10110 (Bitfolge des Klartexts) 00101 01010 11100 (Bitfolge des Schl√ºssels) Bitfolge des Geheimtexts‚Äã Aufgabe Textverschl√ºsselung mit XOR Sie erhalten von einer Kollegin folgende verschl√ºsselte Nachricht: 01010 00100 01010 11011 00000 Als Schl√ºssel haben Sie das Wort MACHT abgemacht. Codieren Sie den Schl√ºssel mit Pentacode Entschl√ºsseln Sie die bin√§re Nachricht (XOR) Klartext (entschl√ºsselte Bitfolge mit Pentacode zur√ºckverwandeln) Aufgabe Bildverschl√ºsselung mit XOR Zeichnen Sie ein 5x5-Pixel-Bild Pixel-Editor +- 00000 00000 00000 00000 00000 Verschl√ºsseln Sie die Bitfolge mit dem Schl√ºssel ABCDE. Pentacode Klartext Pentacode Wandeln Sie die resultierende Bitfolge wieder in ein Bild um (halten Sie das Bild fest). Wie viele weisse Felder hatte das Original bzw. das verschl√ºsselte Bild? Was geschieht, wenn Sie daraus mit Pentacode einen Text erstellen? SSR Quelle: Germundsson, Roger; Weisstein, Eric ‚Ü©","keywords":""},{"title":"‚≠ê RSA Algorithmus","type":0,"sectionRef":"#","url":"/25h/Kryptologie/Asymmetrisch/rsa","content":"‚≠ê RSA Algorithmus Der RSA Algorithmus ist der aktuell am weitesten verbreitete asymmetrische Verschl√ºsselungsalgorithmus und wird etwa f√ºr die SSL/TLS Verschl√ºsselung beim HTTPS-Protokoll verwendet. Der Algorithmus wurde 1977 von Ronald Rivest, Adi Shamir und Leonard Adlerman unter dem Namen RSA entwickelt und publiziert1. Funktionsweise‚Äã Die Funktionsweise basiert darauf, dass es leicht ist, c=me‚ÄÖmod‚ÄÖnc = m^{e}\\: mod\\: nc=memodn zu berechnen, aber praktisch unm√∂glich, ohne den privaten Schl√ºssel d die Umkehr¬≠funktion zu berechnen. n √∂ffentliche Zahl e √∂ffentlicher Schl√ºssel des Empf√§ngers d privater Schl√ºssel des Empf√§ngers m&lt;nm&lt;nm&lt;n Klartext c Geheimtext Verschl√ºsselung‚Äã Zur Verschl√ºsselung berechnet Bob den Geheimtext c: c=me‚ÄÖmod‚ÄÖnc=m^{e} \\: mod \\: nc=memodn Wobei mod der Ganzzahlige Rest bei der Division mit n darstellt. Beispiel: 13‚ÄÖmod‚ÄÖ4=113 \\: mod \\: 4=113mod4=1, da 134=3‚ÄÖRest‚ÄÖ1\\frac{13}{4} = 3\\: Rest\\: 1413‚Äã=3Rest1. Die Zahl nnn ist das Produkt von zwei ver¬≠schiedenen Primzahlen ppp und qqq, diese sind geheim. Wie k√∂nnen ppp und qqq geheim sein, wenn doch n=p‚ãÖqn = p\\cdot qn=p‚ãÖq √∂ffentlich ist? Dies beruht nur darauf, dass die Primfaktor¬≠zerlegung von nnn zu rechen¬≠aufwendig ist, da nnn sehr gross ist (z.B. 1024 Bit lang). F√ºr die Zahl e muss gelten ggt(e,œï(n))=1ggt(e, \\phi(n)) = 1ggt(e,œï(n))=1 Hierbei ist œï(n)=(p‚àí1)(q‚àí1)\\phi(n) = (p-1)(q-1)œï(n)=(p‚àí1)(q‚àí1) die Anzahl der zu n teiler¬≠fremden Zahlen, die kleiner als n sind. Entschl√ºsselung‚Äã Der Empf√§nger hat als privaten Schl√ºssel eine Zahl ddd mit d‚ãÖe‚ÄÖmod‚ÄÖœï(n)=1d\\cdot e\\: mod\\: \\phi(n) = 1d‚ãÖemodœï(n)=1 daher d‚ãÖe=k‚ãÖœï(n)+1d\\cdot e = k\\cdot \\phi(n) + 1d‚ãÖe=k‚ãÖœï(n)+1 f√ºr irgend ein k‚ààNok \\in \\N_{o}k‚ààNo‚Äã. Ist n=pqn = pqn=pq, so gilt nach einem Satz von Euler f√ºr alle Zahlen mmm mit m&lt;nm &lt; nm&lt;n und f√ºr alle nat√ºrlichen Zahlen kkk: mk‚ãÖœï(n)+1‚ÄÖmod‚ÄÖn=mmk\\cdot\\phi(n)+1\\: mod\\: n = mmk‚ãÖœï(n)+1modn=m Zur Ent¬≠schl√ºsselung berechnet der Empf√§nger also cd‚ÄÖmod‚ÄÖn=md‚ãÖe‚ÄÖmod‚ÄÖn=mk‚ãÖœï(n)+1‚ÄÖmod‚ÄÖn=m\\begin{aligned} c^{d}\\: mod\\: n &amp;= md\\cdot e\\: mod\\: n \\\\ &amp;= mk\\cdot \\phi(n) + 1\\: mod\\: n \\\\ &amp;= m \\end{aligned}cdmodn‚Äã=md‚ãÖemodn=mk‚ãÖœï(n)+1modn=m‚Äã und erh√§lt damit den Klartext mmm. ‚≠êÔ∏è RSA Schl√ºssell√§nge Die RSA Schl√ºssel haben standardm√§ssig 1024 oder 2048 bits, wobei Schl√ºssel mit 1024 bits mittelfristig als knackbar erachtet werden, so dass die Industrie heute oft mindestens 2048 bits voraussetzt. RSA in Python‚Äã Schl√ºsselerzeugung:‚Äã Als erstes w√§hlt man zwei Primzahlen ppp und qqq und berechnet daraus n=p‚ãÖqn = p \\cdot qn=p‚ãÖq und œÜ(n)=œÜ(p)‚ãÖœÜ(q)=(p‚àí1)‚ãÖ(q‚àí1)\\varphi(n) = \\varphi(p) \\cdot \\varphi(q) = (p-1) \\cdot (q-1)œÜ(n)=œÜ(p)‚ãÖœÜ(q)=(p‚àí1)‚ãÖ(q‚àí1) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) print(n, phi) Nun muss man ein Zahlenpaar eee und ddd finden, die bez√ºglich œÜ(n)\\varphi(n)œÜ(n) multiplikativ invers zueiunander sind. Das bedeutet, dass gilt: d‚ãÖemod œï(n)=1d \\cdot e \\mod \\phi(n) = 1d‚ãÖemodœï(n)=1 Das Zahlenpaar findet man mit dem sogenannten erweiterten euklidschen Algorithmus: p = 11 q = 13 n = p * q phi = (p-1) * (q-1) ### PRE def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 Erster Versuch: 3 hat kein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 3 d = euclidExtended(e, phi) Zweiter Versuch: 5 hat auch kein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 5 d = euclidExtended(e, phi) Dritter Versuch: 7 hat ein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n). (Nebenbei: Der Grund, warum es mit 3 und 5 nicht geklappt hat: Die Zahlen m√ºssen zu œÜ(n)\\varphi(n)œÜ(n) teilerfremd sein, aber 120 ist durch 3 und 5 teilbar) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 7 d = euclidExtended(e, phi) print(d)# =&gt; 103 Kurze √úberpr√ºfung: Ist das Produkt von eee und ddd modulo œÜ(n)\\varphi(n)œÜ(n) tats√§chlich 1? phi = 120 d = 103 e = 7 ### PRE print(e * d) # =&gt; 721 print((e * d) % phi) # =&gt; 1 Verschl√ºsselung‚Äã Der √∂ffentliche Schl√ºssel besteht nun aus den Zahlen eee und nnn. Diesen darf jeder wissen. Der private Schl√ºssel besteht aus den Zahlen ddd und nnn. Dieser muss geheimgehalten werden. Mit dem RSA-Verfahren lassen sich nun Zahlen von 0 bis (n-1) verschl√ºsseln. Um eine Nachricht mmm zu verschl√ºsseln, muss man folgendes berechnen: c=memod nc = m^e \\mod nc=memodn Resultat ist eine verschl√ºsselte Nachricht ccc e = 7 n = 143 ### PRE m = 141 c = m**e % n print(c) # =&gt; 15 Entschl√ºsseln‚Äã Um die verschl√ºsselte Nachricht ccc zu entschl√ºsseln, muss man folgendes berechnen: m=cemod nm = c^e \\mod nm=cemodn d = 103 n = 143 c = 15 ### PRE print(c**d % n) # =&gt; 141 Praktische Anwendung: Text mit RSA verschl√ºsseln:‚Äã Um einen Text mit RSA zu verschl√ºsseln hat man nun zahlreiche M√∂glichkeiten. Hier ist nur ein Beispiel: Zun√§chst wandeln wir jeden Buchstaben der Nachricht 'HALLO' in eine Zahl um: alphabet = 'abcdefghijklmnopqrstuvwxyz' for buchstabe in 'hallo': print(alphabet.find(buchstabe), end=',') Mit der Python-Funktion bin machen wir daraus Bin√§rzahlen in form eines strings, allerdings brauchen wir die zwei ersten Zeichen 0b, die Python vor jede Bin√§rzahl schreibt nicht und zwacken diese ab. Ausserdem f√ºllen wir die Zahl mit zfill immer mit Nullen auf 5 Stellen auf. Warum 5 Stellen? Weil man f√ºr 26 Buchstaben mindestens 5 Bit (= 32 M√∂glichkeiten) braucht: print(bin(7)) # das 0b brauchen wir nicht print(bin(7)[2:].zfill(5)) # abzwacken und mit 0 f√ºllen for number in [7, 0, 11, 11, 14]: print(bin(number)[2:].zfill(5), end=' ') Aus diesen 5-Stelligen Bin√§rzahlen machen wir 7-Stellige Bin√§rzahlen, indem wir die Bits einfach der Reihe nach lesen. Falls es nicht aufgeht, h√§ngen wir einfach noch Nullen dran. Warum 7 Bit? Weil f√ºr dieses Beispiel n=p‚ãÖq=11‚ãÖ13=143n = p \\cdot q = 11 \\cdot 13 = 143n=p‚ãÖq=11‚ãÖ13=143 ist, worin 127 (gr√∂sste Zahl mit 7 bit) gerade Platz hat. Das Resultat sind 4 Zahlen: for number in ['0011100', '0000101', '1010110', '1110000']: print(int(number, 2), end=', ') Diese vier Zahlen werden nun einzeln RSA-Verschl√ºsselt: e = 7 n = 143 for number in [28, 5, 86, 112]: print(number**e % n, end=', ') Am anderen Ende k√∂nnen die Zahlen wieder einzeln entschl√ºsselt werden: d = 103 n = 143 for number in [63, 47, 70, 18]: print(number**d % n, end=', ') Die Zahlen werden wieder bin√§r umgewandelt, diesmal auf 7 Stellen mit Nullen gef√ºllt: for number in [28, 5, 86, 112]: print(bin(number)[2:].zfill(7), end=' ') Aufgeteilt in 5-Stellige Bin√§rzahlen erhalten wir die urspr√ºnglichen Zahlen und daraus die urspr√ºnglichen Buchstaben: for number in ['00111', '00000', '01011', '01011', '01110']: print(int(number, 2), end=',') alphabet = 'abcdefghijklmnopqrstuvwxyz' for number in [7, 0, 11, 11, 14]: print(alphabet[number], end=' ') Sicherheit‚Äã Warum ist dies sicher? Dieses Beispiel w√§re nat√ºrlich nicht sicher, weil die Primzahlen viel zu klein sind, aber bei grossen Primzahlen ppp und qqq w√ºrde es viel zu lange dauern, diese Teiler nur aus nnn zu bestimmen. Um dies zu verdeutlichen hier eine naive Funktion factors, die die Teiler einer Zahl zur√ºckgibt, falls sie exisiteren. In der Zelle darunter wird diese Funktion benutzt, um Primzahlen zu finden indem einfach eine Zahl nach der anderen durchprobiert wird. Wird eine Primzahl gefunden, verdoppeln wir unseren Kandidaten und suchen von dort aus weiter. Am Anfang geht das ganze recht schnell, aber schon bald dauert es ewig lange, um die n√§chste Primzahl zu finden. Einerseits, weil es immer weniger Primzahlen gibt, aber andererseits wird die factors-Funktion immer langsamer. from browser import timer i = 1 def factors(n): for i in range(2, n): if n % i == 0: return i, n // i def check_next(): global i if factors(i) is None: print(i, end=', ') i = i * 2 i = i + 1 LIMIT = 200 for q in range(LIMIT): print(q) timer.set_timeout(check_next, 0.1) Quelle: techtarget.com ‚Ü©","keywords":""},{"title":"IP-Adresse","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Begriffe/ip-adresse","content":"IP-Adresse Adressen‚Äã S√§mtliche Ger√§te in einem Netzwerk m√ºssen eine Adresse erhalten, damit Datenpakete an die richtigen Stellen weitergeleitet werden k√∂nnen. Im Internet Protocol (IP) werden IP-Adressen verwendet. Es gibt zwei Versionen des Internet Protokolls: IPv4 und IPv6. IPv4-Adressen‚Äã Eine IPv4-Adresse ist eine Folge von vier Bytes. Sie besteht also aus 32 Bit, wie im folgenden Beispiel: 11000000 10101000 11001000 00000001 Um IP-Adressen besser lesen und austauschen zu k√∂nnen, werden die vier Bytes normalerweise als Dezimalzahlen geschrieben und durch Punkte abgetrennt, also beispielsweise: 192.168.200.1 Es gibt 232=4‚Ä≤294‚Ä≤967‚Ä≤2962^{32} = 4'294'967'296232=4‚Ä≤294‚Ä≤967‚Ä≤296 verschiedene IP-Adressen. Auf den ersten Blick scheint die Anzahl sehr gross zu sein. Durch die Vielzahl an internetf√§higen Ger√§ten weltweit sind ein Grossteil der Adressen inzwischen vergeben. In Zukunft wird es daher ein erweitertes System (IPv6) mit noch viel mehr Adressen geben. IPv6-Adressen‚Äã Eine IPv6-Adresse besteht aus 16 Bytes, also aus 128 Bit. Damit gibt es 21282^{128}2128 verschiedene Adressen. Somit k√∂nnte jedes Atom im Universum (ca. 108410^{84}1084 bis 108910^{89}1089 ) eine eindeutige IPv6-Adresse erhalten, oder aber auf jedem Quadratmeter der Erdoberfl√§che k√∂nnte man 6.5‚ãÖ1023=655‚Ä≤570‚Ä≤793‚Ä≤348‚Ä≤866‚Ä≤943‚Ä≤898‚Ä≤5996.5\\cdot10^{23} = 655'570'793'348'866'943'898'5996.5‚ãÖ1023=655‚Ä≤570‚Ä≤793‚Ä≤348‚Ä≤866‚Ä≤943‚Ä≤898‚Ä≤599 mit dem Internet verbundene Ger√§te stapeln ü§™. IPv6-Adressen werden als Hexadezimalzahl dargestellt. Dabei werden immer vier hexadezimale Ziffern (vier Byte) zusammengefasst. Als Trennzeichen wird der Doppelpunkt : verwendet: 2001:0db8:85a3:08d3::0370:7344 ‚≠ê Adressierung von IP-Teilnetzwerken‚Äã Hosts und Router, die ein lokales Netzwerk bilden, erhalten im IP-Adressiersystem einheitliche IP-Adressen. Alle IP-Adressen des oberen Netzwerkes haben eine IP-Adresse der Gestalt 192.168.200.xxx, alle IP-Adressen des unteren Netzwerkes eine IP-Adresse der Gestalt 192.168.100.xxx. Zudem ist der Router in ein weiteres Netzwerk mit IP-Adressen der Gestalt 212.135.18.xxx eingebunden. Diese Form der einheitlichen Adressierung erlaubt es, die Zugeh√∂rigkeit zu Teilnetzen schnell zu entscheiden. Ein Netzteilnehmer muss hierzu nur die Netzwerkmaske des entsprechenden Teilnetzes (wie z.B. 192.168.200.xxx) kennen.","keywords":""},{"title":"MAC-Adresse","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Begriffe/mac-adresse","content":"MAC-Adresse Die physikalische Adresse, auch Hardware-Adresse eines Computers ‚Äì genauer gesagt: seiner Netzwerkschnittstelle ‚Äì nennt man MAC-Adresse (MAC steht f√ºr Media Access Control und hat entsprechen nichts mit Apple zu tun). Sie besteht aus 48 Bit oder 6 Bytes, so dass sie √ºblicherweise als Hexadezimalzahl mit 6√ó2 Stellen angegeben wird, beispielsweise: 48:2C:6A:1E:59:3D. Jede MAC-Adresse muss weltweit eindeutig sein, damit die Zustellung von Paketen, und somit auch die Transportsicherheit, garantiert werden kann. Die MAC-Adresse wird bei der Herstellung der Netzwerkkarte fix vergeben und kann nicht mehr ver√§ndert werden. Router-Einstellungen‚Äã Der Router ist der Eintrittspunkt zum WWW. Er besitzt zwei Netzwerkkarten (und somit auch zwei MAC-Adressen) - eine f√ºr die Verbindung mit Ihrem Ger√§t, die andere f√ºr die Verbindung mit dem ISP (Internet Service Provider). Da die MAC-Adressen nicht ge√§ndert werden k√∂nnen, kann der Datenverkehr auch auf Basis der MAC-Adresse gefiltert werden. Bezahlen Sie etwa Ihre Internet-Rechnung nicht, sperrt Ihr Anbieter die Kommunikation mit Ihrem Router - √ºber die MAC Adresse. Dasselbe Prinzip kann aber auch auf die Andere Seite angewandt werden. Wenn Sie pl√∂tzlich feststellen, dass sich Ihr Nachbar Ihr WLAN-Passwort erhascht hat, k√∂nnen Sie bei den Router-Einstellungen seine MAC-Adresse ausfindig machen und diese ggf. sperren. Router Einstellungen: MAC-Adressen sperren MAC-Adresse herausfinden Finden Sie die MAC-Adresse Ihres ger√§tes. Googeln Sie z.b. nach *Wie finde ich meine MAC adresse?&quot;","keywords":""},{"title":"Ports","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Begriffe/ports","content":"Ports Wozu ben√∂tigt man Ports?‚Äã Ein Computer, der sich in einem Netzwerk befindet, hat meist etliche Verbindungen gleichzeitig zu vielen anderen Computern ge√∂ffnet. Sogar zwei Computer untereinander verwenden h√§ufig mehrere Verbindungen gleichzeitig: So k√∂nnte ein Benutzer auf seinem Computer im Browser eine Webseite besuchen, w√§hrend das Betriebssystem gerade den Update-Server kontaktiert ‚Äì beides ben√∂tigt eine DNS-Abfrage, d.h. Verbindungen zum DNS-Server. Auf der Vermittlungsschicht kontaktiert derselbe Client mit seiner IP-Adresse f√ºr beide Verbindungen die IP-Adresse desselben (DNS-)Servers. Eine Stufe h√∂her ‚Äì auf der Transportschicht ‚Äì m√ºssen die Verbindungen unterschieden werden k√∂nnen. Schliesslich sollen die beiden Antworten ja nicht vertauscht werden. Daher verwendet man Ports ‚Äì eine 16-bit Zahl (sprich: Werte von 0 - 65'535). Well-known Ports‚Äã Auf der Serverseite werden in der Regel stets dieselben Ports eingesetzt ‚Äì schliesslich muss ein Client wissen, auf welchem Port er den gew√ºnschten Dienst erreichen kann. Einige bekannte Ports sind: Portnummer\tDienst25\tSimple Mail Transfer Protocol (SMTP) 53\tDomain Name System (DNS) 80\tHyperText Transfer Protocol (HTTP) 143\tInternet Message Access Protocol (IMAP) 465\tSimple Mail Transfer Protocol Secure (SMTPS) 443\tHyperText Transfer Protocol Secure (HTTPS) 993\tInternet Message Access Protocol Secure (IMAPS)","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Lernziele","content":"Lernziele Dauer 60 Minuten Benotung Die Note z√§hlt ganz Hilfsmittel Keine Pr√ºfungsstoff Sie kennen das Prinzip sowie die Vorteile eines Schichten-Modells und k√∂nnen dies in eigenen Worten erkl√§ren Sie kennen die vier Schichten des TCP/IP-Schichtenmodells und deren Reihenfolge Sie wissen was die Funktion von Protokollen ist und k√∂nnen zwei Netzwerkprotokolle aufz√§hlen Sie wissen was ein Protokoll ist und k√∂nnen auf jeder Schicht (ausser der physikalischen Schicht) die konzeptuelle Funktionsweise folgender Protokolle beschreiben: HTTP/HTTPS, TCP/UDP, IP. Sie kennen die Unterschiede zwischen HTTP und HTTPS sowie zwischen TCP und UDP. Sie k√∂nnen in je einem Satz erkl√§ren, was die Aufgabe jeder einzelnen TCP/IP-Schicht ist Sie k√∂nnen die Begriffe Server, Client, Host, Rechnernetz und Internet kurz erkl√§ren Sie kennen die Funktionsweise eines Routers und wissen was der Standardgateway ist Sie kennen die Funktionsweise von DNS und k√∂nnen am Computer Hostnamen in IP-Adressen umwandeln (und umgekehrt) Sie k√∂nnen Domain-Namen in ihrer Hierarchischen Struktur zerlegen und Einordnen Sie k√∂nnen f√ºr ein kleines Netzwerk die statischen Routing-Tabellen inkl. der Standardrouten eintragen Sie k√∂nnen das Konzept des dynamischen Routings in eigenen Worten erkl√§ren Sie kennen die Angriffsmethode WLAN-Sniffing und k√∂nnen deren Funktionsweise beschreiben Sie wissen, wie Sie sich vor WLAN-Sniffing sch√ºtzen k√∂nnen Sie wissen Bescheid √ºber die praktischen √úbungen im Unterricht (bspw. ping und tracert) und k√∂nnen Vorgehen und Ergebnisse wiedergeben Sie k√∂nnen anhand eines Beispiels erkl√§ren, wie NAT (Network Address Translation) funktioniert und dadurch private und √∂ffentliche Netzwerke verbunden werden Sie k√∂nnen die Funktionsweise des TTL-Headers bei Nachrichten im Internet beschreiben und deren Notwendigkeit begr√ºnden Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"Routing im Alltag","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Routing/routing-alltag","content":"Routing im Alltag Vorgehensweise Lesen Sie sich selbst√§ndig durch dieses Kapitel durch, wobei Sie die Aufgaben l√∂sen und die Ergebnisse notieren vor jedem ¬´gewonnene Erkenntnisse¬ª √ºberlegen Sie kurz, was eine gewonnene Erkenntnis sein k√∂nnte ‚Äì und zwar bevor Sie das K√§stchen aufklappen lesen Sie die ¬´gewonnenen Erkenntnisse¬ª durch und √ºberlegen Sie sich, was damit genau gemeint ist falls Sie eine Frage haben oder eine Erkenntnis notiert haben, die nicht aufgelistet wird, dann halten Sie diese fest, damit wir am Schluss dar√ºber sprechen k√∂nnen Wir befinden uns auf der Vermittlungs-Schicht: Hier werden IP-Pakete vom Start- zum Zielger√§t √ºbertragen. Bei ihrem Weg durch das Internet m√ºssen die Pakete geleitet werden ‚Äì man spricht von Routing. Verkehrsbetriebe Biel‚Äã Durch das Verkehrsnetz der Verkehrsbetriebe Biel wird der √∂ffentliche Verkehr in der Stadt Biel sichergestellt. @ Sie m√∂chten mit dem √ñV vom Gymnasium (L√§ndtestrasse 12, Biel/Bienne) zum Sportplatz Mettmoos fahren. Mit dem Netzplan Welche M√∂glichkeiten sehen Sie auf dem Liniennetz? üíª mit Google Maps Welchen Transportoptionen schl√§gt Ihnen üëâ Google Maps vor, wenn Sie die Route L√§ndtestrasse 12 ‚Üí Sportplatz Mettmoos suchen? Welche Optionen werden vorgeschlagen? Welches ist gem√§ss Google die beste Route? √Ñndert sich die Route, wenn sie m√∂glichst kurze Fusswege enthalten soll? (Einstellbar unter Routenoptionen) √Ñndert sich der Reisevorschlag, wenn Sie sp√§t in der Nacht eine Verbindung suchen? Gewonnene Erkenntnisse Es gibt mehrere Wege, welche ans Ziel f√ºhren. Der optimale Weg ist abh√§ngig von den Rahmenbedingungen und kann sich √§ndern. Gefundene Analogien‚Äã WLAN\tzu Fuss bis zur n√§chsten Haltestelle Sichtbare WLANs\tHaltestellen, die zu Fuss erreichbar sind: Bahnhof &amp; Badhausstrasse Rechnernetz (LAN)\tmit Bus (f√ºr weiter entfernte Ziele: Tram, Zug, ...) Router\tUmsteigen an gewissen Haltestellen Routing f√ºr Touristen‚Äã Datenpakete sind ‚Äì anders als wir als Passagiere vom √ñV ‚Äì nicht intelligent. Sie wissen nicht, wie sie umsteigen m√ºssen. Dies muss f√ºr sie √ºbernommen werden. Ein Datenpaket im √ñV vom Gymer zum Sportplatz Mettmoos m√ºsste an jeder Haltestelle wissen: ob man Aussteigen oder Umsteigen muss in welchen Bus man als n√§chstes einsteigen muss ob man am Ziel angekommen ist. an jeder Strassenkreuzung (wenn zu Fuss unterwegs) wissen: welche Abzweigung es nehmen soll ob es am Ziel angekommen ist. Routing-Tabelle Erstellen Sie f√ºr das Ziel &quot;Sportplatz Mettmoos&quot; Umsteige-Anleitungen f√ºr Datenpakete gem√§ss obigem Punkt 1. f√ºr die folgenden Haltestellen: Seehofweg Bahnhof Biel M√ºhlestrasse/Moulin Schulen Linde Bahnhof Mett Beispiel-Anleitung: Ort Ziel AktionSeehofweg\tMettmoos Bus Nr. 9 Seehofweg\tGymer Zu Fuss weiter Halten Sie Ihre Anleitung auf Papier fest und f√ºgen Sie ein Foto unten ein. Andere Ziele Die Anleitungen m√ºssten nat√ºrlich auch Anweisungen haben f√ºr andere Ziele. Wie w√ºrden die Umsteigungsanweisungen f√ºr die 5 obenstehenden Haltestellen f√ºr das Ziel &quot;Bern&quot; lauten? Wie f√ºr das Ziel &quot;Z√ºrich&quot;? Muss jede Haltestelle wirklich Anweisungen f√ºr jedes andere Ziel haben? Gewonnene Erkenntnisse Es k√∂nnen Anweisungen &quot;delegiert&quot; werden: Es muss nur der Bahnhof Biel wissen, in welchen Zug man einsteigen muss um nach Bern oder Z√ºrich zu fahren. Die anderen Haltestellen leiten alle Anfragen ausserhalb des Biel-Netzes an den Bahnhof Biel weiter. Ausfall Schienennetz‚Äã Wegen Umbauarbeiten f√§llt die Linie Nr. 9 ab &quot;Br√ºhlplatz&quot; aus. Welche M√∂glichkeiten haben Sie, wenn Sie beim Seehofweg eingestiegen sind, um doch an den Sportplatz zu gelangen? Gewonnene Erkenntnisse Es gibt verschiedene Wege zum Ziel - auch nicht optimale Wege, die normalerweise nicht benutzt werden. Diese Optionen erm√∂glichen aber eine gewisse Ausfallsicherheit. Im Beispiel oben k√∂nnen Sie entweder beim Bahnhof Biel oder beim Br√ºhlplatz auf eine andere Verbindung umsteigen. Grosse Gruppe‚Äã Grose Gruppen 4 Parallelklassen ‚Äì also ca. 100 Personen haben beim Sportplatz Mettmoos abgemacht. Wie kommen sie am schnellsten dahin, wenn wir damit rechnen, dass wegen Corona und dem Feierabendverkehr maximal 25 Personen pro Bus Platz finden? Gewonnene Erkenntnisse Bei Engp√§ssen k√∂nnen verschiedene Wege gleichzeitig benutzt werden. (Load-Balancing)","keywords":""},{"title":"Domain-Name-System","type":0,"sectionRef":"#","url":"/25h/Netzwerke/DNS","content":"Domain-Name-System Ziele Was ist ein Domain-Name? Sie k√∂nnen zu einem gegebenen Domain-Namen die zugeh√∂rige IP-Adresse ermitteln. Sie k√∂nnen herausfinden, wem ein Domain-Name geh√∂rt und ob ein bestimmter Domain-Name noch frei ist. Sie k√∂nnen Web-Links auf ihre Unbedenklichkeit √ºberpr√ºfen. Telefonb√ºcher‚Äã @ IP-Adressen sind wie Telefonnummern, man kann sie sich nur schwer merken. F√ºr Telefonnummern gibt es deshalb Verzeichnisse, in welchen man die Nummer einer bestimmten Person nachschauen kann (entweder das gute alte Telefonbuch oder, moderner, tel.search.ch). Man muss nur den Namen der Person und vielleicht noch die Wohnadresse kennen. Domain Name‚Äã Auch f√ºr das Internet gibt es solche Verzeichnisse. Wenn man den Namen einer bestimmten Webseite kennt, kann man im Verzeichnis die IP-Adresse des Servers nachschauen, der diese Seite im Internet anbietet. Solche Namen sind zum Beispiel www.instagram.com www.gbsl.ch ofi.gbsl.website Diese Namen werden als Domain-Names bezeichnet und das Verzeichnis, wo sie drinstehen, heisst Domain-Name-System, kurz DNS. Kernidee‚Äã Namen kann man sich viel besser merken als Zahlen. Deshalb sind Webseiten im Internet mit einem Domain-Namen versehen. Im Verzeichnis der Domain-Namen, dem Domain-Name-System, kann man nachschauen, welches die IP-Adresse des Servers ist, der diese Seite anbietet. Funktionsweise‚Äã Es gibt auf der Welt bald 2 Milliarden1 Webseiten, verteilt auf ca. 200 Millionen Server. Jeder Server beherbergt also durchschnittlich 10 Webseiten. F√ºr jeden dieser Server braucht es eine √∂ffentliche IP-Adresse, damit der Server im Internet erreichbar ist. Wenn man die IP-Adresse des Servers kennt, k√∂nnte man theoretisch versuchen im Browser statt des Domain-Namens einer Web-Site direkt die IP-Adresse des Servers einzugeben, also statt www.instgram.com die IP-Adresse 157.240.17.174. IP-Adressen direkt eingeben Obiges Beispiel, die IP-Adresse von Instagram direkt in den Browser einzutippen, funktioniert in der Praxis mit modernen Webseiten, die https als Protokoll verwenden, nicht. Bei https wird von Ihrem Browser mittels Zertifikat sichergestellt, dass die Adresse auf den korrekten Domain Namen lautet. Dadurch wird verhindert, dass Sie auf eine falsche Seite umgeleitet werden, und dann unwissentlich bspw. eine Geldtransaktion vornehmen. Das f√ºhrt aber dazu, dass das Zertifikat bei IP-Adressen nicht g√ºltig ist. Eine zu Demonstrationszwecken ver√∂ffentlichte Seite ohne https ist login.gbsl.website. Diese ist auch direkt √ºber den entsprechenden Server 188.34.157.212 zu finden. Wie schon in der Einleitung erw√§hnt, wird das niemand tun, weil man sich diese IP-Adresse nicht merken kann und sie mit der Zeit auch √§ndern k√∂nnte (z.B. wenn die Web-Site auf einen anderen Server gez√ºgelt wird). Ganz abgesehen davon, dass es auch nicht ausreichen w√ºrde, nur die IP-Adresse anzugeben, weil ja eben mehrere Web-Sites an einer bestimmten Adresse ¬´zuhause¬ª sein k√∂nnen - der Port m√ºsste ebenfalls bekannt sein. Ports Ein Port spezifiziert, welche Applikation auf einem Server die Anfrage behandeln soll. Auf dem Server 188.34.157.212 sind mehrere Web-Sites, und mit dem richtigen Port kann ausgew√§hlt werden, welche man m√∂chte: Port 80 * 188.34.157.212:80 login.gbsl.website Port 8080 188.34.157.212:8080 hacksql.gbsl.website Nun wird deutlich, dass es schwierig w√ºrde, sich auch noch alle Ports zu merken... * Port 80 ist der Standard-Port f√ºr Web-Sites mit dem http Protokoll und kann deshalb auch weggelassen werden Die Frage ist nun aber: Wie kann man 2 Milliarden Domain-Namen in einem Verzeichnis verwalten? W√ºrde man dies in Form eines Buches versuchen, so erg√§be das ein Buch mit ca. 4 Millionen Seiten (500 Adresseintr√§ge pro Seite). Hinzu kommt, dass diese Adressen laufend angepasst werden m√ºssten. Neue Adressen kommen hinzu, andere √§ndern oder verschwinden. Ganz zu schweigen von der schieren Unm√∂glichkeit, in einem solchen Buch eine gesuchte Adresse zu finden. In elektronischer Form ist dieses Problem nicht so gross. 2 Milliarden Adressen ergeben eine Datenmenge von ca. 2 Terrabyte, wenn man grossz√ºgig 1 KB (1000 Zeichen) pro Adresse annimmt. Eine Harddisk mit so viel Platz kriegt man f√ºr einige zehn Franken. Allerdings bleibt das Problem mit den dauernden √Ñnderungen. Eine zentrale Stelle, welche dieses Verzeichnis f√ºhren m√ºsste, w√§re wohl schnell √ºberfordert. Zudem best√ºnde auch ein grosses Risiko, dass ein Ausfall dieser zentralen Stelle das ganze Internet lahmlegen k√∂nnte. Schliesslich m√ºsste ein solches Verzeichnis auch auf einem sehr, sehr leistungsf√§higen Server betrieben werden, denn bei ca. 5 Milliarden Internetnutzern weltweit, die dauernd irgendwelche IP-Adressen brauchen, ist mit einer enormen Flut von Anfragen zu rechnen. Aus diesen Gr√ºnden haben die Erfinder des Domain-Name-Systems einen anderen Weg eingeschlagen: Das Verzeichnis ist erstens hierarchisch gegliedert und zweitens auf viele DNS-Server weltweit verteilt, wobei jeder Server nur die Adressen in seiner Zone kennt und f√ºr alle anderen Adressen auf weitere DNS-Server verweist. Untenstehendes Bild zeigt diese Hierarchie. Auf der obersten Ebene befinden sich die sogenannten Top-Level-Domains (TLD), z.B. ch, de, org oder com. Diese sind unter einer namenlosen Root-Domain zusammengefasst (Punkt im obersten K√§stchen auf dem Bild). Unterhalb einer TLD k√∂nnen dann beliebig viele Subdomains angeh√§ngt werden. Liest man nun von unten beginnend, die Namen der Subdomains auf einem Pfad bis zur Root-Domain, so entsteht ein vollst√§ndiger Domain-Name, z.B. en.wikipedia.org. @ Im Bild sind drei DNS-Server mit ihrer jeweiligen Zone (grau) eingezeichnet. Jeder DNS-Server verwaltet den Teil der Adressinformationen, der zu seiner Zone geh√∂rt. Die IP-Adresse zum Domain-Namen en.wikipedia.org, also 91.198.174.192, kennt dabei nur der unterste DNS-Server, denn er ist f√ºr die Zone, in welche dieser Domain-Name schliesslich geh√∂rt, zust√§ndig. Wird einer der √ºbergeordneten DNS-Server nach dieser IP-Adresse gefragt, so verweist er als Antwort nur auf den n√§chsttieferen DNS-Server, mit dem Hinweis, man solle dort weiterfragen. Das geht dann so weiter, bis der Frager beim untersten DNS-Server angelangt ist und die IP-Adresse als Antwort erh√§lt. Man kann diese Situation mit jemandem vergleichen, der sich in einer fremden Stadt √ºber mehrere Stationen zu seinem Hotel durchfragt. Selbsttest F√ºllen Sie das folgende Forms-Quizz aus. DNS-Hierarchie Zeichnen Sie eine Hierarchie (Baum), in welcher folgende Domain-Namen vorkommen (so wie auf der Abbildung im Arbeitsblatt): www.gbsl.ch learningview.org tel.search.ch erzbe-my.sharepoint.com outlook.office.com www.office.com Halten Sie Ihre L√∂sung auf einem Blatt Papier fest und f√ºgen Sie ein Foto davon unten ein: Wer verwaltet Domain-Namen?‚Äã Die hierarchische Gliederung des Domain-Name-Systems erlaubt es, die Verwaltung zu dezentralisieren. So gibt es f√ºr jede Top-Level-Domain eine Organisation, welche die Namen der darunter angesiedelten Subdomains verwaltet. F√ºr die TLD der Schweiz (ch) und Liechtenstein (li) ist die Stiftung SWITCH zust√§ndig. info Die SWITCH betreibt unter dem Link https://www.nic.ch/de/ einen Dienst zur √úberpr√ºfung, ob eine bestimmte Subdomain noch verf√ºgbar ist. Das Registrieren einer Subdomain delegiert die SWITCH an sogenannte Registrare, also an Unternehmen die Domain-Namen anbieten und verkaufen. Bekannte (und g√ºnstige) Registrare sind: Swizzonic.ch Gandi.net hostech J√§hrlich muss f√ºr eine .ch Domain zwischen 5 und 20 Franken gerechnet werden. Es gibt Web-Sites, √ºber welche man herausfinden kann, von wem ein bestimmter Domain-Name registriert wurde (Registrar) und wem dieser Name geh√∂rt (Registrant). Drei davon sind: https://www.hostpoint.ch/domains/whois.html (TLDs ch, li, ‚Ä¶) https://www.whois.com/whois/ (TLDs com, org, edu, website, ‚Ä¶) http://whois.nic.swiss/ (TLD swiss) GBSL Welcher Registrar hat die Domain gbsl.website gbsl.ch vergeben? IP Adressen herausfinden‚Äã Wenn Sie im Browser auf Ihrem Computer den Link https://www.instagram.com eingeben, so muss Ihr Computer herausfinden, welche IP-Adresse zum Domain-Name www.instagram.com geh√∂rt, damit er den Instagram-Server schliesslich kontaktieren kann. Den zust√§ndigen DNS-Server kann Ihr Computer, aber nur √ºber dessen eigene IP-Adresse erreichen. Wenn Ihr Computer das zum ersten Mal macht, so kennt er diese Adresse noch nicht. Deshalb wendet er sich an einen der 13 DNS-Server auf der obersten Ebene, den sogenannten Root-Servern, deren IP-Adressen jedem Computer bekannt sind üëâ https://root-servers.org/. Diese leiten Ihren Computer dann an die tiefer gelegenen DNS-Server weiter, bis schliesslich der richtige DNS-Server gefunden ist. Das passiert automatisch, ohne, dass Sie davon etwas merken. Man kann solche Anfragen aber auch von Hand machen. Dazu k√∂nnen Sie die Seite https://tools.keycdn.com/dig verwenden. Aufgabe 1 Wie findet man die IP-Adresse, welche zu einem Domain-Name geh√∂rt? (Googeln Sie nach einer Website, welche einen Dienst anbietet, der dies tut.) The Hacky Way √úbers Terminal Sie k√∂nnen auch in der Windows-Eingabeaufforderung oder auf dem Mac-Terminal einen Domain-Name zu einer IP-Adresse aufl√∂sen. Dazu brauchen Sie den Befehl nslookup. Beispiel: nslookup de.wikipedia.org Probieren Sie es aus, wenn Sie Lust auf mehr Hacker-Feeling haben. Finden Sie die IP-Adresse von login.gbsl.website heraus. Stimmt sie mit obiger IP-Adresse √ºberein? Und bei hacksql.gbsl.website? √úberlegen Sie sich, woher diese Unterschiede kommen k√∂nnten. Suchen Sie auch nach weiteren IP-Adressen, bspw. von www.instagram.com. Aufgabe 2 Untenstehende Abbildung zeigt eine verd√§chtige aussehende E-Mail. Sie enth√§lt einen Button, unter welchem angeblich Details eines Fotos angeschaut werden k√∂nnen. @ Der Button ist mit einem Link verbunden, welcher vom E-Mail-Programm am unteren Rand angezeigt wird, sobald man mit der Maus √ºber den Button f√§hrt (‚ö† nicht klicken!). Darin ist ein Domain-Namen enthalten, der links Unten im Browser angezeigt wird. Im obigen E-Mail ist das satellite-equipment.ru, ein Domain-Namen aus Russland. Finden Sie heraus, welche IP-Adresse hinter diesem Domain-Namen steht wem diese Domain geh√∂rt und in welchem Land die Besitzer:in zuhause ist? Hinweis Verwenden Sie üëâ https://tools.keycdn.com/dig und üëâ https://www.whois.com/whois/ danger Warnung: Auch hier gilt wieder: Nie auf solche Buttons klicken, denn in diesem Fall ist das Risiko hoch, dass Ihr Computer mit einem Virus infiziert wird. Aufgabe 3 Diese Aufgabe hat nicht direkt mit dem Domain-Name-System zu tun. Da hinter der E-Mail aus Aufgabe 2 aber mit Sicherheit jemand mit b√∂swilliger Absicht steckt, k√∂nnen wir noch √ºberpr√ºfen, ob der Link bereits als gef√§hrlich registriert ist. Solche √úberpr√ºfungen bietet z.B. die Seite https://sitecheck.sucuri.net/ an. √úberpr√ºfen Sie damit den Domain-Namen aus Aufgabe 2. Achtung: Geben Sie diese URL auschliesslich in das f√ºr die √úberpr√ºfung vorgesehene Feld ein! Aufgabe 4 Sie m√∂chten Ihr eigenes Unternehmen gr√ºnden, oder Sie m√∂chten eine Kampagne f√ºr ein Ihnen wichtiges Anliegen f√ºhren. In beiden F√§llen hilft einen Auftritt im Web, um m√∂glichst erfolgreich zu sein. Eine grosse Rolle spielt dabei, ob Sie einen einpr√§gsamen und packenden Domain-Name finden. Dieser muss selbstverst√§ndlich noch verf√ºgbar sein. √úberlegen Sie sich einen solchen Domain-Name und √ºberpr√ºfen Sie mit den oben beschriebenen Whois-Diensten, ob dieser Name noch frei ist. Aufgabe 5 Ein Gedankenspiel: Die Berner Kantonalbank (BEKB) bietet ihren Kunden Internet-Banking an. Diese ist erreichbar √ºber die Web-Site der BEKB, www.bekb.ch. Angenommen einem Angreifer gelingt es, Ihrem Computer eine beliebige, aber falsche IP-Adresse f√ºr den Domain-Name www.bekb.ch unterzuschieben, welche M√∂glichkeiten ergeben sich dem Angreifer dadurch? Hack-Angriff DNS-Hijacking‚Äã Ausschnitt: Start bis 2:51 Minuten. &amp;gt; Schlusspunkt‚Äã Sie haben nun das Domain-Name-System kennengelernt. Es ist eines der wichtigsten Teile des Internet. Sie haben gesehen, wie man zu einem Domain-Name die zugeh√∂rige IP-Adresse erh√§lt. Sie haben auch eine Idee von den Konsequenzen erhalten, wenn das Domain-Name-System nicht so funktioniert, wie erwartet, beispielsweise wegen einer Attacke durch Hacker (DNS-Hijacking). Solche Attacken k√∂nnen in unserer vernetzten Welt einen enormen wirtschaftlichen Schaden verursachen. Quelle: internetlivestats ‚Ü©","keywords":""},{"title":"Schichten und Adressen","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/Schichten-und-Adressen","content":"Schichten und Adressen Was bedeuten die Adressen auf den verschiedenen Schichten? Damit wir uns besser vorstellen k√∂nnen, was die einzelnen Adressen bedeuten, arbeiten wir mit folgender Analogie: Wir m√∂chten in einem bestimmten Gesch√§ft innerhalb eines Einkaufszentrums einkaufen gehen. Zuerst m√ºssen wir √ºberhaupt zum Einkaufszentrum gelangen. Daf√ºr sind die ersten beiden Schichten zust√§ndig: physikalische Schicht Vermittlungsschicht Zugang zum Einkaufzentrum: die ersten beiden Schichten@ Dass es √ºberhaupt Strassen gibt, die die Grundst√ºcke miteinander verbinden, verdanken wir der physikalischen Schicht. Auf dieser Schicht gibt es im Netzwerkmodell die MAC-Adressen. In unserer Analogie w√ºrde dies wohl den Grundst√ºcksnummer entsprechen, die im Grundbuch eingetragen sind ‚Äì allerdings sind diese Nummern (und Grundb√ºcher) weltweit nicht eindeutig, daher hinkt dieser Vergleich ein wenig. Auf der Vermittlungsschicht werden die IP-Adressen verwendet, um einen Host zu kontaktieren. In unserer Analogie w√ºrde dies der Postadresse (also Strassenname und Hausnummer) entsprechen. Es braucht also Strassen und Postadressen, damit wir das Einkaufszentrum finden. Sind wir jedoch bereits im Einkaufszentrum drin, m√ºssen wir noch das richtige Gesch√§ft aufst√∂bern. Nun dringen wir zu den n√§chsten zwei Schichten vor: Transportschicht Anwendungsschicht Ein bestimmtes Gesch√§ft im Einkaufszentrum: die beiden oberen Schichten@ Analog muss auch ein Computer wissen, an welches Programm er eine eingehende Anfrage weitergeben muss: Will der Client eine Webseite abrufen oder vielleicht eine DNS-Abfrage starten? F√ºr beides kann auf dem gleichen Server eine Software auf Anfragen warten. Die Programme, die solche Anfragen beantworten lauschen auf einem bestimmten Port und warten, bis sich ein Client meldet (Schicht 3: Transportschicht). Genau gleich warten die Angestellten in jedem Gesch√§ft des Einkaufszentrums auf Kunden. Auch die R√§ume, in denen die Gesch√§fte untergebracht sind sind nummeriert, √§hnlich wie die Ports im Netzwerkmodell. Die Port-Nummern entsprechen also den Raumnummern. Das einzige, was diese Angestellten dem Kunden anbieten k√∂nnen, ist die Dienstleistung, auf welche sich dieses Gesch√§ft spezialisiert hat. Dass der Ablauf f√ºr einen Dienstleistungsbezug in jedem Gesch√§ft anders abl√§uft, ist klar ‚Äì schliesslich muss sich im Coiffeurgesch√§ft auf einen Stuhl setzen und bekommt einen Mantel und den Hals gebunden, w√§hrend man in der B√§ckerei die gew√ºnschten Brote bestellt. Dies entspricht den Protokollen auf der Anwendungsschicht (DNS, HTTP, ...).","keywords":""},{"title":"Schicht 3: Transportschicht","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/Transportschicht","content":"Schicht 3: Transportschicht Die Transportschicht stellt sicher, dass der Transport korrekt abl√§uft. Die zu transportierenden Dinge oder Daten m√ºssen zerlegt werden, damit sie in Pakete passen. Die Pakete m√ºssen nummeriert werden, damit die Dinge/Daten am Zielort wieder richtig zusammengesetzt werden k√∂nnen. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª zerlegt der Hauswart die einzelnen Pulte. Er muss die Einzelteile der Pulte beschriften, damit sie in der Madretsch-Schule wieder richtig zusammengebaut werden k√∂nnen. Er verpackt die Einzelteile in Pakete und beschriftet diese mit der Post-Adresse. Schliesslich schickt er dem Hauswart der Madretsch-Schule einen Brief (Lieferschein), in welchem auflistet, wie viele Pakete und Pulte verschickt werden. Der Hauswart der Madretsch-Schule kontrolliert anhand des Lieferscheins, ob alle Pakete angekommen sind. Dann setzt er die Pulte aus den Einzelteilen gem√§ss Beschriftung wieder zusammen. M√∂glicherweise fehlt eine Schraube. In dem Fall schickt er dem GBSL-Hauswart einen Brief und bittet ihn, diese Schraube nachzuschicken. @ Internet‚Äã Die zwei wichtigsten Protokolle der Transportschicht sind TCP und UDP. Hier werden die Daten der Anwendungsschicht in TCP- oder UDP-Pakete verpackt. Dabei muss nat√ºrlich notiert werden, worum es sich bei den Daten der Anwendungsschicht handelt (HTTP, SMTP, ...). Das Protokoll der Anwendungsschicht wird in Form einer Nummer, Port genannt, im TCP- oder UDP-Paket gespeichert (siehe Begriff Ports). TCP Das Transmission Control Protocol garantiert die vollst√§ndige √úbermittlung von Daten. Damit dies klappt, m√ºssen sich die beiden Kommunikationsparteien zuerst verbinden, so dass die Absender:in einen allf√§lligen Datenverlust mitbekommt und das Paket nochmals schicken kann. Deswegen wird dieses Protokoll auch verbindungsorientiert genannt. In den allermeisten F√§llen verwenden wir bei unserer t√§glichen Arbeit im Internet das TCP-Protokoll. Es garantiert, dass keine Pakete verlorengehen oder fehlerhaft ankommen ‚Äì resp. falls Pakete nicht ankommen, dass diese nochmals angefordert werden. Dies ist in der Regel (z.B. beim √úbertragen von Webseiten oder E-Mails) sinnvoll und erw√ºnscht ‚Äì schliesslich m√∂chten wir nicht, dass einige Passagen auf Webseiten oder in E-Mails fehlen. UDP Das User Datagram Protocol hingegen braucht keine anf√§ngliche Verbindung der Kommunikationsparteien, da es eher einer Einweg-Kommunikation gleicht. Es wird deshalb auch verbindungslose Kommunikation genannt. Bei UDP findet keine Kontrolle statt, ob s√§mtliche Pakete (fehlerfrei) ankommen. Da die Empf√§nger:in keine Empfangsbest√§tigung schicken muss, werden bei diesem Protokoll weniger Daten √ºbertragen, was zu einer h√∂heren √úbertragungsgeschwindigkeit bei gleichzeitig tieferer Latenz f√ºhrt. Dies ist insbesondere dann hilfreich, wenn wir Audio- oder Videostreams konsumieren. Wir m√∂chten nicht lange auf ein verlorenes Paket warten, sondern nehmen eher ein kurzes Stocken in Kauf und sind froh, dass das Abspielen anschliessend direkt weitergeht. Weitere Informationen‚Äã","keywords":""},{"title":"Schichtenmodell","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/0a-Schichtenmodell","content":"Schichtenmodell Viele komplexe Vorg√§nge und Konstruktionen k√∂nnen mit Hilfe eines sogenannten Schichtenmodells in einfachere Einzelteile aufgespalten werden. Wir wollen die Vorteile des Schichtenmodell an Hand eines Beispiels versuchen zu verstehen: Beispiel &quot;Schule&quot;‚Äã Die Schule Madretsch feiert 100-j√§hriges Jubil√§um und braucht f√ºr ihr Fest zus√§tzliche Schulpulte. Wir m√∂chten helfen und einige Pulte schicken. Pulte zum Verschicken Wie funktioniert dies? Wer ist alles involviert? Details 1Details 2Details 3Details 4 @ Den Sch√ºler:innen ist egal, wie die Pulte in die Schule kommen. Sie freuen sich einfach √ºber die zus√§tzlichen Schulpulte. Vorteile des Schichtenmodells‚Äã Aufbau auf bestehendem‚Äã Ohne Probleme liesse sich das obenstehende Beispiel verwenden, um andere Inhalte zu transportieren. So k√∂nnten statt Pulten auch St√ºhle ‚Äì oder z.B. auch Esswaren transportiert werden. So funktioniert auch unser Postsystem: Bis auf wenige Ausnahmen transportiert die Post alles. Die √úbertragung von E-Mails und die einer Webseite unterscheidet sich nur in der obersten Schicht. Beide bauen auf den 3 identischen unteren Schichten auf Aufbau auf bestehendem Was k√∂nnte noch √úbertragen werden, wobei die unteren Schichten verwendet werden? Austauschbare Schichten‚Äã Die Schichten k√∂nnen ausgetauscht werden, solange sie ihre Aufgabe erf√ºllen und die Schnittstelle zwischen der dar√ºber- und der darunterliegenden Schicht erf√ºllt wird. Die Post kann auch mit dem Flugzeug oder dem Zug transportiert werden. Statt der Post kann man einen privaten Transportservice engagieren. Statt des Hauswartes k√∂nnen auch Sch√ºler:innen die Pulte auseinanderschrauben und wieder zusammensetzen. Schichten austauschen Suchen Sie in anderen Bereichen des Alltags Schichtenmodelle und finden Sie dort Austauschbare Schichten. SSR Andere Schichtenmondelle‚Äã Informatik‚Äã @ Andere Wissenschaften‚Äã Naturwissenschaften als Schichtenmodell @@ Verschiedene Naturwissenschaften bauen aufeinander auf und bilden so eine Art Schichtenmodell, um die ungeheure Komplexit√§t der Natur in den Griff zu bekommen. Somit kann man sich z.B. auf sehr verschiedenen Abstraktionsebenen mit dem Organismus ¬´Schwan¬ª auseinandersetzen (K√∂rperbau? Verhalten? DNA?) und kann die jeweils anderen Ebenen gr√∂sstenteils ausblenden.","keywords":""},{"title":"TCP/IP-Schichtenmodell","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/0b-TCP-IP-Schichtenmodell","content":"TCP/IP-Schichtenmodell Genauso wie die Pakete im Beispiel √ºbermittelt werden, geschieht dies auch am Computer ‚Äì hier sprechen wir von Datenpaketen. Die oberen Schichten verwenden Dienste der unteren Schichten. Jede Schicht verpackt die Daten neu, wenn sie von der dar√ºberliegenden Schicht √ºbergeben werden und entpackt sie wieder beim Empfangen bevor sie wieder an die dar√ºberliegende Schicht √ºbergeben werden Jede Schicht hat einen bestimmten Auftrag. Anwendungs¬≠schicht Web, E-Mail Daten Transport¬≠schicht √úber¬≠tragungs¬≠steuerungs¬≠protokoll ¬≠(TCP) TCP+Port Daten Vermittlungs¬≠schicht Internet¬≠protokoll ¬≠(IP) IP-Adresse TCP+Port Daten Physikalische Schicht WLAN, Ethernet MAC-Adresse IP-Adresse TCP+Port Daten Die Analogie‚Äã Wenn wir im obigen Beispiel die Schichten ansehen, dann ist jede Schicht f√ºr einen bestimmten Schritt zust√§ndig. @","keywords":""},{"title":"Schicht 4: Anwendungsschicht","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/Anwendungsschicht","content":"Schicht 4: Anwendungsschicht Auf der Anwendungsschicht geht es um Dinge, die den Benutzer des Systems interessieren. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª sind dies Pulte, welche von einem Schulhaus ins andere transportiert werden sollen. Wie genau Verpackung und Transport organisiert sind, wird auf dieser Ebene ausgeblendet. Hier geht es nur um den eigentlich Inhalt ‚Äì also darum, welche und wie viele Pulte verschickt werden sollen. @ Internet‚Äã Typische Anwendungen im Internet sind Webseiten, Web-Apps oder E-Mail. HTTP: Das Hypertext Transfer Protocol ist f√ºr die √úbertragung von Webseiten zust√§ndig. Genauer gesagt werden mit HTTP die Daten √ºbertragen, aus welchen Webseiten zusammengesetzt sind, also HTML-Dateien, Bilder, usw. SMTP: Das Simple Mail Transfer Protocol wird eingesetzt, um E-Mails zu versenden. Das Protokoll regelt den Transport der E-Mail von dem/r Absender*in bis zum E-Mail-Server auf Empf√§ngerseite. IMAP: Das Internet Message Access Protocol wird zum Abrufen und Organisieren des eigenen Postfachs verwendet ‚Äì sprich, um mit dem E-Mail-Server zu kommunizieren, der die eigene E-Mail-Box gespeichert hat. info Sie sehen, dass zum Senden und Empfangen von E-Mails zwei verschiedene Protokolle zum Einsatz kommen, was auf den ersten Blick erstaunen mag. Nat√ºrlich kommen die E-Mails beim Versenden √ºber SMTP auch ohne IMAP an ‚Äì aber nicht bei dem/der Empf√§nger:in, sondern nur in dessen/deren Postfach. Um dieses abzurufen ist das zweite Protokoll (IMAP) n√∂tig. Weitere Informationen‚Äã","keywords":""},{"title":"Schicht 1: Physikalische Schicht (Netzzugangsschicht)","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/Physikalische-Schicht","content":"Schicht 1: Physikalische Schicht (Netzzugangsschicht) Auf der physikalischen Schicht geht es um das konkrete Transportmittel (Velokurier, Lastwagen, ... resp. WLAN, LAN, Mobilfunk, ...). Auch hier werden Adressen ben√∂tigt, es sind weltweit eindeutige Adressen, die fix an das Ger√§t gekn√ºpft sind. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª m√ºssen die S√§cke, die die vielen Pakete enthalten, nun endlich transportiert werden. Dies √ºbernehmen Speditionsangestellte, die die S√§cke mit Hilfe von Lastwagen an den n√§chsten Zielort (z.B. in ein Paketzentrum oder an die Lieferadresse) bringen. Die Spedition k√ºmmert sich nur um den aktuellen Transportabschnitt. @ Internet‚Äã Die physikalische Schicht besteht aus der Hardware, also den Kabeln und Ger√§ten (mit ihren physikalischen Adressen). Die physikalische Adresse wird MAC-Adresse genannt (siehe Begriff MAC-Adressen). Wieso braucht es zwei Adressen, logische Adressen (Vermittlungsschicht) und physikalische dieser Schicht? Innerhalb eines lokalen Netzwerks werden die physikalischen Adressen verwendet. Da es aber keine M√∂glichkeit gibt, alle physikalischen Adressen auf der Welt zu kennen und zu wissen, wie man diese Ger√§te erreichen kann, braucht es logische Adressen, die zu einem bestimmten Netzwerk geh√∂ren. Nur so ist es m√∂glich, mit dem gleichen Ger√§t am Morgen zu Hause und sp√§ter an der Schule online zu sein. Weitere Informationen‚Äã","keywords":""},{"title":"Schicht 2: Vermittlungsschicht","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Schichtenmodell/Vermittlungsschicht","content":"Schicht 2: Vermittlungsschicht In der Vermittlungsschicht brauchen wir eine Adresse, an die die (Daten-)Pakete gesendet werden k√∂nnen. Es handelt sich um eine logische Adresse aus dem Netzwerk, in dem sich das Ger√§t gerade befindet. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª ist aus den beiden oberen Schichten alles f√ºr den Transport vorbereitet. Der Hauswart bringt aber die Pulte nicht selbst ins andere Schulhaus ‚Äì er muss sich gar nicht um die Zustellung k√ºmmern. Die Vermittlungsschicht wird hier von der Post √ºbernommen. Anhand der Adresse auf den Paketen weiss die Post, wohin die einzelnen Pakete verschickt werden m√ºssen. √úblicherweise k√∂nnen die Pakete nicht direkt, sondern via ein Paketzentrum zugestellt werden. Welche Route die Pakete nehmen ‚Äì also via welches Paketzentrum die Pakete verschickt werden ‚Äì darum k√ºmmert sich die Post. Die Pakete werden so in S√§cke verpackt, dass sie mit anderen Paketen zusammen im richtigen Paketzentrum landen. Dort werden sie neu sortiert und f√ºr den Weitertransport vorbereitet. Die Post hat keine Ahnung, welche Ware in wie viele Pakete aufgeteilt transportiert wird, sie weiss nur von wo nach wo welches Paket transportiert werden muss. @ Internet‚Äã Das wichtigste Protokoll der Vermittlungsschicht ist das Internet Protokoll (IP). Damit Computer in einem Netzwerk Daten austauschen k√∂nnen, brauchen sie eine Adresse (analog zur Postadresse in unserem Beispiel oben). Die Adressen der Vermittlungsschicht werden IP-Adressen (siehe Begriff IP-Adressen) genannt. Jedes vernetzte Ger√§t besitzt eine IP-Adresse, damit es mit anderen Ger√§ten kommunizieren kann. Weitere Informationen‚Äã","keywords":""},{"title":"‚≠êÔ∏è DNS Attacken","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Sicherheit/DNS-Attacken","content":"‚≠êÔ∏è DNS Attacken 1 Cache Poisioning Was ist DNS-Hijacking und wie funktioniert es? Beschreiben Sie auch die drei verschiedenen Varianten. Bemerkt eine Benutzer:in etwas vom Angriff? Wie kann man dagegen sch√ºtzen? ‚≠êÔ∏è ARP and DNS Spoofing‚Äã ARP und DNS Spoofing Wie verl√§uft eine ARP/DNS-Spoofing Attacke? Quelle üëâ https://youtu.be/lggWxsHYK2o ‚Ü©","keywords":""},{"title":"Routing im Internet","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Routing/routing-internet","content":"Routing im Internet Wie Pakete eine Postadresse haben, brauchen auch Datenpakete eine Adresse, damit sie korrekt zugestellt werden k√∂nnen. Diese Adressen nennt man IP-Adressen, wobei IP f√ºr Internet Protocol steht. Adressierung‚Äã Normalerweise erh√§lt jedes Ger√§t beim Beitritt zu einem Rechnernetz eine IP-Adresse zugewiesen. Die Adresse geh√∂rt zum entsprechenden Netz und erlaubt die Kommunikation mit allen Ger√§ten die sich ebenfalls im selben Netz befinden. Deshalb erh√§lt Ihr Ger√§t hier am GBSL eine andere Adresse als bei Ihnen zu Hause. Aufbau‚Äã Eine IP-Adresse (genauer, IPv4 Adresse) setzt sich aus 4 Zahlen zu je 8 Bit zusammen. Diese 4 Zahlen werden im Dezimalsystem notiert und mit Punkten verbunden. 194.124.132.216 Es gibt also insgesamt 232=4‚Ä≤294‚Ä≤967‚Ä≤2962^{32} = 4'294'967'296232=4‚Ä≤294‚Ä≤967‚Ä≤296 verschiedene IP-Adressen. Auf den ersten Blick scheint die Anzahl sehr gross zu sein. Durch die Vielzahl an internetf√§higen Ger√§ten weltweit sind ein Grossteil der Adressen inzwischen vergeben. Deshalb gibt es eine neuere IP-Version 6, die aber den alten Standard noch nicht ersetzt hat. Mehr dazu hier: IPv6. Meine IP‚Äã Jedes Ger√§t das mit dem Internet verbunden ist, braucht eine IP-Adresse. IP-Adresse finden Finden und notieren Sie die IP-Adresse Ihres Computers Ihres Smartphones Vergleichen Sie die beiden IP-Adressen. Was stellen Sie fest? Wie finde ich die IP-Adresse? Sie wissen nicht, wie man die IP-Adresse des eigenen Ger√§ts findet? Es gibt zahlreiche Anleitungen: Googeln Sie z.B. IP-Adresse finden Android oder IP-Adresse finden Windows 11 oder etwas √Ñhnliches, das auf Ihr Ger√§t resp. Ihr Betriebssystem abgestimmt ist. üè† IP-Adresse finden Finden und notieren Sie die IP-Adresse Ihres Computers Ihres Smartphones bei Ihnen zu Hause! Ping‚Äã Beim Ping-Befehl handelt es sich um ein Netzwerkdiagnose-Tool, womit man die Daten√ºbertragung zu einem anderen Ger√§t √ºberpr√ºfen kann. Dabei sendet man ein Signal an ein entferntes Ger√§t. Dieses Ger√§t sollte dann ein Signal zur√ºcksenden. In der Kommandozeile ping 194.124.132.216 Ping ausf√ºhren F√ºhren Sie einen Ping mit folgenden IP-Adressen aus: 194.124.132.216 8.8.8.8 185.237.144.226 194.150.245.142 Was bedeutet die Ausgabe? Wieso gibt es Unterschiede? Routing f√ºr Datenpakete‚Äã Routing-Algorithmen sorgen daf√ºr, dass Datenpakete ihren Weg durch das Internet finden. Dabei kann es sein, dass mehrere Pakete mit dem selben Ziel unterschiedliche Routen nehmen. Netzwerkrouting@ Router im Schichtenmodell‚Äã Der Router ist das Paketverteilzentrum und verbindet mehrere Netzwerke miteinander. Er besitzt also mindestens zwei Netzwerkkarten und somit auch mindestens zwei IP-Adressen um sich mit den einzelnen Netzwerken zu verbinden. Sie m√ºssen die IP-Pakete auspacken, damit diese gem√§ss der IP-Adresse weitergeleitet werden k√∂nnen. Dabei bedienen sich Router spezieller Tabellen, welche angeben, wohin ein Paket mit einer bestimmten IP-Adresse hingeleitet werden soll. @ note Damit ein Router ein IP-Paket weiterleiten kann, braucht er folgende, im Paket enthaltene Informationen: IP-Adresse Sender IP-Adresse Empf√§nger Routen verfolgen‚Äã Der Befehl traceroute (macOS) resp. tracert (Windows) kann diese Route nachverfolgt werden. Dabei werden die Zwischenstationen ‚Äì also dort wo das Paket entpackt und gem√§ss Ziel-IP-Adresse weitergeleitet wird ‚Äì angezeigt. traceroute √ñffnen Sie eine Eingabeaufforderung (cmd) und geben Sie nacheinander die folgenden drei Befehl ein: In der Kommandozeile (cmd) tracert office.com tracert www.google.ch tracert www.gbsl.ch √ñffnen Sie eine Eingabeaufforderung (terminal) und geben Sie nacheinander die folgenden drei Befehl ein: In der Kommandozeile (terminal) traceroute office.com traceroute www.google.ch traceroute www.gbsl.ch Beobachten Sie den Output. Erkennen Sie Gemeinsamkeiten oder irgendeine spezielle Zwischenstation? Standardgateway‚Äã F√ºr die Kommunikation mit Ger√§ten ausserhalb des eigenen Netzwerks m√ºssen die Internetpakete zum n√§chsten Verteilzentrum geschickt werden. In der Analogie zum √ñffentlichen Verkehr ist dies die n√§chstgelegene Haltestelle, die Sie zum Hauptbahnhof bringt: wollen Sie an einen Ort ausserhalb ihrer Stadt, so gehen Sie zum Hauptbahnhof, wo Sie in die richtige Richtung weitergeleitet werden. Dieser Weg zum Hauptbahnhof wird bei Netzwerkf√§higen Ger√§ten Standardgateway genannt. Standardgateway ihres Laptops‚Äã In der Kommandozeile (cmd) eingeben ipconfig In der Koommandozeile (terminal) eingeben netstat -nr info Zu Hause haben Sie als Standardgateway die IP-Adresse Ihres Routers/Modems eingetragen ‚Äì also dem Ger√§t, das Sie von Ihrem Internet-Anbieter erhalten, um Zugang zum Internet zu erhalten. Aufgabe Gehen Sie auf die Webseite üëâ https://whatsmyip.org/. Was wird angezeigt? SSR ‚≠êÔ∏è MAC-Adresse‚Äã Die physikalische Adresse, auch Hardware-Adresse eines Computers (oder genauer gesagt die Adresse seiner Netzwerkschnittstelle) ‚Äì nennt man MAC-Adresse (MAC steht f√ºr Media Access Control und hat entsprechen nichts mit Apple zu tun). Sie besteht aus 48 Bit oder 6 Bytes, so dass sie √ºblicherweise als Hexadezimalzahl (mit 161616 eindeutigen Zeichen) mit 6√ó2 Stellen angegeben wird, beispielsweise: 48:2C:6A:1E:59:3D. Jede MAC-Adresse muss weltweit eindeutig sein, damit die Zustellung von Paketen, und somit auch die Transportsicherheit, garantiert werden kann. Die MAC-Adresse wird bei der Herstellung der Netzwerkkarte fix vergeben und kann nicht mehr ver√§ndert werden. info Ihre Pers√∂nlichkeit √§ndern Sie bei einem Umzug nicht, Ihre Wohnadresse aber schon. Gleiches gilt f√ºr die MAC-Adresse und IP-Adresse eines Ger√§ts: Die MAC-Adresse bleibt gleich, die im Netzwerk sichtbare IP-Adresse √§ndert jedoch. Wozu braucht es die MAC-Adresse?‚Äã Die MAC-Adresse erlaubt die direkte Kommunikation zwischen zwei Ger√§ten im selben Netzwerk, ohne dabei den Router zu beauftragen, ihre Pakete weiterzuleiten. Da diese direkte Kommunikation effizienter ist, merkt sich bspw. der WLAN-Accesspoint* bei Ihnen zuhause, welche IP-Adresse zu welcher MAC-Adresse geh√∂rt. So kann ein Paket direkt zu Ihrem Ger√§t geschickt werden, ohne jedes Mal den richtigen Empf√§nger im Netzwerk ausfindig zu machen. * oft sind WLAN-Accesspoint und Router im selben Ger√§t kombiniert. Doch im Innern sind es zwei Ger√§te, ein Router und ein WLAN-Accesspoint. ¬´Highspeed-Routen¬ª‚Äã Schweiz‚Äã Auf der untenstehenden Karte erkennt man die schnellsten Leitungen von Switch. Diese Organisation verbindet die Universit√§ten und Forschungsinstitute miteinander und mit dem Ausland. SWITCH-LAN@ Andere Provider besitzen ebenfalls schnelle Leitungen zwischen den St√§dten und ins Ausland. z.B. wurden bestehenden Gas-Leitungen mit schnellen Glasfaser-Kabeln versehen. GASCOM@ Interkontinental‚Äã Bei der Verbindung von Kontinenten hatte man schon vor dem Internet-Zeitalter Unterseekabel verlegt. @ Heute laufen zahlreiche ¬´Highspeed-Routen¬ª √ºber den Grund der Meere. Unterseekabel Wie kommt ein Datenpaket von Biel in die USA? nach Madagaskar? https://www.submarinecablemap.com/","keywords":""},{"title":"Algorithmus","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Algorithmus","content":"Algorithmus Definition‚Äã ¬´Ein Algorithmus beschreibt die Methode, mit der eine Aufgabe gel√∂st wird. Ein Algorithmus besteht aus einer Folge von Schritten, deren korrekte Abarbeitung die gestellte Aufgabe l√∂st. Die Abarbeitung oder den Vorgang selbst bezeichnet man als Proze√ü.¬ª Les Goldschlager/Andrew Lister: Informatik, 1984 Die folgende Tabelle zeigt ein paar Beispiele von Prozessen mit zugeh√∂rigem Algorithmus: Prozess\tAlgorithmus\tTypischer SchrittKranich falten\tFaltanleitung\tPapier entlang einer Linie falten Zimtsterne backen\tRezept\tEier schaumig schlagen Musikst√ºck spielen\tNotenblatt\tEin c' spielen Spezielle Sprachen‚Äã Algorithmen werden oft in einer Fachsprache oder in einer symbolischen Sprache verfasst. Damit lassen sich die einzelnen Schritte eines Algorithmus oft klarer und k√ºrzer ausdr√ºcken als in der Alltagssprache. Beispiele f√ºr solche Sprachen sind: Die Notenschrift ist eine symbolische Sprache, in welcher die zu spielende Musik kompakt festgehalten werden kann. Rezepte sind normalerweise in einer Fachsprache verfasst, welche Fachbegriffe wie ¬´Schnee¬ª, ¬´schlagen¬ª oder ¬´Glasieren¬ª und Mengenangaben wie ¬´TL¬ª oder ¬´Prise¬ª enth√§lt. Bauanleitungen, z.B. IKEA-Anleitungen zum Zusammenbau von M√∂beln sind in einer nonverbalen Zeichensprache verfasst. Schritt‚Äã Wie die einzelnen Schritte eines Algorithmus lauten, h√§ngt stark vom Gebiet ab, f√ºr welches der Algorithmus verwendet wird. Die Einzelschritte beim Spielen eines Musikst√ºcks unterscheiden sich stark von den Schritten beim Kochen. Eine wichtige Eigenschaft von Algorithmen ist die Ausf√ºhrbarkeit. Sie bedeutet, dass jeder einzelne Schritt eines Algorithmus klar definiert sein muss und ausgef√ºhrt werden kann. Da eine klare Definition in Alltagssprache oft umfangreich ist, kommt hier die Fachsprache oder die symbolische Sprache zum Zug. Struktur‚Äã Ein Algorithmus definiert, in welcher Reihenfolge die einzelnen Schritte nacheinander abgearbeitet werden. Die Beschreibung dieser Reihenfolge ist die Struktur des Algorithmus. W√§hrend die Einzelschritte je nach Anwendungsgebiet unterschiedlich sind, sind die Strukturen (beim Programmieren spricht man von Kontrollstrukturen) von Algorithmen universell. Folgende Strukturen k√∂nnen unterschieden werden: Sequenz üë£: eine Folge von Schritten/Anweisungen, die nacheinander abgearbeitet werden. Wiederholung üîÅ: Einer oder mehrere Schritte werden eine bestimmte Anzahl mal wiederholt. Bedingte Ausf√ºhrung ‚ëÇ: Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. Unterprogramm üè∑: Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, kann der Name angegeben werden. Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Endlichkeit‚Äã Die Endlichkeit ist eine weitere wichtige Eingenschaft von Algorithmen. Sie bedeutet, dass ein Algorithmus immer nach endlich vielen Einzelschritten beendet wird. Ausserdem darf ein Algorithmus nur endlich viel Platz beanspruchen (z.B. Speicherplatz im Computer). ‚≠êÔ∏è Al-Chwarizmi‚Äã Abu Dscha øfar Muhammad ibn Musa al-ChwƒÅrizmƒ´ war ein Mathematiker und Universalgelehrter. Er stammte zwar aus dem iranischen Choresmien, verbrachte jedoch den gr√∂√üten Teil seines Lebens in Bagdad und war dort im ¬´Haus der Weisheit¬ª, einer Art Akademie, t√§tig. Al-Chwarizmi gilt als einer der bedeutendsten Mathematiker, da er sich mit Algebra als elementarer Untersuchungsform besch√§ftigte.1 In der lateinischen √úbersetzung eines Werkes von Al-Chwarizmi wurde sein Name als ¬´algorismus¬ª geschrieben. Davon leitet sich der heutige Begriff ¬´Algorithmus¬ª ab.2 Abbildung von Al-Chwarizmi auf einer sowjetischen Briefmarke@ Quelle: Wikipedia: al-Chwarizmi ‚Ü© Quelle: Wiktionary: Algorithmus ‚Ü©","keywords":""},{"title":"Bauanleitung","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Bauanleitung","content":"Bauanleitung Eine Bauanleitung ist ein Algorithmus, welche das Zusammenbauen von Einzelteilen zu einem fertigen M√∂bel beschreibt und ist oft in einer Bildschrift verfasst. Schritt‚Äã Die Reihenfolge der einzelnen (Vorbereitungs-) Schritte sind durch eine Nummerierung gegeben. Wiederholung‚Äã Muss ein Schritt wiederholt ausgef√ºhrt werden, z.B. das Eindrehen von Schrauben an jedem Bein eines Banks, so wird dies nur einmal im Detail beschrieben. Bedingte Ausf√ºhrung‚Äã Fehlt ein St√ºck oder ist die Anleitung unklar, so soll der Kundendienst kontaktiert werden (oben rechts...). Ikea Bauanleitung@","keywords":""},{"title":"Faltanleitung","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Faltanleitung","content":"Faltanleitung Eine Faltanleitung ist ein Beispiel f√ºr einen Algorithmus. Das japanische Wort Origami bezeichnet die Kunst des Papierfaltens. Schritt‚Äã In einer Faltanleitung kommen nur wenige Arten von Schritten vor: Falten: Durch eine gestrichelte Linie wird angedeutet, wo gefaltet werden soll. Der Pfeil gibt an, in welche Richtung gefaltet wird. Falz machen: Durch Hin- und Zur√ºckfalten wird ein Falz erzeugt. Dies wird durch einen Pfeil angedeutet, der hin und zur√ºck zeigt. Drehen: Durch einen Pfeil zwischen zwei Abbildungen wird angezeigt, dass das Papier entsprechend umgedreht werden soll. Beispiele‚Äã Schachtel‚Äã Eine einfache Faltanleitung f√ºr eine Schachtel. Origami Box@ Kranich‚Äã Der Kranich ist das klassische Motiv im japanischen Origami. Origami Kranich@","keywords":""},{"title":"Flussdiagramm","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Flussdiagramm","content":"Flussdiagramm Ein Flussdiagramm (engl. flow chart) oder Programmablaufplan ist eine grafische Darstellungsform eines Algorithmus. Es besteht aus Elementen, welche einzelne Schritte des Algorithmus darstellen. Pfeile, welche die Elemente verbinden, geben die Reihenfolge an, in welcher die Schritte ausgef√ºhrt werden m√ºssen. Das Flussdiagramm unten links beschreibt, wie Spaghetti gekocht werden. Das Flussdiagramm unten rechts beschreibt, wie Spaghetti Napoletana gekocht werden. Dabei wird der Spaghetti-Algorithmus mit einem Aufruf (rot) wiederverwendet. Flussdiagramm@","keywords":""},{"title":"WIFI Sniffing","type":0,"sectionRef":"#","url":"/25h/Netzwerke/Sicherheit/WIFI-Sniffing","content":"WIFI Sniffing Eine g√§ngige Attacke um an Login-Daten zu gelangen, ist das sogenannte WIFI-Sniffing. Hier werden zwei Dinge ausgenutzt: Die SSID (Service Set IDentifier, also der Name eines WLAN's) eines Netzwerks kann frei gew√§hlt werden. Es ist auch m√∂glich, dass mehrere WLAN-Netzwerke denselben Namen haben. F√ºr einen Endbenutzer ist es praktisch nicht m√∂glich die unterschiedlichen Netzwerke voneinander zu unterscheiden. Die verschickten Datenpakete werden √ºber die Luft √ºbertragen - die verschickten Pakete k√∂nnen nicht nur vom WLAN-Accesspoint empfangen werden, sondern auch von anderen, speziell konfigurierte WLAN-Antennen. HTTP Protokoll 1‚Äã Das Hypertext Transfer Protocol (HTTP, englisch f√ºr Hypertext-√úbertragungsprotokoll) ist ein Protokoll zur √úbertragung von Daten auf der Anwendungsschicht √ºber ein Rechnernetz. Es wird haupts√§chlich eingesetzt, um Webseiten aus dem World Wide Web (WWW) in einen Webbrowser zu laden. Die Kommunikationseinheiten in HTTP zwischen Client und Server werden als Nachrichten bezeichnet, von denen es zwei unterschiedliche Arten gibt: die Anfrage (englisch Request) vom Client an den Server und die Antwort (englisch Response) als Reaktion darauf vom Server zum Client. Jede Nachricht besteht dabei aus zwei Teilen, dem Nachrichtenkopf (englisch Message Header, kurz: Header oder auch HTTP-Header genannt) und dem Nachrichtenrumpf (englisch Message Body, kurz: Body). Der Nachrichtenkopf enth√§lt Informationen √ºber den Nachrichtenrumpf wie etwa verwendete Codierungen oder den Inhaltstyp, damit dieser vom Empf√§nger korrekt interpretiert werden kann. Der Nachrichtenrumpf enth√§lt schliesslich die Nutzdaten. Wenn in einem Web Browser der Link zur URL http://www.example.net/infotext.html angeklickt wird, so wird an den Server mit dem Hostnamen www.example.net die Anfrage gerichtet, die Ressource /infotext.html zur√ºckzusenden. Der Name www.example.net wird dabei nat√ºrlich zuerst √ºber das DNS-Protokoll in eine IP-Adresse √ºbersetzt. Zur √úbertragung wird √ºber TCP eine HTTP-GET-Anforderung an den Server gesendet. Anfragemethoden Es gibt verschiedene HTTP Anfragemethoden, die bekannteste ist die GET Anfrage, welche eine Ressource anfordert. Sobald zus√§tzliche Daten an den Server √ºbertragen werden m√ºssen, z.B. um sich anzumelden, wird eine POST Anfrage verschickt, in welcher Formulardaten wie z.B. Benutzername und Passwort enthalten sind. HTTPS 2‚Äã Ohne Verschl√ºsselung sind Daten, die √ºber das Internet √ºbertragen werden, f√ºr jeden, der Zugang zum entsprechenden Netz hat, als Klartext lesbar. Das Hypertext Transfer Protocol Secure (HTTPS, englisch f√ºr ‚Äûsicheres Hypertext-√úbertragungsprotokoll‚Äú) ist ein Syntaktisch identisches Protokoll wie HTTP, nur dass die Daten zus√§tzlich Verschl√ºsselt werden. Mit der zunehmenden Verbreitung von offenen (d. h. unverschl√ºsselten) WLANs nimmt die Bedeutung von HTTPS zu, weil damit die Inhalte unabh√§ngig vom Netz verschl√ºsselt werden k√∂nnen. WIFI-Sniffing: Angriff‚Äã Ein Angreifer erzeugt ein √∂ffentliches WLAN-Netzwerk mit derselben SSID wie ein anderes bekanntes Netzwerk, oder setzt sich in ein Restaurant mit einem offenen WLAN. Verbindet sich jemand mit diesem Netzwerk, kann der Angreifer den Netzwerkverkehr √ºberwachen, indem alle verschickten Pakete decodiert werden (WIFI Sniffing). Das Decodieren funktioniert allerdings nur dann, wenn es sich um ein √∂ffentliches WLAN ohne Passwort handelt. Viele Computer und Smartphones sind so konfiguriert, dass sie automatisch eine Verbindung mit offenen WLANs aufbauen, um der Benutzerschaft maximalen Komfort zu bieten. Besucht ein Benutzer:innen dieses WLANs nun eine Website, kann der Angreifer die Anfrage mitlesen und so bspw. Benutzerstatistiken erheben. Gef√§hrlicher wird es, wenn auf einer Website, die mit dem HTTP Protokoll aufgerufen wird, Passw√∂rter eingegeben werden. Dann k√∂nnen die √ºbermittelten Passw√∂rter n√§mlich mitgelesen werden. Wieso funktioniert die Decodierung der Pakete bei Passwortgesch√ºtzte WIFIs nicht? Passwortgesch√ºtzte WIFIs verschl√ºsseln den Inhalt der √ºbertragenen Datenpakete zwischen Ihrem Ger√§t und dem Accesspoint. Die Decodierung kann nur vom Accesspoint vorgenommen werden. Schutz Wie k√∂nnen Sie sich vor WIFI Sniffing sch√ºtzen? ‚≠êÔ∏è Bin√§rdaten als Hexadezimalzahlen Bin√§rdaten als Hexadezimal Zahl‚Äã Bin√§rdaten sind f√ºr Menschen relativ umst√§ndlich zu merken und einzuordnen, da so viele Stellen notwendig sind. Abhilfe schafft das Hexadezimalsystem, welches statt Zwei (bin√§r) oder Zehn (dezimal) Sechzehn eindeutige Zeichen besitzt: 0 1 2 3 4 5 6 7 8 9 A B C D E F Sehr praktisch: mit einem Hexadezimalzeichen k√∂nnen alle Zust√§nde beschrieben werden, f√ºr die sonst 4 bits notwendig sind. Dezimal\tHexadezimal\tBin√§r0\t0\t0000 1\t1\t0001 2\t2\t0010 3\t3\t0011 4\t4\t0100 5\t5\t0101 6\t6\t0110 7\t7\t0111 8\t8\t1000 9\t9\t1001 10\tA\t1010 11\tB\t1011 12\tC\t1100 13\tD\t1101 14\tE\t1110 15\tF\t1111 Konvention 1 Byte = 2 Hexadezimalzahlen‚Äã So lassen sich Bin√§rzahlen, aufgeteilt in Bytes (=8 bits) durch zwei Hexadezimal Zahlen beschreiben: 1210=~0000 11002=~0C161910=~0001 00112=~13164210=~0010 10102=~2A1618910=~1011 11012=~BD16\\ \\begin{aligned} 12_{10} \\quad\\tilde{=}\\quad 0000 \\; 1100_{2} \\quad &amp; \\tilde{=}\\quad 0C_{16} \\\\ 19_{10} \\quad\\tilde{=}\\quad 0001 \\; 0011_{2} \\quad &amp; \\tilde{=}\\quad 13_{16} \\\\ 42_{10} \\quad\\tilde{=}\\quad 0010 \\; 1010_{2} \\quad &amp; \\tilde{=}\\quad 2A_{16} \\\\ 189_{10} \\quad\\tilde{=}\\quad 1011 \\; 1101_{2} \\quad &amp; \\tilde{=}\\quad BD_{16} \\end{aligned}¬†1210‚Äã=~000011002‚Äã1910‚Äã=~000100112‚Äã4210‚Äã=~001010102‚Äã18910‚Äã=~101111012‚Äã‚Äã=~0C16‚Äã=~1316‚Äã=~2A16‚Äã=~BD16‚Äã‚Äã Quelle: Wikipedia: HTTP ‚Ü© Quelle: Wikipedia: HTTPS ‚Ü©","keywords":""},{"title":"Notenblatt","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Notenblatt","content":"Notenblatt Ein Notenblatt ist ein Algorithmus, welches den Prozess ¬´Musikst√ºck spielen¬ª beschreibt. Notenbl√§tter sind in einer symbolischen Sprache, der Notenschrift, verfasst. Schritt‚Äã Ein einzelner Schritt in der Notenschrift ist eine Note oder eine Pause. Im folgenden beschreiben die ersten drei √ºbereinanderliegenden Noten ¬´Spiele einen Akkord bestehend aus einem kleinen d, einem eingestrichenen fis' und einem zweigestrichenen e'' von einem Achtel L√§nge¬ª. Erste Zeile eines Notenblatts Wiederholung‚Äã In der Notenschrift wird durch Wiederholungszeichen (rot) angezeigt, dass die dazwischenliegenden Takte wiederholt werden sollen: Wiederholungszeichen Eine andere Variante ist die Anweisung D.S. (Dal Segno, ¬´vom Zeichen¬ª). Gemeint ist, dass das St√ºck von einem bezeichneten Punkt an (meist mit dem Zeichen ‚ïë:) wiederholt wird. Bedingte Ausf√ºhrung‚Äã Einer oder mehrere Schritte werden manchmal nur unter bestimmten Bedingungen ausgef√ºhrt. Auf einem Notenblatt wird mit sogenannten Voltenklammern (rot) gekennzeichnet, dass ein Takt nur im ersten oder zweiten Durchgang gespielt werden soll. In der folgenden Zeile wird also der dritte Takt nur im ersten und der vierte Takt nur im zweiten Durchgang gespielt: Voltenklammern So t√∂nt der erste Durchgang: So t√∂nt der zweite Durchgang: Parameter‚Äã Durch die Noten alleine sind die L√§nge und die H√∂he nur relativ festgelegt. Erst durch die Tempoangabe ‚ô©=180 wird festgelegt, dass pro Minute 180 Viertelnoten gespielt werden sollen. Mit Violin- und Bassschl√ºssel wird festgelegt, auf welcher Notenlinie das g' bzw. das f liegt und somit in welcher H√∂he die Noten gespielt werden sollen. Tempoangabe und Notenschl√ºssel Tempoangabe und Notenschl√ºssel sind Parameter eines Notenblatts, deren √Ñnderung die Bedeutung aller Noten und somit das gespielte St√ºck √§ndert. Beispiel‚Äã Auf der Website musescore.com sind Notenbl√§tter f√ºr viele Musikst√ºcke verf√ºgbar und k√∂nnen dort auch gleich abgespielt werden. Hier sind Ausschnitte aus folgenden St√ºcken verwendet worden: Super Mario Bros: Main Theme Jingle Bells","keywords":""},{"title":"RoboZZle","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Uebungen/robozzle","content":"RoboZZle Aufgabe 1 Puzzle 1 Aufgabe 2 Puzzle 2 Aufgabe 3 Puzzle 3 Aufgabe 4 Puzzle 4 Aufgabe 5 Puzzle 5 Aufgabe 6. Puzzle 6 Aufgabe 7. Puzzle 7 Aufgabe 8. Puzzle 8 Aufgabe 9. Puzzle 9 ‚≠êÔ∏è Aufgabe 10. Puzzle 10","keywords":""},{"title":"Python Befehle","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Python/Befehle","content":"Python Befehle Alert‚Äã Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') Break‚Äã Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus.","keywords":""},{"title":"Random Walk","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Python/random-walk","content":"Random Walk Die Random-Walk-Theorie wurde zun√§chst von der franz√∂sischen Mathematikerin Louise Bachelier entworfen, die glaubte, dass Aktienkursentwicklungen wie die Schritte eines Betrunkenen seien: unberechenbar. 1 @ Betrachten wir den vermeintlich zuf√§lligen Weg einer Ameise, die jeweils nach einer unbekannten Anzahl Schritten die Richtung wechselt. Wir schauen uns die ersten 20 Richtungswechsel an und √ºberlegen uns, ob die Ameise von einer runden Tischplatte mit 100 cm Radius herunterfallen w√ºrde. Ameise.py Simulieren Sie den zuf√§lligen Weg einer Ameise, die 20 mal die Richtung wechselt. Folgende Annahmen werden getroffen: die Ameise macht mindestens 4, aber maximal 20 Schritte in dieselbe Richtung die Ameise dreht sich jeweils zwischen 0 und 360 Grad ameise.py from turtle import * from random import randint # Tischplatte zeichnen pencolor('red') penup() goto(0, -100) pendown() circle(100) pencolor('black') # Random walk Hinweis Mit randint(start, ende) k√∂nnen Sie einen zuf√§lligen Wert im Bereich zwischen start und ende erzeugen. from random import randint print('Zufallszahl [0, 2]', randint(0, 2)) print('Zufallszahl [10, 20]', randint(10, 20)) print('Zufallszahl [-20, 5]', randint(-20, 5)) Zusatz 1: Simulieren Sie 30 Ameisen - wie viele fallen vom Tisch? Zusatz 2: Mit distance(0, 0) kann die Distanz zum Ursprung ausgegeben werden - zeigen Sie jeweils die Distanz zum Ursprung mit an. SSR Quelle: Gloassar ‚Ü©","keywords":""},{"title":"Struktogramme","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Algorithmen/Struktogramme","content":"Struktogramme Struktogramme sind eine M√∂glichkeit, Programme und Algorithmen grafisch darzustellen. Diese Dartstellungsform wurde 1973 von Isaac Nassi und Ben Shneiderman vorgeschlagen und heisst deshalb auch Nassi-Shneiderman-Diagramm.1 Sequenz üë£‚Äã In einem Struktogramm wird jeder Befehl in einen rechteckigen Kasten geschrieben. Befehle m√ºssen nicht in einer Programmiersprache geschrieben werden, Parameter werden unterstrichen. from turtle import * forward(100) left(90) forward(50) 100 Schritte vorw√§rts 90¬∞ nach links 50 Schritte vorw√§rts Wiederholung üîÅ‚Äã Eine Wiederholung wird wie folgt dargestellt. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Bemerke Beim Struktogramm wird der wiederholte Teil durch die Einr√ºckung ersichtlich. Auch in Python werden wiederholte Sequenzen (Zeilen 4-5) visuell mit einem Tabulator einger√ºckt. Der Doppelpunkt am Zeilenende zeigt an, dass eine einger√ºckte Sequenz (beim Programmieren spricht man von einem Codeblock) folgt. Unterprogramm üè∑‚Äã Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, gen√ºgt es den Namen aufzuschreiben. from turtle import * def zick_zack(): left(60) forward(30) right(120) forward(30) left(60) forward(100) zick_zack() zick_zack() zick_zack: 60¬∞ nach links 30 Schritte vorw√§rts 120¬∞ nach rechts 30 Schritte vorw√§rts 60¬∞ nach links 100 Schritte vorw√§rts zick_zack zick_zack Bemerke Um ein Unterprogramm aufzurufen, wird beim Struktogramm der Kasten mit doppelten Seitenstrichen markiert, bei Python werden runde Klammern am Ende des Namens angegeben. Den Namen f√ºr Unterprogramm kann beliebig gew√§hlt werden, sofern er nicht mit einer Zahl beginnt und keine Sonderzeichen enth√§lt. Leerschl√§ge und Bindestriche sind nicht erlaubt - stattdessen werden Unterstriche _ verwendet: Statt zick zack wird der Name zick_zack verwendet. Parameter ‚äï ‚äñ‚Äã Ein Unterprogramm kann mit Parametern aufgerufen werden. Parameter werden jeweils unterstrichen, so dass klar ist, welche Werte sich √§ndern k√∂nnen. Variablen‚Äã Bei Programmen wird zwischen Parametern und Variablen unterschieden. Genau wie Paramter k√∂nnen diese das Ergebnis eines Algorithmus √§ndern. Sie werden in einem Struktogramm speziell als markiert, damit klar ist, dass eigentlich der in der Variable gespeicherte Wert gemeint ist. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. Quelle: rothe.io ‚Ü©","keywords":""},{"title":"Test 25h","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Test/Probe","content":"Test 25h SSR","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Lernziele","content":"Lernziele Pr√ºfungsablauf‚Äã Die Pr√ºfung besteht aus zwei Teilen: schriftlicher Teil auf Papier - keine Hilfsmittel erlaubt. praktischer Teil auf dem Laptop - open book, jegliche Hilfsmittel inkl. Google sind erlaubt, wobei die direkte Kommunikation mit anderen Personen oder der Austausch von Informationen untereinander nicht erlaubt ist. Relevant f√ºr die Pr√ºfung sind die Kapitel Algorithmen: Theorie + Beispiele inkl. RoboZZle Turtlegrafik Abschnitte 1 bis und mit 7, inkl. √úbungen Gr√ºfnisch Lernziele Algorithmen Sie k√∂nnen erkl√§ren, was ein Algorithmus ist. Sie erkennen und beschreiben die Strukturen eines Algorithmus (Einzelschritte, Wiederholungen, bedingte Ausf√ºhrung, Parameter) Sie √ºbersetzen einen Algorithmus zwischen zwei Darstellungsformen (Alltagssprache, Struktogramm, Python-Programm) Lernziele Programme Sie k√∂nnen ein einfaches Python-Programm lesen und verstehen. Sie k√∂nnen die Ausgabe eines einfachen Turle-Programms zeichnen. Sie k√∂nnen ein einfaches Python-Programm √§ndern oder erweitern. Sie k√∂nnen typische Fehler in Python-Programmen erkennen und korrigieren. Sie k√∂nnen in einem Programm Befehlsnamen, Variablen, Parameter und Codebl√∂cke identifizieren. Lernziele Programmstuktur Wie wissen, dass ein Python-Programm grunds√§tzlich sequentiell (d.h. zeilenweise) ausgef√ºhrt wird. Sie k√∂nnen Befehle aus anderen Bibliotheken importieren (import). Sie verwenden for-Schleifen, um Befehlssequenzen zu wiederholen. Sie k√∂nnen eigene Unterprogramme / Befehle definieren (def). Sie k√∂nnen Unterprogramme mit einem oder mehreren Parametern definieren und aufrufen. Sie wissen, was Kommentare (#) sind und k√∂nnen Programme kommentieren. Sie wissen was eine Variable ist und k√∂nnen diese verwenden. Sie k√∂nnen Struktogramme lesen und verstehen Sie k√∂nnen Struktogramme in ein Programm √ºbersetzen, bzw. ein Programm in ein Struktogramm √ºberf√ºhren Lernziele Turtlegrafik Sie k√∂nnen die Turtle mit forward, backward, left, right und goto bewegen. Sie k√∂nnen mit pencolor die Farbe √§ndern. Sie k√∂nnen mit fillcolor, begin_fill und end_fill ausgef√ºllte Figuren zeichnen. Sie k√∂nnen mit shape und speed das Aussehen und die Geschwindigkeit der Turtle √§ndern. Sie k√∂nnen mit pensize, penup und pendown, dot, hideturtle den Zeichenstift kontrollieren. Lernziele Benutzerinteraktion Sie k√∂nnen die Programmbenutzer:in mit input nach einer Eingabe fragen. Sie wissen, dass Python zwischen Text (str), ganzen Zahlen (int) und Dezimalzahlen (float) unterscheidet und k√∂nnen Text in Zahlen/Dezimalzahlen umwandeln. Sie k√∂nnen Platzhalter in formatierten Texten f'' einf√ºgen. Sie k√∂nnen Texte klein- oder grossschreiben (lower(), upper()) sowie Wortteile ersetzen (replace).","keywords":""},{"title":"Mini-Projekte","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/art","content":"Mini-Projekte Projekt1.py Projekt2.py Projekt3.py SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Textverarbeitung","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Python/strings","content":"Textverarbeitung In Python lassen sich Texte ver√§ndern. Gross- und Kleinschreibung‚Äã Definition upper()‚Äã text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; gross = text.upper() print(gross) Definition lower()‚Äã text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; klein = text.lower() print(klein) Text ersetzen‚Äã Definition replace()‚Äã Mit replace(alt, neu) k√∂nnen Text-Teile in einem Text ersetzt werden. text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; # Alle . durch !!! ersetzen text = text.replace(&quot;.&quot;, &quot;!!!&quot;) print(text) Gross- &amp; Kleinschreibung Python nimmts genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle! Im folgenden Beispiel wird etwa nur das kleingeschriebene ich ersetzt, jedoch auch wenn es inmitten eines Textes auftritt. text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; text = text.replace(&quot;ich&quot;, &quot;ICH&quot;) print(text) Gr√ºfnisch‚Äã Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden die Vokale a, e, i, o, u, √§, √∂ und √º durch anafa, enefe, inifi, onofo, unufu, √§n√§f√§, √∂n√∂f√∂ und √ºn√ºf√º ersetzt (z. B.: ‚ÄûHanafallonofo‚Äú = ‚ÄûHallo‚Äú). Ausnahme: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). 1 Beispiel‚Äã Gymnasium Biel Seeland heisst auf Gr√ºfnisch Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Deutsch ‚Üí Gr√ºfnisch Erstellen Sie ein Programm, welches die Benutzer:in nach einem deutschen Satz fragt diesen Satz zu Gr√ºfnisch umwandelt den gr√ºfnischen Satz ausgibt Zeichnen Sie in einem ersten Schritt zusammen mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. zu__gr√ºfnisch.py from cowsay import cow Zusatz ‚≠êÔ∏è: Verwenden Sie anstelle von print() den Befehl cow() - was passiert? Hinweis Ersetzen Sie jeden Vokal nacheinander, wobei Sie das Resultat immer wieder in derselben Variable speichern: 'a' ‚Üí 'anafa' 'e' ‚Üí 'enefe' 'i' ‚Üí 'inifi' 'o' ‚Üí 'onofo' 'u' ‚Üí 'unufu' '√§' ‚Üí '√§n√§f√§' '√∂' ‚Üí '√∂n√∂f√∂' '√º' ‚Üí '√ºn√ºf√º' Weitere Figuren Anstelle von cow() k√∂nnen auch andere Figuren verwendet werden. Diese muss dann aber auch aus der Bibliothek cowsay importiert werden. beavis cheese daemon cow dragon ghostbusters kitty meow milk stegosaurus stimpy turkey turtle tux SSR SSR SSR Gr√ºfnisch ‚Üí Deutsch K√∂nnen Sie auch ein Programm schreiben, welches vom Gr√ºfnisch ins Berndeutsch √ºbersetzt? von_gr√ºfnisch.py SSR Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Sprachelemente","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Python/Sprachelemente","content":"Sprachelemente Import-Befehl‚Äã Um vordefinierte Python-Befehle aus einer Bibliothek (ein sog. Python Modul) zu verwenden, m√ºssen diese importiert werden. Dies geschieht mit dem Import-Befehl: from turtle import * ‚≠êÔ∏è Einzelne Befehle importieren Es ist auch m√∂glich, nur einzelne Befehle (Unterprogramme) aus einer Bibliothek zu importieren. from math import floor, ceil print('Zahl:', 13.1) print('Abgerundet:', floor(13.1)) print('Aufgerundet:', ceil(13.1)) Dies hat den Vorteil, dass eine andere Betrachter:in eine bessere √úbersicht erh√§lt, von wo welcher Befehl importiert wurde. Bei uns ist dies allerdings vernachl√§ssigbar. Unterprogramm aufrufen‚Äã Alle Befehle (=Unterprogramme) in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. from turtle import * forward(30) penup() goto(20, 30) pendwon() forward(30) Wiederholungen: for-Schleife‚Äã Mit einer Schleife k√∂nnen Befehle eine bestimmte Anzahl Mal wiederholt werden. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Grundrechenoperationen‚Äã Die Grundrechenoperationen werden in Python wie folgt geschrieben: Operation\tmathematisch\tPythonAddition\ta+ba + ba+b\ta + b Subtraktion\ta‚àíba - ba‚àíb\ta - b Multiplikation\ta‚ãÖba \\cdot ba‚ãÖb\ta * b Division\ta√∑ba √∑ ba√∑b\ta / b Potenz\taba^bab\ta ** b Beispiele‚Äã print('2 + 13 =', 2 + 13) print('17 - 9 =', 7 - 9) print('312 ‚ãÖ 7 =', 312 * 7) print('231 √∑ 3 =', 231 / 3) print('2^8 =', 2 ** 8) ","keywords":""},{"title":"Schl√ºsselw√∂rter in Python","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Python/keywords","content":"Schl√ºsselw√∂rter in Python Schl√ºsselw√∂rter‚Äã Python kennt 35 Schl√ºsselw√∂rter, sie sind im folgenden aufgelistet. False\tawait\telse\timport\tpass None\tbreak\texcept\tin\traise True\tclass\tfinally\tis\treturn and\tcontinue\tfor\tlambda\ttry as\tdef\tfrom\tnonlocal\twhile assert\tdel\tglobal\tnot\twith async\telif\tif\tor\tyield Achtung Diese Schl√ºsselw√∂rter sollten nicht als Namen f√ºr eine Variable oder f√ºr ein Unterprogramm verwendet werden. Spezielle Zeichen in Python:‚Äã Feldtrenner (delimiter)‚Äã (\t)\t[\t]\t{\t} ,\t:\t.\t;\t@\t=\t-&gt; +=\t-=\t*=\t/=\t//=\t%=\t@= &amp;=\t`\t=`\t^=\t&gt;&gt;=\t&lt;&lt;=\t**= Zeichen mit spezieller Bedeutung‚Äã ' Markiert einen Texte &quot; Markiert einen Texte # Kommentar \\ Spezielles Steuerzeichen, bspw. um eine neue Zeile zu machen: \\n print('Zeile 1\\nZeile 2') Operatoren‚Äã +\t-\t*\t**\t/\t//\t% &lt;&lt;\t&gt;&gt;\t&amp;\t`\t`\t^\t~\t@ &lt;\t&gt;\t&lt;=\t&gt;=\t==\t!=\t:=\t","keywords":""},{"title":"‚≠ê Rekursion","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/koch","content":"‚≠ê Rekursion Ein Unterprogramm kann sich selber aufrufen. Das ergibt im Normalfall eine unendliche Wiederholung, so dass das Programm abst√ºrzt. Wird das Unterprogramm jedoch jedesmal mit einem ver√§nderten Parameter aufgerufen, so kann eine Abbruchbedingung erstellt werden, welche angibt, ob das Unterprogramm erneut aufgerufen werden soll oder nicht. Beispiel‚Äã Im folgenden Programm wird ein einfacher bin√§rer Baum gezeichnet: from turtle import * left(90) def baum(gr√∂sse): forward(gr√∂sse) left(45) forward(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) forward(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(40) Diesen Baum k√∂nnen wir nun so umbauen, dass jeder Ast auch wieder ein bin√§rer Baum ist: from turtle import * left(90) def baum(gr√∂sse): if gr√∂sse &lt; 5: forward(gr√∂sse) else: forward(gr√∂sse) left(45) baum(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) baum(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(100) Bemerken Sie, dass eine Abbruchbedingung eingef√ºgt wurde - falls die gr√∂sse kleiner als 5 ist, wird nur eine Strecke gezeichnet, andernfalls ein ganzer Baum. Koch Kurve‚Äã Aufgabe Eine Koch-Kurve ist wie folgt aufgebaut: wobei ein einzelnes Element wie folgt aussieht: koch.py from turtle import * ‚≠êÔ∏è Zusatz: Zeichnen Sie ein Sechseck bestehend aus 6 Koch-Kurven. ‚≠êÔ∏è Pythagorasbaum‚Äã Versuchen Sie, einen rekursiven Pythagoras-Baum zu zeichnen. Ein Pythagorasbaum Pythagorasbaum pythagoras.py from turtle import * Weitere Inspirationen f√ºr Fraktale üëâ https://natureofcode.com/book/chapter-8-fractals/","keywords":""},{"title":"1. Einf√ºhrung Python üë£","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/intro","content":"1. Einf√ºhrung Python üë£ Programmieren heisst, einer Maschine Befehle zu erteilen und sie damit zu steuern. Die erste solche Maschine, die Sie steuern, ist eine kleine Schildkr√∂te (bzw. ein kleines Dreieck) auf dem Bildschirm: Die Turtle. Was kann diese Turtle und was musst du wissen, um sie zu steuern? Turtlebefehle werden grunds√§tzlich Englisch geschrieben und enden immer mit einem Klammerpaar. Dieses enth√§lt weitere Angaben zum Befehl. Selbst wenn keine weiteren Angaben n√∂tig sind, muss ein leeres Klammerpaar vorhanden sein. Die Klein-/Grossschreibung muss exakt eingehalten werden. Die Turtle kann sich innerhalb ihres Fensters bewegen und dabei eine Spur zeichnen. Um die Turtle zu bewegen, verwenden wir die drei Befehle forward(distanz), left(winkel) und right(winkel). Programmierkonzepte: Quellprogramm editieren, Programm ausf√ºhren, Programmsequenz Das erste Programm‚Äã Das erste Python-Programm zeichnet ein Quadrat. Damit die Befehle zum zeichnen verwendet werden k√∂nnen, muss zuerst eine Datei mit den entsprechenden Befehlen (ein sogenanntes Modul) turtle geladen werden. Quadrat from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) from turtle import * Damit Python die Befehle zum zeichnen verwenden kann, m√ºssen diese zuerst aus einer Bibliothek importiert werden. Damit beim Importieren nicht jeder einzelne Befehl angegeben werden muss, wird das Zeichen * verwendet welches alle verf√ºgbaren Befehle importiert. Befehle: forward, left Alle Befehle in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. forward(90) \\_____/ \\ / Parameter (Bedeutung hier: 90 Schritte vorw√§rts) Befehlsname penup() \\___/ \\ / kein Parameter Befehlsname * werden mehrere Parameter √ºbergeben, dann werden diese mit Kommas abgetrennt, z.B. goto(20, 30) Aufgabe 1 Markieren Sie im untenstehenden Programm folgende Strukturmerkmale eines Algorithmus mit den vorgegebenen Farben: Unterprogramme Aufrufe eines Unterprogramms mit orange Parameter Verwendete Parameter mit gr√ºn SSR Aufgabe 2 √Ñndern Sie die Parameter im Programm QUADRAT.PY so ab, dass: das Quadrat doppelt so gross gezeichnet wird das Quadrat um 45¬∞ nach links gedreht gezeichnet wird quatrat.py from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) ‚≠êÔ∏è Zusatz:‚Äã Die Form der Turtle kann mit dem Befehl shape ver√§ndert werden. √Ñndern Sie auf Zeile 3 die Turtleform auf eine Schildkr√∂te durch Aufrufen des Befehls shape mit dem Parameter 'turtle'. M√∂gliche Parameter f√ºr den Befehl shape 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) SSR Farben‚Äã Die Stiftfarbe kann mit dem Befehl pencolor('red') auf rot gewechselt werden. Es gibt eine vordefinierte Farbpalette f√ºr die Stiftfarben. farben from turtle import * forward(30) right(90) pencolor('red') forward(30) right(90) pencolor('blue') forward(30) right(90) pencolor('green') forward(30) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white 'string' Beachten Sie die Anf√ºhrungszeichen rund um die Farb-Namen. Damit Python die Farben als Text (eng. string) erkennt und nicht pl√∂tzlich nach einem gleichnamigen Befehl sucht, werden rund um Texte immer Anf√ºhrungszeichen verwendet. Stiftbreite‚Äã Die Stiftbreite kann mit dem Befehl pensize(2) ver√§ndert werden. Standardm√§ssig ist die Stiftbreite 1 from turtle import * forward(20) pensize(5) forward(20) pensize(10) forward(20) pensize(15) forward(20) pensize(20) forward(20) Zahlen Beachten Sie, dass bei Zahlen keine Anf√ºhrungszeichen verwendet werden. Eine Verwechslungsgefahr mit anderen Befehlen besteht nicht, da in Python keine Befehle mit einer Zahl beginnen. Aufgabe 3: Zickzack Versuchen Sie, folgendes Zickzack-Muster mit einer Stiftdicke von 5 zu zeichnen. Die Streckenl√§nge und die Winkel d√ºrfen Sie sch√§tzen. zickzack.py from turtle import * ‚≠êÔ∏è Zusatz:‚Äã Machen Sie bei jedem Richtungswechsel einen Punkt: SSR Kommentare‚Äã In Python k√∂nnen Kommentare eingef√ºgt werden, die aber auf die Ausf√ºhrung des Programms keinen Einfluss haben. Kommentare sind eine wichtige Hilfe, um Programme (Algorithmen) besser zu verstehen, oder aber um zus√§tzliche Informationen, wie den Autor des Programms, festzuhalten. # Autor: B. Hofer # Datum: 5.09.2021 from turtle import * # importiere alle Befehle der Bibliothek &quot;turtle&quot; speed(1) # verlangsame die Turtle auf die langsamste Geschwindigkeit forward(100) # 100 Schritte vorw√§rts left(120) # drehe um 120 ¬∞ nach links speed(3) # zur√ºck auf Normalgeschwindigkeit forward(100) left(120) speed(10) # Schneller... forward(100) left(120) hideturtle() # verstecke die Turtle Aufgabe 4: Programm untersuchen Versuchen Sie nachzuvollziehen, welche Zeile was macht. F√ºgen Sie auf den ersten Zeilen den Autor und das Datum hinzu. F√ºgen Sie immer dann, wenn ein Unterprogramm zum ersten Mal verwendet wird, einen Kommentar hinzu, welcher beschreibt, was dieses Unterprogramm macht und, falls vorhanden, welchen Einfluss die Parameter haben. Stift-und-Punkte from turtle import * forward(40) left(90) penup() forward(40) dot(10) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) Aufgabe 5: W√ºrfel √Ñndern Sie das Programm so ab, dass die gew√ºrfelte Zahl 5 gezeichnet wird: W√ºrfel 5 Verstecken Sie auch die Turtle am Ende! W√ºrfel__5.py from turtle import * forward(40) left(90) penup() forward(40) dot(5) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) SSR Aufgaben‚Äã Aufgabe 6: Haus von Nikolaus Das &quot;Haus vom Nikolaus&quot; ist ein Zeichenspiel f√ºr Kinder. Ziel ist es, das besagte Haus in einem Linienzug aus genau acht Strecken zu zeichnen, ohne dabei eine Strecke zweimal zu durchlaufen. Zeichnen Sie das Haus vom Nikolaus. haus__nikolaus.py from turtle import * Hinweis: Diagonale Die L√§nge der Diagonale k√∂nnen Sie mithilfe von Pythagoras und einem Taschenrechner berechnen. Oder Sie verwenden den Trick, dass die Diagonale im Quadrat gerade 2\\sqrt 22‚Äã mal l√§nger ist als eine Seitenl√§nge - bei einer Seitenl√§nge von 100100100 w√§ren das also ca. 141141141. ‚≠êÔ∏è Zusatz:‚Äã Verwenden Sie f√ºr die Zeichnung Ihre Lieblingsfarbe und eine gr√∂ssere Stiftdicke. SSR Aufgabe 7: Treppe Zeichnen Sie eine Treppe mit f√ºnf Stufen, die eine Breite von 29 Pixeln und eine H√∂he von 17 Pixeln haben. treppe.py from turtle import * SSR","keywords":""},{"title":"4. Fehler","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/errors","content":"4. Fehler Sie haben bereits festgestellt, dass Python sehr pingelig ist was Tippfehler und die pr√§zise Verwendung von Klammern, Anf√ºhrungszeichen, Doppelpunkten und Leerzeichen angeht. Jede Sprache hat seine eigenen Regeln, wie W√∂rter und S√§tze strukturiert sein m√ºssen. Diese Regeln sind allgemein bekannt als die Syntax einer Sprache. Bei Programmiersprachen wird mit der Syntax festgelegt, welche W√∂rter, in welcher Reihenfolge und in welchem Kontext erlaubt sind. Syntax Fehler (syntax errors)‚Äã Syntax Fehler sind kleine Fehler in einem Programm. Da das Programm nicht von einem Mensch, sondern von einem Computer &quot;gelesen&quot; und interpretiert wird, reicht ein Tippfehler, ein fehlendes Komma oder eine fehlende Klammer, dass das Programm nicht mehr verstanden werden kann. Die Python Sprache setzt sich aus folgenden Elementen zusammen: Schl√ºsselw√∂rter (Statements): W√∂rter oder Zeichen, die ohne Anf√ºhrungszeichen und ohne Klammern geschrieben werden. z.B. import, from oder for, aber auch : oder *. Sie m√ºssen in einer vordefinierten Reihenfolge vorliegen, damit diese von Python verstanden werden. (‚Ü© alle Schl√ºsselw√∂rter) Befehle (Unterprogramme, Funktionen): vordefinierte Befehle, die mit einer runden Klammer aufgerufen werden. z.B. print('hello') Variablen: Namen, die einen Wert enthalten H√§ufigste Ursachen Fehler bei Schl√ºsselw√∂rtern vergessene oder falsch eingesetzte Feldtrenner (z.B. :) Falsche Anordnung von Schl√ºsselw√∂rtern/Feldtrennern Beispiele‚Äã frm turtle import * forward(100) from turtle import * goto(100 50) from turtle import * for i in range(4) forward(25) right(90) Fehler finden Untersuchen Sie obenstehende Programmschnipsel. Was sagen Ihnen die Fehlermeldungen? Auf welcher Zeile steht die Art des Fehlers? Wo finden Sie Hinweise auf den Fehler? Flicken Sie sie... error1.py frm turtle import * forward(100) error2.py from turtle import * goto(100 50) Hinweis Was macht der Befehl goto? Schauen Sie die Funktionsweise unter Turtle Befehle#goto(x, y) nach error3.py from turtle import * for i in range(4) forward(25) right(90) SSR Namens Fehler (NameError)‚Äã Liegt ein Fehler vor, der nicht bei Schl√ºsselw√∂rtern (oder deren Anordnung) vorliegt, so handelt es sich oft um einen Namens-Fehler (NameError). Es wird also versucht, ein Unterprogramm zu √∂ffnen, das aber unter diesem Namen nicht gefunden werden kann. H√§ufigste Ursachen Die h√§ufigste Ursachen von NameErrors sind Vertipper im Namen des Befehls nicht importierte Befehle (z.B. from turtle import * fehlt) Beispiele‚Äã from turtle import * forwrd(100) Der angegebene Befehl forwrd kann nicht gefunden werden, da er weder in einer importierten Bibliothek, noch im aktuellen Programm gefunden werden kann. Der gleiche Fehler tritt auf, wenn der Befehl zwar richtig geschrieben wird, das Importieren aber vergessen geht: forward(100) Fehler finden Finden und l√∂sen Sie die entstandenen Fehler error.py from math import ceil, floor print('15.3 gerundet =', round(15.3)) print('15.8 gerundet =', round(15.8)) print('15.3 aufgerundet =', ceyl(15.3)) print('15.8 abgerundet =', flor(15.8)) Hinweis Suchen Sie die fehlerhaften Befehle in Kombination mit Python auf Google, bspw. python ceyl. SSR Einr√ºckungsfehler (IndentationError)‚Äã Python erwartet nach jedem Doppelpunkt :, dass ein einger√ºckter Codeblock kommt. Falls kein einger√ºckter Codeblock gefunden wird, entsteht ein IndentationError. Wird jedoch f√§lschlicherweise eine Zeile einger√ºckt, so wird ebenfalls dieser Fehler angezeigt. H√§ufigste Ursachen Die n√§chste Zeile nach einem Doppelunkt : ist nicht einger√ºckt Eine Zeile ist f√§lschlicherweise einger√ºckt ein Leerschlag zu wenig einger√ºckt Beispiel‚Äã Nicht einger√ºckt for i in range(5): print('Hallo') Korrektur for i in range(5): print('Hallo') Falsch einger√ºckt print('Hallo') print('wie') print('gehts?') Korrektur print('Hallo') print('wie') print('gehts?') Fehler finden Finden und l√∂sen Sie die entstandenen Fehler, so dass die Ausgabe Hallo zum 0 Hallo zum 1 Ende lautet. errors.py for i in range(2): print('Hallo zum', i) print('Ende') SSR Logikfehler‚Äã Aus der Sicht von Python funktioniert alles, top! üëç Sobald aber das Programm ausgef√ºhrt wird, macht es nicht das, was Sie sich gew√ºnscht haben - Logik-Fehler üí©... Diese Fehler sind im allgemeinen am schwierigsten zu finden. Ein h√§ufiger Fehler ist aber, dass man bei einem Befehl die runden Klammern am Ende vergisst - f√ºr Python kein Problem, da es den Befehl kennt, jedoch nicht dazu aufgefordert wird, diesen auszuf√ºhren. H√§ufigste Ursachen Checkliste f√ºr Logikfehler sind bei Befehlen die runden Klammern () am Ende angegeben? Beispiel‚Äã from turtle import * penup() goto(-10, 10) pendown for i in range(4): forward(20) left(90) Auf Zeile 4 fehlen die runden Klammern - pendown wird nicht ausgef√ºhrt! Fehler beheben: Den Befehl mit pendown() aufrufen. Fehler finden Finden und beheben Sie alle Fehler, so dass folgende Ausgabe entsteht: errors.py from turtle import * fillcolor(&quot;Rot&quot;) penup() goto(-125 125) begin_fill() for i in range(4) forward(250) left(90) end_fill() forward(150) links(90) forward(50) fillcolor(&quot;white&quot;) begin_fill() for i in range(4): forward(50) right(90) forward(50) left(90) forward(50) left(90) end_fill SSR","keywords":""},{"title":"Python Programme","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/python-scripts","content":"Python Programme Beliebige Python Programme Programm 1‚Äã Programm1.py Programm 2‚Äã Programm2.py Programm 3‚Äã Programm3.py Programm 4‚Äã Programm4.py Programm 5‚Äã Programm5.py Programm 6‚Äã Programm6.py Programm 7‚Äã Programm7.py Programm 8‚Äã Programm8.py Programm 9‚Äã Programm9.py Programm 10‚Äã Programm10.py Programm 11‚Äã Programm11.py Programm 12‚Äã Programm12.py Programm 13‚Äã Programm13.py Programm 14‚Äã Programm14.py Programm 15‚Äã Programm15.py ","keywords":""},{"title":"3. Wiederholung üîÅ","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/repeat","content":"3. Wiederholung üîÅ In der Aufgabe 8 haben Sie eine Treppe gezeichnet. Ihr Programm sieht vermutlich etwa wie folgt aus: from turtle import * left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) Was stellen Sie beim Treppen-Programm fest? Das Programm ist lang man sieht nicht auf einen Blick, wie viele Stufen die Treppe hat ob alle Stufen gleich breit und hoch sind Um die Stufenbreite oder die Stufenh√∂he anzupassen, m√ºssen viele Zeilen ver√§ndert werden Es kommt immer wieder dieselbe Sequenz vor: left(90) forward(17) right(90) forward(29) wir sind zu faul, um immer wieder dieselbe Sequenz aufzuschreiben (oder zu Copy&amp;Pasten) Wiederholen von Sequenzen‚Äã Ein Algorithmus kann Sequenzen wiederholt ausf√ºhren. In Python wird die zu wiederholende Sequenz Codeblock genannt. from turtle import * for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts Definition for i in range(n):‚Äã Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt, bevor weitere Anweisungen ausgef√ºhrt werden.Alles, was wiederholt werden soll, muss einger√ºckt sein. Beispiel‚Äã from turtle import * for i in range(4): forward(50) left(90) Struktogramm ‚Üí Python √úbersetzen Sie das Struktogramm in ein Python Programm. Was entsteht? wiederholung.py from turtle import * 9 mal wiederholen: 100 Schritte vorw√§rts 160¬∞ nach links Turtle verstecken SSR 1. Python ‚Üí Struktogramm Zeichnen Sie f√ºr folgendes Programm ein Struktogramm auf ein Blatt Papier. Fotografieren Sie es im Anschluss und halten Sie es im untenstehenden Textfeld fest. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) SSR 2. Python ‚Üí Struktogramm Zeichnen Sie auch f√ºr folgendes Programm ein Struktogramm und halten Sie dieses fest. from turtle import * for i in range(5): left(72) for i in range(4): forward(20) left(90) forward(100) SSR 3. Treppe vol. 2 Zeichnen Sie eine Treppe mit 20 Stufen. Die Treppe soll bei den Koordinaten (-200, -200) starten. W√§hlen Sie die Stufen-Breiten so, dass der verf√ºgbare Platz m√∂glichst gut ausgenutzt wird. treppe2.py from turtle import * Hinweis Verwenden Sie den Befehl goto(x, y) um die Turtle bei -200, -200 zu positionieren. SSR 4. Schneestern Zeichnen Sie einen Stern und gehen Sie wie folgt vor: Untersuchen Sie den Stern und identifizieren Sie die wiederholten Sequenzen. Programmieren Sie eine einzelne Sequenz. Die Knacknuss ist, dass am Ende der Sequenz die Turtle so ausgerichtet ist, dass man mit der Wiederholung beginnen k√∂nnte Programmieren Sie die Wiederholung schneestern.py from turtle import * SSR 5. Weihnachtsstern Zeichnen Sie einen Weihnachtsstern mit den Drehwinkeln 140¬∞ und 80¬∞. F√ºllen Sie den Stern mit Ihrer Lieblingsfarbe. Schauen Sie sich dazu den Abschnitt &quot;F√ºllen&quot; unter üëâ Turtle Befehle an. weihnachtsstern.py from turtle import * SSR 6. Quadrate Zeichnen Sie folgende Leiter. K√∂nnen Sie das Programm mit noch weniger Zeilen Code schreiben? Schaffen Sie es, nur 6 Zeilen Code zu verwenden? leiter.py from turtle import * SSR 7. Perlenkette Zeichnen Sie eine Perlenkette in Ihrer Lieblingsfarbe, die aus 18 Perlen (dots) besteht. perlenkette.py from turtle import * Hinweis Die Turtle muss nach 18 Drehungen wieder nach rechts schauen (hat sich also insgesamt um 360¬∞ gedreht) - pro Drehung also xxx Grad Python kann auch rechnen üòã - lassen Sie die Drehung von Python berechnen. Beispiel: left(360 / 4) ist dasselbe wie left(90) SSR 8. Vogel Zeichnen Sie einen Vogel, indem Sie mehrmals nacheinander folgende Befehle wiederholen: forward(2) right(3) vogel.py from turtle import * SSR","keywords":""},{"title":"2. Zeichnungsfl√§che","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/screen","content":"2. Zeichnungsfl√§che Die Zeichenfl√§che kann konfiguriert werden, z.B. mit einer Hintergrundfarbe, oder aber auch die Dimensionen des Hintergrunds. Standarm√§ssig ist keine Hintergrundfarbe gesetzt (=durchsichtig) und die Dimensionen die Koordinaten des Bildschirms sind 500x500 Pixel. Das zugrundeliegende Koordinatensystem hat den Ursprung immer in der Mitte des Bildschirms. from turtle import * # wenn die Bildschirm-Dimensionen ver√§ndert werden sollen, muss dies # zwingend als erster Befehl gemacht werden. # Die Gr√∂sse kann anschliessend nicht mehr ver√§ndert werden. turtle.set_defaults(canvwidth=200, canvheight=100) # Die Hintergrundfarbe kann auch ge√§ndert werden. Screen().bgcolor('orange') forward(100) note Wird mit Screen().bgcolor('yellow') eine Hintergrundfarbe festgelegt, kann das umgebende Rechteck der Figur (englisch Bounding Box) nicht mehr bestimmt werden und es wird immer die ganze Bildfl√§che heruntergeladen.","keywords":""},{"title":"10. Repetitionsfragen","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/repetition","content":"10. Repetitionsfragen Algorithmus‚Äã Was ist ein Algorithmus? Welche 5. Strukturelemente enth√§lt ein Algorithmus? Erstellen Sie einen Algorithmus f√ºr das Zusammenfalten eines T-Shirts. SSR Code Lesen‚Äã In welchem Code-Teil wird das Viereck mit der Stiftdicke 5 gezeichnet. Welche Seitenl√§nge hat das Dreieck mit Stiftdicke 7? Bei welchen Koordinaten wird das F√ºnfeck mit Stiftdicke 3 gezeichnet? F√ºgen Sie ein Quadrat mit der Seitenl√§nge 20 bei der Koordinate (20, 10) und der Stiftdicke 3 hinzu. Unterstreichen Sie in den Zeilen 1-12 alle Parameter Markieren Sie in den Zeilen 1-12 alle Befehlsnamen Turtle Ausgabe from turtle import * def move(x, y): penup() goto(x, y) pendown() pensize(2) for i in range(3): forward(18) left(120) move(-20, 30) pensize(5) for i in range(4): forward(27) left(90) move(30, 10) for i in range(5): forward(13) left(72) move(80, 80) pensize(3) for i in range(4): forward(77) left(90) move(-40, -20) for i in range(5): forward(23) left(72) move(-80, 80) pensize(7) for i in range(3): forward(44) left(120) SSR Code Ausf√ºhren‚Äã Zeichnen Sie die Ausgabe des folgenden Programms from turtle import * def square(): for i in range(4): forward(10) right(90) forward(30) left(90) forward(10) right(90) for i in range(3): forward(10) right(90) forward(10) left(90) forward(10) left(90) forward(10) right(90) left(90) square() SSR Struktogramm‚Äã Zeichnen Sie f√ºr folgende Ausgangslage ein Struktogramm: Die Benutzer:in wird nach ihrer Lieblingszahl gefragt. Die eingegebene Zahl wird verdoppelt und mit 3 addiert. So oft zeichnet man nun 55 Schritte vorw√§rts mit einer Drehung um 113¬∞ am Ende. Zusatz: Anstatt 113¬∞ soll soviel gedreht werden, dass eine geschlossene Figur entsteht. SSR Programmieren (am PC)‚Äã Definition Text vervielfachen‚Äã In Python kann Text verfielf√§ltigt werden, indem er mit der gew√ºnschten Anzahl wiederholungen multipliziert wird: print('Hallo' * 3) print('üå≤ ' * 24) Schreiben Sie einen Befehl dreieck, der ein Dreieck in Textform ausgibt. Die Gr√∂sse des Dreiecks soll als Parameter √ºbergeben werden k√∂nnen. Beispiele: dreieck(1) ergibt * dreieck(2) ergibt * * * dreieck(3) ergibt * * * * * * dreieck.py SSR","keywords":""},{"title":"5. Unterprogramme üè∑","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/functions","content":"5. Unterprogramme üè∑ Einf√ºhrung‚Äã In einer Bildkomposition kommen Figuren wie Dreiecke und Quadrate mehrmals vor. Die Turtle weiss aber nicht, was ein Dreieck oder ein Quadrat ist. Da in der Bildkomposition die Dreiecke und Quadrate nicht systematisch angeordnet sind, ist die Verwendung von Wiederholungen hier nicht naheliegend. from turtle import * fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() 26 Zeilen Code?? Geht das nicht auch einfacher? Es geht einfacher! Es lassen sich n√§mlich neue Befehle festlegen, die z.B. ein Dreieck oder ein Quadrat zeichnen. from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('red') dreieck() left(120) fillcolor('green') dreieck() left(120) fillcolor('blue') dreieck() dreieck Starte Auff√ºllen 3 mal wiederholen 50 Schritte vorw√§rts 120¬∞ nach links Ende Auff√ºllen rote F√ºllfarbe dreieck zeichnen 120¬∞ nach links gr√ºne F√ºllfarbe dreieck zeichnen 120¬∞ nach links blaue F√ºllfarbe dreieck zeichnen Aufgabe 1 Im folgenden ist zweimal derselbe Algorithmus programmiert - links ohne Unterprogramme, rechts mit Unterprogrammen. √Ñndern Sie beide Programme so ab, dass die Dreiecke doppelt so gross gezeichnet werden! sequentiell.py from turtle import * fillcolor('yellow') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('orange') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('purple') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() functions.py from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('yellow') dreieck() left(60) fillcolor('orange') dreieck() left(60) fillcolor('red') dreieck() left(60) fillcolor('purple') dreieck() left(60) fillcolor('blue') dreieck() left(60) fillcolor('green') dreieck() left(60) Wie viele Zeilen mussten Sie im linken bzw. im rechten Programm √§ndern? Welche Vorteile sehen Sie bei der Verwendung von Unterprogrammen? SSR Eigene Befehle definieren‚Äã Bei Python werden Befehle auch Funktionen genannt. Definition def name():‚Äã Mit def name(): wird ein neues Unterprogramm (ein neuer Befehl) definiert. Als Name sollte immer etwas gew√§hlt werden, das die T√§tigkeit dieser Sequenz widerspiegelt. Alle Anweisungen, die zum neuen Befehl geh√∂ren, m√ºssen einger√ºckt sein! Beispiel: def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) Befehlsaufruf Die Definition alleine f√ºhrt das Programm noch nicht aus. Dazu muss der Befehl erst noch aufgerufen werden: from turtle import * def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) ### PRE zick_zack() Aufgabe 2: Struktogramm ‚Üí Python Erzeugen Sie ein Programm gem√§ss folgendem Struktogramm: stufe 95¬∞ links 20 Schritte vorw√§rts 95¬∞ rechts 30 Schritte vorw√§rts 100 Schritte vorw√§rts stufe zeichnen stufe zeichnen stufe zeichnen befehl1.py from turtle import * √Ñndern Sie obiges Programm so, dass der Winkel einer Stufe neu 110¬∞ betr√§gt. Zeichnen Sie eine Treppe mit 30 Stufen. Denken Sie dabei auch an das letzte Kapitel (Stichwort: Wiederholungen!) SSR Aufgabe 3 ‚Äì Sechsecke sechseck.py from turtle import * Zeichnen Sie ein Sechseck Verschieben Sie die Sequenz, die das Sechseck zeichnet, in einen neuen Befehl namens sechseck(). Denken Sie daran, der neue Befehl muss aufgerufen werden, damit er ausgef√ºhrt wird. Verwenden Sie den neuen Befehl, um die folgende Figur zu zeichnen, welche aus 10 Sechsecken besteht: Tipp Nach jedem Sechseck muss 36¬∞ gedreht werden. SSR Aufgabe 4 ‚Äì H√§user F√ºr diese Aufgabe k√∂nnen Sie als Ausgangslage Ihr Programm aus Kapitel 1, Aufgabe 6 &quot;Haus von Nikolaus&quot; verwenden. stadt.py from turtle import * Definieren Sie einen Befehl haus(), der ein Haus des Nikolaus zeichnet: Achten Sie darauf, dass die Turtle am Ende eines H√§uschens jeweils unten rechts ist und nach rechts schaut. Zeichnen Sie nun 4 H√§user nacheinander in unterschiedlichen Farben. SSR Aufgabe 5 ‚Äì Blume Sie werden in dieser Aufgabe unter der Verwendung mehrerer Unterprogramme eine komplexe Aufgabe schrittweise l√∂sen. blume.py from turtle import * Definieren Sie Unterprogramm bogen(), mit dem die Turtle einen Bogen zeichnet und sich dabei insgesamt um 90¬∞ nach rechts dreht. F√ºgen Sie einen weiteren Befehl blumenblatt() hinzu, welches zwei B√∂gen zeichnet. Die Turtle sollte am Ende aber wieder in Startrichtung stehen. Erg√§nzen Sie blumenblatt() so, dass ein rot gef√ºlltes Blatt gezeichnet wird. Setzen Sie mit pencolor die Stiftfarbe ebenfalls auf rot, damit die Umrandungslinie die gleiche Farbe hat. Erweitern Sie das Programm mit dem Befehl blume(), so dass eine f√ºnfbl√§ttrige Blume gezeichnet wird. ‚≠êÔ∏è Zusatz: Blume mit Stiel. Erg√§nzen Sie die Blume mit einem Stiel. SSR","keywords":""},{"title":"8. Bedingte Ausf√ºhrung ‚ëÇ","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/verzweigung","content":"8. Bedingte Ausf√ºhrung ‚ëÇ Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. In Programmen m√∂chten wir w√§hrend der Ausf√ºhrung des Programms entscheiden k√∂nnen, ob Befehle ausgef√ºhrt werden oder nicht. Auch m√∂chten wir entscheiden k√∂nnen, ob eine Wiederholung abgebrochen werden soll. Vergleichen‚Äã Um zu entscheiden, ob Befehle ausgef√ºhrt werden sollen, wird immer eine eine Frage gestellt, die eindeutig mit &quot;Ja&quot; oder &quot;Nein&quot; beantwortet werden kann. Wird die Frage mit &quot;Ja&quot; beantwortet, so ist diese Aussage Wahr und die Bedingung ist erf√ºllt. Andernfalls ist die Aussage Falsch und die Bedingung ist nicht erf√ºllt. Ein Frage kann als Vergleich geschrieben werden. Beispielsweise wird die Frage &quot;Ist 4 kleiner als 2?&quot; als 4 &lt; 2 aufgeschrieben. Die offensichtliche Antwort ist &quot;Nein&quot; und entspricht in Python dem Wert False. Spannender sind vergleiche, wenn diese mit Variablen durchgef√ºhrt werden, da man nicht schon im Voraus weiss, welcher Wert in einer Variable enthalten ist. Die Frage von &quot;Ist x kleiner als 2&quot; (x &lt; 2) h√§ngt also davon ab, welcher Wert zur Zeit in der Variable x gespeichert ist. alter = Wie alt bist du? Ist das alter kleiner als 14? Ausgabe: Du darfst Velo fahren Sonst, ist das alter kleiner als 16? Ausgabe: Du darfst T√∂ffli fahren Sonst, ist das alter kleiner als 18? Ausgabe: Du darfst Roller fahren Sonst Ausgabe: Du darfst Auto fahren alter = int(input('Wie alt bist du?')) if alter &lt; 14: print('Du darfst Velo fahren') elif alter &lt; 16: print('Du darfst T√∂ffli fahren') elif alter &lt; 18: print('Du darfst Roller fahren') else: print('Du darfst Auto fahren') In Python k√∂nnen alle √ºblichen Fragen als Vergleiche von zwei Werten geschrieben werden. Name\tMathematisch\tPythongr√∂sser\t&lt;\\lt&lt;\t&lt; kleiner\t&gt;\\gt&gt;\t&gt; gr√∂sser\t‚â§\\leq‚â§\t&lt;= kleiner\t‚â•\\geq‚â•\t&gt;= gleich\t======\t== ungleich\t‚â†\\neqÓÄ†=\t!= Achtung Bei der √úberpr√ºfung auf Gleichheit werden zwei Gleichheitszeichen == geschrieben. Ausgabefenster‚Äã In Python lassen sich Ausgaben nicht nur mit print sondern auch mit dem Befehl alert() (aus der Bibliothek browser) in einer Ausgabebox anzeigen. Die Ausgabe mit alert wird hier verwendet, weil die Online-Version von Python die Ausgaben mit print erst am Ende des Programms anzeigt wird. Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Zufallszahlen erraten‚Äã Ratespiel Probieren Sie das Ratespiel aus: Ratespiel Starten Beschreiben Sie in eigenen Worten, wie das Ratespiel funktioniert. Zeichnen Sie mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. Schreiben Sie gem√§ss dem Struktogramm das Ratespiel in Python. ratespiel.py from browser import alert from random import randint Hinweis Wenn die Zahl gefunden wurde, soll die Spieler:in nicht mehr nach einer Eingabe gefragt werden. Mit dem Befehl break kann die Wiederholung abgebrochen werden. break Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus. SSR","keywords":""},{"title":"Weihnachtskarten","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/xmas","content":"Weihnachtskarten XMAS-1.py from turtle import * XMAS-2.py from turtle import * XMAS-3.py from turtle import * XMAS-4.py from turtle import * XMAS-5.py from turtle import * SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Wiedereinstieg","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/intro","content":"Wiedereinstieg 1. Aufgabe Das Programm zeichnet eine Sonne mit 13 Strahlen. √Ñndern Sie das Programm so ab, dass es nun eine Sonne mit 19 Strahlen zeichnet. Setzen Sie die Stiftdicke auf 5 und die Stiftfarbe auf Rot. F√ºllen Sie die Sonne mit Ihrer Lieblingsfarbe (aber nicht mit Rot) aus. aufgabe1.py from turtle import * speed(0) def bogen(distanz, drehung): for i in range(20): backward(distanz) right(drehung) def strahl(): bogen(3, 5) left(90) bogen(4, -10) right(190) for i in range(13): strahl() right(360 / 13) 2. Aufgabe def aufsummieren(zahl): summe = 0 for i in range(zahl): summe = summe + i return summe print('Summe der ersten 10 Zahlen', aufsummieren(3)) print('Summe der ersten 10 Zahlen', aufsummieren(10)) Untersuchen Sie den obigen Code, und flicken Sie ihn. Die korrekten Ausgaben f√ºr die Summen von 3 bzw. 10 lauten: aufsummieren(3) 1+2+3=61 + 2 + 3 = 61+2+3=6 aufsummieren(10) 1+2+3+4+5+6+7+8+9+10=551 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 551+2+3+4+5+6+7+8+9+10=55 Schreiben Sie eine Funktion aufmultiplizieren(zahl), welche alle nat√ºrlichen Zahlen bis und mit der angegebenen Zahl miteinander multiplizieren. √úberpr√ºfen Sie Ihre Funktion mit verschiedenen Zahlen: aufmultiplizieren(3) 1‚ãÖ2‚ãÖ3=61 \\cdot 2 \\cdot 3 = 61‚ãÖ2‚ãÖ3=6 aufmultiplizieren(10) 1‚ãÖ2‚ãÖ3‚ãÖ4‚ãÖ5‚ãÖ6‚ãÖ7‚ãÖ8‚ãÖ9‚ãÖ10=36288001 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot 5 \\cdot 6 \\cdot 7 \\cdot 8 \\cdot 9 \\cdot 10 = 36288001‚ãÖ2‚ãÖ3‚ãÖ4‚ãÖ5‚ãÖ6‚ãÖ7‚ãÖ8‚ãÖ9‚ãÖ10=3628800","keywords":""},{"title":"9. ‚≠êÔ∏è While","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/while","content":"9. ‚≠êÔ∏è While Wiederholen, solange die Frage mit &quot;Ja&quot; beantwortet wird‚Äã Eine Wiederholung mit einer Frage f√ºhrt einen Codeblock so lange aus, bis die Frage nicht mehr mit &quot;Ja&quot; beantwortet wird. Im folgenden Beispiel wird solange eine Spirale gezeichnet, bis die Distanz der Turtle vom Zentrum mehr als 200px betr√§gt. Unendliche Schleife Diese Art von Wiederholung kann dazu f√ºhren, dass eine Frage immer mit &quot;Ja&quot; beantwortet wird und das Programm also nie endet. Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das Programm zu Dies gelingt: Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das laufende Programm zu stoppen, muss: der ganze Tab geschlossen und die Seite in einem neuen Tab ge√∂ffnet werden. (Tipp: Die URL zuerst kopieren...) (den ganzen Browser √ºber den Taskmanager schliessen) winkel = 20 setzen Ist der Abstand zum Zentrum kleiner als 200px? 5 Schritte vorw√§rts winkel¬∞ nach links winkel auf 99% des aktuellen Werts setzen from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Oft k√∂nnte man dies auch mit einer for-Schleife erreichen. Jedoch m√ºsste man dann zuerst berechnen, wie viele Schritte n√∂tig sind, bis dies der Fall ist. Im obigen Beispiel kann etwa der Schrumpf-Faktor (0.99) ver√§ndern, ohne die Frage (weniger als 200px Abstand zum Zentrum?) zu √§ndern. Aufgabe Probieren Sie es aus und spielen Sie mit dem Schrumpf-Faktor 0.99 im obigen Bispiel. Spirale.py from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Wann gibt es mehr/weniger Windungen? Wann entsteht eine unendliche Schleife? Wiederholungen mit der while-Schleife‚Äã Mit der while-Schleife k√∂nnen alle Wiederholungen, die mit der for i in range(...): Syntax erzeugt wurden, ebenfalls erzeugt werden. Dabei muss aber jeweils eine Variable, z.B. i, verwendet werden, welche sich die Anzahl Wiederholungen merkt. Nat√ºrlich muss diese Variable dann bei jeder Wiederholung um eins hochgez√§hlt werden. Eine solche Variable, die bei jeder Wiederholung erh√∂ht wird, wird Schleifenz√§hler oder Laufvariable genannt. from turtle import * i = 0 while i &lt; 4: forward(100) left(90) i = i + 1 for zu while Schreiben Sie das untenstehende Programm so um, dass nur noch while Schleifen verwendet werden. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) to-while.py from turtle import * SSR while zu for Schreiben Sie das untenstehende Programm so um, dass nur noch for Schleifen verwendet werden. from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() def quadrat(): i = 0 while i &lt; 4: forward(20) left(90) i = i + 1 zeile = 0 while zeile &lt; 5: spalte = 0 while spalte &lt; 3: move(zeile * 20, spalte * 20) quadrat() spalte = spalte + 1 zeile = zeile + 1 to-while.py from turtle import * SSR Anwendung‚Äã Die while-Schleife kommt oft bei Benutzerinteraktionen, Simulationen oder bei sich dynamisch √§ndernden Daten vor. Sonstige Wiederholungen lassen sich normalerweise einfacher mit einer for-Schleife umsetzen. Ratespiel √Ñndern Sie das Ratespiel aus dem Kapitel Verzweigungen so ab, dass die Spieler:in unendlich viele Versuche hat um die Zahl zu finden. Wurde die gesuchte Zahl gefunden, soll die Anzahl Versuche zur√ºckgemeldet werden. SSR","keywords":""},{"title":"6. Parameter ‚äï‚äñ","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/functions-params","content":"6. Parameter ‚äï‚äñ Ein weiteres Strukturelement eines Algorithmus sind Parameter. Die Verwendung von Parametern haben wir bereits in Aktion gesehen - im Struktogramm sind alle Parameter unterstrichen, in Python werden alle Parameter als Liste, abgetrennt mit Kommas, in den runden Klammern geschrieben. Zur Erinnerung Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Beispiel: Bei einem Online-Rezept kann der Parameter Anzahl Personen mit den Kn√∂pfen ‚äï und ‚äñ variiert werden - die Mengenangaben werden dann aktualisiert. Aufgabe Markieren Sie im folgenden Programm (links) wie folgt: Parameter unterstreichen Befehlsnamen gelb markieren from turtle import * goto(20, 30) for i in range(5): left(90) forward(17) right(90) forward(29) SSR Wie k√∂nnen Unterprogramme geschrieben werden, die Parameter akzeptieren? Untersuchen Sie die folgenden Unterprogramme (f√ºhren Sie diese aus!) und notieren Sie sich, was Sie feststellen. Unterprogramme mit Parametern hello.py def hallo(name): print('Hallo', name) hallo('Maria') hallo('Reto') hallo('Hans') rechnen.py def quotient(zahl1, zahl2): print(zahl1, ':', zahl2, '=', zahl1 / zahl2) quotient(2, 3) quotient(5, 9) quotient(12, 20 + 4) ‚≠êÔ∏è Was sind die Parameter bei quotient(12, 20 + 4)? In welcher Reihenfolge werden diese verrechnet? SSR Unterprogramme mit Parametern‚Äã Parameter sind also Werte, die an ein Unterprogramm √ºbergeben werden k√∂nnen. Damit der √ºbergebene Wert im Unterprogramm wiederverwendet werden kann, braucht jeder Parameter einen Namen. Der Wert ist dann √ºber diesen Namen abrufbar. Der Parametername ist frei w√§hlbar, sollte aber seine Bedeutung widerspiegeln. Beispiel: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) color('red') quadrat(50) # ein Quadrat mit der Gr√∂sse 50 zeichnen color('blue') quadrat(100) # ein Quadrat mit der Gr√∂sse 100 zeichnen Mehrere Parameter‚Äã Manchmal ist es praktisch (oder auch n√∂tig), mehrere Parameter an ein Unterprogramm zu √ºbergeben. Das haben wir etwa beim Befehl goto(x, y) bereits gesehen. Beim obigen Programm k√∂nnte etwa auch die Farbe direkt im Unterprogramm square gesetzt werden: from turtle import * def quadrat(size, farbe): color(farbe) for i in range(4): forward(size) left(90) quadrat(50, 'red') # ein rotes Quadrat mit der Gr√∂sse 50 zeichnen quadrat(100, 'blue') # ein blaues Quadrat mit der Gr√∂sse 100 zeichnen Es ist prinzipiell m√∂glich, beliebig viele Parameter nacheinander zu √ºbergeben. H√§ufige Fehler Ein h√§ufiger Fehler sind vergessene Kommas zwischen zwei Parameternamen. Dann entsteht ein SyntaxError. Parameternamen sechseck.py from turtle import * Definieren Sie das Unterprogramm sechseck(size) welches ein Sechseck mit der Gr√∂sse size zeichnet. Rufen Sie das Programm mit sechseck(20) auf. Erzeugen Sie nun 10 Sechsecke. Das kleinste Sechseck hat die Seitenl√§nge 10, das gr√∂sste die Seitenl√§ng 100. F√ºgen Sie der Funktion sechseck(size) den Parameter farbe hinzu und erzeugen Sie mit folgendes Bild: Farben: violet, indigo, blue, green, lime, lightgreen, yellow, orange, orangered, red ‚ùì In welcher Reihenfolge m√ºssen die Sechsecke gezeichnet werden, damit genau das obige Bild entsteht? Tipp: Die Stiftdicke k√∂nnen Sie mit pensize(10) auf 10 setzen. SSR Wiederholungen‚Äã Wiederholung: üîÅ Wiederholte Ausf√ºhrung Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt. from turtle import * for i in range(4): forward(50) left(90) Wozu steht eigentlich das i im for i in range(4)? Das ist fast wie ein Parameter: i enth√§lt die Anzahl bereits ausgef√ºhrter Wiederholungen. W√§hrend Wiederholung 1: i=0, keine Wiederholung abgeschlossen ist. W√§hrend Wiederholung 2: i=1, eine Wiederholung ist bereits abgeschlossen. W√§hrend Wiederholung 3: i=2, zwei Wiederholungen sind bereits abgeschlossen. W√§hrend Wiederholung 4: i=3, drei Wiederholungen sind bereits abgeschlossen. Der Wert, welcher in i steht, kann auch verwendet werden: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) for i in range(10): quadrat(i * 10 + 10) ‚≠êÔ∏è Zusatzparameter von range() Definition range(start, ende, schritt)‚Äã Der Befehl range kann mit bis zu drei Parametern arbeiten, wobei start der erste verwendete Wert, ende das obere ganzzahlige Limit angibt, welches aber selber nie erreicht wird! und schritt den Abstand zwischen zwei Zahlen angibt. for i in range(2, 11, 3): print(i) Im obigen Beispiel startet i bei 2 und wird solange um 3 erh√∂ht, bis die Zahl 11 erreicht oder √ºberschiesst. ! 11 wird nicht angenommen. Aufgabe Kopieren Sie die Definition eines Hauses aus der letzten √úbung in dieses Programm. Modifizieren Sie das Unterprogramm haus(size) so ab, dass nun die Gr√∂sse des Hauses spezifiziert werden kann. Die Wurzel einer Zahl kann mit sqrt(zahl) berechnet werden. Schreiben Sie ein Unterprogramm move(x, y), welches die Schritte Stift heben zur Position x, y gehen Stift senken zusammenfasst. Mit dem Befehl randint(min, max) aus der Bibliothek random kann eine zuf√§llige ganze Zahl erzeugt werden. Dabei muss der kleinst und der gr√∂sstm√∂gliche Wert angegeben werden. Mit move(randint(-20, 20), randint(-20, 20)) kann also die Turtle an eine beliebige Position verschoben werden. Zeichnen Sie 20 H√§user an zuf√§lligen Positionen mit der Gr√∂sse 30. Stadt W√§hlen Sie nun auch die Gr√∂sse zuf√§llig: haus(randint(10, 100)) Nun soll auch noch die Farbe zuf√§llig gew√§hlt werden. Der Befehl choice aus der Bibliothek random gibt jeweils ein zuf√§lliges Element einer Liste zur√ºck: choice([1, 3, 5, 7, 9]) etwa w√§hlt zuf√§llig eine ungerade Zahl zwischen 1 und 10 aus. Die Liste der Farben: ['violet', 'indigo', 'blue', 'green', 'lime', 'lightgreen', 'yellow', 'orange', 'orangered', 'red'] stadt.py from turtle import * from math import sqrt from random import randint, choice SSR ‚≠êÔ∏è Zusatz Zeichnen Sie folgende Quadrate. Auf wie viele Zeilen k√∂nnen Sie Ihr Programm k√ºrzen? quadrate.py from turtle import * SSR","keywords":""},{"title":"Turtle Befehle","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/turtle-commands","content":"Turtle Befehle Bewegungen‚Äã Definition forward(n) fd(n)‚Äã Bewegt die Turtle n Pixel nach vorne. from turtle import * ### PRE forward(100) Definition backward(n) back(n) bk(n)‚Äã Bewegt die Turtle n Pixel r√ºckw√§rts. from turtle import * ### PRE backward(100) Definition left(angle) lt(angle)‚Äã Dreht die Turtle angle Grad nach links. from turtle import * ### PRE left(90) Definition right(angle) rt(angle)‚Äã Dreht die Turtle angle Grad nach rechts. from turtle import * ### PRE right(90) Definition goto(x, y)‚Äã Bewegt die Turtle zur Position mit den Koordinaten (x, y). Beispiel: goto(50, 100) from turtle import * ### PRE goto(50, -50) Definition home()‚Äã Setzt die Turtle auf die Ursprungsposition (0, 0) zur√ºck und setzt die Orientierung der Turtle auf rechts ‚ñ∂Ô∏è. from turtle import * speed(0) penup() goto(20, 30) pendown() left(30) write('(20|30), 30¬∞ links', font=('Arial', 8, 'normal')) speed(1) ### PRE home() Definition setheading(to_angle) seth(to_angle)‚Äã Dreht die Turtle, bis der angegebene Winkel erreicht ist. Winkel\tAusrichtung0\t‚ñ∂Ô∏è 90\t‚ñ≤ 180\t‚óÄÔ∏è 270\t‚ñº from turtle import * ### PRE setheading(120) Stift‚Äã Definition penup() up() pu()‚Äã Hebt den Stift an - beim Bewegen der Turtle wird keine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) Definition pendown() down() pd()‚Äã Senkt den Stift - beim Bewegen der Turtle wird wieder eine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) pendown() forward(100) Definition isdown()‚Äã √úberpr√ºft, ob der Stift aktuell gesenkt ist und gibt das Resultat als True (=Stift gesenkt) oder False (=Stift oben) zur√ºck. from turtle import * ### PRE if isdown(): penup() forward(100) Definition pencolor(color)‚Äã Legt die Stiftfarbe fest. Der Parameter color enth√§lt Text, die Farbe muss also mit Anf√ºhrungszeichen umgeben sein. Beispiel: from turtle import * ### PRE pencolor('red') forward(100) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white RGB-Farben RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) from turtle import * pencolor('rgb(255, 217, 0)') forward(100) left(120) r = 30 g = 180 b = 77 # oder variabel pencolor(f'rgb({r}, {g}, {b}') forward(100) Unterschiede zum offiziellen Turtle-Modul Das offizielle Turtle-Modul verwendet zur Anzeige von Grafiken nicht einen Browser, sonder Tkinter. Dort k√∂nnen ebenfalls RGB-Farben verwendet werden, sie werden aber mit einer anderen Syntax √ºbergeben: Mehr dazu hier üëâ https://docs.python.org/3/library/turtle.html#turtle.color Definition pensize(size)‚Äã Legt die Stiftdicke size fest. Standard: pensize(1) from turtle import * ### PRE pensize(10) forward(100) Definition dot() dot(diameter)‚Äã Zeichnet einen Punkt an der aktuellen Position mit dem angegebenen Durchmesser diameter. Wenn kein Durchmesser angegeben wird, verwendet es standardm√§ssig das doppelte der aktuellen Stiftdicke (pensize), aber mindestens einen Durchmesser von 5. from turtle import * ### PRE dot() forward(20) dot(20) Definition circle(radius)‚Äã Zeichnet einen Kreis mit dem angegebenen radius. from turtle import * ### PRE circle(100) Definition circle(radius, angle)‚Äã Zeichnet einen Kreisbogen mit dem angegebenen radius und angle. Beispiel from turtle import * ### PRE circle(50, 180) F√ºllen‚Äã Definition fillcolor(color)‚Äã Legt die color f√ºr das F√ºllen von geschlossenen Pfaden fest. Farbpalette from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition begin_fill()‚Äã Startet einen geschlossenen Pfad. from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition end_fill()‚Äã Endet die Aufzeichnung des Pfades und schliesst diesen. Beispiel from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Aussehen und Geschwindigkeit‚Äã Definition shape(form)‚Äã √Ñndert die Form der Turtle. F√ºr den Parameter form k√∂nnen folgende Werte verwendet werden: 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) from turtle import * ### PRE shape('turtle') Definition hideturtle()‚Äã Macht die Turtle unsichtbar. ‚ö†Ô∏è Der Stift wird durch das Verstecken nicht automatisch angehoben. from turtle import * ### PRE hideturtle() forward(100) Definition showturtle()‚Äã Zeigt die Turtle wieder an. ‚ö†Ô∏è Der Stift wird durch das Anzeigen nicht automatisch wieder abgesetzt. from turtle import * speed(1) ### PRE forward(20) penup() hideturtle() forward(30) showturtle() left(90) forward(50) Definition speed(v)‚Äã Legt die Geschwindigkeit v der Turtle fest. 1 am langsamsten 3 Standard 6 schnell ... (Schnellstm√∂gliche Geschwindigkeit kann mit speed(0) festgelegt werden.) from turtle import * ### PRE speed(1) forward(100) ","keywords":""},{"title":" Pygame Zero","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz","content":" Pygame Zero @ üîó Offizielle Dokumentation üîó Coding Games With Pygame Zero &amp; Python üîó Beispiele aus dem Wireframe Magazine","keywords":""},{"title":"Beispiele","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples","content":"Beispiele","keywords":""},{"title":"7. Variablen","type":0,"sectionRef":"#","url":"/25h/Programmieren-1/Turtlegrafik/variablen","content":"7. Variablen Einf√ºhrung‚Äã Im vorhergehenden Kapitel haben Sie Quadrate gezeichnet, deren Seitenl√§nge im Programm fest eingebaut waren. Manchmal m√∂chten Sie aber die Seitenl√§nge mit einem Eingabedialog einlesen. Dazu muss das Programm die eingegebene Zahl als Variable speichern. Variablen kann man sich wie eine Z√ºgelbox vorstellen, welche mit einem Namen angeschrieben ist. Der Name beschreibt, was sich in der Box befindet, damit man den Inhalt sp√§ter auch wieder findet. Variable Zuweisen Mit der Schreibweise anzahl = 12 wird eine solche Box erstellt. In Zukunft sagen wir, dass damit die Variable anzahl definiert und ihr einen Wert zugewiesen wird. Um den Inhalt der Box zu erhalten, kann der Name (ohne Anf√ºhrungszeichen) geschrieben werden. Im Struktogramm werden alle Variablen umrahmt. anzahl = 12 Ausgabe: anzahl anzahl = 12 print(anzahl) Mit Variablen rechnen anzahl = 12 print(anzahl + 13) Mehrere Variablen anzahl = 12 gewicht = 100 print(f'{anzahl} Tafeln Schokolade sind {anzahl * gewicht} g schwer') Formatierter Text: f'{anzahl} Tafeln' Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') √úberschreiben: Variablen neu Zuweisen‚Äã In einer Box kann immer nur ein einziges Objekt abgelegt werden. Wenn sp√§ter also ein neuer Wert in bereits beschriftete Z√ºgelbox gelegt wird, so wird der aktuelle Wert verdr√§ngt. K√ºnftig wird diese erneute Zuweisung √úberschreiben einer Variable genannt. Variablen √ºberschreiben anzahl = 12 print(f'Anzahl = {anzahl}') anzahl = 7 print(f'Anzahl = {anzahl}') Im obigen Beispiel wird der initiale Wert der Variable anzahl (12) mit dem neuen Wert 7 √ºberschrieben. Merke: G√ºltigkeitsbereich Die Variable wird nicht r√ºckwirkend ver√§ndert. Solange eine Variable nicht √ºberschrieben wird, besitzt sie den aktuell zugewiesenen Wert. Aufgabe Was geschieht im untenstehenden Programm? F√ºgen Sie bei jeder Zeile mit einem print einen Kommentar hinzu mit: ausgegebene Zahl aktuell gespeicherter Wert in der Variable anzahl variable.py anzahl = 2 print(anzahl) # =&gt; 2, anzahl=2 print(anzahl + 2) anzahl = 7 print(anzahl) print(anzahl + 2) anzahl = anzahl + 3 print(anzahl) anzahl = anzahl + 3 print(anzahl + 1) anzahl = anzahl + 3 print(anzahl) SSR Gleichheitszeichen Das Gleichheitszeichen hat also in Computerprogrammen nicht dieselbe Bedeutung wie in der Mathematik. Es ist keine Gleichung, sondern eine Variablendefinition oder eine Zuweisung. Variablenwert einlesen, ver√§ndern und ausgeben Im Programm kann mit Hilfe einer Eingabeboxen Werte eingelesen und einer Variable zugewiesen werden. from turtle import * speed(12) anzahl = input('Wie viele Strecken soll die Spirale haben?') anzahl = int(anzahl) seite = 10 for i in range(anzahl): forward(seite) left(90) seite = seite + 10 Eingabe In Python ist das Resultat einer Eingabe immer ein Text. Ein Text kann aber in eine Zahl umgewandelt werden, so dass dann auch damit gerechnet werden kann. Der Befehl int wandelt eine Eingabe in eine ganze Zahl um. Der Befehl float wandelt eine Eingabe in eine Dezimalzahl um. # Centimeter zu Meter gr√∂sse = input('Wie gross bist du [cm]?') gr√∂sse = int(gr√∂sse) print(f'Ich bin {gr√∂sse / 100} m gross') # Meter zu Centimeter gr√∂sse = input('Wie gross bist du [m]?') gr√∂sse = float(gr√∂sse) print(f'Ich bin {gr√∂sse * 100} cm gross') Eingabe - Struktogramm‚Äã Wird ein Wert √ºber eine Eingabeaufforderung eingelesen, so wird dies im Struktogramm mit einem Parallelogramm angezeigt, wobei auch die Variable, welcher das Resultat zugewiesen wird, festgehalten wird: gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') Aufgabe 1 - BMI √úbersetzen Sie das folgende Struktogramm in Python Code: gr√∂sse = Wie gross bist du [m]? gewicht = Wie schwer bist du [kg]? bmi = gewicht geteilt durch gr√∂sse mal gr√∂sse Ausgabe: BMI: bmi bmi.py Hinweis Was ist die Bedeutung des folgenden Fehlers? TypeError: Can't multiply sequence by non-int of type 'str' ‚Üí Der eingegebene Text kann nicht multipliziert werden - zuerst m√ºssen gewicht und gr√∂sse in Dezimalzahlen (float) umgewandelt werden: gewicht = float(gewicht). SSR Aufgabe 2 ‚Äì n-Eck Nach Eingabe der Anzahl Ecken in einer Eingabebox soll die Turtle ein regelm√§ssiges n-Eck zeichnen. Beispielsweise wird nach der Eingabe 8 ein 8-Eck gezeichnet. Den passenden Drehwinkel soll das Programm berechnen. n-eck.py from turtle import * SSR Aufgabe 3 Nach der Eingabe eines Winkels in einer Eingabebox zeichnet die Turtle 30 Strecken der L√§nge 100, wobei sie nach jeder Strecke um den gegebenen Winkel nach links dreht. Experimentieren Sie mit verschiedenen Winkeln und zeichnen Sie sch√∂ne Figuren. Mit speed(10) k√∂nnen Sie das Zeichnen beschleunigen. star.py from turtle import * SSR","keywords":""},{"title":"Game-Projekt","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/project","content":"Game-Projekt Ziel Ein Spiel selber nachbauen Das Konzept der Spieleprogrammierung verstehen Was ist ein Game-Loop? Wie lassen sich Zust√§nde darstellen, speichern und ver√§ndern? Das Spiel anpassen und allenfalls erweitern eigene Bilder und Sounds einbinden f√ºr das eigene Ger√§t optimieren (Bildschirmgr√∂sse, Tastaturbelegung, ...) Snake@ üëâ https://simplegametutorials.github.io/pygamezero/snake/ Arcanoid@ üëâ https://new.pythonforengineers.com Flappy Bird@ üëâ https://pygamezero-bird.readthedocs.io/en/latest/ Auftrag W√§hlen Sie ein Spiel aus der Liste aus und geben Sie an, welches Sie ausgew√§hlt haben: Starten Sie mit dem Tutorial und bauen Sie die einzelnen Schritte nach. Der Code soll nicht einfach kopiert werden, sondern verstanden und angepasst werden. Der geschriebene Code soll kommentiert werden. Was macht der Code? Was ist die Funktion? Was ist der Zweck? # Zur Erinnerung: In Python beginnt ein Kommentar mit einem Hashtag In jeder Doppelstunde nehmen Sie sich mindestens 10 Minuten Zeit, um im untenstehenden Tagebuch festzuhalten: Was Sie gemacht haben Welche Teile Sie umgesetzt haben Was Sie neues gelernt haben Erg√§nzungen und Verbesserungen beim Tutorial - gibt es Code-Teile, welche zus√§tzliche Kommentare brauchen? Schreiben Sie diese! ","keywords":""},{"title":"Listen","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/Listen","content":"Listen Zum Speichern von mehreren Werten unter einem einzigen Namen verwendet man in Python Listen. Man kann sich Listen als Tabellen mit einer Spalte vorstellen. Die Zellen in der Tabelle werden als Elemente bezeichnet und sind durchnummeriert. So kann man einzelne in der Liste gespeichert Werte unterscheiden. Die Nummer eines Elements wird als dessen Index bezeichnet. Wichtig Das erste Element in der Liste tr√§gt den Index 0. Der Index des letzten Elementes ist die L√§nge der Liste minus 1. Das folgende Bild illustriert dies f√ºr eine Liste mit 4 Noten. Die L√§nge der Liste ist 4, das letzte Element tr√§gt den Index 3. Index Wert 0 4.5 1 5 2 3.5 3 5.5 In Python kann man diese Liste mit eckigen Klammern [ ] wie folgt erzeugen: noten = [4.5, 5, 3.5, 5.5] print('Die vierte Note war eine', noten[3]) Im Beispiel wird die vierte Note mit dem Index 3 ausgegeben. Python Listen: Befehle‚Äã Definition Liste erzeugen‚Äã # Liste erzeugen und Variablen zuweisen noten = [3.5, 6, 5, 4.5] # Ganze Liste anzeigen print(noten) # Element mit Index 2 aus der Liste anzeigen print(noten[2]) Definition Leere Liste []‚Äã # Leere Liste erstellen noten = [] print(noten) Definition Liste mit Text‚Äã # Liste mit Strings noten =['gut', 'erf√ºllt', 'mangelhaft', 'erf√ºllt'] print(noten) Definition Schleife √ºber alle Elemente der Liste‚Äã noten = [3.5, 6, 5, 4.5] for note in noten: print(note) Definition Schleife √ºber Listen-Indices‚Äã noten = [3.5, 6, 5, 4.5] # (beginnt bei 0 und endet mit 1 weniger als L√§nge der Liste) for index in range(0, len(noten)): print(index, &quot;:&quot;, noten[index]) Listen Untersuchen‚Äã Definition L√§nge einer Liste: len(&lt;liste&gt;)‚Äã noten = [4.5, 5, 3.5, 5.5] print(len(noten)) Definition Maximum: max(&lt;liste&gt;)‚Äã Gibt das maximale Element einer numerischen Liste zur√ºck noten = [4.5, 5, 3.5, 5.5] print('Beste Noten', max(noten)) Definition Minimum: min(&lt;liste&gt;)‚Äã Gibt das minimale Element einer numerischen Liste zur√ºck noten = [4.5, 5, 3.5, 5.5] print('Schlechteste Noten', min(noten)) Definition Wert in einer Liste? &lt;wert&gt; in &lt;liste&gt;‚Äã √úberpr√ºft, ob sich ein Wert in einer Liste befindet noten = [4.5, 5, 3.5, 5.5] if 6 in noten: print('Gl√ºckwunsch, du hast min. einmal eine 6 geschrieben') else: print('Du hast noch keine 6 geschrieben') Definition Anzahl Elemente mit einem Wert? &lt;liste&gt;.count(&lt;wert&gt;)‚Äã Z√§hlt, wie oft sich ein Wert in einer Liste befindet. noten = [4.5, 5, 3.5, 5.5, 5] for i in [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6]: if noten.count(i) &gt; 0: print(f'Anzahl {i}: {noten.count(i)}') Elemente abfragen‚Äã Definition Erstes Element: &lt;liste&gt;[0]‚Äã noten = [4.5, 5, 3.5, 5.5] if len(noten) &gt; 0: print(noten[0]) Bemerken Sie: es wird zuerst √ºberpr√ºft, ob die Liste √ºberhaupt ein Element enth√§lt. Nur dann wird dieses Element abgerufen und ausgegeben. Definition Letztes Element &lt;liste&gt;[-1]‚Äã noten = [4.5, 5, 3.5, 5.5] if len(noten) &gt; 0: print(noten[-1]) # oder gleichbedeutend print(noten[len(noten) - 1]) Definition Fehler: IndexError‚Äã Fragt man einen Index ab, den es nicht gibt (weil es zu wenige Elemente in der Liste hat), so entsteht ein IndexError. Beispiel: noten = [3.5, 6, 5, 4.5] # Eine Liste mit 4 Elementen: Gr√∂sster Index ist 3 noten[4] = 6 Elemente Ver√§ndern‚Äã Definition Zuordnung: &lt;liste&gt;[index] = &lt;wert&gt;‚Äã Ein Element in der Liste kann durch eine Zuordnung ver√§ndert werden. Im untenstehenden Beispiel werden alle ungen√ºgenden Noten auf eine 5 gesetzt. noten = [4.5, 5, 3.5, 5.5] for i in range(len(noten)): if noten[i] &lt; 4: noten[i] = 5 print(noten) Elemente Hinzuf√ºgen/Entfernen‚Äã Definition hinzuf√ºgen: &lt;liste&gt;.append(&lt;wert&gt;)‚Äã append f√ºgt ein neues Element am Ende der Liste hinzu. noten = [4.5, 5, 3.5, 5.5] print('Urspr√ºnglich', noten) noten.append(6) print('Neu', noten) An beliebiger Stelle einf√ºgen: &lt;liste&gt;.insert(&lt;index&gt;, &lt;wert&gt;) noten = [4.5, 5, 3.5, 5.5] print('Urspr√ºnglich', noten) noten.insert(1, 6) # Bei Index 1 (2. Stelle) wird eine 6 eingef√ºgt print('Neu', noten) Definition entfernen: &lt;liste&gt;.pop(&lt;index&gt;)‚Äã Entfernt das Element an der Stelle index und gibt dieses zur√ºck: noten = [4.5, 5, 3.5, 5.5] entfernt = noten.pop(2) print('Entfernt', entfernt) print('Noten', noten) Definition Aufsteigend sortieren &lt;liste&gt;.sort()‚Äã noten = [3.5, 6, 5, 4, 4.5, 5] noten.sort() print(noten) ","keywords":""},{"title":"Zeichenprogramm","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples/paint","content":"Zeichenprogramm Beschreibung‚Äã Ein Zeichenprogramm Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Paint&quot; WIDTH = 800 HEIGHT = 800 farbwahl = Actor(&quot;button_red&quot;) farbwahl.farbe = 255, 0, 0 farbwahl.top = 10 farbwahl.left = 10 loeschen = Actor(&quot;button_grey&quot;) loeschen.top = 70 loeschen.left = 10 def on_mouse_down(pos): if farbwahl.collidepoint(pos): if farbwahl.image == &quot;button_red&quot;: farbwahl.image = &quot;button_blue&quot; farbwahl.farbe = 0, 0, 255 elif farbwahl.image == &quot;button_blue&quot;: farbwahl.image = &quot;button_green&quot; farbwahl.farbe = 0, 255, 0 elif farbwahl.image == &quot;button_green&quot;: farbwahl.image = &quot;button_yellow&quot; farbwahl.farbe = 255, 255, 0 elif farbwahl.image == &quot;button_yellow&quot;: farbwahl.image = &quot;button_red&quot; farbwahl.farbe = 255, 0, 0 if loeschen.collidepoint(pos): screen.clear() def on_mouse_move(pos, buttons): if buttons: screen.draw.filled_circle(pos, 2, farbwahl.farbe) def draw(): farbwahl.draw() loeschen.draw() pgzrun.go() ","keywords":""},{"title":"Animation","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/animation","content":"Animation def draw(): wird von Pygame Zero aufgerufen. Hier wird gezeichnet. def update(): wird von Pygame Zero aufgerufen. Hier wird der n√§chste Animationsschritt berechnet. Start von Pygame Zero‚Äã Im Pygame Zero-Modus des Mu Editors wird Pygame Zero automatisch gestartet, sobald das eigene Skript fertig abgearbeitet worden ist. In einem anderen Editor muss Pygame Zero durch einen Befehl am Ende des eigenen Skripts gestartet werden. Dazu muss das Modul pgzrun importiert werden: import pgzrun # Eigene Befehle ... pgzrun.go() Funktionsweise von Pygame Zero ohne Animation‚Äã Das Hauptprogramm von Pygame Zero wird erst gestartet, nachdem das ganze Skript abgearbeitet worden ist. Daf√ºr sorgt der spezielle Modus des Mu-Editors. Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen WIDTH und HEIGHT verwendet. Anschliessend ruft Pygame Zero das Unterprogramm draw() auf, welches im eignen Skript definiert worden ist. import pgzrun WEISS = (255, 255, 255) SCHWARZ = (0, 0, 0) def draw(): screen.fill(WEISS) screen.draw.text(&quot;Hallo Welt&quot;, top=10, left=10, color=SCHWARZ) pgzrun.go() Funktionsweise von Pygame Zero mit Animation‚Äã Falls im eigenen Skript ein Unterprogramm mit dem Namem update definiert wird, geht Pygame Zero davon aus, dass es sich um eine Animation handelt. Die Funktionsweise von Pygame Zero √§ndert sich entsprechend: Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen TITLE, WIDTH und HEIGHT verwendet. Anschliessend startet Pygame Zero den sogenannten Game Loop. Dabei wird erst das Unterprogramm update aufgerufen und anschliessend draw. Dies wird so lange wiederholt, bis das Programm abgebrochen wird. import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def update(): nemo.x = nemo.x + 1 def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Aufrufe planen","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/clock","content":"Aufrufe planen Um eine Aktion erst nach einer bestimmten Zeit auszul√∂sen, k√∂nnen mit dem clock-Objekt zuk√ºnftige Aufrufe von Unterprogrammen geplant werden. clock.schedule_unique(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Alle anderen geplanten Aufrufe des gleichen Unterprogramms werden abgebrochen. clock.schedule(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.schedule_interval(u, s) plant den regelm√§ssigen Aufruf des Unterprogramms u alle s Sekunden. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.unschedule(u) bricht alle geplanten Aufrufe des Unterprogramms u ab. Beispiel‚Äã Im folgenden Beispiel √§ndert das Aussehen des Fisches 1.5 Sekunden, nachdem die [Space]-Taste gedr√ºckt wurde. F√ºr die gew√ºnschte Aktion wird das Unterprogramm aendere_nemo definiert. Der Name des Unterprogramms kann frei gew√§hlt werden. Mit der Anweisung clock.schedule() wird der Aufruf geplant. Dabei werden in Klammern das aufzurufende Unterprogramm und die Verz√∂gerung in Sekunden angegeben: import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def aendere_nemo(): nemo.image = &quot;fisch_rot_links&quot; def update(): if keyboard.space: clock.schedule(aendere_nemo, 1.5) def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Pong","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples/pong","content":"Pong Beschreibung‚Äã Klassisches Pong-Spiel Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Pong&quot; WIDTH = 1200 HEIGHT = 800 PLAYER_SPEED = 5 spieler_links = Actor(&quot;schlaeger_blau&quot;) spieler_links.score = 0 spieler_links.y = HEIGHT / 2 spieler_links.left = 5 spieler_rechts = Actor(&quot;schlaeger_rot&quot;) spieler_rechts.score = 0 spieler_rechts.y = HEIGHT / 2 spieler_rechts.right = WIDTH - 6 ball = Actor(&quot;ball_blau_klein&quot;) ball.x = WIDTH / 2 ball.y = HEIGHT / 2 ball.vx = 5 ball.vy = 3 def bewege_spieler(spieler, up_key, down_key): if up_key: spieler.y = spieler.y - PLAYER_SPEED if down_key: spieler.y = spieler.y + PLAYER_SPEED if spieler.bottom &gt;= HEIGHT: spieler.bottom = HEIGHT - 1 if spieler.top &lt; 0: spieler.top = 0 def bewege_ball(): # Ball bewegen ball.x = ball.x + ball.vx ball.y = ball.y + ball.vy if ball.top &lt; 0: ball.top = 0 ball.vy = -ball.vy if ball.bottom &gt;= HEIGHT - 1: ball.bottom = HEIGHT - 1 ball.vy = -ball.vy # Abprallen am rechten Schl√§ger if ball.right &gt; spieler_rechts.left and ball.bottom &gt; spieler_rechts.top and ball.top &lt; spieler_rechts.bottom: ball.right = spieler_rechts.left ball.vx = -ball.vx # Abprallen am linken Schl√§ger if ball.left &lt; spieler_links.right and ball.bottom &gt; spieler_links.top and ball.top &lt; spieler_links.bottom: ball.left = spieler_links.right ball.vx = -ball.vx # Punkt f√ºr linken Spieler if ball.right &gt;= WIDTH: spieler_links.score = spieler_links.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 # Punkt f√ºr rechten Spieler if ball.left &lt; 0: spieler_rechts.score = spieler_rechts.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def update(): # linken Schl√§ger bewegen bewege_spieler(spieler_links, keyboard.q, keyboard.a) # rechten Schl√§ger bewegen bewege_spieler(spieler_rechts, keyboard.o, keyboard.l) bewege_ball() def zeichne_punktestand(): screen.draw.text(str(spieler_links.score), centerx=WIDTH / 2 - 80, top=20, fontsize=100) screen.draw.text(str(spieler_rechts.score), centerx=WIDTH / 2 + 80, top=20, fontsize=100) def draw(): screen.clear() spieler_links.draw() spieler_rechts.draw() ball.draw() zeichne_punktestand() pgzrun.go() ","keywords":""},{"title":"Push to Hole","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples/push-to-hole","content":"Push to Hole Beschreibung‚Äã Ein Ball muss mit der Maus in ein Loch geschoben werden. Das Loch √§ndert alle paar Sekunden seine Position. Grafiken‚Äã Programm‚Äã import pgzrun import random WIDTH = 800 HEIGHT = 800 green = 60, 180, 60 ball = Actor(&quot;ball_blau&quot;) ball.radius = ball.width / 2 ball.score = 0 loch = Actor(&quot;hole&quot;) def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def setze_ball(): ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def setze_loch(): loch.x = random.randint(0, WIDTH) loch.y = random.randint(0, HEIGHT) dauer = random.randint(3, 7) kollision_rand(loch) clock.schedule_unique(setze_loch, dauer) def on_mouse_move(pos): d = ball.distance_to(pos) if d &lt; ball.radius: stoss_laenge = ball.radius - d ball.x = ball.x + (ball.x - pos[0]) * stoss_laenge ball.y = ball.y + (ball.y - pos[1]) * stoss_laenge kollision_rand(ball) def update(): if ball.distance_to(loch) &lt; 10: ball.score = ball.score + 1 setze_ball() setze_loch() def draw(): screen.fill(green) loch.draw() ball.draw() screen.draw.text(&quot;Score: &quot; + str(ball.score), (10, 10), fontsize=60) setze_ball() setze_loch() pgzrun.go() ","keywords":""},{"title":"Tippspiel","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples/typing","content":"Tippspiel Beschreibung‚Äã Spiel, bei welchem man W√∂rter richtig abtippen muss, bevor die Zeit abl√§uft. Programm‚Äã import pgzrun import random TITLE = &quot;Typing Game&quot; WIDTH = 640 HEIGHT = 360 BG_COLOUR = (255, 255, 255) BLACK = (0, 0, 0) KEYMAP = { keys.A: &quot;a&quot;, keys.B: &quot;b&quot;, keys.C: &quot;c&quot;, keys.D: &quot;d&quot;, keys.E: &quot;e&quot;, keys.F: &quot;f&quot;, keys.G: &quot;g&quot;, keys.H: &quot;h&quot;, keys.I: &quot;i&quot;, keys.J: &quot;j&quot;, keys.K: &quot;k&quot;, keys.L: &quot;l&quot;, keys.M: &quot;m&quot;, keys.N: &quot;n&quot;, keys.O: &quot;o&quot;, keys.P: &quot;p&quot;, keys.Q: &quot;q&quot;, keys.R: &quot;r&quot;, keys.S: &quot;s&quot;, keys.T: &quot;t&quot;, keys.U: &quot;u&quot;, keys.V: &quot;v&quot;, keys.W: &quot;w&quot;, keys.X: &quot;x&quot;, keys.Y: &quot;y&quot;, keys.Z: &quot;z&quot;, keys.QUOTE: &quot;√§&quot;, keys.SEMICOLON: &quot;√∂&quot;, keys.LEFTBRACKET: &quot;√º&quot;, keys.SPACE: &quot; &quot; } words = [] file = open(&quot;wordlist.txt&quot;, &quot;r&quot;, -1, &quot;utf-8&quot;) for line in file: # Newline am Zeilenende abschneiden line = line.rstrip(&quot;\\n&quot;) # Wort zur Liste hinzuf√ºgen words.append(line) file.close() game = Actor(&quot;alien&quot;) game.level = 0 game.text = &quot;&quot; game.time = 5 MAX_TIME = 10 def update(dt): game.time = game.time - dt def draw(): screen.fill(BG_COLOUR) if game.time &lt; 0: screen.draw.text( &quot;GAME OVER&quot;, centerx=WIDTH / 2, centery=HEIGHT / 2, fontsize=60, color=BLACK ) return screen.draw.text(words[game.level], left=20, top=80, fontsize=60, color=BLACK) screen.draw.text(game.text, left=20, top=160, fontsize=60, color=(255, 0, 0)) width = WIDTH * game.time / MAX_TIME screen.draw.filled_rect(Rect((0, 10), (width, 50)), BLACK) def on_key_down(key): print(key) if game.time &lt; 0: return if key in KEYMAP: char = KEYMAP[key] if keyboard.lshift or keyboard.rshift: char = char.upper() game.text = game.text + char if key == keys.BACKSPACE: game.text = game.text[:-1] if game.text == words[game.level]: game.level = game.level + 1 game.time = game.time + 0.3 * len(game.text) game.text = &quot;&quot; pgzrun.go() ","keywords":""},{"title":"Asteroids","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/A-examples/asteroids","content":"Asteroids Grafiken‚Äã Quellen: Asteroid: OhjiroChan, OpenGameArt, Lizenz: CC0 Spaceship: Rawdanitsu, OpenGameArt, Lizenz: CC0 Laser and Thrust: Rawdanitsu, OpenGameArt, Lizenz: CC0 Programm‚Äã import math import pgzrun import random TITLE = &quot;Asteroids&quot; WIDTH = 1600 HEIGHT = 1200 ACCELERATION = 0.2 ROTATION = 3 SHOT_SPEED = 5 SHOT_COOLDOWN = 0.2 SHOT_DAMAGE = 10 SHOT_MAX_AGE = 3 background = Actor(&quot;weltraum&quot;) ship = Actor(&quot;raumschiff&quot;) thrust = Actor(&quot;raumschiff2&quot;) thrust.on = False asteroids = [] shots = [] def add_asteroid(parent=None): if parent: category = parent.category - 1 else: category = 3 asteroid = Actor(&quot;asteroid-&quot; + str(category)) if parent: asteroid.x = parent.x asteroid.y = parent.y else: asteroid.x = random.randint(0, WIDTH) asteroid.y = random.randint(0, HEIGHT) asteroid.vx = 0 asteroid.vy = 0 asteroid.category = category asteroid.stability = 30 * category acc = random.randint(1, 2) dir = random.randint(0, 360) accelerate(asteroid, acc, dir) asteroids.append(asteroid) def enable_shooting(): ship.can_shoot = True def add_shot(): shot = Actor(&quot;laser&quot;) shot.x = ship.x shot.y = ship.y shot.vx = 0 shot.vy = 0 shot.age = 0 shot.angle = ship.angle accelerate(shot, SHOT_SPEED, shot.angle) ship.can_shoot = False clock.schedule_unique(enable_shooting, SHOT_COOLDOWN) shots.append(shot) def accelerate(actor, acc, dir): a = math.radians(dir) actor.vx = actor.vx + math.cos(a) * acc actor.vy = actor.vy - math.sin(a) * acc def move(actor): actor.x = actor.x + actor.vx actor.y = actor.y + actor.vy if actor.x &gt; WIDTH: actor.x = 0 if actor.x &lt; 0: actor.x = WIDTH if actor.y &gt; HEIGHT: actor.y = 0 if actor.y &lt; 0: actor.y = HEIGHT def reset_game(): ship.x = WIDTH / 2 ship.y = HEIGHT / 2 ship.vx = 0 ship.vy = 0 ship.angle = 0 ship.speed = 0 ship.alive = True ship.can_shoot = True asteroids.clear() for i in range(1, 3): add_asteroid() def update_asteroid(asteroid): move(asteroid) i = asteroid.collidelist(shots) if i != -1: del shots[i] asteroid.stability = asteroid.stability - SHOT_DAMAGE if asteroid.stability &lt;= 0: asteroids.remove(asteroid) if asteroid.category &gt; 1: add_asteroid(asteroid) add_asteroid(asteroid) def update_shot(shot, dt): move(shot) shot.age = shot.age + dt if shot.age &gt; SHOT_MAX_AGE: shots.remove(shot) def update(dt): thrust.on = keyboard.up if keyboard.up: accelerate(ship, ACCELERATION, ship.angle) if keyboard.left: ship.angle = ship.angle + ROTATION if keyboard.right: ship.angle = ship.angle - ROTATION if keyboard.space and ship.can_shoot: add_shot() if keyboard.space and not ship.alive: reset_game() move(ship) if ship.collidelist(asteroids) != -1: ship.alive = False ship.can_shoot = False for asteroid in asteroids: update_asteroid(asteroid) for shot in shots: update_shot(shot, dt) def draw(): background.draw() for asteroid in asteroids: asteroid.draw() for shot in shots: shot.draw() if ship.alive: if thrust.on: thrust.x = ship.x thrust.y = ship.y thrust.angle = ship.angle thrust.draw() ship.draw() else: screen.draw.text(&quot;GAME OVER&quot;, center=(WIDTH / 2, HEIGHT / 2), fontsize=100) screen.draw.text( &quot;Press SPACE to start&quot;, center=(WIDTH / 2, HEIGHT / 2 + 60), fontsize=30 ) reset_game() pgzrun.go() ","keywords":""},{"title":"Zeichnen","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/draw","content":"Zeichnen Kreise‚Äã screen.draw.circle((x, y), r, farbe) zeichnet eine Kreislinie mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. screen.draw.filled_circle((x, y), r, farbe) zeichnet einen ausgef√ºllten Kreis mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Rechtecke‚Äã Rect(x, y, w, h) erstellt ein Rechteck-Objekt. Dabei sind x und y die Koordinaten der linken oberen Ecke, w ist die Breite und h die H√∂he des Rechtecks. screen.draw.rect(rect, farbe) zeichnet ein Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. screen.draw.filled_rect(rect, farbe) zeichnet ein ausgef√ºlltes Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. Linien‚Äã screen.draw.line((x1, y1), (x2, y2), farbe) zeichnet eine Linie vom Punkt (x1, y1) zum Punkt (x2, y2) in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Text‚Äã screen.draw.text(text, left=x, top=y, fontsize=, fontname=, color=) zeichnet den Text text an der angegebenen Position. Mit fontsize= kann die Schriftgr√∂sse festgelegt werden. Die horizontale Ausrichtung des Texts wird durch left=, centerx= oder right= angegeben, die vertikale Ausrichtung durch top=, centery= oder bottom=: Mit fontname= wird der Name einer Schriftart-Datei angegeben, welche im Unterverzeichnis fonts vorhanden sein muss. Mit color=(r, g, b) wird die Farbe angegeben. F√ºr die Angabe der horizontalen und vertikalen Koordinate muss je einer der obenstehenden Namen verwendet werden. Die folgende Anweisung zeichnet beispielsweise den Text ¬´Hallo Welt¬ª so, dass sich der Punkt (100, 100) unten und horizontal in der Mitte des Texts befindet: screen.draw.text(&quot;Hallo Welt&quot;, centerx=100, bottom=100, color=(255, 0, 0)) ","keywords":""},{"title":"Aktor","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/actor","content":"Aktor Grundlegendes‚Äã nemo = Actor(bild) erstellt einen neuen Aktor. bild ist der Name einer Bilddatei. nemo.draw() zeichnet den Aktor nemo in das Fenster. Position‚Äã Positionierung in Pygame Zero nemo.bottom ist die y-Koordinate des unteren Rands von nemo. nemo.left ist die x-Koordinate des linken Rands von nemo. nemo.right ist die x-Koordinate des rechten Rands von nemo. nemo.top ist die y-Koordinate des oberen Rands von nemo. nemo.x ist die x-Koordinate des Ankers von nemo. nemo.y ist die y-Koordinate des Ankers von nemo. nemo.angle ist die Rotation von nemo in Grad im Gegenuhrzeigersinn. Kollision‚Äã nemo.collidepoint(x, y) √ºberpr√ºft, ob nemo mit dem Punkt mit den Koordinaten x, y kollidiert. nemo.collidepoint(pos) √ºberpr√ºft, ob nemo mit dem Punkt mit den Punkt pos kollidiert. So kann beispielsweise √ºberpr√ºft werden, ob ein Aktor mit der Maus angeklickt wird: def on_mouse_down(pos): if nemo.collidepoint(pos): print(&quot;Nemo mit Maus ber√ºhrt.&quot;) nemo.colliderect(dory) √ºberpr√ºft, ob nemo mit dory kollidiert. nemo.collidelist(liste) √ºberpr√ºft, ob nemo mit einem Aktor in der Liste liste kollidiert. In dem Fall wird der Index des kollidierenden Aktors in der Liste zur√ºckgeliefert. Wenn kein Aktor der Liste mit nemo kollidiert, wird -1 zur√ºckgeliefert. Messung‚Äã nemo.distance_to(dory) misst die Distanz zwischen nemo und dory. nemo.angle_to(dory) misst den Winkel von nemo aus in Richtung dory.","keywords":""},{"title":"How-To","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/howto","content":"How-To","keywords":""},{"title":"Tastatursteuerung","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/howto/keyboard-control","content":"Tastatursteuerung Beschreibung‚Äã Einfaches Beispiel, wie eine Figur mit der Tastatur gesteuert wird. Programm‚Äã import pgzrun WIDTH = 800 HEIGHT = 600 hintergrund = 0, 150, 220 nemo = Actor(&quot;fisch_rot_rechts&quot;) nemo.x = WIDTH / 2 nemo.y = HEIGHT / 2 def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def update(): if keyboard.left: nemo.x = nemo.x - 3 nemo.image = &quot;fisch_rot_links&quot; if keyboard.right: nemo.x = nemo.x + 3 nemo.image = &quot;fisch_rot_rechts&quot; if keyboard.up: nemo.y = nemo.y - 3 if keyboard.down: nemo.y = nemo.y + 3 kollision_rand(nemo) def draw(): screen.fill(hintergrund) nemo.draw() pgzrun.go() ","keywords":""},{"title":"Jump & Run","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/howto/jump","content":"Jump &amp; Run import pgzrun WIDTH = 800 HEIGHT = 600 alien = Actor(&quot;alien&quot;) alien.x = WIDTH / 2 alien.vy = 0 schwerkraft = 0.1 boden = 550 sprung = -5 hintergrundfarbe = 0, 0, 0 def update(): alien.vy = alien.vy + schwerkraft alien.y = alien.y + alien.vy if alien.bottom &gt; boden: alien.vy = 0 alien.bottom = boden if keyboard.space and alien.vy == 0: alien.vy = sprung def draw(): screen.fill(hintergrundfarbe) alien.draw() pgzrun.go() ","keywords":""},{"title":"Tastatur","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/keyboard","content":"Tastatur Es gibt zwei M√∂glichkeiten, auf Tastatureingaben zu reagieren. Es wird der aktuelle Zustand einer bestimmten Taste ermittelt. Das ist beispielsweise der Fall, wenn sich die Spielfigur bewegen soll, falls eine bestimmte Taste gedr√ºckt ist. Es wird auf das Dr√ºcken oder Loslassen einer Taste reagiert. In diesem Fall wird von einem Ereignis gesprochen. Dies wird beispielsweise verwendet, wenn eine Spielfigur springen soll, wenn eine Taste gedr√ºckt wird.","keywords":""},{"title":"Parallax-Scrolling","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/howto/parallax","content":"Parallax-Scrolling Bilder‚Äã Bildquelle: Craftpix.net, OpenGameArt, Lizenz: OGA Code‚Äã import pgzrun WIDTH = 800 HEIGHT = 450 ebenen = [] for i in range(7): name = &quot;hintergrund&quot; + str(i) ebene = Actor(name) ebene.geschwindigkeit = 0.2 * i ebenen.append(ebene) def update(): for ebene in ebenen: ebene.x = ebene.x - ebene.geschwindigkeit if ebene.right &lt; 0: ebene.x = ebene.x + ebene.width def draw(): screen.clear() for ebene in ebenen: ebene.draw() ebene.x = ebene.x + ebene.width ebene.draw() ebene.x = ebene.x - ebene.width pgzrun.go() ","keywords":""},{"title":"Maus","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/mouse","content":"Maus def on_mouse_down(pos): wird aufgerufen, wenn eine Maustaste gedr√ºckt wird. def on_mouse_up(pos): wird aufgerufen, wenn eine Maustaste losgelassen wird. def on_mouse_move(pos): wird aufgerufen, wenn die Maus bewegt wird.","keywords":""},{"title":"Geschoss","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/howto/bullet","content":"Geschoss Schuss ausl√∂sen‚Äã Ein Geschoss ist ein Aktor, der sich nicht von Anfang an bewegt. Der Aktor muss sich somit merken, ob er schon ¬´existiert¬ª. Dies kann erreicht werden, indem eine Variable geschoss.aktiv definiert wird: geschoss = Actor(&quot;laser&quot;) geschoss.aktiv = False Der Schuss wird nur gezeichnet, wenn er aktiv ist: def draw(): if geschoss.aktiv: geschoss.draw() Wenn der Schuss ausgel√∂st wird, wird er ¬´aktiviert¬ª. Der Schuss wird an die Stelle gesetzt, wo sich das Objekt befindet, welches den Schuss abgibt: def schiesse(): geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.vx = 2 geschoss.vy = 0 geschoss.aktiv = True Schussrichtung‚Äã Damit sich der Schuss in die richtige Richtung bewegt, m√ºssen die horizontale und vertikale Geschwindigkeit des Geschosses vxv_xvx‚Äã und vyv_yvy‚Äã ausgerechnet werden. Bekannt sind die gew√ºnschte Geschwindigkeit vvv und der Winkel aaa: Im rechtwinkligen Dreieck k√∂nnen nun vxv_xvx‚Äã und vyv_yvy‚Äã mit den trigonometrischen Formeln berechnet werden: vx=v‚ãÖsin‚Å°(a)vy=v‚ãÖcos‚Å°(a)\\ v_x = v \\cdot \\sin(a)\\qquad v_y = v \\cdot \\cos(a)¬†vx‚Äã=v‚ãÖsin(a)vy‚Äã=v‚ãÖcos(a) Um die trigonometrischen Funktionen in Python verwenden zu k√∂nnen, muss das Modul math importiert werden: import math Ausserdem muss der Richtungswinkel des Raumschiffs von Grad nach Radiant umgerechnet werden: a = math.radians(raumschiff.angle) Nun k√∂nnen die trigonometrischen Formeln umgesetzt werden. Es muss beachtet werden, dass in Pygame Zero im Gegensatz zur Mathematik die y-Achse nach unten zeigt. Deshalb wird der Wert von vyv_yvy‚Äã negiert. geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) Vollst√§ndiges Beispiel‚Äã import pgzrun import math WIDTH = 1600 HEIGHT = 1200 hintergrund = Actor(&quot;weltraum&quot;) raumschiff = Actor(&quot;raumschiff&quot;) raumschiff.x = WIDTH / 2 raumschiff.y = HEIGHT / 2 geschoss = Actor(&quot;laser&quot;) geschoss.vx = 0 geschoss.vy = 0 geschoss.aktiv = False def draw(): hintergrund.draw() raumschiff.draw() if geschoss.aktiv: geschoss.draw() def schiesse(): geschoss.aktiv = True geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.angle = raumschiff.angle a = math.radians(raumschiff.angle) v = 3 geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) def on_key_down(key): if key == keys.SPACE: schiesse() def update(): geschoss.x = geschoss.x + geschoss.vx geschoss.y = geschoss.y + geschoss.vy if keyboard.a: raumschiff.angle = raumschiff.angle + 2 if keyboard.d: raumschiff.angle = raumschiff.angle - 2 pgzrun.go() ","keywords":""},{"title":"Projekt Schneefall","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/snow","content":"Projekt Schneefall Schneeflocken Vorbereitung‚Äã üëâ Mu Editor herunterladen, installieren und starten. Pygame Zero‚Äã Wir wollen wieder etwas zeichnen mit Pygame Zero. Hier das Grundger√ºst f√ºr ein Pygame Zero-Programm: import pgzrun TITLE = 'Fenstertitel' WIDTH = 800 HEIGHT = 600 hintergrund = Actor('hintergrundbild') def draw(): hintergrund.draw() def update(zeitdifferenz): # Anpassungen von Bild zu Bild pass pgzrun.go() Zur Erinnerung Bilder, die im Programm verwendet werden, m√ºssen in einem Unterverzeichnis images gespeichert sein. Anstelle von hintergrund wird der Dateiname ohne Endung angegeben. Der Mu-Editor √∂ffnet dieses Verzeichnis automatisch, wenn man auf Images klickt. Zeichnen mit Pygame Zero‚Äã In der draw()-Funktion k√∂nnen nicht nur Actor gezeichnet werden, es gibt auch die M√∂glichkeit, Linien, Rechtecke und Kreise zu zeichnen. Wir beschr√§nken uns hier auf ausgef√ºllte Kreise, da wir Schneeflocken so darstellen m√∂chten. screen.draw.filled_circle(position, radius, farbe) screen.draw.filled_circle([x, y], r, [r, g, b]) Dieser Aufruf zeichnet einen ausgef√ºllten Kreis mit Mittelpunkt [x, y] und Radius r in der Farbe [r, g, b] (die Werte r, g und b m√ºssen zwischen 0 und 255 liegen). Wichtig ist, dass die zus√§tzlichen Klammern bei der Position und der Farbe geschrieben werden, da die Funktion nur 3 Werte erwartet: die Position, den Radius und die Farbe. def draw(): hintergrund.draw() screen.draw.filled_circle([100, 200], 10, [255, 0, 0]) Dies zeichnet einen rot gef√ºllten Kreis mit Radius 10 bei den Koordinaten (100, 200). Aufgabe 1 ‚Äì Schneeflocke zeichnen üëâ Winterlandschaft 1@ üëâ Winterlandschaft 2@ Laden Sie eines der obigen Hintergrundbilder herunter und f√ºgen Sie es im Mu-Editor bei den Bildern hinzu. Kopieren Sie die Vorlage f√ºr das Pygame Zero-Programm und legen Sie das gew√§hlte Bild als Hintergrundbild fest. Passen Sie die Gr√∂sse des Fensters an, so dass das Bild optimal dargestellt wird. Es hat eine Aufl√∂sung von 1350x900 Pixel. Zeichnen Sie eine Schneeflocke an einer beliebigen Stelle. SSR Aufgabe 2 ‚Äì Schneeflocke bewegen Damit wir die Schneeflocke bewegen k√∂nnen, muss die Position in einer Variablen gespeichert werden, damit sie in der update()-Funktion ver√§ndert werden kann. Sp√§ter wollen wir dann 1'000 Schneeflocken darstellen und somit die Position von 1'000 Schneeflocken speichern. Dies l√§sst sich nicht mit separaten Variablen pro Schneeflocke realisieren. Listen eignen sich aber perfekt f√ºr diese Aufgabe. Vorerst begn√ºgen wir uns allerdings mit der einen Schneeflocke, die wir bereits haben. Anstatt aber die x- und y-Position als Zahl in einer Variablen zu speichern, verwenden wir bereits eine Liste. Erweitern Sie das Programm so, dass die x- und y-Koordinate der bestehenden Schneeflocke je in einer Liste gespeichert werden. Passen Sie die Codezeile zum Zeichnen der Schneeflocke so an, dass die Koordinaten der Schneeflocke aus der Liste geholt werden. F√ºge eine Zeile in die update()-Zeile ein, so dass die y-Koordinate stets ver√§ndert wird. Dabei m√ºssen Sie das Schl√ºsselwort pass entfernen (es musste dort stehen, weil eine Funktion nicht leer sein darf). Hinweis Erstellen Sie zu Beginn des Programms die Listen schnee_x und schnee_y und speichern Sie darin die Position der ersten Schneeflocke (z.B. schnee_x = [100]). Die Koordinaten stehen in beiden Listen an erster Stelle und haben somit Index 0 (schnee_x[0]). SSR Aufgabe 3 ‚Äì mehrere Schneeflocken Nun wollen wir mehrere Schneeflocken zeichnen. Dazu m√ºssen wir brauchen wir Zufallszahlen als Startposition in der Liste mit den x-Koordinaten. Zudem m√ºssen wir daf√ºr sorgen, dass s√§mtliche Schneeflocken gezeichnet werden und nicht nicht eine. Legen Sie in einer Variablen fest, wie viele Schneeflocken Sie zeichnen m√∂chten. Um die Liste mit den Startkoordinaten zu f√ºllen, brauchen wir eine Schleife, die f√ºr s√§mtliche gew√ºnschten Schneeflocken in einem sinnvollen Bereich eine Startkoordinate zuf√§llig berechnet. Lassen Sie die Liste am Anfang leer und f√ºllen Sie sie direkt anschliessend mit einer Schleife. F√ºgen Sie eine weitere Schleife zum Zeichnen der Schneeflocken ein und passen Sie die x-Koordinate an. Probieren Sie das Programm aus. Was ist jetzt noch falsch, was m√ºssen wir ebenfalls noch √§ndern? Hinweis Normalerweise schreibt man Konstanten (also Variablen, deren Werte sich nicht √§ndern) in Grossbuchstaben. Der sinnvolle Bereich f√ºr die x-Koordinate liegt zwischen 0 und der Breite des Fensters. Benutzen Sie die Variable und nicht die Zahl direkt. Ersetzen Sie schnee_x[0] durch schnee_x[i], wobei i Ihre Schleifenvariable ist. Es gibt 2 Dinge zu korrigieren. Auch die y-Koordinaten m√ºssen am Anfang zuf√§llig gesetzt, beim Zeichnen individuell verwendet und in der update()-Funktion individuell ver√§ndert werden, sonst kommt der Schnee als Linie herunter. Zudem sollten diejenigen Schneeflocken, die unten am Bildrand ankommen, sofort wieder neu von oben kommen, sonst dauert der Schneefall nur kurz. SSR ‚≠ê Zusatzaufgabe ‚Äì Schneeflocken versch√∂nern Hier einige Ideen, wie Sie die Schneefall-Animation noch verbessern k√∂nnten: Nicht alle Schneeflocken sollen gleich gross sein. Die gr√∂sseren Flocken sollen schneller fallen (dies erzeugt einen leichten 3D-Effekt). Die Schneeflocken, die neu von oben kommen, sollen eine neue zuf√§llige x-Koordinate erhalten. Die Schneeflocken vom Winde verweht werden SSR","keywords":""},{"title":"Tastaturereignisse","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/keyboard/event","content":"Tastaturereignisse def on_key_down(taste): wird aufgerufen, wenn eine Taste gedr√ºckt wird. def on_key_up(taste): wird aufgerufen, wenn eine Taste losgelassen wird. Die Variable taste kann folgende Werte annehmen: Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeys.A\t[Y]\tkeys.Y [B]\tkeys.B\t[Z]\tkeys.Z\t[0]\tkeys.K_0 [C]\tkeys.C\t[√§]\tkeys.QUOTE\t[1]\tkeys.K_1 [D]\tkeys.D\t[√∂]\tkeys.SEMICOLON\t[2]\tkeys.K_2 [E]\tkeys.E\t[√º]\tkeys.LEFTBRACKET\t[3]\tkeys.K_3 [F]\tkeys.F\t[,]\tkeys.COMMA\t[4]\tkeys.K_4 [G]\tkeys.G\t[.]\tkeys.PERIOD\t[5]\tkeys.K_5 [H]\tkeys.H\t[Space]\tkeys.SPACE\t[6]\tkeys.K_6 [I]\tkeys.I\t[Tab]\tkeys.TAB\t[7]\tkeys.K_7 [J]\tkeys.J\t[Backspace]\tkeys.BACKSPACE\t[8]\tkeys.K_8 [K]\tkeys.K\t[Enter]\tkeys.RETURN\t[9]\tkeys.K_9 [L]\tkeys.L\t[Esc]\tkeys.ESCAPE\t[F1]\tkeys.F1 [M]\tkeys.M\t[CapsLock]\tkeys.CAPSLOCK\t[F2]\tkeys.F2 [N]\tkeys.N\tLinke [Shift]\tkeys.LSHIFT\t[F3]\tkeys.F3 [O]\tkeys.O\tRechte [Shift]\tkeys.RSHIFT\t[F4]\tkeys.F4 [P]\tkeys.P\tLinke [Ctrl]\tkeys.LCTRL\t[F5]\tkeys.F5 [Q]\tkeys.Q\tRechte [Ctrl]\tkeys.RCTRL\t[F6]\tkeys.F6 [R]\tkeys.R\tLinke [Alt]\tkeys.LALT\t[F7]\tkeys.F7 [S]\tkeys.S\tRechte [Alt Gr]\tkeys.RALT\t[F8]\tkeys.F8 [T]\tkeys.T\t[Up]\tkeys.UP\t[F9]\tkeys.F9 [U]\tkeys.U\t[Left]\tkeys.LEFT\t[F10]\tkeys.F10 [V]\tkeys.V\t[Down]\tkeys.DOWN\t[F11]\tkeys.F11 [W]\tkeys.W\t[Right]\tkeys.RIGHT\t[F12]\tkeys.F12 [X]\tkeys.X ","keywords":""},{"title":"Fenster","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/window","content":"Fenster Fenster definieren‚Äã TITLE legt den Fenstertitel fest. WIDTH legt die Breite des Fensters in Pixel fest. HEIGHT legt die H√∂he des Fensters in Pixel fest. import pgzrun TITLE = 'Mein Spiel' WIDTH = 800 HEIGHT = 600 pgzrun.go() Fenster verwenden‚Äã Diese Anweisungen d√ºrfen nur in einem Unterprogramm verwendet werden. screen.width liefert die Breite des aktuellen Fensters in Pixel zur√ºck. screen.height liefert die H√∂he des aktuellen Fensters in Pixel zur√ºck. screen.clear() f√ºllt das Fenster mit der Farbe Schwarz. screen.fill(farbe) f√ºllt das Fenster mit der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Fenster schliessen‚Äã quit() schliesst das Fenster.","keywords":""},{"title":"Musik und Soundeffekte","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/sound","content":"Musik und Soundeffekte Soundeffekte‚Äã Soundeffekte m√ºssen im Format WAV oder OGG im Unterordner sound abgespeichert werden. sounds.name.play() spielt den Soundeffekt mit dem Name name ab. Um beispielsweise den Soundeffekt extraleben.wav abzuspielen, schreibt man: sounds.extraleben.play() Musik‚Äã Musikdateien m√ºssen im Format MP3 oder OGG im Unterordner music abgelegt werden. Um die Datei hintergrundmusik.mp3 abzuspielen, schreibt man: music.play(&quot;hintergrundmusik&quot;) music.play(name) spielt die Musikdatei mit dem Namen name ab. Das Abspielen wird endlos wiederholt. music.play_once(name) spielt die Musikdatei mit dem Namen name ab. Die Musikdatei wird nur einmal abgespielt. music.queue(name) f√ºgt die Musikdatei mit dem Namen name in die Abspielliste ein. music.stop() stoppt das Abspielen der Musik. music.pause() pausiert das Abspielen der Musik. music.unpause() nimmt das Abspielen der Musik nach einer Pause wieder auf. music.is_playing() √ºberpr√ºft, ob zur Zeit Musik abgespielt wird.","keywords":""},{"title":"Dateiformat","type":0,"sectionRef":"#","url":"/25h/Texte/dateiverwaltung","content":"Dateiformat Jeder Computer hat ein Dateisystem, welches Dateien organisiert und auffindbar macht. Die Anleitung, wie eine Datei gefunden werden kann, heisst Dateipfad. Eine Datei besitzt einen Namen und ein Dateiformat. Die Dateiendung beschreibt das Dateiformat und gibt Auskunft √ºber die Art von Daten, welche in einer Datei enthalten sind. So weiss Ihr Betriebssystem bspw. mit welchem Programm eine Datei ge√∂ffnet werden soll. Ein Word-Dokument hat die Dateiendung .docx. C:\\Users\\reto\\OneDrive - EDUBERN\\Informatik\\01-Word\\dokument.docx ‚îî‚î¨‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îò | Ordner OneDrive | Dateiformat Laufwerk Dateiname Wenn Sie in Word ein Dokument abspeichern, gibt es im wesentlichen zwei M√∂glichkeiten, die zum selben Ziel f√ºhren: das Dokument direkt auf OneDrive Speichern. Die Navigation zum richtigen Ordner kann etwas tr√§ge sein, da die Ordnerstruktur √ºbers Internet direkt von OneDrive geladen wird. das Dokument wird auf dem Computer gespeichert - alle M√∂glichkeiten stehen offen - Sie k√∂nnen nach wie vor einen Ordner auf OneDrive ausw√§hlen. Sofern ein OneDrive Ordner ausgew√§hlt wurde, wird das Dokument automatisch synchronisiert. Gemeinsames Arbeiten‚Äã Ein auf OneDrive gespeichertes Word-Dokument kann zur gemeinsamen Bearbeitung (z.B. f√ºr eine Gruppenarbeit) freiegegeben werden. Bei der Freigabe m√ºssen Sie entscheiden, ob das Dokument nur betrachtet, oder auch bearbeitet werden darf: Bearbeitungsoptionen beim Teilen Linkeinstellungen f√ºr Ordner Link Kopieren üìã Erfahrungsgem√§ss funktioniert das Freigeben von Dokumenten am zuverl√§ssigsten und am schnellsten, wenn der Link kopiert und per Teams verschickt wird. Die E-Mails bleiben manchmal etwas l√§nger in einer Warteschleife bei Edubern h√§ngen. Beachten Sie, dass f√ºrs Kopieren eines Links die Link-Einstellungen auf Jeder mit dem Link bzw. Personen bei EDUBERN mit dem Link gew√§hlt werden muss. Gemeinsames Arbeiten an einem Dokument Gemeinsame Bearbeitung der Men√ºs f√ºrs Klassenlager. Namen bei Ihrer Gruppe eintragen Men√º-Vorschlag festhalten Bild vom Men√º suchen und einf√ºgen","keywords":""},{"title":"Tastaturzustand","type":0,"sectionRef":"#","url":"/25h/Programmieren-2/PyGameZero-Referenz/keyboard/state","content":"Tastaturzustand Das Objekt keyboard repr√§sentiert die Tastatur. F√ºr jede Taste gibt eine entsprechende Variable des keyboard-Objekts an, ob diese gerade gedr√ºckt ist. Normale Tasten‚Äã Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeyboard.a\t[Y]\tkeyboard.y\t[0]\tkeyboard.k_0 [B]\tkeyboard.b\t[Z]\tkeyboard.z\t[1]\tkeyboard.k_1 [C]\tkeyboard.c\t[√§]\tkeyboard.quote\t[2]\tkeyboard.k_2 [D]\tkeyboard.d\t[√∂]\tkeyboard.semicolon\t[3]\tkeyboard.k_3 [E]\tkeyboard.e\t[√º]\tkeyboard.leftbracket\t[4]\tkeyboard.k_4 [F]\tkeyboard.f [5]\tkeyboard.k_5 [G]\tkeyboard.g\t[,]\tkeyboard.comma\t[6]\tkeyboard.k_6 [H]\tkeyboard.h\t[.]\tkeyboard.period\t[7]\tkeyboard.k_7 [I]\tkeyboard.i\t[Space]\tkeyboard.space\t[8]\tkeyboard.k_8 [J]\tkeyboard.j\t[Tab]\tkeyboard.tab\t[9]\tkeyboard.k_9 [K]\tkeyboard.k\t[Backspace]\tkeyboard.backspace\t[F1]\tkeyboard.f1 [L]\tkeyboard.l\t[Enter]\tkeyboard.return\t[F2]\tkeyboard.f2 [M]\tkeyboard.m\t[Esc]\tkeyboard.escape\t[F3]\tkeyboard.f3 [N]\tkeyboard.n\t[CapsLock]\tkeyboard.capslock\t[F4]\tkeyboard.f4 [O]\tkeyboard.o\tLinke [Shift]\tkeyboard.lshift\t[F5]\tkeyboard.f5 [P]\tkeyboard.p\tRechte [Shift]\tkeyboard.rshift\t[F6]\tkeyboard.f6 [Q]\tkeyboard.q\tLinke [Ctrl]\tkeyboard.lctrl\t[F7]\tkeyboard.f7 [R]\tkeyboard.r\tRechte [Ctrl]\tkeyboard.rctrl\t[F8]\tkeyboard.f8 [S]\tkeyboard.s\tLinke [Alt]\tkeyboard.lalt\t[F9]\tkeyboard.f9 [T]\tkeyboard.t\tRechte [Alt Gr]\tkeyboard.ralt\t[F10]\tkeyboard.f10 [U]\tkeyboard.u\t[Up]\tkeyboard.up\t[F11]\tkeyboard.f11 [V]\tkeyboard.v\t[Left]\tkeyboard.left\t[F12]\tkeyboard.f12 [W]\tkeyboard.w\t[Down]\tkeyboard.down [X]\tkeyboard.x\t[Right]\tkeyboard.right Ziffernblock‚Äã Taste\tVariable\tTaste\tVariable[0]\tkeyboard.kp0\t[9]\tkeyboard.kp9 [1]\tkeyboard.kp1\t[.] / [Del]\tkeyboard.kp_period [2] / [Down]\tkeyboard.kp2\t[Enter]\tkeyboard.kp_enter [3]\tkeyboard.kp3\t[+]\tkeyboard.kp_plus [4] / [Left]\tkeyboard.kp4\t[-]\tkeyboard.kp_minus [5]\tkeyboard.kp5\t[*]\tkeyboard.kp_multiply [6] / [Right]\tkeyboard.kp6\t[/]\tkeyboard.kp_divide [7]\tkeyboard.kp7\t[Num]\tkeyboard.numlock [8] / [Up]\tkeyboard.kp8 import pgzrun def update(): if keyboard.a: print(&quot;A wird gedr√ºckt&quot;) if keyboard.w: print(&quot;W wird gedr√ºckt&quot;) if keyboard.s: print(&quot;S wird gedr√ºckt&quot;) if keyboard.d: print(&quot;D wird gedr√ºckt&quot;) pgzrun.go() ","keywords":""},{"title":"Textaufbau in Word","type":0,"sectionRef":"#","url":"/25h/Texte/dokumentstruktur","content":"Textaufbau in Word Vorgehen Theorie durchlesen - √ºberlegen Sie sich nach jedem Abschnitt, ob Ihnen die Inhalte bekannt vorkommen und ob Sie sich zutrauen, diese Schritte selber durchzuf√ºhren. Markieren Sie in diesem Dokument, ob Sie diese Inhalte gerne vorgef√ºhrt erhalten w√ºrden. Bearbeiten Sie die untenstehende Aufgabe Wenn Sie fertig sind, zeigen Sie das Resultat Herrn Hofer Drei Strukturebenenen‚Äã Ein Word-Dokument kennt drei verschiedene Strukturebenenen: Abschnitt Absatz Zeichen Auf jeder Strukturebene lassen sich unterschiedliche Formatierungen vornehmen. Abschnitt‚Äã In einem Abschnitt wird das grundlegende Erscheinungsbild vorgegeben. Ausrichtung Format Spalten (Text auf mehrere Spalten verteilen) Seitenr√§nder Seitenzahlen Unter Layout lassen sich viele Abschnitt-Einstellungen vornehmen und auch Abschnitt-Umbr√ºche einf√ºgen. Durch Klicken auf den rot eingef√§rbten Pfeil k√∂nnen zudem weitere Einstellungsm√∂glichkeiten angezeigt werden. Jeder Abschnitt kann unabh√§ngig vom Vorhergehenden/Nachfolgenden konfiguriert werden. Im Beispiel oben werden also zwei Fortlaufende Umbr√ºche (Umbr√ºche&gt;(Abschnittumbr√ºche)&gt;Fortlaufend) eingef√ºgt, damit kein Seitenwechsel passiert. Silbentrennung‚Äã Die Silbentrennung erm√∂glicht es, W√∂rter automatisch an geeigneter Stelle zu trennen, wenn dadurch der Verf√ºgbare Platz auf einer Zeile besser genutzt werden kann. Das Layout wirkt dadurch aufger√§umter und das Lesen ist angenehmer. Diese Option muss jedoch von Hand unter Layout &gt; Silbentrennung auf Automatisch gesetzt werden. Absatz‚Äã Ein Absatz entsteht, wenn eine neue Zeile mit der Enter-Taste eingef√ºgt wird. EIn Absatz wird grunds√§tzlich gem√§ss der zugewiesenen Formatvorlage formatiert. Diese Einstellungen k√∂nnen aber auch in jedem Absatz angepasst werden. Formatvorlagen‚Äã Mit einer Formatvorlage k√∂nnen Struktur- und Darstellungsinformationen zusammengefasst werden. Strukturinformationen beziehen sich auf die Art des Absatzes - ist es eine √úberschrift, eine Unter√ºberschrift, ein normaler Text oder ...? Durch das Hinterlegen dieser Strukturinformationen kann Word bspw. automatisch die √úberschriften nummerieren oder automatisch ein Inhaltsverzeichnis generieren. Da auch Darstellungsinformationen hinterlegt werden k√∂nnen, wird ein Dokument einheitlich und ohne viel Aufwand formatierbar. F√ºr die √Ñnderung der Schriftgr√∂sse von allen √úberschriften muss dann nur die Formatvorlage angepasst werden und nicht jede einzelne √úberschrift. Es gibt vordefinierte Formatvorlagen, die einem Absatz zugewiesen werden k√∂nnen: Die Formatvorlagen k√∂nnen auch nach den eigenen W√ºnschen angepasst werden: tip Erstellen Sie keine neuen Formatvorlagen f√ºr √úberschriften sonder passen Sie die vorhandenen Vorlagen an. So funktioniert die Nummerierung und das automatische Inhaltsverzeichnis ohne weitere Konfiguration. Formatierungen‚Äã Tabstopps ‚îó ‚îª ‚îõ der Cursor springt beim Dr√ºcken der Tabulator-Taste bis zu diesem Tabstopp. Die Ausrichtung bestimmt, wie der Tabulator-Text ausgerichtet wird: ‚îó ‚îª ‚îõ Die Ausrichtung kann durch Doppelklicken auf den Tabstopp ge√§ndert werden. Linker Einzug ‚ßã Der gesamte Absatz wird einger√ºckt. Erstzeileneinzug ‚ñΩ Die erste Zeile eines Absatzes kann eigens kontrolliert werden. tip Unter Ansicht &gt; Anzeige kann das Lineal eingeblendet werden. Textausrichtung (Links, Zentriert, Rechts, Blocksatz) Auflistungen Rahmen Zeilenabstand (der Zeilenabstand innerhalb eines Absatzes) Absatzabstand (der Abstand zum vorherigen/n√§chsten Absatz) Men√ºband Start Men√ºband Layout tip Ein Zeilenumbruch im selben Absatz kann mit Shift+Enter erzeugt werden. Zeichenformat‚Äã Einzelne W√∂rter und Buchstaben/Zeichen lassen sich individuell formatieren. So kann etwa festgelegt werden, ob ein Zeichen kursiv, fett oder unterstrichen dargestellt werden kann. Einf√ºgen‚Äã Beim Einf√ºgen von kopiertem Text, bspw. von einer Website, werden auch die Zeichenformate mitkopiert (z.B. Links werden dann farbig angezeigt...). Dies ist nicht immer erw√ºnscht und teilweise soll nur der Text √ºbernommen werden. Dann kann √ºber die Einf√ºge-Optionen Nur den Text √ºbernehmen ausgew√§hlt werden: √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex01-what-is-programming.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht:","keywords":""},{"title":"Nummerierung und Bilder","type":0,"sectionRef":"#","url":"/25h/Texte/nummerierung","content":"Nummerierung und Bilder In diesem Abschnitt lernen Sie, wie In Word Seiten √úberschriften Abbildungen nummeriert werden und wie auf solche nummerierten Elemente verwiesen werden kann. Seitenzahlen‚Äã Das Kopf- und Fusszeilen Men√º √∂ffnen (Doppelklick in den untersten Bereich eines Blattes, oder im Suchfeld &quot;Fusszeile&quot; eingeben). Soll die erste Seite (bspw. Titelblatt) keine Seitenzahl erhalten, so kann das H√§ckchen &quot;Erste Seite Anders&quot; angew√§hlt werden: √úber die Option &quot;Seitenzahle formatieren...&quot; kann bspw. das Seitenzahlformat (z.B. r√∂mische Zahlen) oder der Startwert festgelegt werden. Die erste Seite, auch wenn &quot;Erste Seite Anders&quot; ausgew√§hlt ist, z√§hlt bei der Nummerierung auch dazu. Die Nummerierung muss also bei 0 starten, wenn die Seite nach dem Titelblatt die Seitenzahl 1 erhalten soll. √úberschriften Nummerieren‚Äã Um √úberschriften automatisiert nummerieren zu lassen, m√ºssen die √úberschriften als solche gekennzeichnet werden. Dies wird √ºber die Zuweisung einer Formatvorlage erreicht (Formatvorlagen) Die Formatvorlage f√ºr eine √úberschrift kann ge√§ndert und √ºber Format &gt; Nummerierung eine Nummerierung hinzugef√ºgt werden. Geschachtelte Nummerierung‚Äã Soll eine verschachtelte Nummerierung eingef√ºgt werden, muss zuerst der *√úberschrift 1&quot; eine eifache Nummerierung (wie oben) hinzugef√ºgt werden der Cursor im √úberschriften-Text fokussiert werden √úber die &quot;Liste mit mehreren Ebenen&quot; die verschachtelte Nummerierung eingef√ºgt werden Automatisches Inhaltsverzeichnis‚Äã Ein grosser Vorteil von zugewiesenen FOrmatvorlagen ist das Erzeugen von Verzeichnissen. Da Word nun &quot;weiss&quot;, was einer √úberschrift entspricht, lassen sich bspw. Inhaltsverzeichnisse autmatisch generieren und auf Knopfdruck auch aktualisieren. Bilder‚Äã Layoutoptionen‚Äã √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex02-machine-learning.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht:","keywords":""},{"title":"Pr√ºfung","type":0,"sectionRef":"#","url":"/25h/Texte/pruefung","content":"Pr√ºfung Dauer 45 Minuten Benotung Die Note z√§hlt 0.50.50.5 Hilfsmittel Laptop, Openbook, ohne Kommunikation untereinander Pr√ºfungsstoff Sie k√∂nnen ein Word-Dokument erstellen und unter einem vorgegebenen Namen abspeichern. Sie k√∂nnen ein Word-Dokument als PDF exportieren. Sie wissen was eine Formatvorlage ist und k√∂nnen diese ver√§ndern und anpassen (Nummerierung, Linker Einzug, Absatz, Schrfitgr√∂sse, Schriftart, Schriftfarbe...) Sie wissen wie ein Word-Dokument aufgebaut ist und welche Elemente auf den drei Strukturebenen (Abschnitt, Absatz, Zeichen) formatiert werden k√∂nnen Sie k√∂nnen Text aus dem Internet per Copy&amp;Paste in ein Word-Dokument einf√ºgen. Sie verwenden Einz√ºge (linker/rechter Einzug, Erstzeileneinzug) sowie Tabulatoren + Tabstops um die gew√ºnschte Dokumentstruktur zu erreichen. Sie wissen wie man Bilder einf√ºgt, zentriert und mit einer nummerierten Bildunterschrift erg√§nzt. Sie f√ºgen automatisch erzeugte Inhaltsverzeichnisse ein. Sie f√ºgen automatisch erzeugte Bildverzeichnisse ein. Sie k√∂nnen Kopf- und Fusszeilen einf√ºgen. Sie k√∂nnen Seitennummerierungen einf√ºgen. Sie k√∂nnen die Textausrichtung (Links-/Rechtsb√ºndig, zentriert oder Blocksatz) einstellen und die automatische Silbentrennung aktivieren.","keywords":""},{"title":"√úbung","type":0,"sectionRef":"#","url":"/25h/Texte/Uebung","content":"√úbung Aufgabe Erstellen Sie ein Word-Dokument auf OneDrive mit dem Namen 03-onlinesucht.docx. Kopieren Sie den untenstehenden Text inkl. der Bilder und formatieren Sie das Dokument gem√§ss der Vorlage. Sind Angaben nicht n√§her spezifiziert, w√§hlen Sie selber eine Formatierung, die der Vorlage m√∂glichst nahe kommt. Onlinesucht Informationen zu den Risiken und Auswirkungen von √ºberm√§ssigem Internetgebrauch Quelle: https://www.safezone.ch/de/suechte-und-substanzen/onlinesucht Mit Onlinesucht oder Internetsucht wird ein √ºberm√§ssiger Gebrauch von Diensten, Inhalten oder Apps des Internets bezeichnet, welcher durch Kontrollverlust gekennzeichnet ist. Es handelt sich um eine nicht-stoffgebundene Abh√§ngigkeit, d.h. eine Abh√§ngigkeit, die nicht auf den Konsum einer Substanz wie Tabak, Alkohol oder eine illegale Droge bezogen ist. Dabei sind es vor allem drei Bereiche des Internets, die zu einer Internetabh√§ngigkeit f√ºhren k√∂nnen: Online-Computerspiele, Kommunikationsplattformen (z.B. soziale Netzwerke) und Webseiten mit sexuellem und pornographischem Inhalt. Inhaltsverzeichnis Wann wird √ºberm√§ssiger Internetgebrauch zu einer Internetabh√§ngigkeit? Eine Person mit Onlinesucht kann ihren Internetgebrauch nicht mehr kontrollieren und sie wendet zunehmend mehr Zeit f√ºr das Internet auf. Bestimmte Inhalte oder Apps im Internet werden zum Mittelpunkt des Interesses, andere oder vorherige Interessen gehen verloren. Dies kann auch zu einer √ºberm√§ssigen Nutzung von Smartphones oder anderen internetf√§higen, mobilen Ger√§ten f√ºhren, mit Hilfe derer auf die gesuchten Inhalte zugegriffen oder online in sozialen Netzwerken kommuniziert wird. Es besteht ein un√ºberwindbares Verlangen nach internetbasierten Angeboten, die Nichtnutzung f√ºhrt zu Nervosit√§t und Entzugserscheinungen. Trotz negativer Folgen werden sie weiter genutzt oder konsumiert. Eine internets√ºchtige Person zieht sich von anderen Menschen zur√ºck und l√§sst Beziehungen abbrechen. Sie ist bis weit in die Nacht online, sodass sich der Tag-Nacht-Rhythmus ver√§ndert und sich eine √ºberm√§ssige M√ºdigkeit einstellt. Zeit im Internet zu verbringen kann auch eine Strategie sein, um unangenehme Gef√ºhle oder Stress zu vermeiden. Nicht alle diese Anzeichen m√ºssen bei einer Onlinesucht vorhanden sein. Eine Onlinesucht kann aber auch nicht allein aufgrund einer bestimmten t√§glichen Nutzungsdauer des Internets festgestellt werden - entscheidend ist der Verlust der Kontrolle √ºber die Internetnutzung. Eine Internetabh√§ngigkeit bringt biochemische Ver√§nderungen im K√∂rper mit, welche zur Sucht f√ºhren. Wie bei einer Drogenabh√§ngigkeit kommt es auch bei der Onlinesucht zu Ver√§nderungen im Belohnungszentrum des Gehirns, sodass der onlines√ºchtigen Person allt√§gliche Belohnungssituationen allein nicht mehr ausreichen. Beeinflussen Geschlecht und Alter die Entwicklung einer Onlinesucht? Jugendliche haben ein erh√∂htes Risiko f√ºr eine Internetabh√§ngigkeit oder Smartphone-Sucht, da die Gehirnregion, die f√ºr die Steuerung des Verhaltens und der Emotionen zust√§ndig ist, noch nicht vollst√§ndig entwickelt ist. Frauen zeigen √∂fter eine √ºberm√§ssige Nutzung der Onlinekommunikation sowie sozialen Netzwerken, w√§hrend M√§nner h√§ufiger Probleme mit der √ºberm√§ssigen Nutzung von pornographischen Seiten (Online-Sexsucht) sowie Online-Computerspielen (Computerspielsucht) haben. Im Vergleich zur Allgemeinbev√∂lkerung weisen Personen mit einer Onlinesucht h√§ufiger eine Depression auf, sie sind introvertierter und haben ein geringeres Selbstwertgef√ºhl. Eine Cannabisabh√§ngigkeit kommt bei Onlines√ºchtigen gleich h√§ufig vor wie in der Allgemeinbev√∂lkerung; Personen, die Kokain und Cannabis konsumieren, sind jedoch h√§ufiger von Phasen der Onlinesucht betroffen. Wir sind in einer anonymen Online-Beratung f√ºr Sie da. Zur Online-Beratung Langzeitfolgen von Internetabh√§ngigkeit Eine Onlinesucht kann zur Beeintr√§chtigung der sozialen Beziehungen und der schulischen oder beruflichen Leistungen f√ºhren. Einige Nutzungsformen k√∂nnen auch grosse finanzielle Probleme mit sich bringen. Mitunter wird auch die k√∂rperliche Gesundheit gesch√§digt. So kann es z. B. zu Haltungssch√§den, zu Problemen wegen eines gest√∂rten Essverhaltens, zu Kopfschmerzen und Sehproblemen kommen. Weiterf√ºhrende Informationen zu Internetgebrauch und Onlinesucht Zahlen und Fakten zu Internetnutzung und Onlinesucht: https://zahlen-fakten.suchtschweiz.ch; https://monam.chBeratung und Therapie bei Onlinesucht: https://spielsucht-radix.ch","keywords":""},{"title":"","type":0,"sectionRef":"#","url":"/26e/BYOD","content":"Zeit 5 Minuten Vorbereitung, 5 Minuten Pr√ºfung Szenarien 10 Szenarien aus den Pr√ºfungsfragen Note Halb z√§hlende Note Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/26e/BYOD/dateiexplorer","content":"Dateiexplorer Windows 11Windows 10macOS Dateiexplorer Ansichten‚Äã Windows 11Windows 10macOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã Sie k√∂nnen Dateien in einem Ordner nach unterschiedlichen Kriterien sortieren. Im Downloads Ordner ist etwa die Sortierung nach dem Erstelldatum sinnvoll, bei Aufr√§umarbeiten wo die gr√∂ssten Dateien gel√∂scht werden sollen, die Gr√∂sse oder beim Aufsuchen eines Bildes (oder eines anderen spezifischen Dateityps) das Sortieren nach dem Dateityp (bzw. nach der Art). Standardm√§ssig wird nach dem &quot;Namen&quot; sortiert. Windows 11Windows 10macOS Einige Kriterien (wie das Erstelldatum) wird nicht automatisch verf√ºgbar und m√ºssen zuerst noch aktiviert werden: rechtskick &gt; Sortieren nach &gt; Mehr... &gt; Erstelldatum Video Ordner Erstellen‚Äã Ein Ordner gruppiert mehrere Dateien an einem Ort. Eine Datei in einem Ordner besitzt den Ordnernamen im Dateipfad. Sie k√∂nnen einen neuen Ordner mit einem gew√ºnschten Namen erstellen: √ºber das Kontextmen√º √ºber das Men√ºband Windows 11Windows 10macOS Variante Kontextmen√º Variante Men√ºband Dokumente verschieben‚Äã Sie k√∂nnen Dateien zwischen verschiedenen Ordnern, die allenfalls auf unterschiedlichen Laufwerken liegen, verschieben. per Drag &amp; Drop (mit der Maus Packen und in einen anderen Ordner ziehen und loslassen) oder per Copy &amp; Paste (Ausschneiden/Kopieren und anschliessendes Einf√ºgen) Windows 11Windows 10macOS Ausschneiden &amp; Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dateien und Dokumente umbenennen‚Äã Windows 11Windows 10macOS √úbers Men√ºband √úbers Kontextmen√º: rechtskick &gt; Umbenennen Mit F2 (je nach Tastatur auch Fn+F2) Komprimierte Dateien .zip‚Äã Dateien k√∂nnen komprimiert werden - sie brauchen dann weniger Speicherplatz auf Ihrem Ger√§t, k√∂nnen im Gegenzug aber nicht mehr bearbeitet werden (ausser Sie entpacken die Dateien wieder). Als Analogie wird in der Informatik ein Reissverschluss verwendet, welcher durch das Zumachen Platz einspart. Deshalb das englische Wort Zip f√ºr Zipper f√ºr komprimierte Dateien. Reissverschluss (Zipper) Komprimieren‚Äã Die gew√ºnschten Dateien Ausw√§hlen und anschliessend komprimieren. Das Symbol f√ºr einen komprimierten Ordner weist oft einen Reissverschluss auf. ZIP Datei Windows 11Windows 10macOS Video Entpacken‚Äã Windows 11Windows 10macOS Video","keywords":""},{"title":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung","type":0,"sectionRef":"#","url":"/26e/BYOD/material_python","content":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung ‚¨á Download BYOD Material Alle Python-Bezogenen Aufgabe sollen direkt auf dieser Seite gemacht werden. hello__world.py print(&quot;Hello World! It's a beautiful Day.&quot;) create__mesh.py from turtle import * from math import sqrt import random SQRT3 = sqrt(3) COLORS = ['red', 'blue', 'orange', 'green', 'purple', 'brown'] speed(7) for index_x in range(5): for index_y in range(5): x = index_x * 30 if index_y % 2 == 1: x = x - 15 y = index_y * 15 * SQRT3 penup() goto(x, y) pendown() for i in range(3): color(random.sample(COLORS, 1)[0]) forward(30) left(120) klammern.py ","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/26e/BYOD/betriebssystem","content":"Betriebssystem Globale Suche‚Äã Windows 11Windows 10macOS Startmen√º mit √∂ffnen und direkt mit Tippen beginnen. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. Windows 11Windows 10macOS Video","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/26e/BYOD/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Pr√ºfung‚Äã Es werden Ihnen 10 der untenstehenden Szenarien zugelost Sie haben min. 2 Minuten Zeit, um die Fragen vorg√§ngig zu sortieren Die Pr√ºfung beginnt mit einem leeren Desktop und ohne vorg√§ngig ge√∂ffnete Programme. Die heruntergeladenen Dateien m√ºssen im Original vorliegen und die Programme auf der Website m√ºssen zur√ºckgesetzt sein. Sie haben 5 Minuten Zeit, um die Szenarien vorzuzeigen F√ºr jedes korrekt vorgezeigte Szenario erhalten Sie 1 Punkt, f√ºr teilweise korrekte Szenarien (bspw. Maus statt Tastatur verwendet) gibt es 0.5 Punkte. Notenskala Punkte\tNote10\t6 9.5\t6 9\t5.7 8.5\t5.5 8\t5.2 7.5\t4.9 7\t4.7 6.5\t4.4 6\t4.2 5.5\t3.9 5\t3.6 4.5\t3.4 4\t3.1 3.5\t2.8 3\t2.6 2.5\t2.3 2\t2.1 1.5\t1.8 1\t1.5 0.5\t1.3 0\t1 Szenario 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Szenario 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Szenario 3‚Äã Windows 11Windows 10macOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Szenario 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Szenario 5‚Äã √ñffnen Sie das Bild &quot;sonnenuntergang.jpg&quot; und f√ºgen Sie die Beschriftungen &quot;Palme&quot; und &quot;Sonne&quot; hinzu. Original Bild Bearbeitetes Bild Schrift Die Schriftfarbe &amp; Gr√∂sse kann frei gew√§hlt werden, sie muss aber lesbar sein. Szenario 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop PowerPoint starten Szenario 7‚Äã sonnenuntergang.docx √∂ffnen (ab jetzt nur mit der Tastatur und ohne Maus!) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Absatz ausw√§hlen und l√∂schen Dokument abspeichern Szenario 8‚Äã Datei-Explorer und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Szenario 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Szenario 10‚Äã Das Programm create_mesh.py √∂ffnen und den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Szenario 11‚Äã Das Programm create_mesh.py √∂ffnen Ein Bildschirm-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschirmaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Szenario 12‚Äã Die komprimierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Szenario 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Szenario 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Szenario 15‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Szenario 16‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Szenario 17‚Äã Das Programm create_mesh.py √∂ffnen (auf der Webseite) Nach der Zahl 3 suchen. Wie oft kommt es im Programm vor? Szenario 18‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) Das Programm ausf√ºhren Szenario 19‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) Programm ausf√ºhren Szenario 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Absenzenheft unterschreiben lassen&quot; Szenario 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2022 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Szenario 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopieren, einen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Szenario 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Szenario 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Szenario 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Szenario 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Szenario 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Online unter https://onedrive.com im Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen √úberpr√ºfen dass die Datei wieder auf Ihren Laptop synchronisiert wird.","keywords":""},{"title":"8. Sehsterne","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Sehsterne","content":"8. Sehsterne @ Sehsterne (das sind Seesterne mit Augen) kennen nur die f√ºnf Buchstaben A ,C, I, N, T, die sie auf einem gesunkenen Schiff entdeckt haben. Alle W√∂rter setzen sie aus diesen Buchstaben zusammen. ACINT-Code‚Äã Die Sehsterninformatiker haben eine bin√§ren Code f√ºr ihr Alphabet entwickelt, den sie ACINT-Code nennen: 1. ACINT Decodieren Sie die folgende Nachricht: ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÖ ‚òÖ‚òÜ‚òÖ ‚òÜ‚òÖ‚òÖ SSR Codieren Sie die folgende Nachricht in ACINT-Code: A CAT CAN ACT SSR @ Geb√§rdensprache‚Äã Die Sehsterne haben keinen Mund. Sie kommunizieren, indem sie nacheinander f√ºr jeden Buchstaben den entsprechenden Arm heben. Eines Tages entdecken die Sehsterne ein weiteres gesunkenes Schiff mit f√ºnf neuen Buchstaben: E, H, J, M, R. 2. Geb√§rdensprache Schlagen Sie den Sehsternen ein System vor, wie sie alle zehn Buchstaben durch Heben der f√ºnf Arme darstellen k√∂nnen. SSR Wie viele unterschiedliche Buchstaben k√∂nnen Sehsterne maximal durch heben der f√ºnf Arme darstellen? SSR @ Erweiterter ACINT-Code‚Äã Die Sehstern-Informatiker m√∂chten einen neuen bin√§ren Code entwickeln, um die neuen Buchstaben darstellen zu k√∂nnen. Der neue Code soll aber kompatibel mit dem bisherigen ACINT-Code sein. 3. Erweiterung ACINT-Code Machen Sie einen Vorschlag f√ºr einen solchen Code. SSR ‚≠êÔ∏è Gesunkenes Schiff (Bonus)‚Äã 4. Gesunkenes Schiff Wie lautet der Name des ersten gesunkenen Schiffs? SSR","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/26e/BYOD/navigation","content":"Systemnavigation Wichtige Tasten und ihre Namen‚Äã Windows 11Windows 10macOS , Win Windows-Taste , Shift Umschalttaste Alt Wahltaste Ctrl Control-Taste , Feststelltaste (oder Caps-Lock-Taste) Bezweckt, dass alle Buchstaben gross geschrieben werden - auch Umlaute! Tabulator-Taste Zweck: Springt zur n√§chsten Spalte oder r√ºckt den Cursor in Fliesstext ein. Escape-Taste Zweck: springt aus dem aktuellen Kontext heraus (bspw. die aktuelle Auswahl aufheben) Fn Funktionstaste Hilfreiche Tastaturk√ºrzel (Tasten Shortcuts)‚Äã Windows 11Windows 10macOS Ctrl + X Ausschneiden Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl + C Kopieren Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl + V Einf√ºgen Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl + Z R√ºckg√§ngig machen - Den vorherigen Befehl widerrufen. Shift + Ctrl + Z Widerrufen das Umgekehrte von Ctrl + Z: um den Widerrufen-Befehl umzukehren. Ctrl + A Alle Objekte ausw√§hlen. Ctrl + F Finden Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl + P Drucken Das aktuelle Dokument drucken. Ctrl + S Speichern Das aktuelle Dokument speichern. Ctrl + T Tabs Einen neuen Tab √∂ffnen. + Tabulatortaste Alle ge√∂ffneten Apps anzeigen. Alt + Tabulatortaste Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift + Enter Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) + . Emoji √ñffnet die Emoji-Liste Quizz L√∂sen Sie das Quizz und markieren Sie die Aufgabe anschliessend als erledigt. Pfeiltasten‚Äã Windows 11Windows 10macOS Shift + Pfeiltasten Text ausw√§hlen Ctrl + Pfeiltasten ganze W√∂rter √ºberspringen Ctrl + Shift + Pfeiltasten ganze W√∂rter selektieren + Pfeiltasten Fenster auf dem Bildschirm anordnen Weitere M√∂glichkeiten f√ºrs Anordnen von Fenstern Shortcuts Tastatur&amp;Pfeiltasten ausprobieren Probieren Sie die verschiedenen Shortcuts im untenstehenden Textfeld aus! Klammern‚Äã Windows 11Windows 10macOS ( Shift + 8 ) Shift + 9 { Normalerweise Alt Gr + √§ } Normalerweise Alt Gr + $ [ Normalerweise Alt Gr + √º ] Normalerweise Alt Gr + ! Klammern schreiben Versuchen Sie, alle Klammern selber zu tippen! Weitere g√§ngige Zeichen‚Äã Windows 11Windows 10macOS ` Shift + ^ + Leerschlage (Backtick) @ Alt Gr + 2 # Alt Gr + 3 * Shift + 3 * Shift + 3 % Shift + 5 &amp; Shift + 6 / Shift + 7 \\ ctrl + alt + &lt; oder Alt Gr + &lt; &lt; &lt; &gt; Shift + &lt; Sonderzeichen K√∂nnen Sie die obigen Sonderzeichen selber erzeugen? Quizz Werden Sie Million√§r? ü§ëüí∞ü§ëüí∞ü§ëüí∞ üåü Arcade Game (englisch) Freiwillig: Spielen Sie das Tastenk√ºrzel-Game üëâ https://mattshaw.org/projects/shortcutgame/ Link √ñffnen‚Äã Links in bspw. in Word/Powerpoint √∂ffnen Link auf einer Webseite in einem neuen Tab √∂ffnen ... Cmd + Click Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. Windows 11Windows 10macOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werden. Windows 11Windows 10macOS Scrollen‚Äã Windows 11Windows 10macOS Alle Programme Anzeigen‚Äã Windows 11Windows 10macOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen, so dass Sie ge√∂ffnete Programme √ºbersichtlicher ordnen k√∂nnen. Dank virtueller Desktops k√∂nnen Programme aufgeteilt werden, um mehr √úberblick in der Taskleiste und auf den jeweiligen Desktops zu haben. Durch einfaches Drag &amp; Drop k√∂nnen Programme von einem auf den anderen Desktop verschoben werden. Bei der Ordnung zwischen Freizeit, Arbeit, Uni etc. helfen virtuelle Desktops. So k√∂nnen Ihre Gedanken, Projekte und Aufgaben thematisch gruppiert werden. Erstellen‚Äã Windows 11Windows 10macOS Virtuelle Desktops: Mit +Tabulator alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* Windows 11Windows 10macOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. Windows 11Windows 10macOS Weitere Gesten hier","keywords":""},{"title":"1. Begriff","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Begriff","content":"1. Begriff Aufgabe Wo befindet sich der Ort k√∂nigin.gesehen.damals? Verwenden Sie die Seite what3words.com. Bei welchen drei W√∂rtern wohnen Sie? In welchen Situationen ist dieser Code vorteilhafter als eine Adresse? Code Information Unter einer Information versteht man ¬´das Wissen, das ein Sender einem Empf√§nger √ºber einen Informationskanal √ºbermittelt¬ª.[1] Daten Daten sind Zeichen oder Symbole, die Informationen darstellen. Daten k√∂nnen gesendet, empfangen und verarbeitet werden. Code Ein Code ist eine ¬´Sprache¬ª, die festlegt, wie Informationen vom Sender in Daten √ºbersetzt und vom Empf√§nger wieder interpretiert werden. @ Code‚Äã Die Informations√ºbertragung kann nur funktionieren, wenn Sender und Empf√§nger den gleichen Code verwenden. Bei zwischenmenschlicher Kommunikation ist der Code normalerweise nicht explizit festgelegt. Dann muss der Empf√§nger den Code erraten, was zu Missverst√§ndnissen f√ºhren kann. Ein Code ist eine Vorschrift, welche Daten von einer Darstellung in eine andere umwandelt. Dabei darf keine Information verloren gehen, eine R√ºckumwandlung muss m√∂glich sein. Beispiel eines Codes: Umwandlung von Braillezeichen in Buchstaben und umgekehrt. Das Ziel dieser Umwandlung ist es, eine f√ºr einen bestimmten Zweck optimierte Darstellung Informationen zu erreichen. So ist die Brailleschrift daf√ºr optimiert, per Tastsinn gelesen werden zu k√∂nnen. Beispiele f√ºr Codes‚Äã Brailleschrift‚Äã ASCII‚Äã Genetischer Code‚Äã QR-Code‚Äã ISBN‚Äã what3words.com‚Äã","keywords":""},{"title":"√úbungen UTF-8","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Uebungen","content":"√úbungen UTF-8 1. Wie viele Zeichen? Wie viele Zeichen sind in folgender bit-Squenz codiert? 11100010 10011101 10000000 01000110 11010011 10111111 11110110 10011010 10101010 10001111 00010010 2. UTF-8 Decodieren Folgende bit-Sequenzen sind UTF-8 Codiert. Welche Dezimalzahlen sind codiert? 11000010 10011001 11100001 10000000 10001111 3. UTF-8 Codieren Codieren Sie folgende bit-Sequenz zu UTF-8: 1100 10010101 10010110 Codieren Sie die Zahl 260 zu UTF-8: 4. UTF-8 Emojis Codieren Sie drei Weihnachts-Emojis zu UTF-8: Verwenden Sie Python, um die Ordnungszahl der Emojis herauszufinden. Wandeln Sie die Ordnungszahlen ins Bin√§re um (auch hier darf Python verwendet werden) Codieren Sie die Bin√§rzeichen-Kette zu UTF-8 und halten Sie das Resultat fest. Probieren Sie Ihre L√∂sung im UTF-8 Decodier-Modus Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin","keywords":""},{"title":"Lernziele Codes und Daten","type":0,"sectionRef":"#","url":"/26e/Codierung/Lernziele","content":"Lernziele Codes und Daten Pr√ºfung Die Pr√ºfung findet auf Papier statt Erlaubte Hilfsmittel: Taschenrechner (Codierungs-Tabellen werden zur Verf√ºgung gestellt) Gewichtung der Note: 1 Zeit: 60 Minuten Codes, Daten und Informationen Sie kennen die Begriffe &quot;Code&quot;, &quot;Codieren&quot; und &quot;Decodieren&quot;, k√∂nnen diese Begriffe in eigenen Worten definieren und identifizieren Codes in ihrem Alltag. Sie verstehen, dass es zwischen Daten und Informationen Unterschiede gibt, die Sie selber aufzeigen k√∂nnen. Zahlensysteme Sie wissen was ein Stellenwertsystem ist und wie es aufgebaut ist. Sie transformieren Bin√§re Zahlen zu Dezimalzahlen Sie transformieren Dezimalzahlen zu Bin√§rzahlen Zeichencodierung Sie k√∂nnen bei einer gegebenen Codierung (Latin1, UTF8, Sehstern...) Text Codieren und auch wieder Decodieren. Sie sind sich der Schwierigkeiten bei der √úbermittlung von bin√§ren Daten bewusst und kennen Strategien, wie diese behoben werden k√∂nnen. Farbe und Grafikformate Sie k√∂nnen die Unterschiede zwischen Vektor- und Rastergrafiken aufzeigen. Sie wissen, wie Farben digital abgespeichert werden und interpretieren Farben als RGB und RGBA Werte. Sie sind sich bewusst, dass mit Qualit√§tsverlust die Gr√∂sse von Bildern reduziert werden kann. Kompression und Informationsgehalt Sie kennen den Huffman-Algorithmus und k√∂nnen anhand eines Textes einen Huffman-Baum aufbauen, oder anhand eines solchen Baumes Text decodieren. Sie k√∂nnen argumentieren, wann die Huffman-Codierung eingesetzt wird. Sie k√∂nnen Berechnen, wie viele Datenbits bei der Anwendung der Huffman-Codierung eingespart werden k√∂nnen. Anwendungen Sie kennen verschiedene Anwendungen von Codes im Alltag Sie erkennen die grundlegenden Elemente eines QR-Codes Sie wissen, wie der Morsecode aufgebaut ist. (Es wird nicht erwartet, dass Sie die Codierungstabelle auswendig kennen) Sie wissen, wie eine Fehlererkennung erzeugt werden kann (Parit√§tsbit) Sie wissen, was wie ein EAN-13 Code aufgebaut ist und wie die Pr√ºfsumme berechnet wird. Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"5. UTF-8","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/UTF8","content":"5. UTF-8 Werden Unicode-Zeichen ins bin√§re √ºbersetzt wird klar, dass diese Zahlen nicht mehr nur mit einem Byte dargestellt werden k√∂nnen. Beispielsweise ist dem Affen-Emoji üêí die Zahl 12801810128018_{10}12801810‚Äã zugewiesen, was der Bin√§rzahl 00000001‚ÄÖ11110100‚ÄÖ00010010200000001\\:11110100\\:00010010_{2}0000000111110100000100102‚Äã entspricht, also 3 Bytes Speicherplatz ben√∂tigt. info 1 Byte entspricht 888 Bit 1 Megabit entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bit 1 Megabyte entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bytes oder 8‚Ä≤000‚Ä≤0008'000'0008‚Ä≤000‚Ä≤000 Bit UTF-8 ist ein Code, der Unicode-Zeichen in Bitmuster √ºbersetzt. Ein Unicode-Zeichen wird mit ein bis vier Bytes (daher 8-32 bit) dargestellt. Die folgende Tabelle zeigt, wie die Codierung funktioniert: Unicode-Bereich\tBitmuster\tAnzahl Bit\tByte 1: Anzahl Kontroll-Bits0 bis 127\t0xxxxxxx\t7\t1 128 bis 2047\t110xxxxx 10xxxxxx\t11\t3 2048 bis 65535\t1110xxxx 10xxxxxx 10xxxxxx\t16\t4 ab 65536\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\t21\t5 Unicode-Zeichen mit einer Nummer zwischen 0 und 127 werden mit einem Byte dargestellt, welches mit 0 beginnt. Somit ist UTF-8 in diesem Bereich identisch mit ASCII (und Latin 1). F√ºr die anderen Zeichen wird mehr als ein Byte verwendet. Dabei beginnt jedes Byte mit einer oder mehreren 1, gefolgt von einer 0. Die Anzahl 1 im ersten Byte definieren, wie viele Bytes f√ºr das Zeichen verwendet werden. Die folgenden Bytes werden mit 10 markiert. Die x werden mit der Bin√§rdarstellung der Unicode-Nummer aufgef√ºllt. Zeichen\tNummer\tBitmusterA\t65\t01000001 √§\t228\t11000011 10100100 Schwarze Sonne mit Strahlen ‚òÄ\t9728\t11100010 10011000 10000000 Affe üêí\t128018\t11110000 10011111 10010000 10010010 Der Vorteil dieser Codierung ist, dass anhand der ersten Bits eines Bytes erkannt wird, ob es sich um den Anfang oder die Fortsetzung eines Zeichens handelt. Beginn\tBedeutung0‚Ä¶\tASCII-Zeichen 10‚Ä¶\tFortsetzung eines Zeichens mit mehreren Bytes 110‚Ä¶\tBeginn eines Zeichens mit zwei Bytes 1110‚Ä¶\tBeginn eines Zeichens mit drei Bytes 11110‚Ä¶\tBeginn eines Zeichens mit vier Bytes Dies wird noch deutlicher, wenn man dies als Bin√§rbaum darstellt: UTF-8 Pr√§fix Ausprobieren‚Äã Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin Aufgabe Codieren Sie Ihre zwei lieblings Emojis als UTF-8 Bin√§r-Kette. Verwenden Sie f√ºr das Herausfinden der bin√§ren Codierung die Hilfe von Python. Mehrstufige Codierung 1‚Äã Oft werden Informationen mehrstufig codiert. So wird beispielsweise die Information ¬´Ich bin m√ºde.¬ª als Emoji dargestellt. Das Handy ordnet dem Emoji die entsprechende Unicode-Nummer zu. Diese wird mit UTF-8 in eine Bitfolge √ºbersetzt, welche √ºber das Mobilfunknetz √ºbermittelt wird. Das Handy des Empf√§ngers √ºbersetzt die Bitfolge wieder zur√ºck in eine Unicode-Nummer und das entsprechende Emoji. Die Interpretation des Emojis muss vom Empf√§nger selbst vorgenommen werden. Unicode zu UTF-8 Remix rothe.io ‚Ü©","keywords":""},{"title":"7. Textcodierung","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Textcodierung","content":"7. Textcodierung In dieser praktischen √úbung speichern Sie auf Ihrem Computer eine Textdatei und √ºberpr√ºfst anschliessend, ob die in der Datei gespeicherten Bits tats√§chlich der Unicode/UTF-8-Codierung des Texts entsprechen. 1. Texteditor √∂ffnen Der Editor ist eine App, in welcher man Textdateien erstellen und bearbeiten kann. Das kann man auch mit Word, dies ist jedoch umst√§ndlicher. Word-Dateien sind keine reinen Textdateien, sie enthalten auch andere Daten wie Formatierungen und Bilder. WindowsWindows 10macOS Starten Sie die Editor-App, indem Sie im Startmen√º nach ¬´editor¬ª suchen: 2. Text eingeben Geben Sie einen kurzen Text ein. Dieser sollte nicht nur ASCII-Zeichen enthalten, sondern auch ein Umlaut wie ¬´√§¬ª und Emojis. WindowsmacOS Emojis k√∂nnen unter Windows mit dem Tastenk√ºrzel + . eingef√ºgt werden. Alternativ findet man unter üëâ Emojipedia viele weitere Emojis. WindowsmacOS 3. Textdatei speichern Speichern Sie die Textdatei unter dem Namen Unicode-Test.txt indem Sie WindowsmacOS die Tastenkombination Ctrl+s dr√ºcken oder den Men√ºpunkt Datei &gt; Speichern ausw√§hlen. 4. Datei als Bytes betrachten Mit dem Online-Tool HexEd.it k√∂nnen Sie eine beliebige Datei Byte f√ºr Byte betrachten: üëâ HexEd.it Klicken Sie auf Datei √∂ffnen und w√§hlen Sie die vorhin gespeicherte Textdatei aus. Nun sehen Sie die einzelnen Bytes, welche die Datei enth√§lt, beispielsweise: 54 73 63 68 C3 BC 73 73 20 F0 9F 98 80 21 Die Bytes werden wie in der Informatik √ºblich als Hexadezimalzahlen angegeben. Wenn man √ºber die einzelnen Bytes navigiert (mit den Pfeiltasten), sieht man auf der linken Seite die entsprechende Bin√§rcodierung. Alternativ finden Sie hier auch einen Umrechner zwischen Bin√§r-, Dezimal- und Hexadezimalzahlen. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 Dec - Bin - Hex Dezimal Bin√§r Hexadezimal Text: Hex - Bin Hexadezimal 08 Bin√§r 00001000 In der bin√§ren Darstellung sehen Sie sofort die Zeichen, welche mehrere Bytes ben√∂tigen. Sie beginnen mit einer 1. So ist 11000011 10111100 die Codierung des Buchstabens ¬´√º¬ª. Nun k√∂nnen Sie mit folgenden Hilfsmitteln √ºberpr√ºfen, ob die Bytes tats√§chlich der Unicode/UTF-8-Codierung Ihres Textes entsprechen: üëâ ASCII-Tabelle f√ºr Bytes, die mit einer 0 starten üëâ Unicode-Tabelle f√ºr zusammengesetzte Zeichen mit mehreren Bytes Halten Sie die Hexadezimalzeichen Ihres Textes fest. Wo ist das erste Emoji? √úberpr√ºfen Sie, ob Sie den Dezimalwert des Emojis entziffern und auf üëâ https://unicode-table.com/de/ finden Hinweis Im vorliegenden Beispiel sieht das so aus: Byte(s)\tZeichen54\tT 73\ts 63\tc 68\th C3 BC\t√º 73\ts 73\ts 20\t‚ê£ F0 9F 98 80\tüòÄ 21\t! ‚≠êÔ∏è Zusatzaufgabe - Andere Dateien Betrachten Sie andere Dateien in HexEd.it und achten Sie auf folgendes: Finden Sie in anderen Dateien auch Unicode-codierten Text? Erkennen Sie ein Muster bei den ersten paar Bytes von Dateien des gleichen Typs?","keywords":""},{"title":"4. Unicode","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Unicode","content":"4. Unicode Unicode ist ein internationaler Standard f√ºr Schriftzeichen und Symbole. Das Unicode-Konsortium erstellt einen Katalog von allen sinnvollen Schriftzeichen, welcher st√§ndig erweitert wird. In der Version 40.0, welche im Oktober 2021 ver√∂ffentlicht wurde, umfasst Unicode ca. 140‚Ä≤000140'000140‚Ä≤000 Zeichen. Hier sind ein paar Zeichen aufgef√ºhrt, um zu illustrieren wie umfangreich Unicode ist: Lateinischer Grossbuchstaben A, 656565 oder U+0041 Hiragana-Buchstabe Ya, 124201242012420 oder U+3084 Cherokee-Buchstabe S, 506950695069 oder U+13CD Spielkarte Neun der Herzen, 127161127161127161 oder U+1F0B9 Entsetztes Gesicht mit explodierendem Kopf, 129327129327129327 oder U+1F92F Affe, 128018128018128018 oder U+1F412 Power-Symbol, 921192119211 oder U+23FB √Ñgyptische Hieroplyphe Nl012, 783807838078380 oder U+1322C Quelle: UT - Unicode Table Jedes Unicode-Zeichen hat eine eindeutige Unicode-Nummer, welche h√§ufig als hexadezimale Zahl geschrieben wird, aber nat√ºrlich auch dezimal oder bin√§r dargestellt werden kann. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 ","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/26e/BYOD/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã Windows 11Windows 10macOS Snipping Tool Unter dem Startmen√º nach Snipping Tool suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: deb ganzen Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã Windows 11Windows 10macOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen &gt; Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - Rechtsklick &gt; Medien speichern unter.... Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. Windows 11Windows 10macOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Text zu Bildern hinzuf√ºgen‚Äã Windows 11Windows 10macOS Text hinzuf√ºgen Video zuschneiden‚Äã Windows 11Windows 10macOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl + F oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl + P) Neuer Tab √∂ffnen (Ctrl + T) URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) Eine Mail-Signatur hinzuf√ºgen/√§ndern Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Windows 11Windows 10macOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365‚Äã An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã Windows 11Windows 10macOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã Synchronisierungsoptionen f√ºr OneDrive Dateien Windows 11Windows 10macOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"26e Informatik","type":0,"sectionRef":"#","url":"/26e/home","content":"26e Informatik Datum\tThema\tInhaltDo. 10.02.\tCodes und Daten\tUTF-8, Dateien, Hexadezimal Do. 24.02.\tCodes und Daten\tAuftrag: Kompression Do. 03.03.\tCodes und Daten\tGrafikformate Do. 10.03.\tCodes und Daten\tAnwendungen Do. 17.03.\tCodes und Daten\tWiederholung Do. 24.03. Codes und Daten\tTest Do. 31.03.\tCodes und Daten\tQR Codes Do. 07.04. Sonderwoche\tSkilager Do. 14.04. Fr√ºhlingsferien Do. 21.04. Fr√ºhlingsferien Do. 28.04.\tBig Data Do. 05.05.\tBig Data Do. 12.05.\tBig Data Do. 19.05. Auffahrt Do. 26.05.\tBig Data Do. 02.06. Big Data\tVortr√§ge Do. 09.06. Big Data\tVortr√§ge Do. 16.06. Sportwoche Do. 23.06.\tTabellenkalkulation Mi. 29.06. Notenschluss Do. 30.06.\tTabellenkalkulation Fr. 08.07.\tüöß Fr. 17.02. Sportwoche 1. Semester EinzellektionPraktikum Datum\tThema\tInhaltDi. 16.08.\tEinstieg\tICT Einstieg Di. 23.08.\tICT\tBYOD Basics Di. 30.08.\tICT\tBYOD Basics Di. 06.09.\tICT\tOffice: Layout und Gliederung Di. 13.09.\tICT\tOffice: Layout und Gliederung Di. 20.09. Sonderwoche Di. 27.09. Herbstferien Di. 04.10. Herbstferien Di. 11.10. Herbstferien Di. 18.10.\tICT\tOffice: Layout und Gliederung Di. 25.10.\tICT\tOffice: Layout und Gliederung Di. 01.11. ICT\tKurztest Office Di. 08.11. Informatik Biber\tWettbewerb Di. 15.11.\tProgrammieren Do. 17.11. Notenschluss Zwischenzeugnis Di. 22.11.\tProgrammieren Di. 29.11.\tProgrammieren Di. 06.12. Kantonaler Fachschaftstag Di. 13.12.\tProgrammieren Di. 20.12.\tProgrammieren Do. 22.12. ‚ö†Ô∏è A &amp; B. 14:00-15:30\tProbe (schriftlich &amp; praktisch) Di. 27.12. Winterferien Mi. 04.01. Winterferien Mi. 11.01.\tCodes und Daten\tEinstieg Mi. 25.01.\tCodes und Daten\tZeichencodierung Mi. 25.01. Notenschluss Mi. 01.02.\tCodes und Daten\tZahlensysteme Fr. 03.02. Semesterende Fr. 10.02.\tCodes und Daten\tUTF-8, Dateien, Hexadezimal Mi. 15.02. Sportwoche\t","keywords":""},{"title":"Browser","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Browser","content":"Browser Begriff‚Äã Ein Webbrowser oder kurz Browser ist ein Programm, welches auf einem Benutzer-Ger√§t installiert ist. Der Browser bietet eine grafische Oberfl√§che an und fordert die f√ºr die Darstellung eine Webseite ben√∂tigten Dateien von einem Webserver an. Anschliessend analysiert es diese Dateien und stellt die Webseite entsprechend dar. Der Browser f√ºhrt auch Programme aus, welche in der Webseite enthalten sind. Produkte‚Äã Logo\tName\tHersteller\tPlattform√ºbergreifend Firefox\tMozilla Chrome\tGoogle Edge\tMicrosoft Safari\tApple nur f√ºr Apple Produkte ‚≠êÔ∏è Technologien‚Äã F√ºr moderne Webseiten werden haupts√§chlich drei Technologien verwendet: HTML (Hypertext Markup Language): Mit dieser Markup-Sprache wird die Struktur einer Webseite beschrieben. HTML-Dateien enthalten den ¬´Bauplan¬ª einer Webseite und Verweise auf alle anderen Dateien, welche f√ºr die Webseite ben√∂tigt werden. CSS (Cascading Stylesheets): Damit wir das Layout der Webseite definiert. Mit CSS werden Position, Farben, Animationseffekte und weitere Formatierungen der einzelnen Elemente der Webseite beschrieben. JS (Java Script) ist eine Programmiersprache. Moderne Webseiten enthalten teilweise umfangreiche Programme, welche vom Browser ausgef√ºhrt werden.","keywords":""},{"title":"2. Zahlensysteme","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Zahlensysteme","content":"2. Zahlensysteme Aktuelle Computer kennen im wesentlichen zwei Zust√§nde: Strom- oder Nicht-Strom. Da es nichts dazwischen gibt, werden diese Zust√§nde auch &quot;bin√§r&quot; genannt. Dies kann mit Zahlen wie folgt dargestellt werden: 0 ‚Üí kein Strom 1 ‚Üí Strom Da wir Menschen uns besser im Zehnersystem zurechtfinden, wo es 10 eindeutige Zeichen gibt, brauchen wir eine M√∂glichkeit, zwischen diesen System hin- und herzurechnen. Jedes dieser sog. Stellenwertsysteme ist gleich aufgebaut. Schaut man sich das Zehnersystem an, bemerkt man, dass jede Stelle mit einer 10er Potenz multipliziert wird. Zehnersystem‚Äã 328=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100\\ \\begin{aligned} 328 &amp;= 300 + 20 + 8 \\\\ &amp;= 3 \\cdot 100 + 2 \\cdot 10 + 8 \\cdot 1 \\\\ &amp;= 3 \\cdot 10^2 + 2 \\cdot 10^1 + 8 \\cdot 10^0 \\\\ \\end{aligned}¬†328‚Äã=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100‚Äã Bin√§rsystem‚Äã Das Bin√§rsystem wird auch Dualsystem oder Zweiersystem genannt Nun gibt es nur zwei eindeutige Zeichen, 0 und 1, und jede Stelle wird mit einer Zweierpotenz multipliziert. In der folgenden Tabelle sind die ersten 12 Dezimalzahlen auch als Bin√§rzahl angegeben. Bin√§r\tDezimal020_202‚Äã\t0100_{10}010‚Äã 121_212‚Äã\t1101_{10}110‚Äã 10210_2102‚Äã\t2102_{10}210‚Äã 11211_2112‚Äã\t3103_{10}310‚Äã 1002100_21002‚Äã\t4104_{10}410‚Äã 1012101_21012‚Äã\t5105_{10}510‚Äã Bin√§r\tDezimal1102110_21102‚Äã\t6106_{10}610‚Äã 1112111_21112‚Äã\t7107_{10}710‚Äã 100021000_210002‚Äã\t8108_{10}810‚Äã 100121001_210012‚Äã\t9109_{10}910‚Äã 101021010_210102‚Äã\t101010_{10}1010‚Äã 101121011_210112‚Äã\t111011_{10}1110‚Äã Hinweis: Subskript Die tiefgestellte 2 bzw. 10 zeigt an, in welchem Zahlensystem die Zahl dargestellt ist und wird Subskript genannt. Durch das Subskript wird ersichtlich, ob bspw. mit 101 dezimal &quot;Hundert und Eins&quot; oder bin√§r &quot;Eins Null Eins&quot; gemeint ist. Bin√§r ‚Üí Dezimal‚Äã Die Umrechnung vom Bin√§rsystem ins Dezimalsystem erfolgt durch Ausmultiplizieren mit den entsprechenden Zweierpotenzen. Beispiel: 1011 Zweierpotenz\t232^323\t222^222\t212^121\t202^020 Bin√§rzahl\t111\t000\t111\t111 Summanden\t888\t000\t222\t111 Resultat 111111 oder mathematisch formuliert: 10112=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110\\begin{aligned} 1011_2 &amp;= 1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 \\\\ &amp;= 1 \\cdot 8 + 0 \\cdot 4 + 1 \\cdot 2 + 1 \\cdot 1 \\\\ &amp;= 11_{10} \\end{aligned}10112‚Äã‚Äã=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110‚Äã‚Äã Dezimalsystem ‚Üí Bin√§rsystem‚Äã F√ºr die Umrechnung vom Dezimalsystem zum Bin√§rsystem ist die Tabelle der Zweierpotenzen essenziell: 282^828\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020256\t128\t64\t32\t16\t8\t4\t2\t1 Beispiel: 143 Die erste Zweierpotenz, die kleiner ist als 143 ist, ist 27=1282^7 = 12827=128 ‚Üí die Bin√§rzahl hat also 8 Stellen. Nun wird f√ºr jede Stelle √ºberpr√ºft, ob die entsprechende Zweierpotenz zur Zwischensumme dazuaddiert werden kann, oder ob man dadurch bereits eine zu grosse Zahl erh√§lt. 2er-Potenz\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020\tZwischensummeRechnungsschritte\t128\t64\t32\t16\t8\t4\t2\t1 1. 128 &lt;143\\lt 143&lt;143\t1 128 2. 128 + 64 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0 128 3. 128 + 32 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0 128 4. 128 + 16 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0\t0 128 5. 128 + 8 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1 136 6. 136 + 4 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1 140 7. 140 + 2&lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1\t1 142 8. 142 + 1=143= 143=143\t1\t0\t0\t0\t1\t1\t1\t1\t143 Bin ‚Üí Dez Wandeln Sie vom vom Bin√§r- ins Dezimalsystem um. Dez ‚Üí Bin Wandeln Sie vom Dezimal- ins Bin√§rsystem um.","keywords":""},{"title":"E-Mail verwenden","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/E-Mail","content":"E-Mail verwenden Eine E-Mail ist ein Brief‚Äã Im Gegensatz zu einem Chat gelten bei der E-Mail-Kommunikation die gleichen Regeln wie beim Briefverkehr. Eine E-Mail enth√§lt also eine Anrede, einen h√∂flichen und sprachlich korrekten Text, sowie eine Grussformel. Bei einer E-Mail wird immer auch ein Betreff angegeben. Dieser sollte so gew√§hlt werden, dass er kurz und pr√§gnant den Inhalt der E-Mail zusammenfasst. Betreff: Wechsel Schwerpunktfach Sehr geehrter Herr Cadetg In den ersten sechs Monaten hier am Gymnasium habe ich grosse Freude am Italienischunterricht bekommen. Das von mir gew√§hlte Schwerpunktfach entspricht hingegen gar nicht meinen Vorstellungen. Deshalb frage ich Sie, ob es mir m√∂glich w√§re, in das Schwerpunktfach Italienisch zu wechseln. Freundliche Gr√ºsse Anna M√ºller Anrede‚Äã Die √ºbliche Andere ist ¬´Sehr geehrte/r Frau/Herr¬ª. Sind mehrere Personen angesprochen, schreibt man ¬´Sehr geehrte Damen und Herren¬ª. Wenn die angesprochene Person unbekannt ist (z.B. bei einer Support-E-Mail-Adresse), so kann man ¬´Guten Tag¬ª schreiben. Ist man mit der angeschriebenen Person vertrauter, schreibt man ¬´Liebe/r¬ª. Am Schluss der Anrede steht kein Satzzeichen. Es folgt eine Leerzeile, dann der erste Satz. Grussformel‚Äã Zwischen Text und Grussformel befindet sich eine Leerzeile. Die Grussformel lautet ¬´Freundliche Gr√ºsse¬ª ohne Satzzeichen. Ist man vertrauter, schreibt man ¬´Liebe Gr√ºsse¬ª. Wann antworten? Wann nicht?‚Äã Benutzen Sie die Antworten-Funktion nur, wenn Sie wirklich eine Antwort auf eine Mail schreiben. So kann eine l√§ngere E-Mail-Konversation vom Mailprogramm sauber dargestellt und nachvollzogen werden. Wenn Sie jemandem eine neue Nachricht schreiben, sich also nicht auf vorhergehenden E-Mail-Verkehr beziehen, dann sollten Sie die Antworten-Funktion nicht verwenden, sondern einfach eine neue E-Mail schreiben. Allen Antworten‚Äã Die Funktion allen Antworten sollte man normalerweise nicht benutzen. Optionen CC und BCC‚Äã Optionen im Mailprogramm Kopie/CC In das An-Feld wird der eigentliche Empf√§nger geschrieben. Will man gleichzeitig eine Kopie der E-Mail versenden, nutzt man das Cc-Feld. Die Abk√ºrzung Cc steht f√ºr Carbon copy und bedeutet so viel wie Kohlepapierdurchschlag. Es ist √ºblich, dass die Personen, die in Cc stehen, die E-Mail lediglich zur Kenntnis bekommen. Die Empf√§nger in den Feldern An und Cc k√∂nnen die E-Mail-Adressen der anderen lesen und wissen somit, wer die E-Mail noch bekommen hat. Und hier lauert die Gefahr! Denn diese Art der Versendung sollte man nur w√§hlen, wenn es sich um eine geschlossene Nutzergruppe, wie z.B. innerhalb einer Organisation handelt.1 Blindkopie/BCC M√∂chte man dagegen eine E-Mail an mehrere Empf√§nger versenden, die sich untereinander nicht kennen, sollte man auf jeden Fall das Bcc-Feld nutzen. Bcc steht f√ºr Blind carbon copy und wird mit ‚Äûunsichtbarer Durchschlag‚Äú √ºbersetzt. Der Name sagt es schon: Die Empf√§nger in diesem Feld werden weder von den anderen Empf√§ngern gesehen, noch k√∂nnen sie selbst andere Adressen sehen. Lediglich das An-Feld ist f√ºr alle Teilnehmer sichtbar.1 Quelle: An-Cc-Bcc: scope-and-focus.com ‚Ü©","keywords":""},{"title":"Cloud","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/cloud","content":"Cloud ¬´Cloud¬ª bedeutet, dass Ihre Dateien auf einem Server des Cloud-Betreibers gespeichert werden. Eine Cloud kann aber auch bspw. Rechenleistung zur Verf√ºgung stellen und Teile einer Anwendung ausf√ºhren. √úblicherweise steht auf dem Server ebenfalls eine Web-App zu Verf√ºgung, damit die Dateien im Browser betrachtet oder bearbeitet werden k√∂nnen. Desktop-App ‚Äã Damit die Desktop-App verwendet werden kann, muss diese erst auf dem Ger√§t installiert worden sein. Desktop-Apps bieten meistens einen gr√∂sseren Funktionsumfang, k√∂nnen ohne aktive Internetverbindung gestartet und verwendet werden und sind meist performanter. Web-App ‚Äã Die Web-App wird beim √ñffnen des Dokuments vom Server des Anbieters heruntergeladen und im Browser (daher auf dem Prozessor des Laptops) ausgef√ºhrt. Web-App Architektur@ Einzelne Berechnungen k√∂nnen auch in die Cloud ausgelagert werden, z.B. die Autokorrektur in der Word Web-App: Bei jeder √Ñnderung wird der aktuelle Abschnitt an die Cloud geschickt und auf Fehler √ºberpr√ºft: Autokorrektur in Word Onine Auf der rechten Seite ist der Datenaustausch, der f√ºr die Autokorrektur notwendig ist, vom Laptop zur Cloud zu sehen. Bei jeder √Ñnderung des Dokuments wird der ganze Inhalt des aktuellen Abschnitts an die Cloud geschickt. Web-Apps brauchen eine aktive Internetverbindung und sind oft auch etwas langsamer als Desktop-Apps. Meist ist zudem der Funktionsumfang eingeschr√§nkt. Microsoft 365‚Äã OneDrive im Browser‚Äã In OneDrive im Browser kann eine Datei wahlweise in der Web-App oder in der Desktop-App ge√∂ffnet werden. Mit einem Doppelklick wird die Datei in der Web-App ge√∂ffnet. Klicke auf die drei vertikalen Punkte ‚ãÆ, dann auf √ñffnen und In der App √∂ffnen, um die Datei in der Desktop-App zu √∂ffnen. Teams-App‚Äã In der Teams-App muss auf die drei horizontalen Punkte ‚ãÆ geklickt werden. Es gibt zus√§tzlich die M√∂glichkeit In Teams bearbeiten. In diesem Fall wird die Web-App verwendet, diese wird jedoch innerhalb der Team-App gestartet (die Teams-App kann einen Browser anzeigen).","keywords":""},{"title":"Datenverlust","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Sicherheit/Datenverlust","content":"Datenverlust Eine oft untersch√§tzte Gefahr ist der Verlust von Daten. @ Ursachen‚Äã F√ºr den Verlust von Daten gibt es verschiedene Ursachen, beispielsweise: Defekt des Ger√§ts, auf welchem die Daten gespeichert sind, Verlust des Ger√§ts, auf welchem die Daten gespeichert sind, Zerst√∂rung der Daten durch Schadsoftware, Verschl√ºsselung der Daten durch Schadsoftware. Massnahmen‚Äã Cloudspeicher verwenden‚Äã Daten sollten nie auf nur einem Ger√§t gespeichert werden. Mit Cloud-L√∂sung werden Daten automatisch zwischen mehreren Ger√§ten und einem Cloudspeicher synchronisiert. Damit stehen die Daten auch noch zu Verf√ºgung, wenn ein Ger√§t verloren geht oder einen Defekt hat. Schutz vor Schadsoftware‚Äã Kapitel Schadsoftware","keywords":""},{"title":"Passw√∂rter","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Sicherheit/Passwoerter","content":"Passw√∂rter Unter https://howsecureismypassword.net/ kann die Sicherheit Ihres Passworts analysiert werden - insbesondere spannend ist die gesch√§tzte Zeit, um das Passwort zu knacken. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwort √ºberpr√ºfen‚Äã Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. 4. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (Empfehlung) - gute Basis-Funktionen und einfaches Handling. KeePass LastPass","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Sicherheit/Authentifizierung","content":"Authentifizierung Authentifizierung (engl. authentication) ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Schadsoftware","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Sicherheit/Schadsoftware","content":"Schadsoftware Ransomware Wanna Cry@ Schadsoftware oder Schadprogramm (auch Malware) sind Computerprogramme, welche entwickelt wurden, um aus Sicht der Betroffenen unerw√ºnschte und sch√§dliche Funktionen auszuf√ºhren. Bezeichnungen‚Äã Computerviren sind Programme, welche sich selbst√§ndig und automatisch auf m√∂glichst viele Ger√§te kopieren. Trojaner sind Schadprogramme, welche sich als andere App, beispielsweise als Spiel tarnen. Ransomware sind Schadsoftware, welche die Daten auf den infizierten Ger√§ten verschl√ºsseln und f√ºr deren Entschl√ºsselung ein L√∂segeld verlangen. Spyware sind Schadprogramme, welche den Benutzer ausspionieren, indem sie Daten und Aktivit√§ten am Ger√§t an Dritte weiterleiten. Aufgabe Wer hat den ersten Computervirus geschrieben? Wie heisst der Virus? Wie hat sich das Virus verbreitet? Computerschutz‚Äã Damit ein Schadprogramm auf dem Computer ausgef√ºhrt werden kann, muss es zuerst einmal dorthin kommen. Damit dies klappt muss entweder ein Benutzer einen Trojaner installieren oder ein Computervirus kann einbrechen. Die Voraussetzung dass ein Computervirus ein System infizieren kann, sind Sicherheitsl√ºcken. Das sind nicht bedachte Wege, √ºber welche Programme auf einem Computer ausgef√ºhrt werden k√∂nnen, ohne dass dazu eine Best√§tigung der Anwender:in n√∂tig ist (normalerweise muss beim bspw. beim Installieren eines Programms die Installation abgesegnet werden.). Diese Wege sind meist ausgekl√ºgelt und sehr clever. Um sich vor Schadsoftware zu sch√ºtzen, gilt es folgende Punkte zu beachten: gesunder Menschenverstand - die Herausgeber:innen von Programmen sollten verifizierbar und vertrauensw√ºrdig sein. Heruntergeladene Programme von dubiosen Seiten sollte grunds√§tzlich misstraut werden. das System aktuell halten - Updates nerve zwar gewaltig; sie flicken jedoch entdeckte L√ºcken, so dass der Computer Schritt-f√ºr-Schritt sicherer wird. Virenprogramme verwenden - Dubiose Aktivit√§ten von Programmen (Netzwerkverkehr, Festplatten- oder Arbeitsspeicherzugriffe), sowie der Inhalt von Dateien k√∂nnen von Virenprogrammen analysiert und ggf. blockiert werden. Virenprogramme‚Äã Aktuelle Versionen von Windows und Mac OS Computer sind mit den Grundeinstellungen gen√ºgend gegen allt√§gliche Bedrohungen gesch√ºtzt. Bei Mac passiert der Virenschutz ausschliesslich im Hintergrund (mit XProtect), bei Windows heisst der Virenschutz Microsoft Defender und besitzt auch eine grafische Oberfl√§che. Auf beiden Betriebssystemen werden bspw. heruntergeladene Dateien auf bekannte Schadsoftware analysiert. Der Virenschutz hinkt dabei immer ein bisschen hinterher - sobald eine neue L√ºcke ausgenutzt wird, muss diese geschlossen werden und die Ausf√ºhrung der entsprechenden Schadprogramme sollte durch den Virenschutz verhindert werden. Damit auch aktuelle So Die Anwender:in bekommt von diesem Schutz nur dann etwas mit, wenn ein m√∂glicherweise gef√§hrliche Software heruntergeladen wurde updates ausgef√ºhrt werden m√ºssen. ‚≠êÔ∏è Funktioniert mein Virenschutz? Damit getestet werden kann, ob der Virenschutz auf einem System funktioniert, gibt es eine EICAR-Testdatei (erzeugt vom European Institute for Computer Antivirus Research (EICAR)), die unsch√§dlich ist, aber von jedem g√§ngigen Antivirus-Programm erkannt werden muss. Der Inhalt der Datei sieht wie folgt aus: EICAR-Testdatei X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* Aufgabe: Laden Sie die EICAR-Testdatei herunter und √ºberpr√ºfen Sie, dass ihr System Alarm schl√§gt. Download","keywords":""},{"title":"3. Zeichencodierung","type":0,"sectionRef":"#","url":"/26e/Codierung/Codierung/Zeichencodierung","content":"3. Zeichencodierung Datenpakete bestehen aus verschiedenen Zahlen und Zeichen. Wie lassen sich diese in Einsen und Nullen √ºbersetzen? Auf dem Computer ist jedem Zeichen eine eindeutige Zahl zugeordnet - eine sog. Zeichencodierung. Eine g√§ngige Zeichencodierung ist etwa ASCII, 128 Zeichen, wobei f√ºr ein Zeichen genau 7 bit, also 7 Stellen mit 0 oder 1, notwendig sind. In diesen 128 m√∂glichen Zeichen sind 33 Steuerzeichen und 95 normale Zeichen enthalten. Steuerzeichen spezielle Zeichen wie bspw. das Zeichen \\n f√ºr einen Zeilenumbruch oder \\t f√ºr einen Tabulator. Die ASCII-Codierung enth√§lt noch keine Umlaute, weshalb mit Latin 1, 256 Zeichen der Informationsgehalt um ein Bit erh√∂ht wurde, so dass insgesamt 256 Zeichen codiert werden k√∂nnen - die ersten 128 Zeichen sind dabei identisch mit ASCII. Zeichen\tDezimal\tBin√§r\\n\t10\t00001010 ‚éµ\t32\t00100000 !\t33\t00100001 &amp;\t38\t00100110 .\t46\t00101110 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 =\t61\t00111101 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 Zeichen\tDezimal\tBin√§rD\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 V\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 Zeichen\tDezimal\tBin√§rd\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 √§\t228\t11100100 √∂\t246\t11110110 √º\t252\t11111100 Komplette Latin 1 Tabelle Zeichen\tDezimal\tBin√§r\t0\t00000000 1\t00000001 2\t00000010 3\t00000011 4\t00000100 5\t00000101 6\t00000110 7\t00000111 8\t00001000 \\t\t9\t00001001 \\n\t10\t00001010 11\t00001011 12\t00001100 13\t00001101 14\t00001110 15\t00001111 16\t00010000 17\t00010001 18\t00010010 19\t00010011 20\t00010100 21\t00010101 22\t00010110 23\t00010111 24\t00011000 25\t00011001 26\t00011010 27\t00011011 28\t00011100 \u001d\t29\t00011101 30\t00011110 31\t00011111 ‚éµ\t32\t00100000 !\t33\t00100001 &quot;\t34\t00100010 #\t35\t00100011 $\t36\t00100100 %\t37\t00100101 &amp;\t38\t00100110 '\t39\t00100111 (\t40\t00101000 )\t41\t00101001 *\t42\t00101010 +\t43\t00101011 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 ;\t59\t00111011 &lt;\t60\t00111100 =\t61\t00111101 &gt;\t62\t00111110 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 D\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 Zeichen\tDezimal\tBin√§rV\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 [\t91\t01011011 \\\t92\t01011100 ]\t93\t01011101 ^\t94\t01011110 _\t95\t01011111 `\t96\t01100000 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 d\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 {\t123\t01111011 |\t124\t01111100 }\t125\t01111101 ~\t126\t01111110 \t127\t01111111 ¬Ä\t128\t10000000 ¬Å\t129\t10000001 ¬Ç\t130\t10000010 ¬É\t131\t10000011 ¬Ñ\t132\t10000100 ¬Ö\t133\t10000101 ¬Ü\t134\t10000110 ¬á\t135\t10000111 ¬à\t136\t10001000 ¬â\t137\t10001001 ¬ä\t138\t10001010 ¬ã\t139\t10001011 ¬å\t140\t10001100 141\t10001101 142\t10001110 143\t10001111 144\t10010000 ¬ë\t145\t10010001 ¬í\t146\t10010010 ¬ì\t147\t10010011 ¬î\t148\t10010100 ¬ï\t149\t10010101 ¬ñ\t150\t10010110 ¬ó\t151\t10010111 ¬ò\t152\t10011000 ¬ô\t153\t10011001 ¬ö\t154\t10011010 ¬õ\t155\t10011011 ¬ú\t156\t10011100 157\t10011101 158\t10011110 ¬ü\t159\t10011111 160\t10100000 ¬°\t161\t10100001 ¬¢\t162\t10100010 ¬£\t163\t10100011 ¬§\t164\t10100100 ¬•\t165\t10100101 ¬¶\t166\t10100110 ¬ß\t167\t10100111 ¬®\t168\t10101000 ¬©\t169\t10101001 ¬™\t170\t10101010 Zeichen\tDezimal\tBin√§r¬´\t171\t10101011 ¬¨\t172\t10101100 173\t10101101 ¬Æ\t174\t10101110 ¬Ø\t175\t10101111 ¬∞\t176\t10110000 ¬±\t177\t10110001 ¬≤\t178\t10110010 ¬≥\t179\t10110011 ¬¥\t180\t10110100 ¬µ\t181\t10110101 ¬∂\t182\t10110110 ¬∑\t183\t10110111 ¬∏\t184\t10111000 ¬π\t185\t10111001 ¬∫\t186\t10111010 ¬ª\t187\t10111011 ¬º\t188\t10111100 ¬Ω\t189\t10111101 ¬æ\t190\t10111110 ¬ø\t191\t10111111 √Ä\t192\t11000000 √Å\t193\t11000001 √Ç\t194\t11000010 √É\t195\t11000011 √Ñ\t196\t11000100 √Ö\t197\t11000101 √Ü\t198\t11000110 √á\t199\t11000111 √à\t200\t11001000 √â\t201\t11001001 √ä\t202\t11001010 √ã\t203\t11001011 √å\t204\t11001100 √ç\t205\t11001101 √é\t206\t11001110 √è\t207\t11001111 √ê\t208\t11010000 √ë\t209\t11010001 √í\t210\t11010010 √ì\t211\t11010011 √î\t212\t11010100 √ï\t213\t11010101 √ñ\t214\t11010110 √ó\t215\t11010111 √ò\t216\t11011000 √ô\t217\t11011001 √ö\t218\t11011010 √õ\t219\t11011011 √ú\t220\t11011100 √ù\t221\t11011101 √û\t222\t11011110 √ü\t223\t11011111 √†\t224\t11100000 √°\t225\t11100001 √¢\t226\t11100010 √£\t227\t11100011 √§\t228\t11100100 √•\t229\t11100101 √¶\t230\t11100110 √ß\t231\t11100111 √®\t232\t11101000 √©\t233\t11101001 √™\t234\t11101010 √´\t235\t11101011 √¨\t236\t11101100 √≠\t237\t11101101 √Æ\t238\t11101110 √Ø\t239\t11101111 √∞\t240\t11110000 √±\t241\t11110001 √≤\t242\t11110010 √≥\t243\t11110011 √¥\t244\t11110100 √µ\t245\t11110101 √∂\t246\t11110110 √∑\t247\t11110111 √∏\t248\t11111000 √π\t249\t11111001 √∫\t250\t11111010 √ª\t251\t11111011 √º\t252\t11111100 √Ω\t253\t11111101 √æ\t254\t11111110 √ø\t255\t11111111 Python‚Äã Auch in Python werden im Hintergrund Zahlen f√ºr Buchstaben und Bin√§rcodes f√ºr Dezimalzahlen verwendet. In Python l√§sst sich die sog. Ordnungszahl eines Buchstabens mit der Funktion ord einfach in Erfahrung bringen. Definition ord(&lt;Buchstabe&gt;)‚Äã Die sogenannte Ordnungszahl f√ºr einen (einzelnen!) Buchstaben kann mit dem Befehl ord bestimmt werden. ord_A = ord('A') ord_a = ord('a') print('Ordnungszahl A:', ord_A) print('Ordnungszahl a:', ord_a) Definition bin(&lt;Zahl&gt;)‚Äã Eine Dezimalzahl kann in eine Bin√§r-Zahl umgewandelt werden. binaer = bin(65) print(binaer) Hinweis Mit dem 0b zu Beginn zeigt Python an, dass es sich um eine Bin√§rzahl handelt. Analog zu der Subskript-Schreibweise 100000121000001_210000012‚Äã schreibt Python 0b1000001. Definition int(&lt;Bin√§rzahl&gt;), int(&lt;Bin√§rZahl&gt;, 2)‚Äã Der Befehl int (Abk√ºrzung f√ºr Integer, also Ganze Zahl) kann eine Bin√§rzahl in eine Dezimalzahl √ºbersetzen. Dabei gibt es mehrere M√∂glichkeiten: zahl = int(0b1001) # das 0b zeigt Python, dass es sich um eine bin√§re Zahl handelt print('1001 bin√§r = ', zahl) # Achtung! folgende Umwandlung klappt nicht, da jetzt ein Text √ºbergeben wird: # zahl = int('0b1001') # oder man teilt Python explizit mit, dass es sich um die Basis 2 handelt zahl2 = int('1011', 2) print('1011 bin√§r = ', zahl2) Hinweis Der zweite Parameter gibt die Basis des Zahlensystems an, hier also f√ºr Bin√§r 2. Definition chr(&lt;Zahl&gt;)‚Äã Gibt den zu einer Ordnungszahl geh√∂renden Buchstaben zur√ºck. buchstabe = chr(77) print(buchstabe) Name-&gt;Bin √Ñndern Sie das Programm unten so ab, dass Ihr Name ausgegeben wird. print(bin(ord('R'))) print(bin(ord('e'))) print(bin(ord('t'))) print(bin(ord('o'))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, bin und ord ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin-&gt;Name √Ñndern Sie das Programm unten so ab, dass Ihr Name aus dem Bin√§ren wieder in Text umgewandelt wird. print(chr(int('1010010', 2))) print(chr(int('1100101', 2))) print(chr(int('1110100', 2))) print(chr(int('1101111', 2))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, chr und int ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin√§rer Codierer‚Äã Aufgabe Schreiben Sie einen bin√§ren Codierer, welcher einen Text ins bin√§re √ºbersetzt. Im vorgegebenen Code sehen Sie, wie √ºber jeden Buchstaben eines Wortes iteriert werden kann. for buchstabe in 'Hallo': print(buchstabe) Aufh√ºbschen: Das 0b kann weggeschnitten werden, indem nur die Buchstaben nach dem zweiten Buchstaben verwendet werden: binaer = bin(11) # = 0b1011 binaer = binaer[2:] # alles (:) nach dem zweiten Buchstaben wird verwendet print(binaer) Jeder Buchstabe soll genau 1 Byte, also 8 Zeichen, umfassen. Dies erreicht man, wenn man mit Nullen (engl. Zeros) auff√ºllt: binaer = '1011' binaer = binaer.zfill(8) print(binaer) Statt immer eine neue Zeile zu verwenden, kann der print-Befehl auch angewiesen werden, am Ende ein Leerschlag einzuf√ºgen: for buchstabe in 'Hallo': print(buchstabe, end=' ') SSR","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/URLs","content":"Links Ein Link oder URL (engl. uniform resource locator) ist eine globale, weltweit eindeutige Adresse f√ºr eine Datei. Die URL definiert, wie mit dem anderen Computer kommuniziert wird, wo dieser Computer zu finden ist, und welche Datei auf dem Computer gemeint ist. Die URL setzt sich aus vier Teilen zusammen: https:// gbsl.ch /gym/aktuelles/news/ ?language=de&amp;filter=gym ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Protokoll Server Dateipfad Suchanfrage Das Protokoll ist die √úbertragungsart der Datei, normalerweise https://, was bedeutet, dass die √úbertragung verschl√ºsselt ist. Achtung! Wenn das unverschl√ºsselte Protokoll http:// verwendet wird, k√∂nnen die √ºbertragenen Informationen von anderen Personen im gleichen Netzwerk mitgelesen werden. Dadurch k√∂nnen Passw√∂rter oder Kreditkarteninformationen leicht abgegriffen werden! Gerade bei Zahlungen muss unbedingt darauf geachtet werden, dass das https:// Protokoll verwendet wird. Der Name des Servers oder Dom√§nenname ist ein weltweit eindeutiger Name f√ºr den Computer, auf welchem die Datei gespeichert ist. Der Dateipfad ist eine eindeutige Bezeichnung einer Datei pro Computer. Die Suchanfrage enth√§lt Benutzereingaben, die auf interaktiven Webseiten erfasst werden. Aufgabe Wie lauten die vier Teile des folgenden URL? https://www.google.ch/search?q=Quellenangabe SSR Verf√ºgbarkeit von Links‚Äã Oft sind Links nicht lange g√ºltig. Wenn beispielsweise eine Website restrukturiert wird, stimmen die Links oft nicht mehr. Deshalb ist es in schriftlichen Arbeiten bei der Quellenangabe wichtig, dass das Datum des Zugriffs angegeben wird. So kann nachvollzogen werden, wann die verlinkte Website verf√ºgbar war. Aufgabe Die folgenden Quellenangaben stammen aus einem PDF zum korrekten Zitieren und Bibliographieren. Die Links funktionieren aber nicht mehr. Versuchen Sie, den richtigen Link zu finden und die Frage zu beantworten. Goethe-Universit√§t Frankfurt a. M.: Neurolinguistik (ge√§ndert am 6. November 2007) http://www.uni-frankfurt.de/fb/fb10/KogLi/Lehrstuehle/ehem__Lehrstuhl_Leuninger/Neurolinguistik/index.html (abgerufen am 03.03.2018). Wer ist heute die vorstehende Professor:in? SSR Baader, S.: Geometrie ‚Äì Vorlesungsscript. Mitschrift von Alex Aeberli und Raoul Bourquin, Wintersemester 07. [PDF], Skript zur Vorlesung Geometrie an der ETHZ im Wintersemester 2007, (2007) https://www.mitschriften.ethz.ch/main.php?page=3&amp;scrid=1&amp;pid=29&amp;eid=1 (abgerufen am 31.01.2018). Finden Sie das Dokument und halten Sie den Link fest. SSR ParlCH: ¬´Erkl√§r mir das Parlament¬ª. 18.02.2016 https://www.youtube.com/watchv=vtfEG0txhOU (abgerufen am 31.01.2018). Finden Sie das Video und halten Si den Link fest. SSR Web Archiv - Einmal im Internet, immer im Internet‚Äã Websites die einmal online gestellt wurden, sind oft auch Jahre nachdem sie abgeschaltet wurden, noch zug√§nglich. Ein Tool, welches dies erm√∂glicht, ist bspw. das Web Archiv Wayback Machine. Diese Website l√§dt regelm√§ssig die √ºber Suchmaschinen verf√ºgbaren Websiten herunter und archiviert diese. So k√∂nnen teilweise auch alte, heute nicht mehr verf√ºgbare Websiten ge√∂ffnet werden. Achtung Da die Websiten archiviert sind, dauert es sehr lange, bis eine Website geladen ist. Die Versionen der Seite srf.ch Aufgabe Seit wann ist unter srf.ch die heutige Website vom Schweizer Radio und Fernsehen zu finden? Wem hat die Webseite vor diesem Zeitpunkt geh√∂rt? Wie erkl√§ren Sie sich die unterschiedlichen Wechsel? SSR","keywords":""},{"title":"Algorithmus","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Algorithmus","content":"Algorithmus Definition‚Äã ¬´Ein Algorithmus beschreibt die Methode, mit der eine Aufgabe gel√∂st wird. Ein Algorithmus besteht aus einer Folge von Schritten, deren korrekte Abarbeitung die gestellte Aufgabe l√∂st. Die Abarbeitung oder den Vorgang selbst bezeichnet man als Proze√ü.¬ª Les Goldschlager/Andrew Lister: Informatik, 1984 Die folgende Tabelle zeigt ein paar Beispiele von Prozessen mit zugeh√∂rigem Algorithmus: Prozess\tAlgorithmus\tTypischer SchrittKranich falten\tFaltanleitung\tPapier entlang einer Linie falten Zimtsterne backen\tRezept\tEier schaumig schlagen Musikst√ºck spielen\tNotenblatt\tEin c' spielen Spezielle Sprachen‚Äã Algorithmen werden oft in einer Fachsprache oder in einer symbolischen Sprache verfasst. Damit lassen sich die einzelnen Schritte eines Algorithmus oft klarer und k√ºrzer ausdr√ºcken als in der Alltagssprache. Beispiele f√ºr solche Sprachen sind: Die Notenschrift ist eine symbolische Sprache, in welcher die zu spielende Musik kompakt festgehalten werden kann. Rezepte sind normalerweise in einer Fachsprache verfasst, welche Fachbegriffe wie ¬´Schnee¬ª, ¬´schlagen¬ª oder ¬´Glasieren¬ª und Mengenangaben wie ¬´TL¬ª oder ¬´Prise¬ª enth√§lt. Bauanleitungen, z.B. IKEA-Anleitungen zum Zusammenbau von M√∂beln sind in einer nonverbalen Zeichensprache verfasst. Schritt‚Äã Wie die einzelnen Schritte eines Algorithmus lauten, h√§ngt stark vom Gebiet ab, f√ºr welches der Algorithmus verwendet wird. Die Einzelschritte beim Spielen eines Musikst√ºcks unterscheiden sich stark von den Schritten beim Kochen. Eine wichtige Eigenschaft von Algorithmen ist die Ausf√ºhrbarkeit. Sie bedeutet, dass jeder einzelne Schritt eines Algorithmus klar definiert sein muss und ausgef√ºhrt werden kann. Da eine klare Definition in Alltagssprache oft umfangreich ist, kommt hier die Fachsprache oder die symbolische Sprache zum Zug. Struktur‚Äã Ein Algorithmus definiert, in welcher Reihenfolge die einzelnen Schritte nacheinander abgearbeitet werden. Die Beschreibung dieser Reihenfolge ist die Struktur des Algorithmus. W√§hrend die Einzelschritte je nach Anwendungsgebiet unterschiedlich sind, sind die Strukturen (beim Programmieren spricht man von Kontrollstrukturen) von Algorithmen universell. Folgende Strukturen k√∂nnen unterschieden werden: Sequenz üë£: eine Folge von Schritten/Anweisungen, die nacheinander abgearbeitet werden. Wiederholung üîÅ: Einer oder mehrere Schritte werden eine bestimmte Anzahl mal wiederholt. Bedingte Ausf√ºhrung ‚ëÇ: Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. Unterprogramm üè∑: Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, kann der Name angegeben werden. Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Endlichkeit‚Äã Die Endlichkeit ist eine weitere wichtige Eingenschaft von Algorithmen. Sie bedeutet, dass ein Algorithmus immer nach endlich vielen Einzelschritten beendet wird. Ausserdem darf ein Algorithmus nur endlich viel Platz beanspruchen (z.B. Speicherplatz im Computer). ‚≠êÔ∏è Al-Chwarizmi‚Äã Abu Dscha øfar Muhammad ibn Musa al-ChwƒÅrizmƒ´ war ein Mathematiker und Universalgelehrter. Er stammte zwar aus dem iranischen Choresmien, verbrachte jedoch den gr√∂√üten Teil seines Lebens in Bagdad und war dort im ¬´Haus der Weisheit¬ª, einer Art Akademie, t√§tig. Al-Chwarizmi gilt als einer der bedeutendsten Mathematiker, da er sich mit Algebra als elementarer Untersuchungsform besch√§ftigte.1 In der lateinischen √úbersetzung eines Werkes von Al-Chwarizmi wurde sein Name als ¬´algorismus¬ª geschrieben. Davon leitet sich der heutige Begriff ¬´Algorithmus¬ª ab.2 Abbildung von Al-Chwarizmi auf einer sowjetischen Briefmarke@ Quelle: Wikipedia: al-Chwarizmi ‚Ü© Quelle: Wiktionary: Algorithmus ‚Ü©","keywords":""},{"title":"Bauanleitung","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Bauanleitung","content":"Bauanleitung Eine Bauanleitung ist ein Algorithmus, welche das Zusammenbauen von Einzelteilen zu einem fertigen M√∂bel beschreibt und ist oft in einer Bildschrift verfasst. Schritt‚Äã Die Reihenfolge der einzelnen (Vorbereitungs-) Schritte sind durch eine Nummerierung gegeben. Wiederholung‚Äã Muss ein Schritt wiederholt ausgef√ºhrt werden, z.B. das Eindrehen von Schrauben an jedem Bein eines Banks, so wird dies nur einmal im Detail beschrieben. Bedingte Ausf√ºhrung‚Äã Fehlt ein St√ºck oder ist die Anleitung unklar, so soll der Kundendienst kontaktiert werden (oben rechts...). Ikea Bauanleitung@","keywords":""},{"title":"Faltanleitung","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Faltanleitung","content":"Faltanleitung Eine Faltanleitung ist ein Beispiel f√ºr einen Algorithmus. Das japanische Wort Origami bezeichnet die Kunst des Papierfaltens. Schritt‚Äã In einer Faltanleitung kommen nur wenige Arten von Schritten vor: Falten: Durch eine gestrichelte Linie wird angedeutet, wo gefaltet werden soll. Der Pfeil gibt an, in welche Richtung gefaltet wird. Falz machen: Durch Hin- und Zur√ºckfalten wird ein Falz erzeugt. Dies wird durch einen Pfeil angedeutet, der hin und zur√ºck zeigt. Drehen: Durch einen Pfeil zwischen zwei Abbildungen wird angezeigt, dass das Papier entsprechend umgedreht werden soll. Beispiele‚Äã Schachtel‚Äã Eine einfache Faltanleitung f√ºr eine Schachtel. Origami Box@ Kranich‚Äã Der Kranich ist das klassische Motiv im japanischen Origami. Origami Kranich@","keywords":""},{"title":"Flussdiagramm","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Flussdiagramm","content":"Flussdiagramm Ein Flussdiagramm (engl. flow chart) oder Programmablaufplan ist eine grafische Darstellungsform eines Algorithmus. Es besteht aus Elementen, welche einzelne Schritte des Algorithmus darstellen. Pfeile, welche die Elemente verbinden, geben die Reihenfolge an, in welcher die Schritte ausgef√ºhrt werden m√ºssen. Das Flussdiagramm unten links beschreibt, wie Spaghetti gekocht werden. Das Flussdiagramm unten rechts beschreibt, wie Spaghetti Napoletana gekocht werden. Dabei wird der Spaghetti-Algorithmus mit einem Aufruf (rot) wiederverwendet. Flussdiagramm@","keywords":""},{"title":"Notenblatt","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Notenblatt","content":"Notenblatt Ein Notenblatt ist ein Algorithmus, welches den Prozess ¬´Musikst√ºck spielen¬ª beschreibt. Notenbl√§tter sind in einer symbolischen Sprache, der Notenschrift, verfasst. Schritt‚Äã Ein einzelner Schritt in der Notenschrift ist eine Note oder eine Pause. Im folgenden beschreiben die ersten drei √ºbereinanderliegenden Noten ¬´Spiele einen Akkord bestehend aus einem kleinen d, einem eingestrichenen fis' und einem zweigestrichenen e'' von einem Achtel L√§nge¬ª. Erste Zeile eines Notenblatts Wiederholung‚Äã In der Notenschrift wird durch Wiederholungszeichen (rot) angezeigt, dass die dazwischenliegenden Takte wiederholt werden sollen: Wiederholungszeichen Eine andere Variante ist die Anweisung D.S. (Dal Segno, ¬´vom Zeichen¬ª). Gemeint ist, dass das St√ºck von einem bezeichneten Punkt an (meist mit dem Zeichen ‚ïë:) wiederholt wird. Bedingte Ausf√ºhrung‚Äã Einer oder mehrere Schritte werden manchmal nur unter bestimmten Bedingungen ausgef√ºhrt. Auf einem Notenblatt wird mit sogenannten Voltenklammern (rot) gekennzeichnet, dass ein Takt nur im ersten oder zweiten Durchgang gespielt werden soll. In der folgenden Zeile wird also der dritte Takt nur im ersten und der vierte Takt nur im zweiten Durchgang gespielt: Voltenklammern So t√∂nt der erste Durchgang: So t√∂nt der zweite Durchgang: Parameter‚Äã Durch die Noten alleine sind die L√§nge und die H√∂he nur relativ festgelegt. Erst durch die Tempoangabe ‚ô©=180 wird festgelegt, dass pro Minute 180 Viertelnoten gespielt werden sollen. Mit Violin- und Bassschl√ºssel wird festgelegt, auf welcher Notenlinie das g' bzw. das f liegt und somit in welcher H√∂he die Noten gespielt werden sollen. Tempoangabe und Notenschl√ºssel Tempoangabe und Notenschl√ºssel sind Parameter eines Notenblatts, deren √Ñnderung die Bedeutung aller Noten und somit das gespielte St√ºck √§ndert. Beispiel‚Äã Auf der Website musescore.com sind Notenbl√§tter f√ºr viele Musikst√ºcke verf√ºgbar und k√∂nnen dort auch gleich abgespielt werden. Hier sind Ausschnitte aus folgenden St√ºcken verwendet worden: Super Mario Bros: Main Theme Jingle Bells","keywords":""},{"title":"Suchmaschinen","type":0,"sectionRef":"#","url":"/26e/ICT-Grundlagen/Suchmaschine","content":"Suchmaschinen Suchmaschinen werden verwendet, um im World Wide Web nach Informationen zu suchen. Die bekannteste Suchmaschine ist Google mit einem Marktanteil von √ºber 90%. Einschr√§nkungen Suchmaschinen‚Ä¶ k√∂nnen nicht alles finden -&gt; Deep Web k√∂nnen beeinflusst werden -&gt; SEO: Search Engine Optimization beeinlussen die Suchergebnisse -&gt; Filterblase Funktionsweise‚Äã Eine Suchmaschine hat drei Hauptaufgaben: Erstellen eines Index Verarbeiten von Suchanfragen Bewerten und Filtern der Suchergebnisse Bevor eine Suchmaschine eine Abfrage beantworten kann, muss erst eine Datenbank mit entsprechenden Informationen zu Webseiten erstellt werden. Diese Aufgabe wird von automatischen Programmen, sogenannten Webcrawlern, √ºbernommen. Sie durchsuchen das World Wide Web st√§ndig nach neuen und ge√§nderten Seiten. Die Seiten werden analysiert und in einer riesigen Datenbank eingetragen. Dabei wird jeder Eintrag mit Stichworten versehen, welche sich aus der Analyse ergeben. Wenn eine Benutzer:in eine Suchanfrage an die Maschine schickt, wird die Anfrage erst sprachlich analysiert. Beispielsweise werden falsch geschrieben Worte korrigiert. Anschliessend wird in der Datenbank nach Eintr√§gen gesucht, deren Stichworte m√∂glichst gut mit der Anfrage √ºbereinstimmen. Schliesslich werden die Resultate bewertet und entsprechend geordnet. Achtung Suchergebnisse werden von einem automatischen Lernsystem (k√ºnstliche Intelligenz) beeinflusst. Zus√§tzlich erfassbare Informationen wie Person, Ort, Ger√§t oder der verwendete Browser geben der Suchmaschine Hinweise darauf, welche Informationen relevanter sind.","keywords":""},{"title":" Pygame Zero","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero","content":" Pygame Zero @ üîó Offizielle Dokumentation üîó Coding Games With Pygame Zero &amp; Python üîó Beispiele aus dem Wireframe Magazine","keywords":""},{"title":"Beispiele","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples","content":"Beispiele","keywords":""},{"title":"Struktogramme","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Struktogramme","content":"Struktogramme Struktogramme sind eine M√∂glichkeit, Programme und Algorithmen grafisch darzustellen. Diese Dartstellungsform wurde 1973 von Isaac Nassi und Ben Shneiderman vorgeschlagen und heisst deshalb auch Nassi-Shneiderman-Diagramm.1 Sequenz üë£‚Äã In einem Struktogramm wird jeder Befehl in einen rechteckigen Kasten geschrieben. Befehle m√ºssen nicht in einer Programmiersprache geschrieben werden, Parameter werden unterstrichen. from turtle import * forward(100) left(90) forward(50) 100 Schritte vorw√§rts 90¬∞ nach links 50 Schritte vorw√§rts Wiederholung üîÅ‚Äã Eine Wiederholung wird wie folgt dargestellt. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Bemerke Beim Struktogramm wird der wiederholte Teil durch die Einr√ºckung ersichtlich. Auch in Python werden wiederholte Sequenzen (Zeilen 4-5) visuell mit einem Tabulator einger√ºckt. Der Doppelpunkt am Zeilenende zeigt an, dass eine einger√ºckte Sequenz (beim Programmieren spricht man von einem Codeblock) folgt. Unterprogramm üè∑‚Äã Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, gen√ºgt es den Namen aufzuschreiben. from turtle import * def zick_zack(): left(60) forward(30) right(120) forward(30) left(60) forward(100) zick_zack() zick_zack() zick_zack: 60¬∞ nach links 30 Schritte vorw√§rts 120¬∞ nach rechts 30 Schritte vorw√§rts 60¬∞ nach links 100 Schritte vorw√§rts zick_zack zick_zack Bemerke Um ein Unterprogramm aufzurufen, wird beim Struktogramm der Kasten mit doppelten Seitenstrichen markiert, bei Python werden runde Klammern am Ende des Namens angegeben. Den Namen f√ºr Unterprogramm kann beliebig gew√§hlt werden, sofern er nicht mit einer Zahl beginnt und keine Sonderzeichen enth√§lt. Leerschl√§ge und Bindestriche sind nicht erlaubt - stattdessen werden Unterstriche _ verwendet: Statt zick zack wird der Name zick_zack verwendet. Parameter ‚äï ‚äñ‚Äã Ein Unterprogramm kann mit Parametern aufgerufen werden. Parameter werden jeweils unterstrichen, so dass klar ist, welche Werte sich √§ndern k√∂nnen. Variablen‚Äã Bei Programmen wird zwischen Parametern und Variablen unterschieden. Genau wie Paramter k√∂nnen diese das Ergebnis eines Algorithmus √§ndern. Sie werden in einem Struktogramm speziell als markiert, damit klar ist, dass eigentlich der in der Variable gespeicherte Wert gemeint ist. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. Quelle: rothe.io ‚Ü©","keywords":""},{"title":"RoboZZle","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Algorithmen/Uebungen/robozzle","content":"RoboZZle Aufgabe 1 Puzzle 1 Aufgabe 2 Puzzle 2 Aufgabe 3 Puzzle 3 Aufgabe 4 Puzzle 4 Aufgabe 5 Puzzle 5 Aufgabe 6. Puzzle 6 Aufgabe 7. Puzzle 7 Aufgabe 8. Puzzle 8 Aufgabe 9. Puzzle 9 ‚≠êÔ∏è Aufgabe 10. Puzzle 10","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Lernziele","content":"Lernziele Pr√ºfungsablauf‚Äã Die Pr√ºfung besteht aus zwei Teilen: schriftlicher Teil auf Papier - keine Hilfsmittel erlaubt. praktischer Teil auf dem Laptop - open book, jegliche Hilfsmittel inkl. Google sind erlaubt, wobei die direkte Kommunikation mit anderen Personen oder der Austausch von Informationen untereinander nicht erlaubt ist. Relevant f√ºr die Pr√ºfung sind die Kapitel Algorithmen: Theorie + Beispiele inkl. RoboZZle Turtlegrafik Abschnitte 1 bis und mit 7, inkl. √úbungen Gr√ºfnisch Lernziele Algorithmen Sie k√∂nnen erkl√§ren, was ein Algorithmus ist. Sie erkennen und beschreiben die Strukturen eines Algorithmus (Einzelschritte, Wiederholungen, bedingte Ausf√ºhrung, Parameter) Sie √ºbersetzen einen Algorithmus zwischen zwei Darstellungsformen (Alltagssprache, Struktogramm, Python-Programm) Lernziele Programme Sie k√∂nnen ein einfaches Python-Programm lesen und verstehen. Sie k√∂nnen die Ausgabe eines einfachen Turle-Programms zeichnen. Sie k√∂nnen ein einfaches Python-Programm √§ndern oder erweitern. Sie k√∂nnen typische Fehler in Python-Programmen erkennen und korrigieren. Sie k√∂nnen in einem Programm Befehlsnamen, Variablen, Parameter und Codebl√∂cke identifizieren. Lernziele Programmstuktur Wie wissen, dass ein Python-Programm grunds√§tzlich sequentiell (d.h. zeilenweise) ausgef√ºhrt wird. Sie k√∂nnen Befehle aus anderen Bibliotheken importieren (import). Sie verwenden for-Schleifen, um Befehlssequenzen zu wiederholen. Sie k√∂nnen eigene Unterprogramme / Befehle definieren (def). Sie k√∂nnen Unterprogramme mit einem oder mehreren Parametern definieren und aufrufen. Sie wissen, was Kommentare (#) sind und k√∂nnen Programme kommentieren. Sie wissen was eine Variable ist und k√∂nnen diese verwenden. Sie k√∂nnen Struktogramme lesen und verstehen Sie k√∂nnen Struktogramme in ein Programm √ºbersetzen, bzw. ein Programm in ein Struktogramm √ºberf√ºhren Lernziele Turtlegrafik Sie k√∂nnen die Turtle mit forward, backward, left, right und goto bewegen. Sie k√∂nnen mit pencolor die Farbe √§ndern. Sie k√∂nnen mit fillcolor, begin_fill und end_fill ausgef√ºllte Figuren zeichnen. Sie k√∂nnen mit shape und speed das Aussehen und die Geschwindigkeit der Turtle √§ndern. Sie k√∂nnen mit pensize, penup und pendown, dot, hideturtle den Zeichenstift kontrollieren. Lernziele Benutzerinteraktion Sie k√∂nnen die Programmbenutzer:in mit input nach einer Eingabe fragen. Sie wissen, dass Python zwischen Text (str), ganzen Zahlen (int) und Dezimalzahlen (float) unterscheidet und k√∂nnen Text in Zahlen/Dezimalzahlen umwandeln. Sie k√∂nnen Platzhalter in formatierten Texten f'' einf√ºgen. Sie k√∂nnen Texte klein- oder grossschreiben (lower(), upper()) sowie Wortteile ersetzen (replace).","keywords":""},{"title":"Test 26e","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Probe/ProbeE","content":"Test 26e Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":"Nachholprobe 26e","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Probe/ProbeE-Nachholer","content":"Nachholprobe 26e Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":"Zeichenprogramm","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples/paint","content":"Zeichenprogramm Beschreibung‚Äã Ein Zeichenprogramm Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Paint&quot; WIDTH = 800 HEIGHT = 800 farbwahl = Actor(&quot;button_red&quot;) farbwahl.farbe = 255, 0, 0 farbwahl.top = 10 farbwahl.left = 10 loeschen = Actor(&quot;button_grey&quot;) loeschen.top = 70 loeschen.left = 10 def on_mouse_down(pos): if farbwahl.collidepoint(pos): if farbwahl.image == &quot;button_red&quot;: farbwahl.image = &quot;button_blue&quot; farbwahl.farbe = 0, 0, 255 elif farbwahl.image == &quot;button_blue&quot;: farbwahl.image = &quot;button_green&quot; farbwahl.farbe = 0, 255, 0 elif farbwahl.image == &quot;button_green&quot;: farbwahl.image = &quot;button_yellow&quot; farbwahl.farbe = 255, 255, 0 elif farbwahl.image == &quot;button_yellow&quot;: farbwahl.image = &quot;button_red&quot; farbwahl.farbe = 255, 0, 0 if loeschen.collidepoint(pos): screen.clear() def on_mouse_move(pos, buttons): if buttons: screen.draw.filled_circle(pos, 2, farbwahl.farbe) def draw(): farbwahl.draw() loeschen.draw() pgzrun.go() ","keywords":""},{"title":"Gr√ºfnisch","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/gruefnisch","content":"Gr√ºfnisch Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden alle Vokale wie folgt ersetzt:1 a anafa e enefe i inifi o onofo u unufu √§ √§n√§f√§ √∂ √∂n√∂f√∂ √º √ºn√ºf√º Beispiele‚Äã Hallo Hanafallonofo Gymnasium Biel Seeland Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Ziel: Python spricht Gr√ºfnisch Das Ziel ist, einen vorgegebenen Text auf Gr√ºfnisch zu √ºbersetzen. In Python lassen sich Texte ver√§ndern, zusammenf√ºgen und trennen. Texte verkn√ºpfen‚Äã Texte k√∂nnen verkn√ºpft werden - entweder mit + oder indem eine spezielle Syntax f√ºr die Verkn√ºpfung von Textteilen verwendet wird. Definition 'hallo ' + 'bello'‚Äã Mit + lassen sich zwei gleichwertige Datentypen (daher, entweder zwei Zahlen, oder zwei Texte, nicht jedoch Texte und Zahlen, verkn√ºpfen) print('Hallo ' + 'Biber') Definition f'', f'Hallo, Nr. {7}'‚Äã Ein formatierter Text wird in Python mit f' (statt nur ') gestartet. Anschliessend k√∂nnen geschweifte Klammern verwendet werden, welche durch deren Inhalt ersetzt werden. Hier Spielt es keine Rolle, ob Texte oder Zahlen verwendet werden. name = 'Maria' print(f'Hallo {name}, ich bin {15} j√§hrig.') Gross- und Kleinschreibung‚Äã Definition .upper(): Grossbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' gross = text.upper() print(gross) Definition .lower(): Kleinbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' klein = text.lower() print(klein) Text ersetzen‚Äã Definition .replace(alt, neu)‚Äã Mit replace(alt, neu) werden alle alten Textst√ºcke durch die neuen ersetzt. Der Text wird dabei nicht direkt ver√§ndert, sondern nur der R√ºckgabewert (=das Resultat) ist ver√§ndert. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' # Alle &quot;.&quot; durch &quot;!!!&quot; ersetzen text = text.replace('.', '!!!') print(text) Gross- &amp; Kleinschreibung Python nimmts genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle, nicht jedoch der Ort des alten Wortes! Im folgenden Beispiel wird etwa nur das kleingeschriebene ich ersetzt, jedoch auch wenn es inmitten eines Textes auftritt. Das grossgeschrieben Ich zu Beginn des Satzes wird ignoriert... text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'ICH') print(text) L√∂sungen: (1) auch den Gross- und kleingeschriebenes ersetzen, oder (2) zuerst alles klein schreiben und dann ersetzen. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen text = text.replace('Ich', 'XXX') # Alle 'Ich' durch XXX ersetzen print(text) text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.lower() # text kleinschreiben text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen print(text) Vervielfachen‚Äã Um Textteile zu vervielfachen, k√∂nnen diese mit einem Faktor 'multipliziert' werden. print('‚ù§Ô∏è ' * 5) oder auch komplizierter: for i in range(5): print('‚ù§Ô∏è ' * (i + 1)) Beispiel‚Äã Gr√ºfnisch Wie lautet der Satz hallo, es ist winter auf Gr√ºnfisch? (Von Hand, ohne Programm √ºbersetzen) Deutsch ‚Üí Gr√ºfnisch Erstellen Sie ein Programm, welches einen Satz auf Gr√ºfnisch √ºbersetzt und ausgibt. Funktioniert Ihr Text auch, wenn Sie den Satz mit Grossbuchstaben, bspw. Informatikunterricht √ºbersetzen? Passen Sie ihn entsprechen an. Um die Ausgabe etwas spannender zu machen, k√∂nnen wir die Ausgabe auch von Beavis ausgeben lassen. √Ñndern Sie Ihr Programm so, dass Beavis Gr√ºfnisch spricht... from cowsay import beavis beavis('Hanafallonofo Pythonofon') gruefnisch.py text = 'hallo, es ist winter!' print('Original', text) Weitere Figuren Anstelle von cow() k√∂nnen auch andere Figuren verwendet werden. Diese muss dann aber auch aus der Bibliothek cowsay importiert werden. beavis cheese daemon cow dragon ghostbusters kitty meow milk stegosaurus stimpy turkey turtle tux Zusatz ‚≠êÔ∏è: Passen Sie Ihr Programm so an, dass auch die Zusatzregel bei Gr√ºfnisch umgesetzt wird. Wie k√∂nnte dies gelingen? Ausnahme beim Ersetzen: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). Beispiel: &quot;Bauen&quot; hat den Diphtong au und wird also gr√ºfnisch &quot;Banafauenefen&quot; ausgesprochen. SSR SSR SSR Gr√ºfnisch ‚Üí Deutsch K√∂nnen Sie auch ein Programm schreiben, welches vom Gr√ºfnisch ins Berndeutsch √ºbersetzt? von_gr√ºfnisch.py text = 'Hanafallonofo Pythonofon' SSR Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Aktor","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/actor","content":"Aktor Grundlegendes‚Äã nemo = Actor(bild) erstellt einen neuen Aktor. bild ist der Name einer Bilddatei. nemo.draw() zeichnet den Aktor nemo in das Fenster. Position‚Äã Positionierung in Pygame Zero nemo.bottom ist die y-Koordinate des unteren Rands von nemo. nemo.left ist die x-Koordinate des linken Rands von nemo. nemo.right ist die x-Koordinate des rechten Rands von nemo. nemo.top ist die y-Koordinate des oberen Rands von nemo. nemo.x ist die x-Koordinate des Ankers von nemo. nemo.y ist die y-Koordinate des Ankers von nemo. nemo.angle ist die Rotation von nemo in Grad im Gegenuhrzeigersinn. Kollision‚Äã nemo.collidepoint(x, y) √ºberpr√ºft, ob nemo mit dem Punkt mit den Koordinaten x, y kollidiert. nemo.collidepoint(pos) √ºberpr√ºft, ob nemo mit dem Punkt mit den Punkt pos kollidiert. So kann beispielsweise √ºberpr√ºft werden, ob ein Aktor mit der Maus angeklickt wird: def on_mouse_down(pos): if nemo.collidepoint(pos): print(&quot;Nemo mit Maus ber√ºhrt.&quot;) nemo.colliderect(dory) √ºberpr√ºft, ob nemo mit dory kollidiert. nemo.collidelist(liste) √ºberpr√ºft, ob nemo mit einem Aktor in der Liste liste kollidiert. In dem Fall wird der Index des kollidierenden Aktors in der Liste zur√ºckgeliefert. Wenn kein Aktor der Liste mit nemo kollidiert, wird -1 zur√ºckgeliefert. Messung‚Äã nemo.distance_to(dory) misst die Distanz zwischen nemo und dory. nemo.angle_to(dory) misst den Winkel von nemo aus in Richtung dory.","keywords":""},{"title":"Push to Hole","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples/push-to-hole","content":"Push to Hole Beschreibung‚Äã Ein Ball muss mit der Maus in ein Loch geschoben werden. Das Loch √§ndert alle paar Sekunden seine Position. Grafiken‚Äã Programm‚Äã import pgzrun import random WIDTH = 800 HEIGHT = 800 green = 60, 180, 60 ball = Actor(&quot;ball_blau&quot;) ball.radius = ball.width / 2 ball.score = 0 loch = Actor(&quot;hole&quot;) def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def setze_ball(): ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def setze_loch(): loch.x = random.randint(0, WIDTH) loch.y = random.randint(0, HEIGHT) dauer = random.randint(3, 7) kollision_rand(loch) clock.schedule_unique(setze_loch, dauer) def on_mouse_move(pos): d = ball.distance_to(pos) if d &lt; ball.radius: stoss_laenge = ball.radius - d ball.x = ball.x + (ball.x - pos[0]) * stoss_laenge ball.y = ball.y + (ball.y - pos[1]) * stoss_laenge kollision_rand(ball) def update(): if ball.distance_to(loch) &lt; 10: ball.score = ball.score + 1 setze_ball() setze_loch() def draw(): screen.fill(green) loch.draw() ball.draw() screen.draw.text(&quot;Score: &quot; + str(ball.score), (10, 10), fontsize=60) setze_ball() setze_loch() pgzrun.go() ","keywords":""},{"title":"Aufrufe planen","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/clock","content":"Aufrufe planen Um eine Aktion erst nach einer bestimmten Zeit auszul√∂sen, k√∂nnen mit dem clock-Objekt zuk√ºnftige Aufrufe von Unterprogrammen geplant werden. clock.schedule_unique(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Alle anderen geplanten Aufrufe des gleichen Unterprogramms werden abgebrochen. clock.schedule(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.schedule_interval(u, s) plant den regelm√§ssigen Aufruf des Unterprogramms u alle s Sekunden. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.unschedule(u) bricht alle geplanten Aufrufe des Unterprogramms u ab. Beispiel‚Äã Im folgenden Beispiel √§ndert das Aussehen des Fisches 1.5 Sekunden, nachdem die [Space]-Taste gedr√ºckt wurde. F√ºr die gew√ºnschte Aktion wird das Unterprogramm aendere_nemo definiert. Der Name des Unterprogramms kann frei gew√§hlt werden. Mit der Anweisung clock.schedule() wird der Aufruf geplant. Dabei werden in Klammern das aufzurufende Unterprogramm und die Verz√∂gerung in Sekunden angegeben: import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def aendere_nemo(): nemo.image = &quot;fisch_rot_links&quot; def update(): if keyboard.space: clock.schedule(aendere_nemo, 1.5) def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"How-To","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/howto","content":"How-To","keywords":""},{"title":"Asteroids","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples/asteroids","content":"Asteroids Grafiken‚Äã Quellen: Asteroid: OhjiroChan, OpenGameArt, Lizenz: CC0 Spaceship: Rawdanitsu, OpenGameArt, Lizenz: CC0 Laser and Thrust: Rawdanitsu, OpenGameArt, Lizenz: CC0 Programm‚Äã import math import pgzrun import random TITLE = &quot;Asteroids&quot; WIDTH = 1600 HEIGHT = 1200 ACCELERATION = 0.2 ROTATION = 3 SHOT_SPEED = 5 SHOT_COOLDOWN = 0.2 SHOT_DAMAGE = 10 SHOT_MAX_AGE = 3 background = Actor(&quot;weltraum&quot;) ship = Actor(&quot;raumschiff&quot;) thrust = Actor(&quot;raumschiff2&quot;) thrust.on = False asteroids = [] shots = [] def add_asteroid(parent=None): if parent: category = parent.category - 1 else: category = 3 asteroid = Actor(&quot;asteroid-&quot; + str(category)) if parent: asteroid.x = parent.x asteroid.y = parent.y else: asteroid.x = random.randint(0, WIDTH) asteroid.y = random.randint(0, HEIGHT) asteroid.vx = 0 asteroid.vy = 0 asteroid.category = category asteroid.stability = 30 * category acc = random.randint(1, 2) dir = random.randint(0, 360) accelerate(asteroid, acc, dir) asteroids.append(asteroid) def enable_shooting(): ship.can_shoot = True def add_shot(): shot = Actor(&quot;laser&quot;) shot.x = ship.x shot.y = ship.y shot.vx = 0 shot.vy = 0 shot.age = 0 shot.angle = ship.angle accelerate(shot, SHOT_SPEED, shot.angle) ship.can_shoot = False clock.schedule_unique(enable_shooting, SHOT_COOLDOWN) shots.append(shot) def accelerate(actor, acc, dir): a = math.radians(dir) actor.vx = actor.vx + math.cos(a) * acc actor.vy = actor.vy - math.sin(a) * acc def move(actor): actor.x = actor.x + actor.vx actor.y = actor.y + actor.vy if actor.x &gt; WIDTH: actor.x = 0 if actor.x &lt; 0: actor.x = WIDTH if actor.y &gt; HEIGHT: actor.y = 0 if actor.y &lt; 0: actor.y = HEIGHT def reset_game(): ship.x = WIDTH / 2 ship.y = HEIGHT / 2 ship.vx = 0 ship.vy = 0 ship.angle = 0 ship.speed = 0 ship.alive = True ship.can_shoot = True asteroids.clear() for i in range(1, 3): add_asteroid() def update_asteroid(asteroid): move(asteroid) i = asteroid.collidelist(shots) if i != -1: del shots[i] asteroid.stability = asteroid.stability - SHOT_DAMAGE if asteroid.stability &lt;= 0: asteroids.remove(asteroid) if asteroid.category &gt; 1: add_asteroid(asteroid) add_asteroid(asteroid) def update_shot(shot, dt): move(shot) shot.age = shot.age + dt if shot.age &gt; SHOT_MAX_AGE: shots.remove(shot) def update(dt): thrust.on = keyboard.up if keyboard.up: accelerate(ship, ACCELERATION, ship.angle) if keyboard.left: ship.angle = ship.angle + ROTATION if keyboard.right: ship.angle = ship.angle - ROTATION if keyboard.space and ship.can_shoot: add_shot() if keyboard.space and not ship.alive: reset_game() move(ship) if ship.collidelist(asteroids) != -1: ship.alive = False ship.can_shoot = False for asteroid in asteroids: update_asteroid(asteroid) for shot in shots: update_shot(shot, dt) def draw(): background.draw() for asteroid in asteroids: asteroid.draw() for shot in shots: shot.draw() if ship.alive: if thrust.on: thrust.x = ship.x thrust.y = ship.y thrust.angle = ship.angle thrust.draw() ship.draw() else: screen.draw.text(&quot;GAME OVER&quot;, center=(WIDTH / 2, HEIGHT / 2), fontsize=100) screen.draw.text( &quot;Press SPACE to start&quot;, center=(WIDTH / 2, HEIGHT / 2 + 60), fontsize=30 ) reset_game() pgzrun.go() ","keywords":""},{"title":"Animation","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/animation","content":"Animation def draw(): wird von Pygame Zero aufgerufen. Hier wird gezeichnet. def update(): wird von Pygame Zero aufgerufen. Hier wird der n√§chste Animationsschritt berechnet. Start von Pygame Zero‚Äã Im Pygame Zero-Modus des Mu Editors wird Pygame Zero automatisch gestartet, sobald das eigene Skript fertig abgearbeitet worden ist. In einem anderen Editor muss Pygame Zero durch einen Befehl am Ende des eigenen Skripts gestartet werden. Dazu muss das Modul pgzrun importiert werden: import pgzrun # Eigene Befehle ... pgzrun.go() Funktionsweise von Pygame Zero ohne Animation‚Äã Das Hauptprogramm von Pygame Zero wird erst gestartet, nachdem das ganze Skript abgearbeitet worden ist. Daf√ºr sorgt der spezielle Modus des Mu-Editors. Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen WIDTH und HEIGHT verwendet. Anschliessend ruft Pygame Zero das Unterprogramm draw() auf, welches im eignen Skript definiert worden ist. import pgzrun WEISS = (255, 255, 255) SCHWARZ = (0, 0, 0) def draw(): screen.fill(WEISS) screen.draw.text(&quot;Hallo Welt&quot;, top=10, left=10, color=SCHWARZ) pgzrun.go() Funktionsweise von Pygame Zero mit Animation‚Äã Falls im eigenen Skript ein Unterprogramm mit dem Namem update definiert wird, geht Pygame Zero davon aus, dass es sich um eine Animation handelt. Die Funktionsweise von Pygame Zero √§ndert sich entsprechend: Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen TITLE, WIDTH und HEIGHT verwendet. Anschliessend startet Pygame Zero den sogenannten Game Loop. Dabei wird erst das Unterprogramm update aufgerufen und anschliessend draw. Dies wird so lange wiederholt, bis das Programm abgebrochen wird. import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def update(): nemo.x = nemo.x + 1 def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Parallax-Scrolling","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/howto/parallax","content":"Parallax-Scrolling Bilder‚Äã Bildquelle: Craftpix.net, OpenGameArt, Lizenz: OGA Code‚Äã import pgzrun WIDTH = 800 HEIGHT = 450 ebenen = [] for i in range(7): name = &quot;hintergrund&quot; + str(i) ebene = Actor(name) ebene.geschwindigkeit = 0.2 * i ebenen.append(ebene) def update(): for ebene in ebenen: ebene.x = ebene.x - ebene.geschwindigkeit if ebene.right &lt; 0: ebene.x = ebene.x + ebene.width def draw(): screen.clear() for ebene in ebenen: ebene.draw() ebene.x = ebene.x + ebene.width ebene.draw() ebene.x = ebene.x - ebene.width pgzrun.go() ","keywords":""},{"title":"Jump & Run","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/howto/jump","content":"Jump &amp; Run import pgzrun WIDTH = 800 HEIGHT = 600 alien = Actor(&quot;alien&quot;) alien.x = WIDTH / 2 alien.vy = 0 schwerkraft = 0.1 boden = 550 sprung = -5 hintergrundfarbe = 0, 0, 0 def update(): alien.vy = alien.vy + schwerkraft alien.y = alien.y + alien.vy if alien.bottom &gt; boden: alien.vy = 0 alien.bottom = boden if keyboard.space and alien.vy == 0: alien.vy = sprung def draw(): screen.fill(hintergrundfarbe) alien.draw() pgzrun.go() ","keywords":""},{"title":"Pong","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples/pong","content":"Pong Beschreibung‚Äã Klassisches Pong-Spiel Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Pong&quot; WIDTH = 1200 HEIGHT = 800 PLAYER_SPEED = 5 spieler_links = Actor(&quot;schlaeger_blau&quot;) spieler_links.score = 0 spieler_links.y = HEIGHT / 2 spieler_links.left = 5 spieler_rechts = Actor(&quot;schlaeger_rot&quot;) spieler_rechts.score = 0 spieler_rechts.y = HEIGHT / 2 spieler_rechts.right = WIDTH - 6 ball = Actor(&quot;ball_blau_klein&quot;) ball.x = WIDTH / 2 ball.y = HEIGHT / 2 ball.vx = 5 ball.vy = 3 def bewege_spieler(spieler, up_key, down_key): if up_key: spieler.y = spieler.y - PLAYER_SPEED if down_key: spieler.y = spieler.y + PLAYER_SPEED if spieler.bottom &gt;= HEIGHT: spieler.bottom = HEIGHT - 1 if spieler.top &lt; 0: spieler.top = 0 def bewege_ball(): # Ball bewegen ball.x = ball.x + ball.vx ball.y = ball.y + ball.vy if ball.top &lt; 0: ball.top = 0 ball.vy = -ball.vy if ball.bottom &gt;= HEIGHT - 1: ball.bottom = HEIGHT - 1 ball.vy = -ball.vy # Abprallen am rechten Schl√§ger if ball.right &gt; spieler_rechts.left and ball.bottom &gt; spieler_rechts.top and ball.top &lt; spieler_rechts.bottom: ball.right = spieler_rechts.left ball.vx = -ball.vx # Abprallen am linken Schl√§ger if ball.left &lt; spieler_links.right and ball.bottom &gt; spieler_links.top and ball.top &lt; spieler_links.bottom: ball.left = spieler_links.right ball.vx = -ball.vx # Punkt f√ºr linken Spieler if ball.right &gt;= WIDTH: spieler_links.score = spieler_links.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 # Punkt f√ºr rechten Spieler if ball.left &lt; 0: spieler_rechts.score = spieler_rechts.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def update(): # linken Schl√§ger bewegen bewege_spieler(spieler_links, keyboard.q, keyboard.a) # rechten Schl√§ger bewegen bewege_spieler(spieler_rechts, keyboard.o, keyboard.l) bewege_ball() def zeichne_punktestand(): screen.draw.text(str(spieler_links.score), centerx=WIDTH / 2 - 80, top=20, fontsize=100) screen.draw.text(str(spieler_rechts.score), centerx=WIDTH / 2 + 80, top=20, fontsize=100) def draw(): screen.clear() spieler_links.draw() spieler_rechts.draw() ball.draw() zeichne_punktestand() pgzrun.go() ","keywords":""},{"title":"Tippspiel","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/A-examples/typing","content":"Tippspiel Beschreibung‚Äã Spiel, bei welchem man W√∂rter richtig abtippen muss, bevor die Zeit abl√§uft. Programm‚Äã import pgzrun import random TITLE = &quot;Typing Game&quot; WIDTH = 640 HEIGHT = 360 BG_COLOUR = (255, 255, 255) BLACK = (0, 0, 0) KEYMAP = { keys.A: &quot;a&quot;, keys.B: &quot;b&quot;, keys.C: &quot;c&quot;, keys.D: &quot;d&quot;, keys.E: &quot;e&quot;, keys.F: &quot;f&quot;, keys.G: &quot;g&quot;, keys.H: &quot;h&quot;, keys.I: &quot;i&quot;, keys.J: &quot;j&quot;, keys.K: &quot;k&quot;, keys.L: &quot;l&quot;, keys.M: &quot;m&quot;, keys.N: &quot;n&quot;, keys.O: &quot;o&quot;, keys.P: &quot;p&quot;, keys.Q: &quot;q&quot;, keys.R: &quot;r&quot;, keys.S: &quot;s&quot;, keys.T: &quot;t&quot;, keys.U: &quot;u&quot;, keys.V: &quot;v&quot;, keys.W: &quot;w&quot;, keys.X: &quot;x&quot;, keys.Y: &quot;y&quot;, keys.Z: &quot;z&quot;, keys.QUOTE: &quot;√§&quot;, keys.SEMICOLON: &quot;√∂&quot;, keys.LEFTBRACKET: &quot;√º&quot;, keys.SPACE: &quot; &quot; } words = [] file = open(&quot;wordlist.txt&quot;, &quot;r&quot;, -1, &quot;utf-8&quot;) for line in file: # Newline am Zeilenende abschneiden line = line.rstrip(&quot;\\n&quot;) # Wort zur Liste hinzuf√ºgen words.append(line) file.close() game = Actor(&quot;alien&quot;) game.level = 0 game.text = &quot;&quot; game.time = 5 MAX_TIME = 10 def update(dt): game.time = game.time - dt def draw(): screen.fill(BG_COLOUR) if game.time &lt; 0: screen.draw.text( &quot;GAME OVER&quot;, centerx=WIDTH / 2, centery=HEIGHT / 2, fontsize=60, color=BLACK ) return screen.draw.text(words[game.level], left=20, top=80, fontsize=60, color=BLACK) screen.draw.text(game.text, left=20, top=160, fontsize=60, color=(255, 0, 0)) width = WIDTH * game.time / MAX_TIME screen.draw.filled_rect(Rect((0, 10), (width, 50)), BLACK) def on_key_down(key): print(key) if game.time &lt; 0: return if key in KEYMAP: char = KEYMAP[key] if keyboard.lshift or keyboard.rshift: char = char.upper() game.text = game.text + char if key == keys.BACKSPACE: game.text = game.text[:-1] if game.text == words[game.level]: game.level = game.level + 1 game.time = game.time + 0.3 * len(game.text) game.text = &quot;&quot; pgzrun.go() ","keywords":""},{"title":"Tastatursteuerung","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/howto/keyboard-control","content":"Tastatursteuerung Beschreibung‚Äã Einfaches Beispiel, wie eine Figur mit der Tastatur gesteuert wird. Programm‚Äã import pgzrun WIDTH = 800 HEIGHT = 600 hintergrund = 0, 150, 220 nemo = Actor(&quot;fisch_rot_rechts&quot;) nemo.x = WIDTH / 2 nemo.y = HEIGHT / 2 def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def update(): if keyboard.left: nemo.x = nemo.x - 3 nemo.image = &quot;fisch_rot_links&quot; if keyboard.right: nemo.x = nemo.x + 3 nemo.image = &quot;fisch_rot_rechts&quot; if keyboard.up: nemo.y = nemo.y - 3 if keyboard.down: nemo.y = nemo.y + 3 kollision_rand(nemo) def draw(): screen.fill(hintergrund) nemo.draw() pgzrun.go() ","keywords":""},{"title":"Zeichnen","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/draw","content":"Zeichnen Kreise‚Äã screen.draw.circle((x, y), r, farbe) zeichnet eine Kreislinie mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. screen.draw.filled_circle((x, y), r, farbe) zeichnet einen ausgef√ºllten Kreis mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Rechtecke‚Äã Rect(x, y, w, h) erstellt ein Rechteck-Objekt. Dabei sind x und y die Koordinaten der linken oberen Ecke, w ist die Breite und h die H√∂he des Rechtecks. screen.draw.rect(rect, farbe) zeichnet ein Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. screen.draw.filled_rect(rect, farbe) zeichnet ein ausgef√ºlltes Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. Linien‚Äã screen.draw.line((x1, y1), (x2, y2), farbe) zeichnet eine Linie vom Punkt (x1, y1) zum Punkt (x2, y2) in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Text‚Äã screen.draw.text(text, left=x, top=y, fontsize=, fontname=, color=) zeichnet den Text text an der angegebenen Position. Mit fontsize= kann die Schriftgr√∂sse festgelegt werden. Die horizontale Ausrichtung des Texts wird durch left=, centerx= oder right= angegeben, die vertikale Ausrichtung durch top=, centery= oder bottom=: Mit fontname= wird der Name einer Schriftart-Datei angegeben, welche im Unterverzeichnis fonts vorhanden sein muss. Mit color=(r, g, b) wird die Farbe angegeben. F√ºr die Angabe der horizontalen und vertikalen Koordinate muss je einer der obenstehenden Namen verwendet werden. Die folgende Anweisung zeichnet beispielsweise den Text ¬´Hallo Welt¬ª so, dass sich der Punkt (100, 100) unten und horizontal in der Mitte des Texts befindet: screen.draw.text(&quot;Hallo Welt&quot;, centerx=100, bottom=100, color=(255, 0, 0)) ","keywords":""},{"title":"Tastatur","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/keyboard","content":"Tastatur Es gibt zwei M√∂glichkeiten, auf Tastatureingaben zu reagieren. Es wird der aktuelle Zustand einer bestimmten Taste ermittelt. Das ist beispielsweise der Fall, wenn sich die Spielfigur bewegen soll, falls eine bestimmte Taste gedr√ºckt ist. Es wird auf das Dr√ºcken oder Loslassen einer Taste reagiert. In diesem Fall wird von einem Ereignis gesprochen. Dies wird beispielsweise verwendet, wenn eine Spielfigur springen soll, wenn eine Taste gedr√ºckt wird.","keywords":""},{"title":"Tastaturereignisse","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/keyboard/event","content":"Tastaturereignisse def on_key_down(taste): wird aufgerufen, wenn eine Taste gedr√ºckt wird. def on_key_up(taste): wird aufgerufen, wenn eine Taste losgelassen wird. Die Variable taste kann folgende Werte annehmen: Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeys.A\t[Y]\tkeys.Y [B]\tkeys.B\t[Z]\tkeys.Z\t[0]\tkeys.K_0 [C]\tkeys.C\t[√§]\tkeys.QUOTE\t[1]\tkeys.K_1 [D]\tkeys.D\t[√∂]\tkeys.SEMICOLON\t[2]\tkeys.K_2 [E]\tkeys.E\t[√º]\tkeys.LEFTBRACKET\t[3]\tkeys.K_3 [F]\tkeys.F\t[,]\tkeys.COMMA\t[4]\tkeys.K_4 [G]\tkeys.G\t[.]\tkeys.PERIOD\t[5]\tkeys.K_5 [H]\tkeys.H\t[Space]\tkeys.SPACE\t[6]\tkeys.K_6 [I]\tkeys.I\t[Tab]\tkeys.TAB\t[7]\tkeys.K_7 [J]\tkeys.J\t[Backspace]\tkeys.BACKSPACE\t[8]\tkeys.K_8 [K]\tkeys.K\t[Enter]\tkeys.RETURN\t[9]\tkeys.K_9 [L]\tkeys.L\t[Esc]\tkeys.ESCAPE\t[F1]\tkeys.F1 [M]\tkeys.M\t[CapsLock]\tkeys.CAPSLOCK\t[F2]\tkeys.F2 [N]\tkeys.N\tLinke [Shift]\tkeys.LSHIFT\t[F3]\tkeys.F3 [O]\tkeys.O\tRechte [Shift]\tkeys.RSHIFT\t[F4]\tkeys.F4 [P]\tkeys.P\tLinke [Ctrl]\tkeys.LCTRL\t[F5]\tkeys.F5 [Q]\tkeys.Q\tRechte [Ctrl]\tkeys.RCTRL\t[F6]\tkeys.F6 [R]\tkeys.R\tLinke [Alt]\tkeys.LALT\t[F7]\tkeys.F7 [S]\tkeys.S\tRechte [Alt Gr]\tkeys.RALT\t[F8]\tkeys.F8 [T]\tkeys.T\t[Up]\tkeys.UP\t[F9]\tkeys.F9 [U]\tkeys.U\t[Left]\tkeys.LEFT\t[F10]\tkeys.F10 [V]\tkeys.V\t[Down]\tkeys.DOWN\t[F11]\tkeys.F11 [W]\tkeys.W\t[Right]\tkeys.RIGHT\t[F12]\tkeys.F12 [X]\tkeys.X ","keywords":""},{"title":"Tastaturzustand","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/keyboard/state","content":"Tastaturzustand Das Objekt keyboard repr√§sentiert die Tastatur. F√ºr jede Taste gibt eine entsprechende Variable des keyboard-Objekts an, ob diese gerade gedr√ºckt ist. Normale Tasten‚Äã Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeyboard.a\t[Y]\tkeyboard.y\t[0]\tkeyboard.k_0 [B]\tkeyboard.b\t[Z]\tkeyboard.z\t[1]\tkeyboard.k_1 [C]\tkeyboard.c\t[√§]\tkeyboard.quote\t[2]\tkeyboard.k_2 [D]\tkeyboard.d\t[√∂]\tkeyboard.semicolon\t[3]\tkeyboard.k_3 [E]\tkeyboard.e\t[√º]\tkeyboard.leftbracket\t[4]\tkeyboard.k_4 [F]\tkeyboard.f [5]\tkeyboard.k_5 [G]\tkeyboard.g\t[,]\tkeyboard.comma\t[6]\tkeyboard.k_6 [H]\tkeyboard.h\t[.]\tkeyboard.period\t[7]\tkeyboard.k_7 [I]\tkeyboard.i\t[Space]\tkeyboard.space\t[8]\tkeyboard.k_8 [J]\tkeyboard.j\t[Tab]\tkeyboard.tab\t[9]\tkeyboard.k_9 [K]\tkeyboard.k\t[Backspace]\tkeyboard.backspace\t[F1]\tkeyboard.f1 [L]\tkeyboard.l\t[Enter]\tkeyboard.return\t[F2]\tkeyboard.f2 [M]\tkeyboard.m\t[Esc]\tkeyboard.escape\t[F3]\tkeyboard.f3 [N]\tkeyboard.n\t[CapsLock]\tkeyboard.capslock\t[F4]\tkeyboard.f4 [O]\tkeyboard.o\tLinke [Shift]\tkeyboard.lshift\t[F5]\tkeyboard.f5 [P]\tkeyboard.p\tRechte [Shift]\tkeyboard.rshift\t[F6]\tkeyboard.f6 [Q]\tkeyboard.q\tLinke [Ctrl]\tkeyboard.lctrl\t[F7]\tkeyboard.f7 [R]\tkeyboard.r\tRechte [Ctrl]\tkeyboard.rctrl\t[F8]\tkeyboard.f8 [S]\tkeyboard.s\tLinke [Alt]\tkeyboard.lalt\t[F9]\tkeyboard.f9 [T]\tkeyboard.t\tRechte [Alt Gr]\tkeyboard.ralt\t[F10]\tkeyboard.f10 [U]\tkeyboard.u\t[Up]\tkeyboard.up\t[F11]\tkeyboard.f11 [V]\tkeyboard.v\t[Left]\tkeyboard.left\t[F12]\tkeyboard.f12 [W]\tkeyboard.w\t[Down]\tkeyboard.down [X]\tkeyboard.x\t[Right]\tkeyboard.right Ziffernblock‚Äã Taste\tVariable\tTaste\tVariable[0]\tkeyboard.kp0\t[9]\tkeyboard.kp9 [1]\tkeyboard.kp1\t[.] / [Del]\tkeyboard.kp_period [2] / [Down]\tkeyboard.kp2\t[Enter]\tkeyboard.kp_enter [3]\tkeyboard.kp3\t[+]\tkeyboard.kp_plus [4] / [Left]\tkeyboard.kp4\t[-]\tkeyboard.kp_minus [5]\tkeyboard.kp5\t[*]\tkeyboard.kp_multiply [6] / [Right]\tkeyboard.kp6\t[/]\tkeyboard.kp_divide [7]\tkeyboard.kp7\t[Num]\tkeyboard.numlock [8] / [Up]\tkeyboard.kp8 import pgzrun def update(): if keyboard.a: print(&quot;A wird gedr√ºckt&quot;) if keyboard.w: print(&quot;W wird gedr√ºckt&quot;) if keyboard.s: print(&quot;S wird gedr√ºckt&quot;) if keyboard.d: print(&quot;D wird gedr√ºckt&quot;) pgzrun.go() ","keywords":""},{"title":"Maus","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/mouse","content":"Maus def on_mouse_down(pos): wird aufgerufen, wenn eine Maustaste gedr√ºckt wird. def on_mouse_up(pos): wird aufgerufen, wenn eine Maustaste losgelassen wird. def on_mouse_move(pos): wird aufgerufen, wenn die Maus bewegt wird.","keywords":""},{"title":"Geschoss","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/howto/bullet","content":"Geschoss Schuss ausl√∂sen‚Äã Ein Geschoss ist ein Aktor, der sich nicht von Anfang an bewegt. Der Aktor muss sich somit merken, ob er schon ¬´existiert¬ª. Dies kann erreicht werden, indem eine Variable geschoss.aktiv definiert wird: geschoss = Actor(&quot;laser&quot;) geschoss.aktiv = False Der Schuss wird nur gezeichnet, wenn er aktiv ist: def draw(): if geschoss.aktiv: geschoss.draw() Wenn der Schuss ausgel√∂st wird, wird er ¬´aktiviert¬ª. Der Schuss wird an die Stelle gesetzt, wo sich das Objekt befindet, welches den Schuss abgibt: def schiesse(): geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.vx = 2 geschoss.vy = 0 geschoss.aktiv = True Schussrichtung‚Äã Damit sich der Schuss in die richtige Richtung bewegt, m√ºssen die horizontale und vertikale Geschwindigkeit des Geschosses vxv_xvx‚Äã und vyv_yvy‚Äã ausgerechnet werden. Bekannt sind die gew√ºnschte Geschwindigkeit vvv und der Winkel aaa: Im rechtwinkligen Dreieck k√∂nnen nun vxv_xvx‚Äã und vyv_yvy‚Äã mit den trigonometrischen Formeln berechnet werden: vx=v‚ãÖsin‚Å°(a)vy=v‚ãÖcos‚Å°(a)\\ v_x = v \\cdot \\sin(a)\\qquad v_y = v \\cdot \\cos(a)¬†vx‚Äã=v‚ãÖsin(a)vy‚Äã=v‚ãÖcos(a) Um die trigonometrischen Funktionen in Python verwenden zu k√∂nnen, muss das Modul math importiert werden: import math Ausserdem muss der Richtungswinkel des Raumschiffs von Grad nach Radiant umgerechnet werden: a = math.radians(raumschiff.angle) Nun k√∂nnen die trigonometrischen Formeln umgesetzt werden. Es muss beachtet werden, dass in Pygame Zero im Gegensatz zur Mathematik die y-Achse nach unten zeigt. Deshalb wird der Wert von vyv_yvy‚Äã negiert. geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) Vollst√§ndiges Beispiel‚Äã import pgzrun import math WIDTH = 1600 HEIGHT = 1200 hintergrund = Actor(&quot;weltraum&quot;) raumschiff = Actor(&quot;raumschiff&quot;) raumschiff.x = WIDTH / 2 raumschiff.y = HEIGHT / 2 geschoss = Actor(&quot;laser&quot;) geschoss.vx = 0 geschoss.vy = 0 geschoss.aktiv = False def draw(): hintergrund.draw() raumschiff.draw() if geschoss.aktiv: geschoss.draw() def schiesse(): geschoss.aktiv = True geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.angle = raumschiff.angle a = math.radians(raumschiff.angle) v = 3 geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) def on_key_down(key): if key == keys.SPACE: schiesse() def update(): geschoss.x = geschoss.x + geschoss.vx geschoss.y = geschoss.y + geschoss.vy if keyboard.a: raumschiff.angle = raumschiff.angle + 2 if keyboard.d: raumschiff.angle = raumschiff.angle - 2 pgzrun.go() ","keywords":""},{"title":"Random Walk","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/random-walk","content":"Random Walk Die Random-Walk-Theorie wurde zun√§chst von der franz√∂sischen Mathematikerin Louise Bachelier entworfen, die glaubte, dass Aktienkursentwicklungen wie die Schritte eines Betrunkenen seien: unberechenbar. 1 @ Betrachten wir den vermeintlich zuf√§lligen Weg einer Ameise, die jeweils nach einer unbekannten Anzahl Schritten die Richtung wechselt. Wir schauen uns die ersten 20 Richtungswechsel an und √ºberlegen uns, ob die Ameise von einer runden Tischplatte mit 100 cm Radius herunterfallen w√ºrde. Ameise.py Simulieren Sie den zuf√§lligen Weg einer Ameise, die 20 mal die Richtung wechselt. Folgende Annahmen werden getroffen: die Ameise macht mindestens 4, aber maximal 20 Schritte in dieselbe Richtung die Ameise dreht sich jeweils zwischen 0 und 360 Grad ameise.py from turtle import * from random import randint # Tischplatte zeichnen pencolor('red') penup() goto(0, -100) pendown() circle(100) pencolor('black') # Random walk Hinweis Mit randint(start, ende) k√∂nnen Sie einen zuf√§lligen Wert im Bereich zwischen start und ende erzeugen. from random import randint print('Zufallszahl [0, 2]', randint(0, 2)) print('Zufallszahl [10, 20]', randint(10, 20)) print('Zufallszahl [-20, 5]', randint(-20, 5)) Zusatz 1: Simulieren Sie 30 Ameisen - wie viele fallen vom Tisch? Zusatz 2: Mit distance(0, 0) kann die Distanz zum Ursprung ausgegeben werden - zeigen Sie jeweils die Distanz zum Ursprung mit an. SSR Quelle: Gloassar ‚Ü©","keywords":""},{"title":"Musik und Soundeffekte","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/sound","content":"Musik und Soundeffekte Soundeffekte‚Äã Soundeffekte m√ºssen im Format WAV oder OGG im Unterordner sound abgespeichert werden. sounds.name.play() spielt den Soundeffekt mit dem Name name ab. Um beispielsweise den Soundeffekt extraleben.wav abzuspielen, schreibt man: sounds.extraleben.play() Musik‚Äã Musikdateien m√ºssen im Format MP3 oder OGG im Unterordner music abgelegt werden. Um die Datei hintergrundmusik.mp3 abzuspielen, schreibt man: music.play(&quot;hintergrundmusik&quot;) music.play(name) spielt die Musikdatei mit dem Namen name ab. Das Abspielen wird endlos wiederholt. music.play_once(name) spielt die Musikdatei mit dem Namen name ab. Die Musikdatei wird nur einmal abgespielt. music.queue(name) f√ºgt die Musikdatei mit dem Namen name in die Abspielliste ein. music.stop() stoppt das Abspielen der Musik. music.pause() pausiert das Abspielen der Musik. music.unpause() nimmt das Abspielen der Musik nach einer Pause wieder auf. music.is_playing() √ºberpr√ºft, ob zur Zeit Musik abgespielt wird.","keywords":""},{"title":"Fenster","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/PyGameZero/window","content":"Fenster Fenster definieren‚Äã TITLE legt den Fenstertitel fest. WIDTH legt die Breite des Fensters in Pixel fest. HEIGHT legt die H√∂he des Fensters in Pixel fest. import pgzrun TITLE = 'Mein Spiel' WIDTH = 800 HEIGHT = 600 pgzrun.go() Fenster verwenden‚Äã Diese Anweisungen d√ºrfen nur in einem Unterprogramm verwendet werden. screen.width liefert die Breite des aktuellen Fensters in Pixel zur√ºck. screen.height liefert die H√∂he des aktuellen Fensters in Pixel zur√ºck. screen.clear() f√ºllt das Fenster mit der Farbe Schwarz. screen.fill(farbe) f√ºllt das Fenster mit der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Fenster schliessen‚Äã quit() schliesst das Fenster.","keywords":""},{"title":"10. Repetitionsfragen","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/repetition","content":"10. Repetitionsfragen Algorithmus‚Äã Was ist ein Algorithmus? Welche 5. Strukturelemente enth√§lt ein Algorithmus? Erstellen Sie einen Algorithmus f√ºr das Zusammenfalten eines T-Shirts. SSR Code Lesen‚Äã In welchem Code-Teil wird das Viereck mit der Stiftdicke 5 gezeichnet. Welche Seitenl√§nge hat das Dreieck mit Stiftdicke 7? Bei welchen Koordinaten wird das F√ºnfeck mit Stiftdicke 3 gezeichnet? F√ºgen Sie ein Quadrat mit der Seitenl√§nge 20 bei der Koordinate (20, 10) und der Stiftdicke 3 hinzu. Unterstreichen Sie in den Zeilen 1-12 alle Parameter Markieren Sie in den Zeilen 1-12 alle Befehlsnamen Turtle Ausgabe from turtle import * def move(x, y): penup() goto(x, y) pendown() pensize(2) for i in range(3): forward(18) left(120) move(-20, 30) pensize(5) for i in range(4): forward(27) left(90) move(30, 10) for i in range(5): forward(13) left(72) move(80, 80) pensize(3) for i in range(4): forward(77) left(90) move(-40, -20) for i in range(5): forward(23) left(72) move(-80, 80) pensize(7) for i in range(3): forward(44) left(120) SSR Code Ausf√ºhren‚Äã Zeichnen Sie die Ausgabe des folgenden Programms from turtle import * def square(): for i in range(4): forward(10) right(90) forward(30) left(90) forward(10) right(90) for i in range(3): forward(10) right(90) forward(10) left(90) forward(10) left(90) forward(10) right(90) left(90) square() SSR Struktogramm‚Äã Zeichnen Sie f√ºr folgende Ausgangslage ein Struktogramm: Die Benutzer:in wird nach ihrer Lieblingszahl gefragt. Die eingegebene Zahl wird verdoppelt und mit 3 addiert. So oft zeichnet man nun 55 Schritte vorw√§rts mit einer Drehung um 113¬∞ am Ende. Zusatz: Anstatt 113¬∞ soll soviel gedreht werden, dass eine geschlossene Figur entsteht. SSR Programmieren (am PC)‚Äã Definition Text vervielfachen‚Äã In Python kann Text verfielf√§ltigt werden, indem er mit der gew√ºnschten Anzahl wiederholungen multipliziert wird: print('Hallo' * 3) print('üå≤ ' * 24) Schreiben Sie einen Befehl dreieck, der ein Dreieck in Textform ausgibt. Die Gr√∂sse des Dreiecks soll als Parameter √ºbergeben werden k√∂nnen. Beispiele: dreieck(1) ergibt * dreieck(2) ergibt * * * dreieck(3) ergibt * * * * * * dreieck.py SSR","keywords":""},{"title":"4. Fehler","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/errors","content":"4. Fehler Sie haben bereits festgestellt, dass Python sehr pingelig ist was Tippfehler und die pr√§zise Verwendung von Klammern, Anf√ºhrungszeichen, Doppelpunkten und Leerzeichen angeht. Jede Sprache hat seine eigenen Regeln, wie W√∂rter und S√§tze strukturiert sein m√ºssen. Diese Regeln sind allgemein bekannt als die Syntax einer Sprache. Bei Programmiersprachen wird mit der Syntax festgelegt, welche W√∂rter, in welcher Reihenfolge und in welchem Kontext erlaubt sind. Syntax Fehler (syntax errors)‚Äã Syntax Fehler sind kleine Fehler in einem Programm. Da das Programm nicht von einem Mensch, sondern von einem Computer &quot;gelesen&quot; und interpretiert wird, reicht ein Tippfehler, ein fehlendes Komma oder eine fehlende Klammer, dass das Programm nicht mehr verstanden werden kann. Die Python Sprache setzt sich aus folgenden Elementen zusammen: Schl√ºsselw√∂rter (Statements): W√∂rter oder Zeichen, die ohne Anf√ºhrungszeichen und ohne Klammern geschrieben werden. z.B. import, from oder for, aber auch : oder *. Sie m√ºssen in einer vordefinierten Reihenfolge vorliegen, damit diese von Python verstanden werden. (‚Ü© alle Schl√ºsselw√∂rter) Befehle (Unterprogramme, Funktionen): vordefinierte Befehle, die mit einer runden Klammer aufgerufen werden. z.B. print('hello') Variablen: Namen, die einen Wert enthalten H√§ufigste Ursachen Fehler bei Schl√ºsselw√∂rtern vergessene oder falsch eingesetzte Feldtrenner (z.B. :) Falsche Anordnung von Schl√ºsselw√∂rtern/Feldtrennern Beispiele‚Äã frm turtle import * forward(100) from turtle import * goto(100 50) from turtle import * for i in range(4) forward(25) right(90) Fehler finden Untersuchen Sie obenstehende Programmschnipsel. Was sagen Ihnen die Fehlermeldungen? Auf welcher Zeile steht die Art des Fehlers? Wo finden Sie Hinweise auf den Fehler? Flicken Sie sie... error1.py frm turtle import * forward(100) error2.py from turtle import * goto(100 50) Hinweis Was macht der Befehl goto? Schauen Sie die Funktionsweise unter Turtle Befehle#goto(x, y) nach error3.py from turtle import * for i in range(4) forward(25) right(90) SSR Namens Fehler (NameError)‚Äã Liegt ein Fehler vor, der nicht bei Schl√ºsselw√∂rtern (oder deren Anordnung) vorliegt, so handelt es sich oft um einen Namens-Fehler (NameError). Es wird also versucht, ein Unterprogramm zu √∂ffnen, das aber unter diesem Namen nicht gefunden werden kann. H√§ufigste Ursachen Die h√§ufigste Ursachen von NameErrors sind Vertipper im Namen des Befehls nicht importierte Befehle (z.B. from turtle import * fehlt) Beispiele‚Äã from turtle import * forwrd(100) Der angegebene Befehl forwrd kann nicht gefunden werden, da er weder in einer importierten Bibliothek, noch im aktuellen Programm gefunden werden kann. Der gleiche Fehler tritt auf, wenn der Befehl zwar richtig geschrieben wird, das Importieren aber vergessen geht: forward(100) Fehler finden Finden und l√∂sen Sie die entstandenen Fehler error.py from math import ceil, floor print('15.3 gerundet =', round(15.3)) print('15.8 gerundet =', round(15.8)) print('15.3 aufgerundet =', ceyl(15.3)) print('15.8 abgerundet =', flor(15.8)) Hinweis Suchen Sie die fehlerhaften Befehle in Kombination mit Python auf Google, bspw. python ceyl. SSR Einr√ºckungsfehler (IndentationError)‚Äã Python erwartet nach jedem Doppelpunkt :, dass ein einger√ºckter Codeblock kommt. Falls kein einger√ºckter Codeblock gefunden wird, entsteht ein IndentationError. Wird jedoch f√§lschlicherweise eine Zeile einger√ºckt, so wird ebenfalls dieser Fehler angezeigt. H√§ufigste Ursachen Die n√§chste Zeile nach einem Doppelunkt : ist nicht einger√ºckt Eine Zeile ist f√§lschlicherweise einger√ºckt ein Leerschlag zu wenig einger√ºckt Beispiel‚Äã Nicht einger√ºckt for i in range(5): print('Hallo') Korrektur for i in range(5): print('Hallo') Falsch einger√ºckt print('Hallo') print('wie') print('gehts?') Korrektur print('Hallo') print('wie') print('gehts?') Fehler finden Finden und l√∂sen Sie die entstandenen Fehler, so dass die Ausgabe Hallo zum 0 Hallo zum 1 Ende lautet. errors.py for i in range(2): print('Hallo zum', i) print('Ende') SSR Logikfehler‚Äã Aus der Sicht von Python funktioniert alles, top! üëç Sobald aber das Programm ausgef√ºhrt wird, macht es nicht das, was Sie sich gew√ºnscht haben - Logik-Fehler üí©... Diese Fehler sind im allgemeinen am schwierigsten zu finden. Ein h√§ufiger Fehler ist aber, dass man bei einem Befehl die runden Klammern am Ende vergisst - f√ºr Python kein Problem, da es den Befehl kennt, jedoch nicht dazu aufgefordert wird, diesen auszuf√ºhren. H√§ufigste Ursachen Checkliste f√ºr Logikfehler sind bei Befehlen die runden Klammern () am Ende angegeben? Beispiel‚Äã from turtle import * penup() goto(-10, 10) pendown for i in range(4): forward(20) left(90) Auf Zeile 4 fehlen die runden Klammern - pendown wird nicht ausgef√ºhrt! Fehler beheben: Den Befehl mit pendown() aufrufen. Fehler finden Finden und beheben Sie alle Fehler, so dass folgende Ausgabe entsteht: errors.py from turtle import * fillcolor(&quot;Rot&quot;) penup() goto(-125 125) begin_fill() for i in range(4) forward(250) left(90) end_fill() forward(150) links(90) forward(50) fillcolor(&quot;white&quot;) begin_fill() for i in range(4): forward(50) right(90) forward(50) left(90) forward(50) left(90) end_fill SSR","keywords":""},{"title":"6. Parameter ‚äï‚äñ","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/functions-params","content":"6. Parameter ‚äï‚äñ Ein weiteres Strukturelement eines Algorithmus sind Parameter. Die Verwendung von Parametern haben wir bereits in Aktion gesehen - im Struktogramm sind alle Parameter unterstrichen, in Python werden alle Parameter als Liste, abgetrennt mit Kommas, in den runden Klammern geschrieben. Zur Erinnerung Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Beispiel: Bei einem Online-Rezept kann der Parameter Anzahl Personen mit den Kn√∂pfen ‚äï und ‚äñ variiert werden - die Mengenangaben werden dann aktualisiert. Aufgabe Markieren Sie im folgenden Programm (links) wie folgt: Parameter unterstreichen Befehlsnamen gelb markieren from turtle import * goto(20, 30) for i in range(5): left(90) forward(17) right(90) forward(29) SSR Wie k√∂nnen Unterprogramme geschrieben werden, die Parameter akzeptieren? Untersuchen Sie die folgenden Unterprogramme (f√ºhren Sie diese aus!) und notieren Sie sich, was Sie feststellen. Unterprogramme mit Parametern hello.py def hallo(name): print('Hallo', name) hallo('Maria') hallo('Reto') hallo('Hans') rechnen.py def quotient(zahl1, zahl2): print(zahl1, ':', zahl2, '=', zahl1 / zahl2) quotient(2, 3) quotient(5, 9) quotient(12, 20 + 4) ‚≠êÔ∏è Was sind die Parameter bei quotient(12, 20 + 4)? In welcher Reihenfolge werden diese verrechnet? SSR Unterprogramme mit Parametern‚Äã Parameter sind also Werte, die an ein Unterprogramm √ºbergeben werden k√∂nnen. Damit der √ºbergebene Wert im Unterprogramm wiederverwendet werden kann, braucht jeder Parameter einen Namen. Der Wert ist dann √ºber diesen Namen abrufbar. Der Parametername ist frei w√§hlbar, sollte aber seine Bedeutung widerspiegeln. Beispiel: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) color('red') quadrat(50) # ein Quadrat mit der Gr√∂sse 50 zeichnen color('blue') quadrat(100) # ein Quadrat mit der Gr√∂sse 100 zeichnen Mehrere Parameter‚Äã Manchmal ist es praktisch (oder auch n√∂tig), mehrere Parameter an ein Unterprogramm zu √ºbergeben. Das haben wir etwa beim Befehl goto(x, y) bereits gesehen. Beim obigen Programm k√∂nnte etwa auch die Farbe direkt im Unterprogramm square gesetzt werden: from turtle import * def quadrat(size, farbe): color(farbe) for i in range(4): forward(size) left(90) quadrat(50, 'red') # ein rotes Quadrat mit der Gr√∂sse 50 zeichnen quadrat(100, 'blue') # ein blaues Quadrat mit der Gr√∂sse 100 zeichnen Es ist prinzipiell m√∂glich, beliebig viele Parameter nacheinander zu √ºbergeben. H√§ufige Fehler Ein h√§ufiger Fehler sind vergessene Kommas zwischen zwei Parameternamen. Dann entsteht ein SyntaxError. Parameternamen sechseck.py from turtle import * Definieren Sie das Unterprogramm sechseck(size) welches ein Sechseck mit der Gr√∂sse size zeichnet. Rufen Sie das Programm mit sechseck(20) auf. Erzeugen Sie nun 10 Sechsecke. Das kleinste Sechseck hat die Seitenl√§nge 10, das gr√∂sste die Seitenl√§ng 100. F√ºgen Sie der Funktion sechseck(size) den Parameter farbe hinzu und erzeugen Sie mit folgendes Bild: Farben: violet, indigo, blue, green, lime, lightgreen, yellow, orange, orangered, red ‚ùì In welcher Reihenfolge m√ºssen die Sechsecke gezeichnet werden, damit genau das obige Bild entsteht? Tipp: Die Stiftdicke k√∂nnen Sie mit pensize(10) auf 10 setzen. SSR Wiederholungen‚Äã Wiederholung: üîÅ Wiederholte Ausf√ºhrung Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt. from turtle import * for i in range(4): forward(50) left(90) Wozu steht eigentlich das i im for i in range(4)? Das ist fast wie ein Parameter: i enth√§lt die Anzahl bereits ausgef√ºhrter Wiederholungen. W√§hrend Wiederholung 1: i=0, keine Wiederholung abgeschlossen ist. W√§hrend Wiederholung 2: i=1, eine Wiederholung ist bereits abgeschlossen. W√§hrend Wiederholung 3: i=2, zwei Wiederholungen sind bereits abgeschlossen. W√§hrend Wiederholung 4: i=3, drei Wiederholungen sind bereits abgeschlossen. Der Wert, welcher in i steht, kann auch verwendet werden: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) for i in range(10): quadrat(i * 10 + 10) ‚≠êÔ∏è Zusatzparameter von range() Definition range(start, ende, schritt)‚Äã Der Befehl range kann mit bis zu drei Parametern arbeiten, wobei start der erste verwendete Wert, ende das obere ganzzahlige Limit angibt, welches aber selber nie erreicht wird! und schritt den Abstand zwischen zwei Zahlen angibt. for i in range(2, 11, 3): print(i) Im obigen Beispiel startet i bei 2 und wird solange um 3 erh√∂ht, bis die Zahl 11 erreicht oder √ºberschiesst. ! 11 wird nicht angenommen. Aufgabe Kopieren Sie die Definition eines Hauses aus der letzten √úbung in dieses Programm. Modifizieren Sie das Unterprogramm haus(size) so ab, dass nun die Gr√∂sse des Hauses spezifiziert werden kann. Die Wurzel einer Zahl kann mit sqrt(zahl) berechnet werden. Schreiben Sie ein Unterprogramm move(x, y), welches die Schritte Stift heben zur Position x, y gehen Stift senken zusammenfasst. Mit dem Befehl randint(min, max) aus der Bibliothek random kann eine zuf√§llige ganze Zahl erzeugt werden. Dabei muss der kleinst und der gr√∂sstm√∂gliche Wert angegeben werden. Mit move(randint(-20, 20), randint(-20, 20)) kann also die Turtle an eine beliebige Position verschoben werden. Zeichnen Sie 20 H√§user an zuf√§lligen Positionen mit der Gr√∂sse 30. Stadt W√§hlen Sie nun auch die Gr√∂sse zuf√§llig: haus(randint(10, 100)) Nun soll auch noch die Farbe zuf√§llig gew√§hlt werden. Der Befehl choice aus der Bibliothek random gibt jeweils ein zuf√§lliges Element einer Liste zur√ºck: choice([1, 3, 5, 7, 9]) etwa w√§hlt zuf√§llig eine ungerade Zahl zwischen 1 und 10 aus. Die Liste der Farben: ['violet', 'indigo', 'blue', 'green', 'lime', 'lightgreen', 'yellow', 'orange', 'orangered', 'red'] stadt.py from turtle import * from math import sqrt from random import randint, choice SSR ‚≠êÔ∏è Zusatz Zeichnen Sie folgende Quadrate. Auf wie viele Zeilen k√∂nnen Sie Ihr Programm k√ºrzen? quadrate.py from turtle import * SSR","keywords":""},{"title":"‚≠ê Rekursion","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/rekursion","content":"‚≠ê Rekursion Ein Unterprogramm kann sich selber aufrufen. Das ergibt im Normalfall eine unendliche Wiederholung, so dass das Programm abst√ºrzt. Wird das Unterprogramm jedoch jedesmal mit einem ver√§nderten Parameter aufgerufen, so kann eine Abbruchbedingung erstellt werden, welche angibt, ob das Unterprogramm erneut aufgerufen werden soll oder nicht. Beispiel‚Äã Im folgenden Programm wird ein einfacher bin√§rer Baum gezeichnet: from turtle import * left(90) def baum(gr√∂sse): forward(gr√∂sse) left(45) forward(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) forward(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(40) Diesen Baum k√∂nnen wir nun so umbauen, dass jeder Ast auch wieder ein bin√§rer Baum ist: from turtle import * left(90) def baum(gr√∂sse): if gr√∂sse &lt; 5: forward(gr√∂sse) else: forward(gr√∂sse) left(45) baum(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) baum(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(100) Bemerken Sie, dass eine Abbruchbedingung eingef√ºgt wurde - falls die gr√∂sse kleiner als 5 ist, wird nur eine Strecke gezeichnet, andernfalls ein ganzer Baum. Koch Kurve‚Äã Aufgabe Eine Koch-Kurve ist wie folgt aufgebaut: wobei ein einzelnes Element wie folgt aussieht: koch.py from turtle import * ‚≠êÔ∏è Zusatz: Zeichnen Sie ein Sechseck bestehend aus 6 Koch-Kurven. ‚≠êÔ∏è Pythagorasbaum‚Äã Versuchen Sie, einen rekursiven Pythagoras-Baum zu zeichnen. Ein Pythagorasbaum Pythagorasbaum pythagoras.py from turtle import * Weitere Inspirationen f√ºr Fraktale üëâ https://natureofcode.com/book/chapter-8-fractals/","keywords":""},{"title":"2. Zeichnungsfl√§che","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/screen","content":"2. Zeichnungsfl√§che Die Zeichenfl√§che kann konfiguriert werden, z.B. mit einer Hintergrundfarbe, oder aber auch die Dimensionen des Hintergrunds. Standarm√§ssig ist keine Hintergrundfarbe gesetzt (=durchsichtig) und die Dimensionen die Koordinaten des Bildschirms sind 500x500 Pixel. Das zugrundeliegende Koordinatensystem hat den Ursprung immer in der Mitte des Bildschirms. from turtle import * # wenn die Bildschirm-Dimensionen ver√§ndert werden sollen, muss dies # zwingend als erster Befehl gemacht werden. # Die Gr√∂sse kann anschliessend nicht mehr ver√§ndert werden. turtle.set_defaults(canvwidth=200, canvheight=100) # Die Hintergrundfarbe kann auch ge√§ndert werden. Screen().bgcolor('orange') forward(100) note Wird mit Screen().bgcolor('yellow') eine Hintergrundfarbe festgelegt, kann das umgebende Rechteck der Figur (englisch Bounding Box) nicht mehr bestimmt werden und es wird immer die ganze Bildfl√§che heruntergeladen.","keywords":""},{"title":"5. Unterprogramme üè∑","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/functions","content":"5. Unterprogramme üè∑ Einf√ºhrung‚Äã In einer Bildkomposition kommen Figuren wie Dreiecke und Quadrate mehrmals vor. Die Turtle weiss aber nicht, was ein Dreieck oder ein Quadrat ist. Da in der Bildkomposition die Dreiecke und Quadrate nicht systematisch angeordnet sind, ist die Verwendung von Wiederholungen hier nicht naheliegend. from turtle import * fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() 26 Zeilen Code?? Geht das nicht auch einfacher? Es geht einfacher! Es lassen sich n√§mlich neue Befehle festlegen, die z.B. ein Dreieck oder ein Quadrat zeichnen. from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('red') dreieck() left(120) fillcolor('green') dreieck() left(120) fillcolor('blue') dreieck() dreieck Starte Auff√ºllen 3 mal wiederholen 50 Schritte vorw√§rts 120¬∞ nach links Ende Auff√ºllen rote F√ºllfarbe dreieck zeichnen 120¬∞ nach links gr√ºne F√ºllfarbe dreieck zeichnen 120¬∞ nach links blaue F√ºllfarbe dreieck zeichnen Aufgabe 1 Im folgenden ist zweimal derselbe Algorithmus programmiert - links ohne Unterprogramme, rechts mit Unterprogrammen. √Ñndern Sie beide Programme so ab, dass die Dreiecke doppelt so gross gezeichnet werden! sequentiell.py from turtle import * fillcolor('yellow') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('orange') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('purple') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() functions.py from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('yellow') dreieck() left(60) fillcolor('orange') dreieck() left(60) fillcolor('red') dreieck() left(60) fillcolor('purple') dreieck() left(60) fillcolor('blue') dreieck() left(60) fillcolor('green') dreieck() left(60) Wie viele Zeilen mussten Sie im linken bzw. im rechten Programm √§ndern? Welche Vorteile sehen Sie bei der Verwendung von Unterprogrammen? SSR Eigene Befehle definieren‚Äã Bei Python werden Befehle auch Funktionen genannt. Definition def name():‚Äã Mit def name(): wird ein neues Unterprogramm (ein neuer Befehl) definiert. Als Name sollte immer etwas gew√§hlt werden, das die T√§tigkeit dieser Sequenz widerspiegelt. Alle Anweisungen, die zum neuen Befehl geh√∂ren, m√ºssen einger√ºckt sein! Beispiel: def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) Befehlsaufruf Die Definition alleine f√ºhrt das Programm noch nicht aus. Dazu muss der Befehl erst noch aufgerufen werden: from turtle import * def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) ### PRE zick_zack() Aufgabe 2: Struktogramm ‚Üí Python Erzeugen Sie ein Programm gem√§ss folgendem Struktogramm: stufe 95¬∞ links 20 Schritte vorw√§rts 95¬∞ rechts 30 Schritte vorw√§rts 100 Schritte vorw√§rts stufe zeichnen stufe zeichnen stufe zeichnen befehl1.py from turtle import * √Ñndern Sie obiges Programm so, dass der Winkel einer Stufe neu 110¬∞ betr√§gt. Zeichnen Sie eine Treppe mit 30 Stufen. Denken Sie dabei auch an das letzte Kapitel (Stichwort: Wiederholungen!) SSR Aufgabe 3 ‚Äì Sechsecke sechseck.py from turtle import * Zeichnen Sie ein Sechseck Verschieben Sie die Sequenz, die das Sechseck zeichnet, in einen neuen Befehl namens sechseck(). Denken Sie daran, der neue Befehl muss aufgerufen werden, damit er ausgef√ºhrt wird. Verwenden Sie den neuen Befehl, um die folgende Figur zu zeichnen, welche aus 10 Sechsecken besteht: Tipp Nach jedem Sechseck muss 36¬∞ gedreht werden. SSR Aufgabe 4 ‚Äì H√§user F√ºr diese Aufgabe k√∂nnen Sie als Ausgangslage Ihr Programm aus Kapitel 1, Aufgabe 6 &quot;Haus von Nikolaus&quot; verwenden. stadt.py from turtle import * Definieren Sie einen Befehl haus(), der ein Haus des Nikolaus zeichnet: Achten Sie darauf, dass die Turtle am Ende eines H√§uschens jeweils unten rechts ist und nach rechts schaut. Zeichnen Sie nun 4 H√§user nacheinander in unterschiedlichen Farben. SSR Aufgabe 5 ‚Äì Blume Sie werden in dieser Aufgabe unter der Verwendung mehrerer Unterprogramme eine komplexe Aufgabe schrittweise l√∂sen. blume.py from turtle import * Definieren Sie Unterprogramm bogen(), mit dem die Turtle einen Bogen zeichnet und sich dabei insgesamt um 90¬∞ nach rechts dreht. F√ºgen Sie einen weiteren Befehl blumenblatt() hinzu, welches zwei B√∂gen zeichnet. Die Turtle sollte am Ende aber wieder in Startrichtung stehen. Erg√§nzen Sie blumenblatt() so, dass ein rot gef√ºlltes Blatt gezeichnet wird. Setzen Sie mit pencolor die Stiftfarbe ebenfalls auf rot, damit die Umrandungslinie die gleiche Farbe hat. Erweitern Sie das Programm mit dem Befehl blume(), so dass eine f√ºnfbl√§ttrige Blume gezeichnet wird. ‚≠êÔ∏è Zusatz: Blume mit Stiel. Erg√§nzen Sie die Blume mit einem Stiel. SSR","keywords":""},{"title":"1. Einf√ºhrung Python üë£","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/intro","content":"1. Einf√ºhrung Python üë£ Programmieren heisst, einer Maschine Befehle zu erteilen und sie damit zu steuern. Die erste solche Maschine, die Sie steuern, ist eine kleine Schildkr√∂te (bzw. ein kleines Dreieck) auf dem Bildschirm: Die Turtle. Was kann diese Turtle und was musst du wissen, um sie zu steuern? Turtlebefehle werden grunds√§tzlich Englisch geschrieben und enden immer mit einem Klammerpaar. Dieses enth√§lt weitere Angaben zum Befehl. Selbst wenn keine weiteren Angaben n√∂tig sind, muss ein leeres Klammerpaar vorhanden sein. Die Klein-/Grossschreibung muss exakt eingehalten werden. Die Turtle kann sich innerhalb ihres Fensters bewegen und dabei eine Spur zeichnen. Um die Turtle zu bewegen, verwenden wir die drei Befehle forward(distanz), left(winkel) und right(winkel). Programmierkonzepte: Quellprogramm editieren, Programm ausf√ºhren, Programmsequenz Das erste Programm‚Äã Das erste Python-Programm zeichnet ein Quadrat. Damit die Befehle zum zeichnen verwendet werden k√∂nnen, muss zuerst eine Datei mit den entsprechenden Befehlen (ein sogenanntes Modul) turtle geladen werden. Quadrat from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) from turtle import * Damit Python die Befehle zum zeichnen verwenden kann, m√ºssen diese zuerst aus einer Bibliothek importiert werden. Damit beim Importieren nicht jeder einzelne Befehl angegeben werden muss, wird das Zeichen * verwendet welches alle verf√ºgbaren Befehle importiert. Befehle: forward, left Alle Befehle in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. forward(90) \\_____/ \\ / Parameter (Bedeutung hier: 90 Schritte vorw√§rts) Befehlsname penup() \\___/ \\ / kein Parameter Befehlsname * werden mehrere Parameter √ºbergeben, dann werden diese mit Kommas abgetrennt, z.B. goto(20, 30) Aufgabe 1 Markieren Sie im untenstehenden Programm folgende Strukturmerkmale eines Algorithmus mit den vorgegebenen Farben: Unterprogramme Aufrufe eines Unterprogramms mit orange Parameter Verwendete Parameter mit gr√ºn SSR Aufgabe 2 √Ñndern Sie die Parameter im Programm QUADRAT.PY so ab, dass: das Quadrat doppelt so gross gezeichnet wird das Quadrat um 45¬∞ nach links gedreht gezeichnet wird quatrat.py from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) ‚≠êÔ∏è Zusatz:‚Äã Die Form der Turtle kann mit dem Befehl shape ver√§ndert werden. √Ñndern Sie auf Zeile 3 die Turtleform auf eine Schildkr√∂te durch Aufrufen des Befehls shape mit dem Parameter 'turtle'. M√∂gliche Parameter f√ºr den Befehl shape 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) SSR Farben‚Äã Die Stiftfarbe kann mit dem Befehl pencolor('red') auf rot gewechselt werden. Es gibt eine vordefinierte Farbpalette f√ºr die Stiftfarben. farben from turtle import * forward(30) right(90) pencolor('red') forward(30) right(90) pencolor('blue') forward(30) right(90) pencolor('green') forward(30) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white 'string' Beachten Sie die Anf√ºhrungszeichen rund um die Farb-Namen. Damit Python die Farben als Text (eng. string) erkennt und nicht pl√∂tzlich nach einem gleichnamigen Befehl sucht, werden rund um Texte immer Anf√ºhrungszeichen verwendet. Stiftbreite‚Äã Die Stiftbreite kann mit dem Befehl pensize(2) ver√§ndert werden. Standardm√§ssig ist die Stiftbreite 1 from turtle import * forward(20) pensize(5) forward(20) pensize(10) forward(20) pensize(15) forward(20) pensize(20) forward(20) Zahlen Beachten Sie, dass bei Zahlen keine Anf√ºhrungszeichen verwendet werden. Eine Verwechslungsgefahr mit anderen Befehlen besteht nicht, da in Python keine Befehle mit einer Zahl beginnen. Aufgabe 3: Zickzack Versuchen Sie, folgendes Zickzack-Muster mit einer Stiftdicke von 5 zu zeichnen. Die Streckenl√§nge und die Winkel d√ºrfen Sie sch√§tzen. zickzack.py from turtle import * ‚≠êÔ∏è Zusatz:‚Äã Machen Sie bei jedem Richtungswechsel einen Punkt: SSR Kommentare‚Äã In Python k√∂nnen Kommentare eingef√ºgt werden, die aber auf die Ausf√ºhrung des Programms keinen Einfluss haben. Kommentare sind eine wichtige Hilfe, um Programme (Algorithmen) besser zu verstehen, oder aber um zus√§tzliche Informationen, wie den Autor des Programms, festzuhalten. # Autor: B. Hofer # Datum: 5.09.2021 from turtle import * # importiere alle Befehle der Bibliothek &quot;turtle&quot; speed(1) # verlangsame die Turtle auf die langsamste Geschwindigkeit forward(100) # 100 Schritte vorw√§rts left(120) # drehe um 120 ¬∞ nach links speed(3) # zur√ºck auf Normalgeschwindigkeit forward(100) left(120) speed(10) # Schneller... forward(100) left(120) hideturtle() # verstecke die Turtle Aufgabe 4: Programm untersuchen Versuchen Sie nachzuvollziehen, welche Zeile was macht. F√ºgen Sie auf den ersten Zeilen den Autor und das Datum hinzu. F√ºgen Sie immer dann, wenn ein Unterprogramm zum ersten Mal verwendet wird, einen Kommentar hinzu, welcher beschreibt, was dieses Unterprogramm macht und, falls vorhanden, welchen Einfluss die Parameter haben. Stift-und-Punkte from turtle import * forward(40) left(90) penup() forward(40) dot(10) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) Aufgabe 5: W√ºrfel √Ñndern Sie das Programm so ab, dass die gew√ºrfelte Zahl 5 gezeichnet wird: W√ºrfel 5 Verstecken Sie auch die Turtle am Ende! W√ºrfel__5.py from turtle import * forward(40) left(90) penup() forward(40) dot(5) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) SSR Aufgaben‚Äã Aufgabe 6: Haus von Nikolaus Das &quot;Haus vom Nikolaus&quot; ist ein Zeichenspiel f√ºr Kinder. Ziel ist es, das besagte Haus in einem Linienzug aus genau acht Strecken zu zeichnen, ohne dabei eine Strecke zweimal zu durchlaufen. Zeichnen Sie das Haus vom Nikolaus. haus__nikolaus.py from turtle import * Hinweis: Diagonale Die L√§nge der Diagonale k√∂nnen Sie mithilfe von Pythagoras und einem Taschenrechner berechnen. Oder Sie verwenden den Trick, dass die Diagonale im Quadrat gerade 2\\sqrt 22‚Äã mal l√§nger ist als eine Seitenl√§nge - bei einer Seitenl√§nge von 100100100 w√§ren das also ca. 141141141. ‚≠êÔ∏è Zusatz:‚Äã Verwenden Sie f√ºr die Zeichnung Ihre Lieblingsfarbe und eine gr√∂ssere Stiftdicke. SSR Aufgabe 7: Treppe Zeichnen Sie eine Treppe mit f√ºnf Stufen, die eine Breite von 29 Pixeln und eine H√∂he von 17 Pixeln haben. treppe.py from turtle import * SSR","keywords":""},{"title":"9. ‚≠êÔ∏è While","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/while","content":"9. ‚≠êÔ∏è While Wiederholen, solange die Frage mit &quot;Ja&quot; beantwortet wird‚Äã Eine Wiederholung mit einer Frage f√ºhrt einen Codeblock so lange aus, bis die Frage nicht mehr mit &quot;Ja&quot; beantwortet wird. Im folgenden Beispiel wird solange eine Spirale gezeichnet, bis die Distanz der Turtle vom Zentrum mehr als 200px betr√§gt. Unendliche Schleife Diese Art von Wiederholung kann dazu f√ºhren, dass eine Frage immer mit &quot;Ja&quot; beantwortet wird und das Programm also nie endet. Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das Programm zu Dies gelingt: Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das laufende Programm zu stoppen, muss: der ganze Tab geschlossen und die Seite in einem neuen Tab ge√∂ffnet werden. (Tipp: Die URL zuerst kopieren...) (den ganzen Browser √ºber den Taskmanager schliessen) winkel = 20 setzen Ist der Abstand zum Zentrum kleiner als 200px? 5 Schritte vorw√§rts winkel¬∞ nach links winkel auf 99% des aktuellen Werts setzen from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Oft k√∂nnte man dies auch mit einer for-Schleife erreichen. Jedoch m√ºsste man dann zuerst berechnen, wie viele Schritte n√∂tig sind, bis dies der Fall ist. Im obigen Beispiel kann etwa der Schrumpf-Faktor (0.99) ver√§ndern, ohne die Frage (weniger als 200px Abstand zum Zentrum?) zu √§ndern. Aufgabe Probieren Sie es aus und spielen Sie mit dem Schrumpf-Faktor 0.99 im obigen Bispiel. Spirale.py from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Wann gibt es mehr/weniger Windungen? Wann entsteht eine unendliche Schleife? Wiederholungen mit der while-Schleife‚Äã Mit der while-Schleife k√∂nnen alle Wiederholungen, die mit der for i in range(...): Syntax erzeugt wurden, ebenfalls erzeugt werden. Dabei muss aber jeweils eine Variable, z.B. i, verwendet werden, welche sich die Anzahl Wiederholungen merkt. Nat√ºrlich muss diese Variable dann bei jeder Wiederholung um eins hochgez√§hlt werden. Eine solche Variable, die bei jeder Wiederholung erh√∂ht wird, wird Schleifenz√§hler oder Laufvariable genannt. from turtle import * i = 0 while i &lt; 4: forward(100) left(90) i = i + 1 for zu while Schreiben Sie das untenstehende Programm so um, dass nur noch while Schleifen verwendet werden. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) to-while.py from turtle import * SSR while zu for Schreiben Sie das untenstehende Programm so um, dass nur noch for Schleifen verwendet werden. from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() def quadrat(): i = 0 while i &lt; 4: forward(20) left(90) i = i + 1 zeile = 0 while zeile &lt; 5: spalte = 0 while spalte &lt; 3: move(zeile * 20, spalte * 20) quadrat() spalte = spalte + 1 zeile = zeile + 1 to-while.py from turtle import * SSR Anwendung‚Äã Die while-Schleife kommt oft bei Benutzerinteraktionen, Simulationen oder bei sich dynamisch √§ndernden Daten vor. Sonstige Wiederholungen lassen sich normalerweise einfacher mit einer for-Schleife umsetzen. Ratespiel √Ñndern Sie das Ratespiel aus dem Kapitel Verzweigungen so ab, dass die Spieler:in unendlich viele Versuche hat um die Zahl zu finden. Wurde die gesuchte Zahl gefunden, soll die Anzahl Versuche zur√ºckgemeldet werden. SSR","keywords":""},{"title":"3. Wiederholung üîÅ","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/repeat","content":"3. Wiederholung üîÅ In der Aufgabe 8 haben Sie eine Treppe gezeichnet. Ihr Programm sieht vermutlich etwa wie folgt aus: from turtle import * left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) Was stellen Sie beim Treppen-Programm fest? Das Programm ist lang man sieht nicht auf einen Blick, wie viele Stufen die Treppe hat ob alle Stufen gleich breit und hoch sind Um die Stufenbreite oder die Stufenh√∂he anzupassen, m√ºssen viele Zeilen ver√§ndert werden Es kommt immer wieder dieselbe Sequenz vor: left(90) forward(17) right(90) forward(29) wir sind zu faul, um immer wieder dieselbe Sequenz aufzuschreiben (oder zu Copy&amp;Pasten) Wiederholen von Sequenzen‚Äã Ein Algorithmus kann Sequenzen wiederholt ausf√ºhren. In Python wird die zu wiederholende Sequenz Codeblock genannt. from turtle import * for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts Definition for i in range(n):‚Äã Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt, bevor weitere Anweisungen ausgef√ºhrt werden.Alles, was wiederholt werden soll, muss einger√ºckt sein. Beispiel‚Äã from turtle import * for i in range(4): forward(50) left(90) Struktogramm ‚Üí Python √úbersetzen Sie das Struktogramm in ein Python Programm. Was entsteht? wiederholung.py from turtle import * 9 mal wiederholen: 100 Schritte vorw√§rts 160¬∞ nach links Turtle verstecken SSR 1. Python ‚Üí Struktogramm Zeichnen Sie f√ºr folgendes Programm ein Struktogramm auf ein Blatt Papier. Fotografieren Sie es im Anschluss und halten Sie es im untenstehenden Textfeld fest. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) SSR 2. Python ‚Üí Struktogramm Zeichnen Sie auch f√ºr folgendes Programm ein Struktogramm und halten Sie dieses fest. from turtle import * for i in range(5): left(72) for i in range(4): forward(20) left(90) forward(100) SSR 3. Treppe vol. 2 Zeichnen Sie eine Treppe mit 20 Stufen. Die Treppe soll bei den Koordinaten (-200, -200) starten. W√§hlen Sie die Stufen-Breiten so, dass der verf√ºgbare Platz m√∂glichst gut ausgenutzt wird. treppe2.py from turtle import * Hinweis Verwenden Sie den Befehl goto(x, y) um die Turtle bei -200, -200 zu positionieren. SSR 4. Schneestern Zeichnen Sie einen Stern und gehen Sie wie folgt vor: Untersuchen Sie den Stern und identifizieren Sie die wiederholten Sequenzen. Programmieren Sie eine einzelne Sequenz. Die Knacknuss ist, dass am Ende der Sequenz die Turtle so ausgerichtet ist, dass man mit der Wiederholung beginnen k√∂nnte Programmieren Sie die Wiederholung schneestern.py from turtle import * SSR 5. Weihnachtsstern Zeichnen Sie einen Weihnachtsstern mit den Drehwinkeln 140¬∞ und 80¬∞. F√ºllen Sie den Stern mit Ihrer Lieblingsfarbe. Schauen Sie sich dazu den Abschnitt &quot;F√ºllen&quot; unter üëâ Turtle Befehle an. weihnachtsstern.py from turtle import * SSR 6. Quadrate Zeichnen Sie folgende Leiter. K√∂nnen Sie das Programm mit noch weniger Zeilen Code schreiben? Schaffen Sie es, nur 6 Zeilen Code zu verwenden? leiter.py from turtle import * SSR 7. Perlenkette Zeichnen Sie eine Perlenkette in Ihrer Lieblingsfarbe, die aus 18 Perlen (dots) besteht. perlenkette.py from turtle import * Hinweis Die Turtle muss nach 18 Drehungen wieder nach rechts schauen (hat sich also insgesamt um 360¬∞ gedreht) - pro Drehung also xxx Grad Python kann auch rechnen üòã - lassen Sie die Drehung von Python berechnen. Beispiel: left(360 / 4) ist dasselbe wie left(90) SSR 8. Vogel Zeichnen Sie einen Vogel, indem Sie mehrmals nacheinander folgende Befehle wiederholen: forward(2) right(3) vogel.py from turtle import * SSR","keywords":""},{"title":"Weihnachtskarten","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/weihnachten","content":"Weihnachtskarten XMAS-1.py from turtle import * XMAS-2.py from turtle import * XMAS-3.py from turtle import * XMAS-4.py from turtle import * XMAS-5.py from turtle import * SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Turtle Befehle","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/turtle-commands","content":"Turtle Befehle Bewegungen‚Äã Definition forward(n) fd(n)‚Äã Bewegt die Turtle n Pixel nach vorne. from turtle import * ### PRE forward(100) Definition backward(n) back(n) bk(n)‚Äã Bewegt die Turtle n Pixel r√ºckw√§rts. from turtle import * ### PRE backward(100) Definition left(angle) lt(angle)‚Äã Dreht die Turtle angle Grad nach links. from turtle import * ### PRE left(90) Definition right(angle) rt(angle)‚Äã Dreht die Turtle angle Grad nach rechts. from turtle import * ### PRE right(90) Definition goto(x, y)‚Äã Bewegt die Turtle zur Position mit den Koordinaten (x, y). Beispiel: goto(50, 100) from turtle import * ### PRE goto(50, -50) Definition home()‚Äã Setzt die Turtle auf die Ursprungsposition (0, 0) zur√ºck und setzt die Orientierung der Turtle auf rechts ‚ñ∂Ô∏è. from turtle import * speed(0) penup() goto(20, 30) pendown() left(30) write('(20|30), 30¬∞ links', font=('Arial', 8, 'normal')) speed(1) ### PRE home() Definition setheading(to_angle) seth(to_angle)‚Äã Dreht die Turtle, bis der angegebene Winkel erreicht ist. Winkel\tAusrichtung0\t‚ñ∂Ô∏è 90\t‚ñ≤ 180\t‚óÄÔ∏è 270\t‚ñº from turtle import * ### PRE setheading(120) Stift‚Äã Definition penup() up() pu()‚Äã Hebt den Stift an - beim Bewegen der Turtle wird keine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) Definition pendown() down() pd()‚Äã Senkt den Stift - beim Bewegen der Turtle wird wieder eine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) pendown() forward(100) Definition isdown()‚Äã √úberpr√ºft, ob der Stift aktuell gesenkt ist und gibt das Resultat als True (=Stift gesenkt) oder False (=Stift oben) zur√ºck. from turtle import * ### PRE if isdown(): penup() forward(100) Definition pencolor(color)‚Äã Legt die Stiftfarbe fest. Der Parameter color enth√§lt Text, die Farbe muss also mit Anf√ºhrungszeichen umgeben sein. Beispiel: from turtle import * ### PRE pencolor('red') forward(100) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white RGB-Farben RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) from turtle import * pencolor('rgb(255, 217, 0)') forward(100) left(120) r = 30 g = 180 b = 77 # oder variabel pencolor(f'rgb({r}, {g}, {b}') forward(100) Unterschiede zum offiziellen Turtle-Modul Das offizielle Turtle-Modul verwendet zur Anzeige von Grafiken nicht einen Browser, sonder Tkinter. Dort k√∂nnen ebenfalls RGB-Farben verwendet werden, sie werden aber mit einer anderen Syntax √ºbergeben: Mehr dazu hier üëâ https://docs.python.org/3/library/turtle.html#turtle.color Definition pensize(size)‚Äã Legt die Stiftdicke size fest. Standard: pensize(1) from turtle import * ### PRE pensize(10) forward(100) Definition dot() dot(diameter)‚Äã Zeichnet einen Punkt an der aktuellen Position mit dem angegebenen Durchmesser diameter. Wenn kein Durchmesser angegeben wird, verwendet es standardm√§ssig das doppelte der aktuellen Stiftdicke (pensize), aber mindestens einen Durchmesser von 5. from turtle import * ### PRE dot() forward(20) dot(20) Definition circle(radius)‚Äã Zeichnet einen Kreis mit dem angegebenen radius. from turtle import * ### PRE circle(100) Definition circle(radius, angle)‚Äã Zeichnet einen Kreisbogen mit dem angegebenen radius und angle. Beispiel from turtle import * ### PRE circle(50, 180) F√ºllen‚Äã Definition fillcolor(color)‚Äã Legt die color f√ºr das F√ºllen von geschlossenen Pfaden fest. Farbpalette from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition begin_fill()‚Äã Startet einen geschlossenen Pfad. from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition end_fill()‚Äã Endet die Aufzeichnung des Pfades und schliesst diesen. Beispiel from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Aussehen und Geschwindigkeit‚Äã Definition shape(form)‚Äã √Ñndert die Form der Turtle. F√ºr den Parameter form k√∂nnen folgende Werte verwendet werden: 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) from turtle import * ### PRE shape('turtle') Definition hideturtle()‚Äã Macht die Turtle unsichtbar. ‚ö†Ô∏è Der Stift wird durch das Verstecken nicht automatisch angehoben. from turtle import * ### PRE hideturtle() forward(100) Definition showturtle()‚Äã Zeigt die Turtle wieder an. ‚ö†Ô∏è Der Stift wird durch das Anzeigen nicht automatisch wieder abgesetzt. from turtle import * speed(1) ### PRE forward(20) penup() hideturtle() forward(30) showturtle() left(90) forward(50) Definition speed(v)‚Äã Legt die Geschwindigkeit v der Turtle fest. 1 am langsamsten 3 Standard 6 schnell ... (Schnellstm√∂gliche Geschwindigkeit kann mit speed(0) festgelegt werden.) from turtle import * ### PRE speed(1) forward(100) ","keywords":""},{"title":"7. Variablen","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/variablen","content":"7. Variablen Einf√ºhrung‚Äã Im vorhergehenden Kapitel haben Sie Quadrate gezeichnet, deren Seitenl√§nge im Programm fest eingebaut waren. Manchmal m√∂chten Sie aber die Seitenl√§nge mit einem Eingabedialog einlesen. Dazu muss das Programm die eingegebene Zahl als Variable speichern. Variablen kann man sich wie eine Z√ºgelbox vorstellen, welche mit einem Namen angeschrieben ist. Der Name beschreibt, was sich in der Box befindet, damit man den Inhalt sp√§ter auch wieder findet. Variable Zuweisen Mit der Schreibweise anzahl = 12 wird eine solche Box erstellt. In Zukunft sagen wir, dass damit die Variable anzahl definiert und ihr einen Wert zugewiesen wird. Um den Inhalt der Box zu erhalten, kann der Name (ohne Anf√ºhrungszeichen) geschrieben werden. Im Struktogramm werden alle Variablen umrahmt. anzahl = 12 Ausgabe: anzahl anzahl = 12 print(anzahl) Mit Variablen rechnen anzahl = 12 print(anzahl + 13) Mehrere Variablen anzahl = 12 gewicht = 100 print(f'{anzahl} Tafeln Schokolade sind {anzahl * gewicht} g schwer') Formatierter Text: f'{anzahl} Tafeln' Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') √úberschreiben: Variablen neu Zuweisen‚Äã In einer Box kann immer nur ein einziges Objekt abgelegt werden. Wenn sp√§ter also ein neuer Wert in bereits beschriftete Z√ºgelbox gelegt wird, so wird der aktuelle Wert verdr√§ngt. K√ºnftig wird diese erneute Zuweisung √úberschreiben einer Variable genannt. Variablen √ºberschreiben anzahl = 12 print(f'Anzahl = {anzahl}') anzahl = 7 print(f'Anzahl = {anzahl}') Im obigen Beispiel wird der initiale Wert der Variable anzahl (12) mit dem neuen Wert 7 √ºberschrieben. Merke: G√ºltigkeitsbereich Die Variable wird nicht r√ºckwirkend ver√§ndert. Solange eine Variable nicht √ºberschrieben wird, besitzt sie den aktuell zugewiesenen Wert. Aufgabe Was geschieht im untenstehenden Programm? F√ºgen Sie bei jeder Zeile mit einem print einen Kommentar hinzu mit: ausgegebene Zahl aktuell gespeicherter Wert in der Variable anzahl variable.py anzahl = 2 print(anzahl) # =&gt; 2, anzahl=2 print(anzahl + 2) anzahl = 7 print(anzahl) print(anzahl + 2) anzahl = anzahl + 3 print(anzahl) anzahl = anzahl + 3 print(anzahl + 1) anzahl = anzahl + 3 print(anzahl) SSR Gleichheitszeichen Das Gleichheitszeichen hat also in Computerprogrammen nicht dieselbe Bedeutung wie in der Mathematik. Es ist keine Gleichung, sondern eine Variablendefinition oder eine Zuweisung. Variablenwert einlesen, ver√§ndern und ausgeben Im Programm kann mit Hilfe einer Eingabeboxen Werte eingelesen und einer Variable zugewiesen werden. from turtle import * speed(12) anzahl = input('Wie viele Strecken soll die Spirale haben?') anzahl = int(anzahl) seite = 10 for i in range(anzahl): forward(seite) left(90) seite = seite + 10 Eingabe In Python ist das Resultat einer Eingabe immer ein Text. Ein Text kann aber in eine Zahl umgewandelt werden, so dass dann auch damit gerechnet werden kann. Der Befehl int wandelt eine Eingabe in eine ganze Zahl um. Der Befehl float wandelt eine Eingabe in eine Dezimalzahl um. # Centimeter zu Meter gr√∂sse = input('Wie gross bist du [cm]?') gr√∂sse = int(gr√∂sse) print(f'Ich bin {gr√∂sse / 100} m gross') # Meter zu Centimeter gr√∂sse = input('Wie gross bist du [m]?') gr√∂sse = float(gr√∂sse) print(f'Ich bin {gr√∂sse * 100} cm gross') Eingabe - Struktogramm‚Äã Wird ein Wert √ºber eine Eingabeaufforderung eingelesen, so wird dies im Struktogramm mit einem Parallelogramm angezeigt, wobei auch die Variable, welcher das Resultat zugewiesen wird, festgehalten wird: gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') Aufgabe 1 - BMI √úbersetzen Sie das folgende Struktogramm in Python Code: gr√∂sse = Wie gross bist du [m]? gewicht = Wie schwer bist du [kg]? bmi = gewicht geteilt durch gr√∂sse mal gr√∂sse Ausgabe: BMI: bmi bmi.py Hinweis Was ist die Bedeutung des folgenden Fehlers? TypeError: Can't multiply sequence by non-int of type 'str' ‚Üí Der eingegebene Text kann nicht multipliziert werden - zuerst m√ºssen gewicht und gr√∂sse in Dezimalzahlen (float) umgewandelt werden: gewicht = float(gewicht). SSR Aufgabe 2 ‚Äì n-Eck Nach Eingabe der Anzahl Ecken in einer Eingabebox soll die Turtle ein regelm√§ssiges n-Eck zeichnen. Beispielsweise wird nach der Eingabe 8 ein 8-Eck gezeichnet. Den passenden Drehwinkel soll das Programm berechnen. n-eck.py from turtle import * SSR Aufgabe 3 Nach der Eingabe eines Winkels in einer Eingabebox zeichnet die Turtle 30 Strecken der L√§nge 100, wobei sie nach jeder Strecke um den gegebenen Winkel nach links dreht. Experimentieren Sie mit verschiedenen Winkeln und zeichnen Sie sch√∂ne Figuren. Mit speed(10) k√∂nnen Sie das Zeichnen beschleunigen. star.py from turtle import * SSR","keywords":""},{"title":"Autokorrektur","type":0,"sectionRef":"#","url":"/26e/Texte/autokorrektur","content":"Autokorrektur Ein n√ºtzliches und m√§chtiges Feature von Word ist die Rechtschreibkorrektur. Hervorgehobene Fehler in Word Word unterschiedet zwei Fehlertypen: Rechtschreibung Tippfehler oder falsch geschriebene W√∂rter werden rot mit einer gewellten Linie unterstrichen Grammatik Fehler in der Grammatik (bspw. Satzstellung, fehlende Kommas etc) werden blau mit einer gewellten Linie unterstrichen. Um einen Fehler zu korrigieren, k√∂nnen mit Rechtsklick die Verbesserungsvorschl√§ge angesehen werden. Autokorrektur aktivieren Die Autokorrektur ist f√ºr die Rechtschreibefehler standardm√§ssig aktiviert. Bei den Grammatikfehlern ist die √úberpr√ºfung aber nicht immer aktiv: Sie sollte unbedingt unter Datei &gt; Optionen &gt; Dokumentpr√ºfung aktiviert werden! Grammatikfehler w√§hrend der Eingabe markieren Sprache‚Äã Nat√ºrlich muss Word wissen, in welcher Sprache ein Text verfasst wird. Word versucht f√ºr jeden Abschnitt zu erraten, um was f√ºr eine Sprache es sich handelt. Dies gelingt aber nicht immer automatisch und gerade &quot;Deutsch (Schweiz)&quot; oder &quot;Deutsch (Deutschland)&quot; ist f√ºr Word schwer zu unterscheiden. Die Sprache kann unten links umgestellt werden - Absatzweise oder auch nur f√ºr aktuell markierten Text. Dies ist dann n√ºtzlich, wenn Zitate oder W√∂rter einer anderen Sprache verwendet werden. Sprache √§ndern in Word Sprache √§ndern Fehler finden Datei Texte mit Fehlern.docx √Ñndern Sie f√ºr die verschiedenen Abschnitte und W√∂rter die richtige Sprache und korrigieren Sie mithilfe der Rechtschreibkorrektur alle Fehler im Dokument. Zeigen Sie das Resultat Ihren Pultnachbar:innen und helfen Sie einander gegenseitig.","keywords":""},{"title":"8. Bedingte Ausf√ºhrung ‚ëÇ","type":0,"sectionRef":"#","url":"/26e/Programmieren-1/Turtlegrafik/verzweigung","content":"8. Bedingte Ausf√ºhrung ‚ëÇ Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. In Programmen m√∂chten wir w√§hrend der Ausf√ºhrung des Programms entscheiden k√∂nnen, ob Befehle ausgef√ºhrt werden oder nicht. Auch m√∂chten wir entscheiden k√∂nnen, ob eine Wiederholung abgebrochen werden soll. Vergleichen‚Äã Um zu entscheiden, ob Befehle ausgef√ºhrt werden sollen, wird immer eine eine Frage gestellt, die eindeutig mit &quot;Ja&quot; oder &quot;Nein&quot; beantwortet werden kann. Wird die Frage mit &quot;Ja&quot; beantwortet, so ist diese Aussage Wahr und die Bedingung ist erf√ºllt. Andernfalls ist die Aussage Falsch und die Bedingung ist nicht erf√ºllt. Ein Frage kann als Vergleich geschrieben werden. Beispielsweise wird die Frage &quot;Ist 4 kleiner als 2?&quot; als 4 &lt; 2 aufgeschrieben. Die offensichtliche Antwort ist &quot;Nein&quot; und entspricht in Python dem Wert False. Spannender sind vergleiche, wenn diese mit Variablen durchgef√ºhrt werden, da man nicht schon im Voraus weiss, welcher Wert in einer Variable enthalten ist. Die Frage von &quot;Ist x kleiner als 2&quot; (x &lt; 2) h√§ngt also davon ab, welcher Wert zur Zeit in der Variable x gespeichert ist. alter = Wie alt bist du? Ist das alter kleiner als 14? Ausgabe: Du darfst Velo fahren Sonst, ist das alter kleiner als 16? Ausgabe: Du darfst T√∂ffli fahren Sonst, ist das alter kleiner als 18? Ausgabe: Du darfst Roller fahren Sonst Ausgabe: Du darfst Auto fahren alter = int(input('Wie alt bist du?')) if alter &lt; 14: print('Du darfst Velo fahren') elif alter &lt; 16: print('Du darfst T√∂ffli fahren') elif alter &lt; 18: print('Du darfst Roller fahren') else: print('Du darfst Auto fahren') In Python k√∂nnen alle √ºblichen Fragen als Vergleiche von zwei Werten geschrieben werden. Name\tMathematisch\tPythongr√∂sser\t&lt;\\lt&lt;\t&lt; kleiner\t&gt;\\gt&gt;\t&gt; gr√∂sser\t‚â§\\leq‚â§\t&lt;= kleiner\t‚â•\\geq‚â•\t&gt;= gleich\t======\t== ungleich\t‚â†\\neqÓÄ†=\t!= Achtung Bei der √úberpr√ºfung auf Gleichheit werden zwei Gleichheitszeichen == geschrieben. Ausgabefenster‚Äã In Python lassen sich Ausgaben nicht nur mit print sondern auch mit dem Befehl alert() (aus der Bibliothek browser) in einer Ausgabebox anzeigen. Die Ausgabe mit alert wird hier verwendet, weil die Online-Version von Python die Ausgaben mit print erst am Ende des Programms anzeigt wird. Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Zufallszahlen erraten‚Äã Ratespiel Probieren Sie das Ratespiel aus: Ratespiel Starten Beschreiben Sie in eigenen Worten, wie das Ratespiel funktioniert. Zeichnen Sie mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. Schreiben Sie gem√§ss dem Struktogramm das Ratespiel in Python. ratespiel.py from browser import alert from random import randint Hinweis Wenn die Zahl gefunden wurde, soll die Spieler:in nicht mehr nach einer Eingabe gefragt werden. Mit dem Befehl break kann die Wiederholung abgebrochen werden. break Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus. SSR","keywords":""},{"title":"Dateiformat","type":0,"sectionRef":"#","url":"/26e/Texte/dateiverwaltung","content":"Dateiformat Jeder Computer hat ein Dateisystem, welches Dateien organisiert und auffindbar macht. Die Anleitung, wie eine Datei gefunden werden kann, heisst Dateipfad. Eine Datei besitzt einen Namen und ein Dateiformat. Die Dateiendung beschreibt das Dateiformat und gibt Auskunft √ºber die Art von Daten, welche in einer Datei enthalten sind. So weiss Ihr Betriebssystem bspw. mit welchem Programm eine Datei ge√∂ffnet werden soll. Ein Word-Dokument hat die Dateiendung .docx. C:\\Users\\reto\\OneDrive - EDUBERN\\Informatik\\01-Word\\dokument.docx ‚îî‚î¨‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îò | Ordner OneDrive | Dateiformat Laufwerk Dateiname Wenn Sie in Word ein Dokument abspeichern, gibt es im wesentlichen zwei M√∂glichkeiten, die zum selben Ziel f√ºhren: das Dokument direkt auf OneDrive Speichern. Die Navigation zum richtigen Ordner kann etwas tr√§ge sein, da die Ordnerstruktur √ºbers Internet direkt von OneDrive geladen wird. das Dokument wird auf dem Computer gespeichert - alle M√∂glichkeiten stehen offen - Sie k√∂nnen nach wie vor einen Ordner auf OneDrive ausw√§hlen. Sofern ein OneDrive Ordner ausgew√§hlt wurde, wird das Dokument automatisch synchronisiert. Gemeinsames Arbeiten‚Äã Ein auf OneDrive gespeichertes Word-Dokument kann zur gemeinsamen Bearbeitung (z.B. f√ºr eine Gruppenarbeit) freiegegeben werden. Bei der Freigabe m√ºssen Sie entscheiden, ob das Dokument nur betrachtet, oder auch bearbeitet werden darf: Bearbeitungsoptionen beim Teilen Linkeinstellungen f√ºr Ordner Link Kopieren üìã Erfahrungsgem√§ss funktioniert das Freigeben von Dokumenten am zuverl√§ssigsten und am schnellsten, wenn der Link kopiert und per Teams verschickt wird. Die E-Mails bleiben manchmal etwas l√§nger in einer Warteschleife bei Edubern h√§ngen. Beachten Sie, dass f√ºrs Kopieren eines Links die Link-Einstellungen auf Jeder mit dem Link bzw. Personen bei EDUBERN mit dem Link gew√§hlt werden muss. Gemeinsames Arbeiten an einem Dokument Gemeinsame Bearbeitung der Men√ºs f√ºrs Klassenlager. Namen bei Ihrer Gruppe eintragen Men√º-Vorschlag festhalten Bild vom Men√º suchen und einf√ºgen","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/26e/Texte/pruefung","content":"Lernziele Dauer 45 Minuten Benotung Die Note z√§hlt 0.50.50.5 Hilfsmittel Laptop, Openbook, ohne Kommunikation untereinander Pr√ºfungsstoff Sie k√∂nnen ein Word-Dokument erstellen und unter einem vorgegebenen Namen abspeichern. Sie k√∂nnen ein Word-Dokument als PDF exportieren. Sie wissen was eine Formatvorlage ist und k√∂nnen diese ver√§ndern und anpassen (Nummerierung, Linker Einzug, Absatz, Schrfitgr√∂sse, Schriftart, Schriftfarbe...) Sie wissen wie ein Word-Dokument aufgebaut ist und welche Elemente auf den drei Strukturebenen (Abschnitt, Absatz, Zeichen) formatiert werden k√∂nnen Sie k√∂nnen Text aus dem Internet per Copy&amp;Paste in ein Word-Dokument einf√ºgen. Sie verwenden Einz√ºge (linker/rechter Einzug, Erstzeileneinzug) sowie Tabulatoren + Tabstops um die gew√ºnschte Dokumentstruktur zu erreichen. Sie wissen wie man Bilder einf√ºgt, zentriert und mit einer nummerierten Bildunterschrift erg√§nzt. Sie f√ºgen automatisch erzeugte Inhaltsverzeichnisse ein. Sie f√ºgen automatisch erzeugte Bildverzeichnisse ein. Sie k√∂nnen Kopf- und Fusszeilen einf√ºgen. Sie k√∂nnen Seitennummerierungen einf√ºgen. Sie k√∂nnen die Textausrichtung (Links-/Rechtsb√ºndig, zentriert oder Blocksatz) einstellen und die automatische Silbentrennung aktivieren.","keywords":""},{"title":"√úbung","type":0,"sectionRef":"#","url":"/26e/Texte/Uebung","content":"√úbung Oft kommt es vor, dass mehrere Texte unterschiedlicher Quellen in ein Word-Dokument kopiert werden. Dabei ist es nervend, wenn auch spezielle Formatierungen oder sonderzeichen kopiert werden. Um nur den Inhalt einzuf√ºgen, kann in Word √ºber Einf√ºgen &gt; Nur den Text einf√ºgen nur der pure Text und ohne Formatierungen √ºbernommen werden. Nat√ºrlich werden dann Bilder nicht eingef√ºgt. Alternativ kann auch alles eingef√ºgt werden und im Anschluss k√∂nnen bei ausgew√§hltem Text jegliche Formatierungen gel√∂scht werden. Aufgabe Erstellen Sie ein Word-Dokument auf OneDrive mit dem Namen 03-onlinesucht.docx. Kopieren Sie den untenstehenden Text inkl. der Bilder und formatieren Sie das Dokument gem√§ss der Vorlage. Sind Angaben nicht n√§her spezifiziert, w√§hlen Sie selber eine Formatierung, die der Vorlage m√∂glichst nahe kommt. Onlinesucht Informationen zu den Risiken und Auswirkungen von √ºberm√§ssigem Internetgebrauch Quelle: https://www.safezone.ch/de/suechte-und-substanzen/onlinesucht Mit Onlinesucht oder Internetsucht wird ein √ºberm√§ssiger Gebrauch von Diensten, Inhalten oder Apps des Internets bezeichnet, welcher durch Kontrollverlust gekennzeichnet ist. Es handelt sich um eine nicht-stoffgebundene Abh√§ngigkeit, d.h. eine Abh√§ngigkeit, die nicht auf den Konsum einer Substanz wie Tabak, Alkohol oder eine illegale Droge bezogen ist. Dabei sind es vor allem drei Bereiche des Internets, die zu einer Internetabh√§ngigkeit f√ºhren k√∂nnen: Online-Computerspiele, Kommunikationsplattformen (z.B. soziale Netzwerke) und Webseiten mit sexuellem und pornographischem Inhalt. Inhaltsverzeichnis Wann wird √ºberm√§ssiger Internetgebrauch zu einer Internetabh√§ngigkeit? Eine Person mit Onlinesucht kann ihren Internetgebrauch nicht mehr kontrollieren und sie wendet zunehmend mehr Zeit f√ºr das Internet auf. Bestimmte Inhalte oder Apps im Internet werden zum Mittelpunkt des Interesses, andere oder vorherige Interessen gehen verloren. Dies kann auch zu einer √ºberm√§ssigen Nutzung von Smartphones oder anderen internetf√§higen, mobilen Ger√§ten f√ºhren, mit Hilfe derer auf die gesuchten Inhalte zugegriffen oder online in sozialen Netzwerken kommuniziert wird. Es besteht ein un√ºberwindbares Verlangen nach internetbasierten Angeboten, die Nichtnutzung f√ºhrt zu Nervosit√§t und Entzugserscheinungen. Trotz negativer Folgen werden sie weiter genutzt oder konsumiert. Eine internets√ºchtige Person zieht sich von anderen Menschen zur√ºck und l√§sst Beziehungen abbrechen. Sie ist bis weit in die Nacht online, sodass sich der Tag-Nacht-Rhythmus ver√§ndert und sich eine √ºberm√§ssige M√ºdigkeit einstellt. Zeit im Internet zu verbringen kann auch eine Strategie sein, um unangenehme Gef√ºhle oder Stress zu vermeiden. Nicht alle diese Anzeichen m√ºssen bei einer Onlinesucht vorhanden sein. Eine Onlinesucht kann aber auch nicht allein aufgrund einer bestimmten t√§glichen Nutzungsdauer des Internets festgestellt werden - entscheidend ist der Verlust der Kontrolle √ºber die Internetnutzung. Eine Internetabh√§ngigkeit bringt biochemische Ver√§nderungen im K√∂rper mit, welche zur Sucht f√ºhren. Wie bei einer Drogenabh√§ngigkeit kommt es auch bei der Onlinesucht zu Ver√§nderungen im Belohnungszentrum des Gehirns, sodass der onlines√ºchtigen Person allt√§gliche Belohnungssituationen allein nicht mehr ausreichen. Beeinflussen Geschlecht und Alter die Entwicklung einer Onlinesucht? Jugendliche haben ein erh√∂htes Risiko f√ºr eine Internetabh√§ngigkeit oder Smartphone-Sucht, da die Gehirnregion, die f√ºr die Steuerung des Verhaltens und der Emotionen zust√§ndig ist, noch nicht vollst√§ndig entwickelt ist. Frauen zeigen √∂fter eine √ºberm√§ssige Nutzung der Onlinekommunikation sowie sozialen Netzwerken, w√§hrend M√§nner h√§ufiger Probleme mit der √ºberm√§ssigen Nutzung von pornographischen Seiten (Online-Sexsucht) sowie Online-Computerspielen (Computerspielsucht) haben. Im Vergleich zur Allgemeinbev√∂lkerung weisen Personen mit einer Onlinesucht h√§ufiger eine Depression auf, sie sind introvertierter und haben ein geringeres Selbstwertgef√ºhl. Eine Cannabisabh√§ngigkeit kommt bei Onlines√ºchtigen gleich h√§ufig vor wie in der Allgemeinbev√∂lkerung; Personen, die Kokain und Cannabis konsumieren, sind jedoch h√§ufiger von Phasen der Onlinesucht betroffen. Wir sind in einer anonymen Online-Beratung f√ºr Sie da. Zur Online-Beratung Langzeitfolgen von Internetabh√§ngigkeit Eine Onlinesucht kann zur Beeintr√§chtigung der sozialen Beziehungen und der schulischen oder beruflichen Leistungen f√ºhren. Einige Nutzungsformen k√∂nnen auch grosse finanzielle Probleme mit sich bringen. Mitunter wird auch die k√∂rperliche Gesundheit gesch√§digt. So kann es z. B. zu Haltungssch√§den, zu Problemen wegen eines gest√∂rten Essverhaltens, zu Kopfschmerzen und Sehproblemen kommen. Weiterf√ºhrende Informationen zu Internetgebrauch und Onlinesucht Zahlen und Fakten zu Internetnutzung und Onlinesucht: https://zahlen-fakten.suchtschweiz.ch; https://monam.chBeratung und Therapie bei Onlinesucht: https://spielsucht-radix.ch","keywords":""},{"title":"","type":0,"sectionRef":"#","url":"/26P/BYOD","content":"Zeit 5 Minuten Vorbereitung, 5 Minuten Pr√ºfung Szenarien 10 Szenarien aus den Pr√ºfungsfragen Note Halb z√§hlende Note Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/26P/BYOD/betriebssystem","content":"Betriebssystem Globale Suche‚Äã Windows 11Windows 10macOS Startmen√º mit √∂ffnen und direkt mit Tippen beginnen. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. Windows 11Windows 10macOS Video","keywords":""},{"title":"Textaufbau in Word","type":0,"sectionRef":"#","url":"/26e/Texte/dokumentstruktur","content":"Textaufbau in Word Vorgehen Theorie durchlesen - √ºberlegen Sie sich nach jedem Abschnitt, ob Ihnen die Inhalte bekannt vorkommen und ob Sie sich zutrauen, diese Schritte selber durchzuf√ºhren. Markieren Sie in bei jedem Abschnitt, wie git Sie die Inhalte verstanden haben. So k√∂nnen einzelne Themen im Plenum vorgef√ºhrt werden. Bearbeiten Sie die untenstehende Aufgabe Wenn Sie fertig sind, zeigen Sie das Resultat Herrn Hofer Drei Strukturebenenen‚Äã Ein Word-Dokument kennt drei verschiedene Strukturebenenen: Abschnitt Absatz Zeichen Auf jeder Strukturebene lassen sich unterschiedliche Formatierungen vornehmen. Abschnitt‚Äã In einem Abschnitt wird das grundlegende Erscheinungsbild vorgegeben. Ausrichtung Format Spalten (Text auf mehrere Spalten verteilen) Seitenr√§nder Seitenzahlen Unter Layout lassen sich viele Abschnitt-Einstellungen vornehmen und auch Abschnitt-Umbr√ºche einf√ºgen. Jeder Abschnitt kann unabh√§ngig vom Vorhergehenden/Nachfolgenden konfiguriert werden. Im Beispiel oben werden also zwei Fortlaufende Umbr√ºche (Umbr√ºche &gt; (Abschnittumbr√ºche) &gt; Fortlaufend) eingef√ºgt, damit kein Seitenwechsel passiert. So lassen kann in einem Abschnitt vorgegeben werden, dass er in Spalten Aufgeteilt werden soll. Im Speziellen bei mehreren Spalten kann auch eine Spaltenumbruch eingef√ºgt werden. Durch Klicken auf den rot eingef√§rbten Pfeil k√∂nnen zudem weitere Einstellungsm√∂glichkeiten angezeigt werden. Silbentrennung‚Äã Die Silbentrennung erm√∂glicht es, W√∂rter automatisch an geeigneter Stelle zu trennen, wenn dadurch der Verf√ºgbare Platz auf einer Zeile besser genutzt werden kann. Das Layout wirkt dadurch aufger√§umter und das Lesen ist angenehmer. Diese Option muss jedoch von Hand unter Layout &gt; Silbentrennung auf Automatisch gesetzt werden. Absatz‚Äã Ein Absatz entsteht, wenn eine neue Zeile mit der Enter-Taste eingef√ºgt wird. EIn Absatz wird grunds√§tzlich gem√§ss der zugewiesenen Formatvorlage formatiert. Diese Einstellungen k√∂nnen aber auch in jedem Absatz angepasst werden. Formatvorlagen‚Äã Mit einer Formatvorlage k√∂nnen Struktur- und Darstellungsinformationen zusammengefasst werden. Strukturinformationen beziehen sich auf die Art des Absatzes - ist es eine √úberschrift, eine Unter√ºberschrift, ein normaler Text oder ...? Durch das Hinterlegen dieser Strukturinformationen kann Word bspw. automatisch die √úberschriften nummerieren oder automatisch ein Inhaltsverzeichnis generieren. Da auch Darstellungsinformationen hinterlegt werden k√∂nnen, wird ein Dokument einheitlich und ohne viel Aufwand formatierbar. F√ºr die √Ñnderung der Schriftgr√∂sse von allen √úberschriften muss dann nur die Formatvorlage angepasst werden und nicht jede einzelne √úberschrift. Es gibt vordefinierte Formatvorlagen, die einem Absatz zugewiesen werden k√∂nnen: Die Formatvorlagen k√∂nnen auch nach den eigenen W√ºnschen angepasst werden: tip Erstellen Sie keine neuen Formatvorlagen f√ºr √úberschriften sonder passen Sie die vorhandenen Vorlagen an. So funktioniert die Nummerierung und das automatische Inhaltsverzeichnis ohne weitere Konfiguration. Formatierungen‚Äã Tabstopps ‚îó ‚îª ‚îõ der Cursor springt beim Dr√ºcken der Tabulator-Taste bis zu diesem Tabstopp. Die Ausrichtung bestimmt, wie der Tabulator-Text ausgerichtet wird: ‚îó ‚îª ‚îõ Die Ausrichtung kann durch Doppelklicken auf den Tabstopp ge√§ndert werden. Linker Einzug ‚ßã Der gesamte Absatz wird einger√ºckt. Erstzeileneinzug ‚ñΩ Die erste Zeile eines Absatzes kann eigens kontrolliert werden. tip Unter Ansicht &gt; Anzeige kann das Lineal eingeblendet werden. Textausrichtung (Links, Zentriert, Rechts, Blocksatz) Auflistungen Rahmen Zeilenabstand (der Zeilenabstand innerhalb eines Absatzes) Absatzabstand (der Abstand zum vorherigen/n√§chsten Absatz) Men√ºband Start Men√ºband Layout tip Ein Zeilenumbruch im selben Absatz kann mit Shift+Enter erzeugt werden. Zeichenformat‚Äã Einzelne W√∂rter und Buchstaben/Zeichen lassen sich individuell formatieren. So kann etwa festgelegt werden, ob ein Zeichen kursiv, fett oder unterstrichen dargestellt werden kann. Zeichenformat ‚â†\\neqÓÄ†= √úberschrift Ertappen Sie sich dabei, Titel oder Untertitel mit der Zeichenformatierung zu machen, sollte bei Ihnen im Kopf eine Warnleuchte angehen üí° - hier sollen Formatvorlagen verwendet werden, damit Strukturinformationen hinterlegt werden k√∂nnen. Umformatierungen oder auch Inhaltsverzeichnisse sind nur mit diesen Formatvorlagen automatisiert m√∂glich. Einf√ºgen‚Äã Beim Einf√ºgen von kopiertem Text, bspw. von einer Website, werden auch die Zeichenformate mitkopiert (z.B. Links werden dann farbig angezeigt...). Dies ist nicht immer erw√ºnscht und teilweise soll nur der Text √ºbernommen werden. Dann kann √ºber die Einf√ºge-Optionen Nur den Text √ºbernehmen ausgew√§hlt werden: √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex01-what-is-programming.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã","keywords":""},{"title":"Nummerierung und Bilder","type":0,"sectionRef":"#","url":"/26e/Texte/nummerierung","content":"Nummerierung und Bilder In diesem Abschnitt lernen Sie, wie In Word Seiten √úberschriften Abbildungen nummeriert werden und wie auf solche nummerierten Elemente verwiesen werden kann. Seitenzahlen‚Äã Das Kopf- und Fusszeilen Men√º √∂ffnen (Doppelklick in den untersten Bereich eines Blattes, oder im Suchfeld &quot;Fusszeile&quot; eingeben). Soll die erste Seite (bspw. Titelblatt) keine Seitenzahl erhalten, so kann das H√§ckchen &quot;Erste Seite Anders&quot; angew√§hlt werden: √úber die Option &quot;Seitenzahle formatieren...&quot; kann bspw. das Seitenzahlformat (z.B. r√∂mische Zahlen) oder der Startwert festgelegt werden. Die erste Seite, auch wenn &quot;Erste Seite Anders&quot; ausgew√§hlt ist, z√§hlt bei der Nummerierung auch dazu. Die Nummerierung muss also bei 0 starten, wenn die Seite nach dem Titelblatt die Seitenzahl 1 erhalten soll. √úberschriften Nummerieren‚Äã Um √úberschriften automatisiert nummerieren zu lassen, m√ºssen die √úberschriften als solche gekennzeichnet werden. Dies wird √ºber die Zuweisung einer Formatvorlage erreicht (Formatvorlagen) Die Formatvorlage f√ºr eine √úberschrift kann ge√§ndert und √ºber Format &gt; Nummerierung eine Nummerierung hinzugef√ºgt werden. Geschachtelte Nummerierung‚Äã Soll eine verschachtelte Nummerierung eingef√ºgt werden, muss zuerst der √úberschrift 1 eine einfache Nummerierung (wie oben) hinzugef√ºgt werden der Cursor im √úberschriften-Text fokussiert werden √úber die &quot;Liste mit mehreren Ebenen&quot; die verschachtelte Nummerierung eingef√ºgt werden Automatisches Inhaltsverzeichnis‚Äã Ein grosser Vorteil von zugewiesenen FOrmatvorlagen ist das Erzeugen von Verzeichnissen. Da Word nun &quot;weiss&quot;, was einer √úberschrift entspricht, lassen sich bspw. Inhaltsverzeichnisse autmatisch generieren und auf Knopfdruck auch aktualisieren. Bilder‚Äã Layoutoptionen‚Äã √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex02-machine-learning.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã Alles ausser die Bilder‚Äã ‚Äã Bilder, Bildverzeichnisse, Querverweise‚Äã","keywords":""},{"title":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung","type":0,"sectionRef":"#","url":"/26P/BYOD/material_python","content":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung ‚¨á Download BYOD Material Alle Python-Bezogenen Aufgabe sollen direkt auf dieser Seite gemacht werden. hello__world.py print(&quot;Hello World! It's a beautiful Day.&quot;) create__mesh.py from turtle import * from math import sqrt import random SQRT3 = sqrt(3) COLORS = ['red', 'blue', 'orange', 'green', 'purple', 'brown'] speed(7) for index_x in range(5): for index_y in range(5): x = index_x * 30 if index_y % 2 == 1: x = x - 15 y = index_y * 15 * SQRT3 penup() goto(x, y) pendown() for i in range(3): color(random.sample(COLORS, 1)[0]) forward(30) left(120) klammern.py ","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/26P/BYOD/dateiexplorer","content":"Dateiexplorer Windows 11Windows 10macOS Dateiexplorer Ansichten‚Äã Windows 11Windows 10macOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã Sie k√∂nnen Dateien in einem Ordner nach unterschiedlichen Kriterien sortieren. Im Downloads Ordner ist etwa die Sortierung nach dem Erstelldatum sinnvoll, bei Aufr√§umarbeiten wo die gr√∂ssten Dateien gel√∂scht werden sollen, die Gr√∂sse oder beim Aufsuchen eines Bildes (oder eines anderen spezifischen Dateityps) das Sortieren nach dem Dateityp (bzw. nach der Art). Standardm√§ssig wird nach dem &quot;Namen&quot; sortiert. Windows 11Windows 10macOS Einige Kriterien (wie das Erstelldatum) wird nicht automatisch verf√ºgbar und m√ºssen zuerst noch aktiviert werden: rechtskick &gt; Sortieren nach &gt; Mehr... &gt; Erstelldatum Video Ordner Erstellen‚Äã Ein Ordner gruppiert mehrere Dateien an einem Ort. Eine Datei in einem Ordner besitzt den Ordnernamen im Dateipfad. Sie k√∂nnen einen neuen Ordner mit einem gew√ºnschten Namen erstellen: √ºber das Kontextmen√º √ºber das Men√ºband Windows 11Windows 10macOS Variante Kontextmen√º Variante Men√ºband Dokumente verschieben‚Äã Sie k√∂nnen Dateien zwischen verschiedenen Ordnern, die allenfalls auf unterschiedlichen Laufwerken liegen, verschieben. per Drag &amp; Drop (mit der Maus Packen und in einen anderen Ordner ziehen und loslassen) oder per Copy &amp; Paste (Ausschneiden/Kopieren und anschliessendes Einf√ºgen) Windows 11Windows 10macOS Ausschneiden &amp; Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dateien und Dokumente umbenennen‚Äã Windows 11Windows 10macOS √úbers Men√ºband √úbers Kontextmen√º: rechtskick &gt; Umbenennen Mit F2 (je nach Tastatur auch Fn+F2) Komprimierte Dateien .zip‚Äã Dateien k√∂nnen komprimiert werden - sie brauchen dann weniger Speicherplatz auf Ihrem Ger√§t, k√∂nnen im Gegenzug aber nicht mehr bearbeitet werden (ausser Sie entpacken die Dateien wieder). Als Analogie wird in der Informatik ein Reissverschluss verwendet, welcher durch das Zumachen Platz einspart. Deshalb das englische Wort Zip f√ºr Zipper f√ºr komprimierte Dateien. Reissverschluss (Zipper) Komprimieren‚Äã Die gew√ºnschten Dateien Ausw√§hlen und anschliessend komprimieren. Das Symbol f√ºr einen komprimierten Ordner weist oft einen Reissverschluss auf. ZIP Datei Windows 11Windows 10macOS Video Entpacken‚Äã Windows 11Windows 10macOS Video","keywords":""},{"title":"8. Sehsterne","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Sehsterne","content":"8. Sehsterne @ Sehsterne (das sind Seesterne mit Augen) kennen nur die f√ºnf Buchstaben A ,C, I, N, T, die sie auf einem gesunkenen Schiff entdeckt haben. Alle W√∂rter setzen sie aus diesen Buchstaben zusammen. ACINT-Code‚Äã Die Sehsterninformatiker haben eine bin√§ren Code f√ºr ihr Alphabet entwickelt, den sie ACINT-Code nennen: 1. ACINT Decodieren Sie die folgende Nachricht: ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÖ ‚òÖ‚òÜ‚òÖ ‚òÜ‚òÖ‚òÖ SSR Codieren Sie die folgende Nachricht in ACINT-Code: A CAT CAN ACT SSR @ Geb√§rdensprache‚Äã Die Sehsterne haben keinen Mund. Sie kommunizieren, indem sie nacheinander f√ºr jeden Buchstaben den entsprechenden Arm heben. Eines Tages entdecken die Sehsterne ein weiteres gesunkenes Schiff mit f√ºnf neuen Buchstaben: E, H, J, M, R. 2. Geb√§rdensprache Schlagen Sie den Sehsternen ein System vor, wie sie alle zehn Buchstaben durch Heben der f√ºnf Arme darstellen k√∂nnen. SSR Wie viele unterschiedliche Buchstaben k√∂nnen Sehsterne maximal durch heben der f√ºnf Arme darstellen? SSR @ Erweiterter ACINT-Code‚Äã Die Sehstern-Informatiker m√∂chten einen neuen bin√§ren Code entwickeln, um die neuen Buchstaben darstellen zu k√∂nnen. Der neue Code soll aber kompatibel mit dem bisherigen ACINT-Code sein. 3. Erweiterung ACINT-Code Machen Sie einen Vorschlag f√ºr einen solchen Code. SSR ‚≠êÔ∏è Gesunkenes Schiff (Bonus)‚Äã 4. Gesunkenes Schiff Wie lautet der Name des ersten gesunkenen Schiffs? SSR","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/26P/BYOD/navigation","content":"Systemnavigation Wichtige Tasten und ihre Namen‚Äã Windows 11Windows 10macOS , Win Windows-Taste , Shift Umschalttaste Alt Wahltaste Ctrl Control-Taste , Feststelltaste (oder Caps-Lock-Taste) Bezweckt, dass alle Buchstaben gross geschrieben werden - auch Umlaute! Tabulator-Taste Zweck: Springt zur n√§chsten Spalte oder r√ºckt den Cursor in Fliesstext ein. Escape-Taste Zweck: springt aus dem aktuellen Kontext heraus (bspw. die aktuelle Auswahl aufheben) Fn Funktionstaste Hilfreiche Tastaturk√ºrzel (Tasten Shortcuts)‚Äã Windows 11Windows 10macOS Ctrl + X Ausschneiden Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl + C Kopieren Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl + V Einf√ºgen Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl + Z R√ºckg√§ngig machen - Den vorherigen Befehl widerrufen. Shift + Ctrl + Z Widerrufen das Umgekehrte von Ctrl + Z: um den Widerrufen-Befehl umzukehren. Ctrl + A Alle Objekte ausw√§hlen. Ctrl + F Finden Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl + P Drucken Das aktuelle Dokument drucken. Ctrl + S Speichern Das aktuelle Dokument speichern. Ctrl + T Tabs Einen neuen Tab √∂ffnen. + Tabulatortaste Alle ge√∂ffneten Apps anzeigen. Alt + Tabulatortaste Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift + Enter Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) + . Emoji √ñffnet die Emoji-Liste Quizz L√∂sen Sie das Quizz und markieren Sie die Aufgabe anschliessend als erledigt. Pfeiltasten‚Äã Windows 11Windows 10macOS Shift + Pfeiltasten Text ausw√§hlen Ctrl + Pfeiltasten ganze W√∂rter √ºberspringen Ctrl + Shift + Pfeiltasten ganze W√∂rter selektieren + Pfeiltasten Fenster auf dem Bildschirm anordnen Weitere M√∂glichkeiten f√ºrs Anordnen von Fenstern Shortcuts Tastatur&amp;Pfeiltasten ausprobieren Probieren Sie die verschiedenen Shortcuts im untenstehenden Textfeld aus! Klammern‚Äã Windows 11Windows 10macOS ( Shift + 8 ) Shift + 9 { Normalerweise Alt Gr + √§ } Normalerweise Alt Gr + $ [ Normalerweise Alt Gr + √º ] Normalerweise Alt Gr + ! Klammern schreiben Versuchen Sie, alle Klammern selber zu tippen! Weitere g√§ngige Zeichen‚Äã Windows 11Windows 10macOS ` Shift + ^ + Leerschlage (Backtick) @ Alt Gr + 2 # Alt Gr + 3 * Shift + 3 * Shift + 3 % Shift + 5 &amp; Shift + 6 / Shift + 7 \\ ctrl + alt + &lt; oder Alt Gr + &lt; &lt; &lt; &gt; Shift + &lt; Sonderzeichen K√∂nnen Sie die obigen Sonderzeichen selber erzeugen? Quizz Werden Sie Million√§r? ü§ëüí∞ü§ëüí∞ü§ëüí∞ üåü Arcade Game (englisch) Freiwillig: Spielen Sie das Tastenk√ºrzel-Game üëâ https://mattshaw.org/projects/shortcutgame/ Link √ñffnen‚Äã Links in bspw. in Word/Powerpoint √∂ffnen Link auf einer Webseite in einem neuen Tab √∂ffnen ... Cmd + Click Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. Windows 11Windows 10macOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werden. Windows 11Windows 10macOS Scrollen‚Äã Windows 11Windows 10macOS Alle Programme Anzeigen‚Äã Windows 11Windows 10macOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen, so dass Sie ge√∂ffnete Programme √ºbersichtlicher ordnen k√∂nnen. Dank virtueller Desktops k√∂nnen Programme aufgeteilt werden, um mehr √úberblick in der Taskleiste und auf den jeweiligen Desktops zu haben. Durch einfaches Drag &amp; Drop k√∂nnen Programme von einem auf den anderen Desktop verschoben werden. Bei der Ordnung zwischen Freizeit, Arbeit, Uni etc. helfen virtuelle Desktops. So k√∂nnen Ihre Gedanken, Projekte und Aufgaben thematisch gruppiert werden. Erstellen‚Äã Windows 11Windows 10macOS Virtuelle Desktops: Mit +Tabulator alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* Windows 11Windows 10macOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. Windows 11Windows 10macOS Weitere Gesten hier","keywords":""},{"title":"√úbungen UTF-8","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Uebungen","content":"√úbungen UTF-8 1. Wie viele Zeichen? Wie viele Zeichen sind in folgender bit-Squenz codiert? 11100010 10011101 10000000 01000110 11010011 10111111 11110110 10011010 10101010 10001111 00010010 2. UTF-8 Decodieren Folgende bit-Sequenzen sind UTF-8 Codiert. Welche Dezimalzahlen sind codiert? 11000010 10011001 11100001 10000000 10001111 3. UTF-8 Codieren Codieren Sie folgende bit-Sequenz zu UTF-8: 1100 10010101 10010110 Codieren Sie die Zahl 260 zu UTF-8: 4. UTF-8 Emojis Codieren Sie drei Weihnachts-Emojis zu UTF-8: Verwenden Sie Python, um die Ordnungszahl der Emojis herauszufinden. Wandeln Sie die Ordnungszahlen ins Bin√§re um (auch hier darf Python verwendet werden) Codieren Sie die Bin√§rzeichen-Kette zu UTF-8 und halten Sie das Resultat fest. Probieren Sie Ihre L√∂sung im UTF-8 Decodier-Modus Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin","keywords":""},{"title":"1. Begriff","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Begriff","content":"1. Begriff Aufgabe Wo befindet sich der Ort k√∂nigin.gesehen.damals? Verwenden Sie die Seite what3words.com. Bei welchen drei W√∂rtern wohnen Sie? In welchen Situationen ist dieser Code vorteilhafter als eine Adresse? Code Information Unter einer Information versteht man ¬´das Wissen, das ein Sender einem Empf√§nger √ºber einen Informationskanal √ºbermittelt¬ª.[1] Daten Daten sind Zeichen oder Symbole, die Informationen darstellen. Daten k√∂nnen gesendet, empfangen und verarbeitet werden. Code Ein Code ist eine ¬´Sprache¬ª, die festlegt, wie Informationen vom Sender in Daten √ºbersetzt und vom Empf√§nger wieder interpretiert werden. @ Code‚Äã Die Informations√ºbertragung kann nur funktionieren, wenn Sender und Empf√§nger den gleichen Code verwenden. Bei zwischenmenschlicher Kommunikation ist der Code normalerweise nicht explizit festgelegt. Dann muss der Empf√§nger den Code erraten, was zu Missverst√§ndnissen f√ºhren kann. Ein Code ist eine Vorschrift, welche Daten von einer Darstellung in eine andere umwandelt. Dabei darf keine Information verloren gehen, eine R√ºckumwandlung muss m√∂glich sein. Beispiel eines Codes: Umwandlung von Braillezeichen in Buchstaben und umgekehrt. Das Ziel dieser Umwandlung ist es, eine f√ºr einen bestimmten Zweck optimierte Darstellung Informationen zu erreichen. So ist die Brailleschrift daf√ºr optimiert, per Tastsinn gelesen werden zu k√∂nnen. Beispiele f√ºr Codes‚Äã Brailleschrift‚Äã ASCII‚Äã Genetischer Code‚Äã QR-Code‚Äã ISBN‚Äã what3words.com‚Äã","keywords":""},{"title":"Lernziele Codes und Daten","type":0,"sectionRef":"#","url":"/26P/Codierung/Lernziele","content":"Lernziele Codes und Daten Pr√ºfung Die Pr√ºfung findet auf Papier statt Erlaubte Hilfsmittel: Taschenrechner (Codierungs-Tabellen werden zur Verf√ºgung gestellt) Gewichtung der Note: 1 Zeit: 60 Minuten Codes, Daten und Informationen Sie kennen die Begriffe &quot;Code&quot;, &quot;Codieren&quot; und &quot;Decodieren&quot;, k√∂nnen diese Begriffe in eigenen Worten definieren und identifizieren Codes in ihrem Alltag. Sie verstehen, dass es zwischen Daten und Informationen Unterschiede gibt, die Sie selber aufzeigen k√∂nnen. Zahlensysteme Sie wissen was ein Stellenwertsystem ist und wie es aufgebaut ist. Sie transformieren Bin√§re Zahlen zu Dezimalzahlen Sie transformieren Dezimalzahlen zu Bin√§rzahlen Zeichencodierung Sie k√∂nnen bei einer gegebenen Codierung (Latin1, UTF8, Sehstern...) Text Codieren und auch wieder Decodieren. Sie sind sich der Schwierigkeiten bei der √úbermittlung von bin√§ren Daten bewusst und kennen Strategien, wie diese behoben werden k√∂nnen. Farbe und Grafikformate Sie k√∂nnen die Unterschiede zwischen Vektor- und Rastergrafiken aufzeigen. Sie wissen, wie Farben digital abgespeichert werden und interpretieren Farben als RGB und RGBA Werte. Sie sind sich bewusst, dass mit Qualit√§tsverlust die Gr√∂sse von Bildern reduziert werden kann. Kompression und Informationsgehalt Sie kennen den Huffman-Algorithmus und k√∂nnen anhand eines Textes einen Huffman-Baum aufbauen, oder anhand eines solchen Baumes Text decodieren. Sie k√∂nnen argumentieren, wann die Huffman-Codierung eingesetzt wird. Sie k√∂nnen Berechnen, wie viele Datenbits bei der Anwendung der Huffman-Codierung eingespart werden k√∂nnen. Anwendungen Sie kennen verschiedene Anwendungen von Codes im Alltag Sie erkennen die grundlegenden Elemente eines QR-Codes Sie wissen, wie der Morsecode aufgebaut ist. (Es wird nicht erwartet, dass Sie die Codierungstabelle auswendig kennen) Sie wissen, wie eine Fehlererkennung erzeugt werden kann (Parit√§tsbit) Sie wissen, was wie ein EAN-13 Code aufgebaut ist und wie die Pr√ºfsumme berechnet wird. Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"5. UTF-8","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/UTF8","content":"5. UTF-8 Werden Unicode-Zeichen ins bin√§re √ºbersetzt wird klar, dass diese Zahlen nicht mehr nur mit einem Byte dargestellt werden k√∂nnen. Beispielsweise ist dem Affen-Emoji üêí die Zahl 12801810128018_{10}12801810‚Äã zugewiesen, was der Bin√§rzahl 00000001‚ÄÖ11110100‚ÄÖ00010010200000001\\:11110100\\:00010010_{2}0000000111110100000100102‚Äã entspricht, also 3 Bytes Speicherplatz ben√∂tigt. info 1 Byte entspricht 888 Bit 1 Megabit entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bit 1 Megabyte entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bytes oder 8‚Ä≤000‚Ä≤0008'000'0008‚Ä≤000‚Ä≤000 Bit UTF-8 ist ein Code, der Unicode-Zeichen in Bitmuster √ºbersetzt. Ein Unicode-Zeichen wird mit ein bis vier Bytes (daher 8-32 bit) dargestellt. Die folgende Tabelle zeigt, wie die Codierung funktioniert: Unicode-Bereich\tBitmuster\tAnzahl Bit\tByte 1: Anzahl Kontroll-Bits0 bis 127\t0xxxxxxx\t7\t1 128 bis 2047\t110xxxxx 10xxxxxx\t11\t3 2048 bis 65535\t1110xxxx 10xxxxxx 10xxxxxx\t16\t4 ab 65536\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\t21\t5 Unicode-Zeichen mit einer Nummer zwischen 0 und 127 werden mit einem Byte dargestellt, welches mit 0 beginnt. Somit ist UTF-8 in diesem Bereich identisch mit ASCII (und Latin 1). F√ºr die anderen Zeichen wird mehr als ein Byte verwendet. Dabei beginnt jedes Byte mit einer oder mehreren 1, gefolgt von einer 0. Die Anzahl 1 im ersten Byte definieren, wie viele Bytes f√ºr das Zeichen verwendet werden. Die folgenden Bytes werden mit 10 markiert. Die x werden mit der Bin√§rdarstellung der Unicode-Nummer aufgef√ºllt. Zeichen\tNummer\tBitmusterA\t65\t01000001 √§\t228\t11000011 10100100 Schwarze Sonne mit Strahlen ‚òÄ\t9728\t11100010 10011000 10000000 Affe üêí\t128018\t11110000 10011111 10010000 10010010 Der Vorteil dieser Codierung ist, dass anhand der ersten Bits eines Bytes erkannt wird, ob es sich um den Anfang oder die Fortsetzung eines Zeichens handelt. Beginn\tBedeutung0‚Ä¶\tASCII-Zeichen 10‚Ä¶\tFortsetzung eines Zeichens mit mehreren Bytes 110‚Ä¶\tBeginn eines Zeichens mit zwei Bytes 1110‚Ä¶\tBeginn eines Zeichens mit drei Bytes 11110‚Ä¶\tBeginn eines Zeichens mit vier Bytes Dies wird noch deutlicher, wenn man dies als Bin√§rbaum darstellt: UTF-8 Pr√§fix Ausprobieren‚Äã Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin Aufgabe Codieren Sie Ihre zwei lieblings Emojis als UTF-8 Bin√§r-Kette. Verwenden Sie f√ºr das Herausfinden der bin√§ren Codierung die Hilfe von Python. Mehrstufige Codierung 1‚Äã Oft werden Informationen mehrstufig codiert. So wird beispielsweise die Information ¬´Ich bin m√ºde.¬ª als Emoji dargestellt. Das Handy ordnet dem Emoji die entsprechende Unicode-Nummer zu. Diese wird mit UTF-8 in eine Bitfolge √ºbersetzt, welche √ºber das Mobilfunknetz √ºbermittelt wird. Das Handy des Empf√§ngers √ºbersetzt die Bitfolge wieder zur√ºck in eine Unicode-Nummer und das entsprechende Emoji. Die Interpretation des Emojis muss vom Empf√§nger selbst vorgenommen werden. Unicode zu UTF-8 Remix rothe.io ‚Ü©","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/26P/BYOD/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Pr√ºfung‚Äã Es werden Ihnen 10 der untenstehenden Szenarien zugelost Sie haben min. 2 Minuten Zeit, um die Fragen vorg√§ngig zu sortieren Die Pr√ºfung beginnt mit einem leeren Desktop und ohne vorg√§ngig ge√∂ffnete Programme. Die heruntergeladenen Dateien m√ºssen im Original vorliegen und die Programme auf der Website m√ºssen zur√ºckgesetzt sein. Sie haben 5 Minuten Zeit, um die Szenarien vorzuzeigen F√ºr jedes korrekt vorgezeigte Szenario erhalten Sie 1 Punkt, f√ºr teilweise korrekte Szenarien (bspw. Maus statt Tastatur verwendet) gibt es 0.5 Punkte. Notenskala Punkte\tNote10\t6 9.5\t6 9\t5.7 8.5\t5.5 8\t5.2 7.5\t4.9 7\t4.7 6.5\t4.4 6\t4.2 5.5\t3.9 5\t3.6 4.5\t3.4 4\t3.1 3.5\t2.8 3\t2.6 2.5\t2.3 2\t2.1 1.5\t1.8 1\t1.5 0.5\t1.3 0\t1 Szenario 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Szenario 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Szenario 3‚Äã Windows 11Windows 10macOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Szenario 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Szenario 5‚Äã √ñffnen Sie das Bild &quot;sonnenuntergang.jpg&quot; und f√ºgen Sie die Beschriftungen &quot;Palme&quot; und &quot;Sonne&quot; hinzu. Original Bild Bearbeitetes Bild Schrift Die Schriftfarbe &amp; Gr√∂sse kann frei gew√§hlt werden, sie muss aber lesbar sein. Szenario 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop PowerPoint starten Szenario 7‚Äã sonnenuntergang.docx √∂ffnen (ab jetzt nur mit der Tastatur und ohne Maus!) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Absatz ausw√§hlen und l√∂schen Dokument abspeichern Szenario 8‚Äã Datei-Explorer und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Szenario 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Szenario 10‚Äã Das Programm create_mesh.py √∂ffnen und den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Szenario 11‚Äã Das Programm create_mesh.py √∂ffnen Ein Bildschirm-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschirmaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Szenario 12‚Äã Die komprimierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Szenario 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Szenario 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Szenario 15‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Szenario 16‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Szenario 17‚Äã Das Programm create_mesh.py √∂ffnen (auf der Webseite) Nach der Zahl 3 suchen. Wie oft kommt es im Programm vor? Szenario 18‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) Das Programm ausf√ºhren Szenario 19‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) Programm ausf√ºhren Szenario 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Absenzenheft unterschreiben lassen&quot; Szenario 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2022 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Szenario 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopieren, einen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Szenario 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Szenario 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Szenario 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Szenario 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Szenario 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Online unter https://onedrive.com im Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen √úberpr√ºfen dass die Datei wieder auf Ihren Laptop synchronisiert wird.","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/26P/BYOD/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã Windows 11Windows 10macOS Snipping Tool Unter dem Startmen√º nach Snipping Tool suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: deb ganzen Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã Windows 11Windows 10macOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen &gt; Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - Rechtsklick &gt; Medien speichern unter.... Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. Windows 11Windows 10macOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Text zu Bildern hinzuf√ºgen‚Äã Windows 11Windows 10macOS Text hinzuf√ºgen Video zuschneiden‚Äã Windows 11Windows 10macOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl + F oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl + P) Neuer Tab √∂ffnen (Ctrl + T) URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) Eine Mail-Signatur hinzuf√ºgen/√§ndern Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Windows 11Windows 10macOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365‚Äã An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã Windows 11Windows 10macOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã Synchronisierungsoptionen f√ºr OneDrive Dateien Windows 11Windows 10macOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"4. Unicode","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Unicode","content":"4. Unicode Unicode ist ein internationaler Standard f√ºr Schriftzeichen und Symbole. Das Unicode-Konsortium erstellt einen Katalog von allen sinnvollen Schriftzeichen, welcher st√§ndig erweitert wird. In der Version 40.0, welche im Oktober 2021 ver√∂ffentlicht wurde, umfasst Unicode ca. 140‚Ä≤000140'000140‚Ä≤000 Zeichen. Hier sind ein paar Zeichen aufgef√ºhrt, um zu illustrieren wie umfangreich Unicode ist: Lateinischer Grossbuchstaben A, 656565 oder U+0041 Hiragana-Buchstabe Ya, 124201242012420 oder U+3084 Cherokee-Buchstabe S, 506950695069 oder U+13CD Spielkarte Neun der Herzen, 127161127161127161 oder U+1F0B9 Entsetztes Gesicht mit explodierendem Kopf, 129327129327129327 oder U+1F92F Affe, 128018128018128018 oder U+1F412 Power-Symbol, 921192119211 oder U+23FB √Ñgyptische Hieroplyphe Nl012, 783807838078380 oder U+1322C Quelle: UT - Unicode Table Jedes Unicode-Zeichen hat eine eindeutige Unicode-Nummer, welche h√§ufig als hexadezimale Zahl geschrieben wird, aber nat√ºrlich auch dezimal oder bin√§r dargestellt werden kann. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 ","keywords":""},{"title":"7. Textcodierung","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Textcodierung","content":"7. Textcodierung In dieser praktischen √úbung speichern Sie auf Ihrem Computer eine Textdatei und √ºberpr√ºfst anschliessend, ob die in der Datei gespeicherten Bits tats√§chlich der Unicode/UTF-8-Codierung des Texts entsprechen. 1. Texteditor √∂ffnen Der Editor ist eine App, in welcher man Textdateien erstellen und bearbeiten kann. Das kann man auch mit Word, dies ist jedoch umst√§ndlicher. Word-Dateien sind keine reinen Textdateien, sie enthalten auch andere Daten wie Formatierungen und Bilder. WindowsWindows 10macOS Starten Sie die Editor-App, indem Sie im Startmen√º nach ¬´editor¬ª suchen: 2. Text eingeben Geben Sie einen kurzen Text ein. Dieser sollte nicht nur ASCII-Zeichen enthalten, sondern auch ein Umlaut wie ¬´√§¬ª und Emojis. WindowsmacOS Emojis k√∂nnen unter Windows mit dem Tastenk√ºrzel + . eingef√ºgt werden. Alternativ findet man unter üëâ Emojipedia viele weitere Emojis. WindowsmacOS 3. Textdatei speichern Speichern Sie die Textdatei unter dem Namen Unicode-Test.txt indem Sie WindowsmacOS die Tastenkombination Ctrl+s dr√ºcken oder den Men√ºpunkt Datei &gt; Speichern ausw√§hlen. 4. Datei als Bytes betrachten Mit dem Online-Tool HexEd.it k√∂nnen Sie eine beliebige Datei Byte f√ºr Byte betrachten: üëâ HexEd.it Klicken Sie auf Datei √∂ffnen und w√§hlen Sie die vorhin gespeicherte Textdatei aus. Nun sehen Sie die einzelnen Bytes, welche die Datei enth√§lt, beispielsweise: 54 73 63 68 C3 BC 73 73 20 F0 9F 98 80 21 Die Bytes werden wie in der Informatik √ºblich als Hexadezimalzahlen angegeben. Wenn man √ºber die einzelnen Bytes navigiert (mit den Pfeiltasten), sieht man auf der linken Seite die entsprechende Bin√§rcodierung. Alternativ finden Sie hier auch einen Umrechner zwischen Bin√§r-, Dezimal- und Hexadezimalzahlen. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 Dec - Bin - Hex Dezimal Bin√§r Hexadezimal Text: Hex - Bin Hexadezimal 08 Bin√§r 00001000 In der bin√§ren Darstellung sehen Sie sofort die Zeichen, welche mehrere Bytes ben√∂tigen. Sie beginnen mit einer 1. So ist 11000011 10111100 die Codierung des Buchstabens ¬´√º¬ª. Nun k√∂nnen Sie mit folgenden Hilfsmitteln √ºberpr√ºfen, ob die Bytes tats√§chlich der Unicode/UTF-8-Codierung Ihres Textes entsprechen: üëâ ASCII-Tabelle f√ºr Bytes, die mit einer 0 starten üëâ Unicode-Tabelle f√ºr zusammengesetzte Zeichen mit mehreren Bytes Halten Sie die Hexadezimalzeichen Ihres Textes fest. Wo ist das erste Emoji? √úberpr√ºfen Sie, ob Sie den Dezimalwert des Emojis entziffern und auf üëâ https://unicode-table.com/de/ finden Hinweis Im vorliegenden Beispiel sieht das so aus: Byte(s)\tZeichen54\tT 73\ts 63\tc 68\th C3 BC\t√º 73\ts 73\ts 20\t‚ê£ F0 9F 98 80\tüòÄ 21\t! ‚≠êÔ∏è Zusatzaufgabe - Andere Dateien Betrachten Sie andere Dateien in HexEd.it und achten Sie auf folgendes: Finden Sie in anderen Dateien auch Unicode-codierten Text? Erkennen Sie ein Muster bei den ersten paar Bytes von Dateien des gleichen Typs?","keywords":""},{"title":"26P Informatik","type":0,"sectionRef":"#","url":"/26P/home","content":"26P Informatik Datum\tThema\tInhaltDi. 08.02.\tCodes und Daten\tUTF-8, Dateien, Hexadezimal Di. 22.02.\tCodes und Daten\tAuftrag: Kompression Di. 01.03.\tCodes und Daten\tGrafikformate Di. 08.03.\tCodes und Daten\tAnwendungen Di. 15.03.\tCodes und Daten\tWiederholung Di. 22.03. Codes und Daten\tTest Di. 29.03.\tCodes und Daten\tQR Codes Di. 05.04. Sonderwoche\tSkilager Di. 12.04. Fr√ºhlingsferien Di. 19.04. Fr√ºhlingsferien Di. 26.04.\tBig Data Di. 03.05.\tBig Data Di. 10.05.\tBig Data Di. 17.05.\tBig Data Di. 24.05.\tBig Data Di. 31.05. Big Data\tVortr√§ge Di. 07.06. Big Data\tVortr√§ge Di. 14.06. Sportwoche Di. 21.06.\tTabellenkalkulation Di. 28.06.\tTabellenkalkulation Di. 28.06. Notenschluss Di. 05.07.\tüöß Fr. 17.02. Sportwoche 1. Semester EinzellektionPraktikum Datum\tThema\tInhaltDi. 16.08.\tEinstieg\tICT Einstieg Di. 23.08.\tICT\tBYOD Basics Di. 30.08.\tICT\tBYOD Basics Di. 06.09.\tICT\tOffice: Layout und Gliederung Di. 13.09.\tICT\tOffice: Layout und Gliederung Di. 20.09. Sonderwoche Di. 27.09. Herbstferien Di. 04.10. Herbstferien Di. 11.10. Herbstferien Di. 18.10.\tICT\tOffice: Layout und Gliederung Di. 25.10.\tICT\tOffice: Layout und Gliederung Di. 01.11. ICT\tKurztest Office Di. 08.11. Informatik Biber\tWettbewerb Di. 15.11.\tProgrammieren Do. 17.11. Notenschluss Zwischenzeugnis Di. 22.11.\tProgrammieren Di. 29.11.\tProgrammieren Di. 06.12. Kantonaler Fachschaftstag Di. 13.12.\tProgrammieren Di. 13.12. Praktikum: A &amp; B\tProbe (schriftlich &amp; praktisch) Di. 20.12.\tProgrammieren Di. 27.12. Winterferien Mi. 04.01. Winterferien Mi. 11.01.\tCodes und Daten\tEinstieg Mi. 18.01.\tCodes und Daten\tZeichencodierung Mi. 25.01.\tCodes und Daten\tZeichencodierung Mi. 25.01. Notenschluss Mi. 01.02.\tCodes und Daten\tZahlensysteme Fr. 03.02. Semesterende Mi. 08.02.\tCodes und Daten\tUTF-8, Dateien, Hexadezimal Fr. 17.02. Sportwoche\t","keywords":""},{"title":"Browser","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Browser","content":"Browser Begriff‚Äã Ein Webbrowser oder kurz Browser ist ein Programm, welches auf einem Benutzer-Ger√§t installiert ist. Der Browser bietet eine grafische Oberfl√§che an und fordert die f√ºr die Darstellung eine Webseite ben√∂tigten Dateien von einem Webserver an. Anschliessend analysiert es diese Dateien und stellt die Webseite entsprechend dar. Der Browser f√ºhrt auch Programme aus, welche in der Webseite enthalten sind. Produkte‚Äã Logo\tName\tHersteller\tPlattform√ºbergreifend Firefox\tMozilla Chrome\tGoogle Edge\tMicrosoft Safari\tApple nur f√ºr Apple Produkte ‚≠êÔ∏è Technologien‚Äã F√ºr moderne Webseiten werden haupts√§chlich drei Technologien verwendet: HTML (Hypertext Markup Language): Mit dieser Markup-Sprache wird die Struktur einer Webseite beschrieben. HTML-Dateien enthalten den ¬´Bauplan¬ª einer Webseite und Verweise auf alle anderen Dateien, welche f√ºr die Webseite ben√∂tigt werden. CSS (Cascading Stylesheets): Damit wir das Layout der Webseite definiert. Mit CSS werden Position, Farben, Animationseffekte und weitere Formatierungen der einzelnen Elemente der Webseite beschrieben. JS (Java Script) ist eine Programmiersprache. Moderne Webseiten enthalten teilweise umfangreiche Programme, welche vom Browser ausgef√ºhrt werden.","keywords":""},{"title":"2. Zahlensysteme","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Zahlensysteme","content":"2. Zahlensysteme Aktuelle Computer kennen im wesentlichen zwei Zust√§nde: Strom- oder Nicht-Strom. Da es nichts dazwischen gibt, werden diese Zust√§nde auch &quot;bin√§r&quot; genannt. Dies kann mit Zahlen wie folgt dargestellt werden: 0 ‚Üí kein Strom 1 ‚Üí Strom Da wir Menschen uns besser im Zehnersystem zurechtfinden, wo es 10 eindeutige Zeichen gibt, brauchen wir eine M√∂glichkeit, zwischen diesen System hin- und herzurechnen. Jedes dieser sog. Stellenwertsysteme ist gleich aufgebaut. Schaut man sich das Zehnersystem an, bemerkt man, dass jede Stelle mit einer 10er Potenz multipliziert wird. Zehnersystem‚Äã 328=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100\\ \\begin{aligned} 328 &amp;= 300 + 20 + 8 \\\\ &amp;= 3 \\cdot 100 + 2 \\cdot 10 + 8 \\cdot 1 \\\\ &amp;= 3 \\cdot 10^2 + 2 \\cdot 10^1 + 8 \\cdot 10^0 \\\\ \\end{aligned}¬†328‚Äã=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100‚Äã Bin√§rsystem‚Äã Das Bin√§rsystem wird auch Dualsystem oder Zweiersystem genannt Nun gibt es nur zwei eindeutige Zeichen, 0 und 1, und jede Stelle wird mit einer Zweierpotenz multipliziert. In der folgenden Tabelle sind die ersten 12 Dezimalzahlen auch als Bin√§rzahl angegeben. Bin√§r\tDezimal020_202‚Äã\t0100_{10}010‚Äã 121_212‚Äã\t1101_{10}110‚Äã 10210_2102‚Äã\t2102_{10}210‚Äã 11211_2112‚Äã\t3103_{10}310‚Äã 1002100_21002‚Äã\t4104_{10}410‚Äã 1012101_21012‚Äã\t5105_{10}510‚Äã Bin√§r\tDezimal1102110_21102‚Äã\t6106_{10}610‚Äã 1112111_21112‚Äã\t7107_{10}710‚Äã 100021000_210002‚Äã\t8108_{10}810‚Äã 100121001_210012‚Äã\t9109_{10}910‚Äã 101021010_210102‚Äã\t101010_{10}1010‚Äã 101121011_210112‚Äã\t111011_{10}1110‚Äã Hinweis: Subskript Die tiefgestellte 2 bzw. 10 zeigt an, in welchem Zahlensystem die Zahl dargestellt ist und wird Subskript genannt. Durch das Subskript wird ersichtlich, ob bspw. mit 101 dezimal &quot;Hundert und Eins&quot; oder bin√§r &quot;Eins Null Eins&quot; gemeint ist. Bin√§r ‚Üí Dezimal‚Äã Die Umrechnung vom Bin√§rsystem ins Dezimalsystem erfolgt durch Ausmultiplizieren mit den entsprechenden Zweierpotenzen. Beispiel: 1011 Zweierpotenz\t232^323\t222^222\t212^121\t202^020 Bin√§rzahl\t111\t000\t111\t111 Summanden\t888\t000\t222\t111 Resultat 111111 oder mathematisch formuliert: 10112=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110\\begin{aligned} 1011_2 &amp;= 1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 \\\\ &amp;= 1 \\cdot 8 + 0 \\cdot 4 + 1 \\cdot 2 + 1 \\cdot 1 \\\\ &amp;= 11_{10} \\end{aligned}10112‚Äã‚Äã=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110‚Äã‚Äã Dezimalsystem ‚Üí Bin√§rsystem‚Äã F√ºr die Umrechnung vom Dezimalsystem zum Bin√§rsystem ist die Tabelle der Zweierpotenzen essenziell: 282^828\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020256\t128\t64\t32\t16\t8\t4\t2\t1 Beispiel: 143 Die erste Zweierpotenz, die kleiner ist als 143 ist, ist 27=1282^7 = 12827=128 ‚Üí die Bin√§rzahl hat also 8 Stellen. Nun wird f√ºr jede Stelle √ºberpr√ºft, ob die entsprechende Zweierpotenz zur Zwischensumme dazuaddiert werden kann, oder ob man dadurch bereits eine zu grosse Zahl erh√§lt. 2er-Potenz\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020\tZwischensummeRechnungsschritte\t128\t64\t32\t16\t8\t4\t2\t1 1. 128 &lt;143\\lt 143&lt;143\t1 128 2. 128 + 64 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0 128 3. 128 + 32 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0 128 4. 128 + 16 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0\t0 128 5. 128 + 8 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1 136 6. 136 + 4 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1 140 7. 140 + 2&lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1\t1 142 8. 142 + 1=143= 143=143\t1\t0\t0\t0\t1\t1\t1\t1\t143 Bin ‚Üí Dez Wandeln Sie vom vom Bin√§r- ins Dezimalsystem um. Dez ‚Üí Bin Wandeln Sie vom Dezimal- ins Bin√§rsystem um.","keywords":""},{"title":"Cloud","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/cloud","content":"Cloud ¬´Cloud¬ª bedeutet, dass Ihre Dateien auf einem Server des Cloud-Betreibers gespeichert werden. Eine Cloud kann aber auch bspw. Rechenleistung zur Verf√ºgung stellen und Teile einer Anwendung ausf√ºhren. √úblicherweise steht auf dem Server ebenfalls eine Web-App zu Verf√ºgung, damit die Dateien im Browser betrachtet oder bearbeitet werden k√∂nnen. Desktop-App ‚Äã Damit die Desktop-App verwendet werden kann, muss diese erst auf dem Ger√§t installiert worden sein. Desktop-Apps bieten meistens einen gr√∂sseren Funktionsumfang, k√∂nnen ohne aktive Internetverbindung gestartet und verwendet werden und sind meist performanter. Web-App ‚Äã Die Web-App wird beim √ñffnen des Dokuments vom Server des Anbieters heruntergeladen und im Browser (daher auf dem Prozessor des Laptops) ausgef√ºhrt. Web-App Architektur@ Einzelne Berechnungen k√∂nnen auch in die Cloud ausgelagert werden, z.B. die Autokorrektur in der Word Web-App: Bei jeder √Ñnderung wird der aktuelle Abschnitt an die Cloud geschickt und auf Fehler √ºberpr√ºft: Autokorrektur in Word Onine Auf der rechten Seite ist der Datenaustausch, der f√ºr die Autokorrektur notwendig ist, vom Laptop zur Cloud zu sehen. Bei jeder √Ñnderung des Dokuments wird der ganze Inhalt des aktuellen Abschnitts an die Cloud geschickt. Web-Apps brauchen eine aktive Internetverbindung und sind oft auch etwas langsamer als Desktop-Apps. Meist ist zudem der Funktionsumfang eingeschr√§nkt. Microsoft 365‚Äã OneDrive im Browser‚Äã In OneDrive im Browser kann eine Datei wahlweise in der Web-App oder in der Desktop-App ge√∂ffnet werden. Mit einem Doppelklick wird die Datei in der Web-App ge√∂ffnet. Klicke auf die drei vertikalen Punkte ‚ãÆ, dann auf √ñffnen und In der App √∂ffnen, um die Datei in der Desktop-App zu √∂ffnen. Teams-App‚Äã In der Teams-App muss auf die drei horizontalen Punkte ‚ãÆ geklickt werden. Es gibt zus√§tzlich die M√∂glichkeit In Teams bearbeiten. In diesem Fall wird die Web-App verwendet, diese wird jedoch innerhalb der Team-App gestartet (die Teams-App kann einen Browser anzeigen).","keywords":""},{"title":"E-Mail verwenden","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/E-Mail","content":"E-Mail verwenden Eine E-Mail ist ein Brief‚Äã Im Gegensatz zu einem Chat gelten bei der E-Mail-Kommunikation die gleichen Regeln wie beim Briefverkehr. Eine E-Mail enth√§lt also eine Anrede, einen h√∂flichen und sprachlich korrekten Text, sowie eine Grussformel. Bei einer E-Mail wird immer auch ein Betreff angegeben. Dieser sollte so gew√§hlt werden, dass er kurz und pr√§gnant den Inhalt der E-Mail zusammenfasst. Betreff: Wechsel Schwerpunktfach Sehr geehrter Herr Cadetg In den ersten sechs Monaten hier am Gymnasium habe ich grosse Freude am Italienischunterricht bekommen. Das von mir gew√§hlte Schwerpunktfach entspricht hingegen gar nicht meinen Vorstellungen. Deshalb frage ich Sie, ob es mir m√∂glich w√§re, in das Schwerpunktfach Italienisch zu wechseln. Freundliche Gr√ºsse Anna M√ºller Anrede‚Äã Die √ºbliche Andere ist ¬´Sehr geehrte/r Frau/Herr¬ª. Sind mehrere Personen angesprochen, schreibt man ¬´Sehr geehrte Damen und Herren¬ª. Wenn die angesprochene Person unbekannt ist (z.B. bei einer Support-E-Mail-Adresse), so kann man ¬´Guten Tag¬ª schreiben. Ist man mit der angeschriebenen Person vertrauter, schreibt man ¬´Liebe/r¬ª. Am Schluss der Anrede steht kein Satzzeichen. Es folgt eine Leerzeile, dann der erste Satz. Grussformel‚Äã Zwischen Text und Grussformel befindet sich eine Leerzeile. Die Grussformel lautet ¬´Freundliche Gr√ºsse¬ª ohne Satzzeichen. Ist man vertrauter, schreibt man ¬´Liebe Gr√ºsse¬ª. Wann antworten? Wann nicht?‚Äã Benutzen Sie die Antworten-Funktion nur, wenn Sie wirklich eine Antwort auf eine Mail schreiben. So kann eine l√§ngere E-Mail-Konversation vom Mailprogramm sauber dargestellt und nachvollzogen werden. Wenn Sie jemandem eine neue Nachricht schreiben, sich also nicht auf vorhergehenden E-Mail-Verkehr beziehen, dann sollten Sie die Antworten-Funktion nicht verwenden, sondern einfach eine neue E-Mail schreiben. Allen Antworten‚Äã Die Funktion allen Antworten sollte man normalerweise nicht benutzen. Optionen CC und BCC‚Äã Optionen im Mailprogramm Kopie/CC In das An-Feld wird der eigentliche Empf√§nger geschrieben. Will man gleichzeitig eine Kopie der E-Mail versenden, nutzt man das Cc-Feld. Die Abk√ºrzung Cc steht f√ºr Carbon copy und bedeutet so viel wie Kohlepapierdurchschlag. Es ist √ºblich, dass die Personen, die in Cc stehen, die E-Mail lediglich zur Kenntnis bekommen. Die Empf√§nger in den Feldern An und Cc k√∂nnen die E-Mail-Adressen der anderen lesen und wissen somit, wer die E-Mail noch bekommen hat. Und hier lauert die Gefahr! Denn diese Art der Versendung sollte man nur w√§hlen, wenn es sich um eine geschlossene Nutzergruppe, wie z.B. innerhalb einer Organisation handelt.1 Blindkopie/BCC M√∂chte man dagegen eine E-Mail an mehrere Empf√§nger versenden, die sich untereinander nicht kennen, sollte man auf jeden Fall das Bcc-Feld nutzen. Bcc steht f√ºr Blind carbon copy und wird mit ‚Äûunsichtbarer Durchschlag‚Äú √ºbersetzt. Der Name sagt es schon: Die Empf√§nger in diesem Feld werden weder von den anderen Empf√§ngern gesehen, noch k√∂nnen sie selbst andere Adressen sehen. Lediglich das An-Feld ist f√ºr alle Teilnehmer sichtbar.1 Quelle: An-Cc-Bcc: scope-and-focus.com ‚Ü©","keywords":""},{"title":"3. Zeichencodierung","type":0,"sectionRef":"#","url":"/26P/Codierung/Codierung/Zeichencodierung","content":"3. Zeichencodierung Datenpakete bestehen aus verschiedenen Zahlen und Zeichen. Wie lassen sich diese in Einsen und Nullen √ºbersetzen? Auf dem Computer ist jedem Zeichen eine eindeutige Zahl zugeordnet - eine sog. Zeichencodierung. Eine g√§ngige Zeichencodierung ist etwa ASCII, 128 Zeichen, wobei f√ºr ein Zeichen genau 7 bit, also 7 Stellen mit 0 oder 1, notwendig sind. In diesen 128 m√∂glichen Zeichen sind 33 Steuerzeichen und 95 normale Zeichen enthalten. Steuerzeichen spezielle Zeichen wie bspw. das Zeichen \\n f√ºr einen Zeilenumbruch oder \\t f√ºr einen Tabulator. Die ASCII-Codierung enth√§lt noch keine Umlaute, weshalb mit Latin 1, 256 Zeichen der Informationsgehalt um ein Bit erh√∂ht wurde, so dass insgesamt 256 Zeichen codiert werden k√∂nnen - die ersten 128 Zeichen sind dabei identisch mit ASCII. Zeichen\tDezimal\tBin√§r\\n\t10\t00001010 ‚éµ\t32\t00100000 !\t33\t00100001 &amp;\t38\t00100110 .\t46\t00101110 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 =\t61\t00111101 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 Zeichen\tDezimal\tBin√§rD\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 V\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 Zeichen\tDezimal\tBin√§rd\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 √§\t228\t11100100 √∂\t246\t11110110 √º\t252\t11111100 Komplette Latin 1 Tabelle Zeichen\tDezimal\tBin√§r\t0\t00000000 1\t00000001 2\t00000010 3\t00000011 4\t00000100 5\t00000101 6\t00000110 7\t00000111 8\t00001000 \\t\t9\t00001001 \\n\t10\t00001010 11\t00001011 12\t00001100 13\t00001101 14\t00001110 15\t00001111 16\t00010000 17\t00010001 18\t00010010 19\t00010011 20\t00010100 21\t00010101 22\t00010110 23\t00010111 24\t00011000 25\t00011001 26\t00011010 27\t00011011 28\t00011100 \u001d\t29\t00011101 30\t00011110 31\t00011111 ‚éµ\t32\t00100000 !\t33\t00100001 &quot;\t34\t00100010 #\t35\t00100011 $\t36\t00100100 %\t37\t00100101 &amp;\t38\t00100110 '\t39\t00100111 (\t40\t00101000 )\t41\t00101001 *\t42\t00101010 +\t43\t00101011 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 ;\t59\t00111011 &lt;\t60\t00111100 =\t61\t00111101 &gt;\t62\t00111110 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 D\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 Zeichen\tDezimal\tBin√§rV\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 [\t91\t01011011 \\\t92\t01011100 ]\t93\t01011101 ^\t94\t01011110 _\t95\t01011111 `\t96\t01100000 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 d\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 {\t123\t01111011 |\t124\t01111100 }\t125\t01111101 ~\t126\t01111110 \t127\t01111111 ¬Ä\t128\t10000000 ¬Å\t129\t10000001 ¬Ç\t130\t10000010 ¬É\t131\t10000011 ¬Ñ\t132\t10000100 ¬Ö\t133\t10000101 ¬Ü\t134\t10000110 ¬á\t135\t10000111 ¬à\t136\t10001000 ¬â\t137\t10001001 ¬ä\t138\t10001010 ¬ã\t139\t10001011 ¬å\t140\t10001100 141\t10001101 142\t10001110 143\t10001111 144\t10010000 ¬ë\t145\t10010001 ¬í\t146\t10010010 ¬ì\t147\t10010011 ¬î\t148\t10010100 ¬ï\t149\t10010101 ¬ñ\t150\t10010110 ¬ó\t151\t10010111 ¬ò\t152\t10011000 ¬ô\t153\t10011001 ¬ö\t154\t10011010 ¬õ\t155\t10011011 ¬ú\t156\t10011100 157\t10011101 158\t10011110 ¬ü\t159\t10011111 160\t10100000 ¬°\t161\t10100001 ¬¢\t162\t10100010 ¬£\t163\t10100011 ¬§\t164\t10100100 ¬•\t165\t10100101 ¬¶\t166\t10100110 ¬ß\t167\t10100111 ¬®\t168\t10101000 ¬©\t169\t10101001 ¬™\t170\t10101010 Zeichen\tDezimal\tBin√§r¬´\t171\t10101011 ¬¨\t172\t10101100 173\t10101101 ¬Æ\t174\t10101110 ¬Ø\t175\t10101111 ¬∞\t176\t10110000 ¬±\t177\t10110001 ¬≤\t178\t10110010 ¬≥\t179\t10110011 ¬¥\t180\t10110100 ¬µ\t181\t10110101 ¬∂\t182\t10110110 ¬∑\t183\t10110111 ¬∏\t184\t10111000 ¬π\t185\t10111001 ¬∫\t186\t10111010 ¬ª\t187\t10111011 ¬º\t188\t10111100 ¬Ω\t189\t10111101 ¬æ\t190\t10111110 ¬ø\t191\t10111111 √Ä\t192\t11000000 √Å\t193\t11000001 √Ç\t194\t11000010 √É\t195\t11000011 √Ñ\t196\t11000100 √Ö\t197\t11000101 √Ü\t198\t11000110 √á\t199\t11000111 √à\t200\t11001000 √â\t201\t11001001 √ä\t202\t11001010 √ã\t203\t11001011 √å\t204\t11001100 √ç\t205\t11001101 √é\t206\t11001110 √è\t207\t11001111 √ê\t208\t11010000 √ë\t209\t11010001 √í\t210\t11010010 √ì\t211\t11010011 √î\t212\t11010100 √ï\t213\t11010101 √ñ\t214\t11010110 √ó\t215\t11010111 √ò\t216\t11011000 √ô\t217\t11011001 √ö\t218\t11011010 √õ\t219\t11011011 √ú\t220\t11011100 √ù\t221\t11011101 √û\t222\t11011110 √ü\t223\t11011111 √†\t224\t11100000 √°\t225\t11100001 √¢\t226\t11100010 √£\t227\t11100011 √§\t228\t11100100 √•\t229\t11100101 √¶\t230\t11100110 √ß\t231\t11100111 √®\t232\t11101000 √©\t233\t11101001 √™\t234\t11101010 √´\t235\t11101011 √¨\t236\t11101100 √≠\t237\t11101101 √Æ\t238\t11101110 √Ø\t239\t11101111 √∞\t240\t11110000 √±\t241\t11110001 √≤\t242\t11110010 √≥\t243\t11110011 √¥\t244\t11110100 √µ\t245\t11110101 √∂\t246\t11110110 √∑\t247\t11110111 √∏\t248\t11111000 √π\t249\t11111001 √∫\t250\t11111010 √ª\t251\t11111011 √º\t252\t11111100 √Ω\t253\t11111101 √æ\t254\t11111110 √ø\t255\t11111111 Python‚Äã Auch in Python werden im Hintergrund Zahlen f√ºr Buchstaben und Bin√§rcodes f√ºr Dezimalzahlen verwendet. In Python l√§sst sich die sog. Ordnungszahl eines Buchstabens mit der Funktion ord einfach in Erfahrung bringen. Definition ord(&lt;Buchstabe&gt;)‚Äã Die sogenannte Ordnungszahl f√ºr einen (einzelnen!) Buchstaben kann mit dem Befehl ord bestimmt werden. ord_A = ord('A') ord_a = ord('a') print('Ordnungszahl A:', ord_A) print('Ordnungszahl a:', ord_a) Definition bin(&lt;Zahl&gt;)‚Äã Eine Dezimalzahl kann in eine Bin√§r-Zahl umgewandelt werden. binaer = bin(65) print(binaer) Hinweis Mit dem 0b zu Beginn zeigt Python an, dass es sich um eine Bin√§rzahl handelt. Analog zu der Subskript-Schreibweise 100000121000001_210000012‚Äã schreibt Python 0b1000001. Definition int(&lt;Bin√§rzahl&gt;), int(&lt;Bin√§rZahl&gt;, 2)‚Äã Der Befehl int (Abk√ºrzung f√ºr Integer, also Ganze Zahl) kann eine Bin√§rzahl in eine Dezimalzahl √ºbersetzen. Dabei gibt es mehrere M√∂glichkeiten: zahl = int(0b1001) # das 0b zeigt Python, dass es sich um eine bin√§re Zahl handelt print('1001 bin√§r = ', zahl) # Achtung! folgende Umwandlung klappt nicht, da jetzt ein Text √ºbergeben wird: # zahl = int('0b1001') # oder man teilt Python explizit mit, dass es sich um die Basis 2 handelt zahl2 = int('1011', 2) print('1011 bin√§r = ', zahl2) Hinweis Der zweite Parameter gibt die Basis des Zahlensystems an, hier also f√ºr Bin√§r 2. Definition chr(&lt;Zahl&gt;)‚Äã Gibt den zu einer Ordnungszahl geh√∂renden Buchstaben zur√ºck. buchstabe = chr(77) print(buchstabe) Name-&gt;Bin √Ñndern Sie das Programm unten so ab, dass Ihr Name ausgegeben wird. print(bin(ord('R'))) print(bin(ord('e'))) print(bin(ord('t'))) print(bin(ord('o'))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, bin und ord ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin-&gt;Name √Ñndern Sie das Programm unten so ab, dass Ihr Name aus dem Bin√§ren wieder in Text umgewandelt wird. print(chr(int('1010010', 2))) print(chr(int('1100101', 2))) print(chr(int('1110100', 2))) print(chr(int('1101111', 2))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, chr und int ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin√§rer Codierer‚Äã Aufgabe Schreiben Sie einen bin√§ren Codierer, welcher einen Text ins bin√§re √ºbersetzt. Im vorgegebenen Code sehen Sie, wie √ºber jeden Buchstaben eines Wortes iteriert werden kann. for buchstabe in 'Hallo': print(buchstabe) Aufh√ºbschen: Das 0b kann weggeschnitten werden, indem nur die Buchstaben nach dem zweiten Buchstaben verwendet werden: binaer = bin(11) # = 0b1011 binaer = binaer[2:] # alles (:) nach dem zweiten Buchstaben wird verwendet print(binaer) Jeder Buchstabe soll genau 1 Byte, also 8 Zeichen, umfassen. Dies erreicht man, wenn man mit Nullen (engl. Zeros) auff√ºllt: binaer = '1011' binaer = binaer.zfill(8) print(binaer) Statt immer eine neue Zeile zu verwenden, kann der print-Befehl auch angewiesen werden, am Ende ein Leerschlag einzuf√ºgen: for buchstabe in 'Hallo': print(buchstabe, end=' ') SSR","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Sicherheit/Authentifizierung","content":"Authentifizierung Authentifizierung (engl. authentication) ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Datenverlust","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Sicherheit/Datenverlust","content":"Datenverlust Eine oft untersch√§tzte Gefahr ist der Verlust von Daten. @ Ursachen‚Äã F√ºr den Verlust von Daten gibt es verschiedene Ursachen, beispielsweise: Defekt des Ger√§ts, auf welchem die Daten gespeichert sind, Verlust des Ger√§ts, auf welchem die Daten gespeichert sind, Zerst√∂rung der Daten durch Schadsoftware, Verschl√ºsselung der Daten durch Schadsoftware. Massnahmen‚Äã Cloudspeicher verwenden‚Äã Daten sollten nie auf nur einem Ger√§t gespeichert werden. Mit Cloud-L√∂sung werden Daten automatisch zwischen mehreren Ger√§ten und einem Cloudspeicher synchronisiert. Damit stehen die Daten auch noch zu Verf√ºgung, wenn ein Ger√§t verloren geht oder einen Defekt hat. Schutz vor Schadsoftware‚Äã Kapitel Schadsoftware","keywords":""},{"title":"Passw√∂rter","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Sicherheit/Passwoerter","content":"Passw√∂rter Unter https://howsecureismypassword.net/ kann die Sicherheit Ihres Passworts analysiert werden - insbesondere spannend ist die gesch√§tzte Zeit, um das Passwort zu knacken. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwort √ºberpr√ºfen‚Äã Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. 4. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (Empfehlung) - gute Basis-Funktionen und einfaches Handling. KeePass LastPass","keywords":""},{"title":"Schadsoftware","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Sicherheit/Schadsoftware","content":"Schadsoftware Ransomware Wanna Cry@ Schadsoftware oder Schadprogramm (auch Malware) sind Computerprogramme, welche entwickelt wurden, um aus Sicht der Betroffenen unerw√ºnschte und sch√§dliche Funktionen auszuf√ºhren. Bezeichnungen‚Äã Computerviren sind Programme, welche sich selbst√§ndig und automatisch auf m√∂glichst viele Ger√§te kopieren. Trojaner sind Schadprogramme, welche sich als andere App, beispielsweise als Spiel tarnen. Ransomware sind Schadsoftware, welche die Daten auf den infizierten Ger√§ten verschl√ºsseln und f√ºr deren Entschl√ºsselung ein L√∂segeld verlangen. Spyware sind Schadprogramme, welche den Benutzer ausspionieren, indem sie Daten und Aktivit√§ten am Ger√§t an Dritte weiterleiten. Aufgabe Wer hat den ersten Computervirus geschrieben? Wie heisst der Virus? Wie hat sich das Virus verbreitet? Computerschutz‚Äã Damit ein Schadprogramm auf dem Computer ausgef√ºhrt werden kann, muss es zuerst einmal dorthin kommen. Damit dies klappt muss entweder ein Benutzer einen Trojaner installieren oder ein Computervirus kann einbrechen. Die Voraussetzung dass ein Computervirus ein System infizieren kann, sind Sicherheitsl√ºcken. Das sind nicht bedachte Wege, √ºber welche Programme auf einem Computer ausgef√ºhrt werden k√∂nnen, ohne dass dazu eine Best√§tigung der Anwender:in n√∂tig ist (normalerweise muss beim bspw. beim Installieren eines Programms die Installation abgesegnet werden.). Diese Wege sind meist ausgekl√ºgelt und sehr clever. Um sich vor Schadsoftware zu sch√ºtzen, gilt es folgende Punkte zu beachten: gesunder Menschenverstand - die Herausgeber:innen von Programmen sollten verifizierbar und vertrauensw√ºrdig sein. Heruntergeladene Programme von dubiosen Seiten sollte grunds√§tzlich misstraut werden. das System aktuell halten - Updates nerve zwar gewaltig; sie flicken jedoch entdeckte L√ºcken, so dass der Computer Schritt-f√ºr-Schritt sicherer wird. Virenprogramme verwenden - Dubiose Aktivit√§ten von Programmen (Netzwerkverkehr, Festplatten- oder Arbeitsspeicherzugriffe), sowie der Inhalt von Dateien k√∂nnen von Virenprogrammen analysiert und ggf. blockiert werden. Virenprogramme‚Äã Aktuelle Versionen von Windows und Mac OS Computer sind mit den Grundeinstellungen gen√ºgend gegen allt√§gliche Bedrohungen gesch√ºtzt. Bei Mac passiert der Virenschutz ausschliesslich im Hintergrund (mit XProtect), bei Windows heisst der Virenschutz Microsoft Defender und besitzt auch eine grafische Oberfl√§che. Auf beiden Betriebssystemen werden bspw. heruntergeladene Dateien auf bekannte Schadsoftware analysiert. Der Virenschutz hinkt dabei immer ein bisschen hinterher - sobald eine neue L√ºcke ausgenutzt wird, muss diese geschlossen werden und die Ausf√ºhrung der entsprechenden Schadprogramme sollte durch den Virenschutz verhindert werden. Damit auch aktuelle So Die Anwender:in bekommt von diesem Schutz nur dann etwas mit, wenn ein m√∂glicherweise gef√§hrliche Software heruntergeladen wurde updates ausgef√ºhrt werden m√ºssen. ‚≠êÔ∏è Funktioniert mein Virenschutz? Damit getestet werden kann, ob der Virenschutz auf einem System funktioniert, gibt es eine EICAR-Testdatei (erzeugt vom European Institute for Computer Antivirus Research (EICAR)), die unsch√§dlich ist, aber von jedem g√§ngigen Antivirus-Programm erkannt werden muss. Der Inhalt der Datei sieht wie folgt aus: EICAR-Testdatei X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* Aufgabe: Laden Sie die EICAR-Testdatei herunter und √ºberpr√ºfen Sie, dass ihr System Alarm schl√§gt. Download","keywords":""},{"title":"Suchmaschinen","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/Suchmaschine","content":"Suchmaschinen Suchmaschinen werden verwendet, um im World Wide Web nach Informationen zu suchen. Die bekannteste Suchmaschine ist Google mit einem Marktanteil von √ºber 90%. Einschr√§nkungen Suchmaschinen‚Ä¶ k√∂nnen nicht alles finden -&gt; Deep Web k√∂nnen beeinflusst werden -&gt; SEO: Search Engine Optimization beeinlussen die Suchergebnisse -&gt; Filterblase Funktionsweise‚Äã Eine Suchmaschine hat drei Hauptaufgaben: Erstellen eines Index Verarbeiten von Suchanfragen Bewerten und Filtern der Suchergebnisse Bevor eine Suchmaschine eine Abfrage beantworten kann, muss erst eine Datenbank mit entsprechenden Informationen zu Webseiten erstellt werden. Diese Aufgabe wird von automatischen Programmen, sogenannten Webcrawlern, √ºbernommen. Sie durchsuchen das World Wide Web st√§ndig nach neuen und ge√§nderten Seiten. Die Seiten werden analysiert und in einer riesigen Datenbank eingetragen. Dabei wird jeder Eintrag mit Stichworten versehen, welche sich aus der Analyse ergeben. Wenn eine Benutzer:in eine Suchanfrage an die Maschine schickt, wird die Anfrage erst sprachlich analysiert. Beispielsweise werden falsch geschrieben Worte korrigiert. Anschliessend wird in der Datenbank nach Eintr√§gen gesucht, deren Stichworte m√∂glichst gut mit der Anfrage √ºbereinstimmen. Schliesslich werden die Resultate bewertet und entsprechend geordnet. Achtung Suchergebnisse werden von einem automatischen Lernsystem (k√ºnstliche Intelligenz) beeinflusst. Zus√§tzlich erfassbare Informationen wie Person, Ort, Ger√§t oder der verwendete Browser geben der Suchmaschine Hinweise darauf, welche Informationen relevanter sind.","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"/26P/ICT-Grundlagen/URLs","content":"Links Ein Link oder URL (engl. uniform resource locator) ist eine globale, weltweit eindeutige Adresse f√ºr eine Datei. Die URL definiert, wie mit dem anderen Computer kommuniziert wird, wo dieser Computer zu finden ist, und welche Datei auf dem Computer gemeint ist. Die URL setzt sich aus vier Teilen zusammen: https:// gbsl.ch /gym/aktuelles/news/ ?language=de&amp;filter=gym ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Protokoll Server Dateipfad Suchanfrage Das Protokoll ist die √úbertragungsart der Datei, normalerweise https://, was bedeutet, dass die √úbertragung verschl√ºsselt ist. Achtung! Wenn das unverschl√ºsselte Protokoll http:// verwendet wird, k√∂nnen die √ºbertragenen Informationen von anderen Personen im gleichen Netzwerk mitgelesen werden. Dadurch k√∂nnen Passw√∂rter oder Kreditkarteninformationen leicht abgegriffen werden! Gerade bei Zahlungen muss unbedingt darauf geachtet werden, dass das https:// Protokoll verwendet wird. Der Name des Servers oder Dom√§nenname ist ein weltweit eindeutiger Name f√ºr den Computer, auf welchem die Datei gespeichert ist. Der Dateipfad ist eine eindeutige Bezeichnung einer Datei pro Computer. Die Suchanfrage enth√§lt Benutzereingaben, die auf interaktiven Webseiten erfasst werden. Aufgabe Wie lauten die vier Teile des folgenden URL? https://www.google.ch/search?q=Quellenangabe SSR Verf√ºgbarkeit von Links‚Äã Oft sind Links nicht lange g√ºltig. Wenn beispielsweise eine Website restrukturiert wird, stimmen die Links oft nicht mehr. Deshalb ist es in schriftlichen Arbeiten bei der Quellenangabe wichtig, dass das Datum des Zugriffs angegeben wird. So kann nachvollzogen werden, wann die verlinkte Website verf√ºgbar war. Aufgabe Die folgenden Quellenangaben stammen aus einem PDF zum korrekten Zitieren und Bibliographieren. Die Links funktionieren aber nicht mehr. Versuchen Sie, den richtigen Link zu finden und die Frage zu beantworten. Goethe-Universit√§t Frankfurt a. M.: Neurolinguistik (ge√§ndert am 6. November 2007) http://www.uni-frankfurt.de/fb/fb10/KogLi/Lehrstuehle/ehem__Lehrstuhl_Leuninger/Neurolinguistik/index.html (abgerufen am 03.03.2018). Wer ist heute die vorstehende Professor:in? SSR Baader, S.: Geometrie ‚Äì Vorlesungsscript. Mitschrift von Alex Aeberli und Raoul Bourquin, Wintersemester 07. [PDF], Skript zur Vorlesung Geometrie an der ETHZ im Wintersemester 2007, (2007) https://www.mitschriften.ethz.ch/main.php?page=3&amp;scrid=1&amp;pid=29&amp;eid=1 (abgerufen am 31.01.2018). Finden Sie das Dokument und halten Sie den Link fest. SSR ParlCH: ¬´Erkl√§r mir das Parlament¬ª. 18.02.2016 https://www.youtube.com/watchv=vtfEG0txhOU (abgerufen am 31.01.2018). Finden Sie das Video und halten Si den Link fest. SSR Web Archiv - Einmal im Internet, immer im Internet‚Äã Websites die einmal online gestellt wurden, sind oft auch Jahre nachdem sie abgeschaltet wurden, noch zug√§nglich. Ein Tool, welches dies erm√∂glicht, ist bspw. das Web Archiv Wayback Machine. Diese Website l√§dt regelm√§ssig die √ºber Suchmaschinen verf√ºgbaren Websiten herunter und archiviert diese. So k√∂nnen teilweise auch alte, heute nicht mehr verf√ºgbare Websiten ge√∂ffnet werden. Achtung Da die Websiten archiviert sind, dauert es sehr lange, bis eine Website geladen ist. Die Versionen der Seite srf.ch Aufgabe Seit wann ist unter srf.ch die heutige Website vom Schweizer Radio und Fernsehen zu finden? Wem hat die Webseite vor diesem Zeitpunkt geh√∂rt? Wie erkl√§ren Sie sich die unterschiedlichen Wechsel? SSR","keywords":""},{"title":"Algorithmus","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Algorithmus","content":"Algorithmus Definition‚Äã ¬´Ein Algorithmus beschreibt die Methode, mit der eine Aufgabe gel√∂st wird. Ein Algorithmus besteht aus einer Folge von Schritten, deren korrekte Abarbeitung die gestellte Aufgabe l√∂st. Die Abarbeitung oder den Vorgang selbst bezeichnet man als Proze√ü.¬ª Les Goldschlager/Andrew Lister: Informatik, 1984 Die folgende Tabelle zeigt ein paar Beispiele von Prozessen mit zugeh√∂rigem Algorithmus: Prozess\tAlgorithmus\tTypischer SchrittKranich falten\tFaltanleitung\tPapier entlang einer Linie falten Zimtsterne backen\tRezept\tEier schaumig schlagen Musikst√ºck spielen\tNotenblatt\tEin c' spielen Spezielle Sprachen‚Äã Algorithmen werden oft in einer Fachsprache oder in einer symbolischen Sprache verfasst. Damit lassen sich die einzelnen Schritte eines Algorithmus oft klarer und k√ºrzer ausdr√ºcken als in der Alltagssprache. Beispiele f√ºr solche Sprachen sind: Die Notenschrift ist eine symbolische Sprache, in welcher die zu spielende Musik kompakt festgehalten werden kann. Rezepte sind normalerweise in einer Fachsprache verfasst, welche Fachbegriffe wie ¬´Schnee¬ª, ¬´schlagen¬ª oder ¬´Glasieren¬ª und Mengenangaben wie ¬´TL¬ª oder ¬´Prise¬ª enth√§lt. Bauanleitungen, z.B. IKEA-Anleitungen zum Zusammenbau von M√∂beln sind in einer nonverbalen Zeichensprache verfasst. Schritt‚Äã Wie die einzelnen Schritte eines Algorithmus lauten, h√§ngt stark vom Gebiet ab, f√ºr welches der Algorithmus verwendet wird. Die Einzelschritte beim Spielen eines Musikst√ºcks unterscheiden sich stark von den Schritten beim Kochen. Eine wichtige Eigenschaft von Algorithmen ist die Ausf√ºhrbarkeit. Sie bedeutet, dass jeder einzelne Schritt eines Algorithmus klar definiert sein muss und ausgef√ºhrt werden kann. Da eine klare Definition in Alltagssprache oft umfangreich ist, kommt hier die Fachsprache oder die symbolische Sprache zum Zug. Struktur‚Äã Ein Algorithmus definiert, in welcher Reihenfolge die einzelnen Schritte nacheinander abgearbeitet werden. Die Beschreibung dieser Reihenfolge ist die Struktur des Algorithmus. W√§hrend die Einzelschritte je nach Anwendungsgebiet unterschiedlich sind, sind die Strukturen (beim Programmieren spricht man von Kontrollstrukturen) von Algorithmen universell. Folgende Strukturen k√∂nnen unterschieden werden: Sequenz üë£: eine Folge von Schritten/Anweisungen, die nacheinander abgearbeitet werden. Wiederholung üîÅ: Einer oder mehrere Schritte werden eine bestimmte Anzahl mal wiederholt. Bedingte Ausf√ºhrung ‚ëÇ: Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. Unterprogramm üè∑: Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, kann der Name angegeben werden. Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Endlichkeit‚Äã Die Endlichkeit ist eine weitere wichtige Eingenschaft von Algorithmen. Sie bedeutet, dass ein Algorithmus immer nach endlich vielen Einzelschritten beendet wird. Ausserdem darf ein Algorithmus nur endlich viel Platz beanspruchen (z.B. Speicherplatz im Computer). ‚≠êÔ∏è Al-Chwarizmi‚Äã Abu Dscha øfar Muhammad ibn Musa al-ChwƒÅrizmƒ´ war ein Mathematiker und Universalgelehrter. Er stammte zwar aus dem iranischen Choresmien, verbrachte jedoch den gr√∂√üten Teil seines Lebens in Bagdad und war dort im ¬´Haus der Weisheit¬ª, einer Art Akademie, t√§tig. Al-Chwarizmi gilt als einer der bedeutendsten Mathematiker, da er sich mit Algebra als elementarer Untersuchungsform besch√§ftigte.1 In der lateinischen √úbersetzung eines Werkes von Al-Chwarizmi wurde sein Name als ¬´algorismus¬ª geschrieben. Davon leitet sich der heutige Begriff ¬´Algorithmus¬ª ab.2 Abbildung von Al-Chwarizmi auf einer sowjetischen Briefmarke@ Quelle: Wikipedia: al-Chwarizmi ‚Ü© Quelle: Wiktionary: Algorithmus ‚Ü©","keywords":""},{"title":"Bauanleitung","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Bauanleitung","content":"Bauanleitung Eine Bauanleitung ist ein Algorithmus, welche das Zusammenbauen von Einzelteilen zu einem fertigen M√∂bel beschreibt und ist oft in einer Bildschrift verfasst. Schritt‚Äã Die Reihenfolge der einzelnen (Vorbereitungs-) Schritte sind durch eine Nummerierung gegeben. Wiederholung‚Äã Muss ein Schritt wiederholt ausgef√ºhrt werden, z.B. das Eindrehen von Schrauben an jedem Bein eines Banks, so wird dies nur einmal im Detail beschrieben. Bedingte Ausf√ºhrung‚Äã Fehlt ein St√ºck oder ist die Anleitung unklar, so soll der Kundendienst kontaktiert werden (oben rechts...). Ikea Bauanleitung@","keywords":""},{"title":"Faltanleitung","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Faltanleitung","content":"Faltanleitung Eine Faltanleitung ist ein Beispiel f√ºr einen Algorithmus. Das japanische Wort Origami bezeichnet die Kunst des Papierfaltens. Schritt‚Äã In einer Faltanleitung kommen nur wenige Arten von Schritten vor: Falten: Durch eine gestrichelte Linie wird angedeutet, wo gefaltet werden soll. Der Pfeil gibt an, in welche Richtung gefaltet wird. Falz machen: Durch Hin- und Zur√ºckfalten wird ein Falz erzeugt. Dies wird durch einen Pfeil angedeutet, der hin und zur√ºck zeigt. Drehen: Durch einen Pfeil zwischen zwei Abbildungen wird angezeigt, dass das Papier entsprechend umgedreht werden soll. Beispiele‚Äã Schachtel‚Äã Eine einfache Faltanleitung f√ºr eine Schachtel. Origami Box@ Kranich‚Äã Der Kranich ist das klassische Motiv im japanischen Origami. Origami Kranich@","keywords":""},{"title":"Flussdiagramm","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Flussdiagramm","content":"Flussdiagramm Ein Flussdiagramm (engl. flow chart) oder Programmablaufplan ist eine grafische Darstellungsform eines Algorithmus. Es besteht aus Elementen, welche einzelne Schritte des Algorithmus darstellen. Pfeile, welche die Elemente verbinden, geben die Reihenfolge an, in welcher die Schritte ausgef√ºhrt werden m√ºssen. Das Flussdiagramm unten links beschreibt, wie Spaghetti gekocht werden. Das Flussdiagramm unten rechts beschreibt, wie Spaghetti Napoletana gekocht werden. Dabei wird der Spaghetti-Algorithmus mit einem Aufruf (rot) wiederverwendet. Flussdiagramm@","keywords":""},{"title":"Notenblatt","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Notenblatt","content":"Notenblatt Ein Notenblatt ist ein Algorithmus, welches den Prozess ¬´Musikst√ºck spielen¬ª beschreibt. Notenbl√§tter sind in einer symbolischen Sprache, der Notenschrift, verfasst. Schritt‚Äã Ein einzelner Schritt in der Notenschrift ist eine Note oder eine Pause. Im folgenden beschreiben die ersten drei √ºbereinanderliegenden Noten ¬´Spiele einen Akkord bestehend aus einem kleinen d, einem eingestrichenen fis' und einem zweigestrichenen e'' von einem Achtel L√§nge¬ª. Erste Zeile eines Notenblatts Wiederholung‚Äã In der Notenschrift wird durch Wiederholungszeichen (rot) angezeigt, dass die dazwischenliegenden Takte wiederholt werden sollen: Wiederholungszeichen Eine andere Variante ist die Anweisung D.S. (Dal Segno, ¬´vom Zeichen¬ª). Gemeint ist, dass das St√ºck von einem bezeichneten Punkt an (meist mit dem Zeichen ‚ïë:) wiederholt wird. Bedingte Ausf√ºhrung‚Äã Einer oder mehrere Schritte werden manchmal nur unter bestimmten Bedingungen ausgef√ºhrt. Auf einem Notenblatt wird mit sogenannten Voltenklammern (rot) gekennzeichnet, dass ein Takt nur im ersten oder zweiten Durchgang gespielt werden soll. In der folgenden Zeile wird also der dritte Takt nur im ersten und der vierte Takt nur im zweiten Durchgang gespielt: Voltenklammern So t√∂nt der erste Durchgang: So t√∂nt der zweite Durchgang: Parameter‚Äã Durch die Noten alleine sind die L√§nge und die H√∂he nur relativ festgelegt. Erst durch die Tempoangabe ‚ô©=180 wird festgelegt, dass pro Minute 180 Viertelnoten gespielt werden sollen. Mit Violin- und Bassschl√ºssel wird festgelegt, auf welcher Notenlinie das g' bzw. das f liegt und somit in welcher H√∂he die Noten gespielt werden sollen. Tempoangabe und Notenschl√ºssel Tempoangabe und Notenschl√ºssel sind Parameter eines Notenblatts, deren √Ñnderung die Bedeutung aller Noten und somit das gespielte St√ºck √§ndert. Beispiel‚Äã Auf der Website musescore.com sind Notenbl√§tter f√ºr viele Musikst√ºcke verf√ºgbar und k√∂nnen dort auch gleich abgespielt werden. Hier sind Ausschnitte aus folgenden St√ºcken verwendet worden: Super Mario Bros: Main Theme Jingle Bells","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Lernziele","content":"Lernziele Pr√ºfungsablauf‚Äã Die Pr√ºfung besteht aus zwei Teilen: schriftlicher Teil auf Papier - keine Hilfsmittel erlaubt. praktischer Teil auf dem Laptop - open book, jegliche Hilfsmittel inkl. Google sind erlaubt, wobei die direkte Kommunikation mit anderen Personen oder der Austausch von Informationen untereinander nicht erlaubt ist. Relevant f√ºr die Pr√ºfung sind die Kapitel Algorithmen: Theorie + Beispiele inkl. RoboZZle Turtlegrafik Abschnitte 1 bis und mit 7, inkl. √úbungen Gr√ºfnisch Lernziele Algorithmen Sie k√∂nnen erkl√§ren, was ein Algorithmus ist. Sie erkennen und beschreiben die Strukturen eines Algorithmus (Einzelschritte, Wiederholungen, bedingte Ausf√ºhrung, Parameter) Sie √ºbersetzen einen Algorithmus zwischen zwei Darstellungsformen (Alltagssprache, Struktogramm, Python-Programm) Lernziele Programme Sie k√∂nnen ein einfaches Python-Programm lesen und verstehen. Sie k√∂nnen die Ausgabe eines einfachen Turle-Programms zeichnen. Sie k√∂nnen ein einfaches Python-Programm √§ndern oder erweitern. Sie k√∂nnen typische Fehler in Python-Programmen erkennen und korrigieren. Sie k√∂nnen in einem Programm Befehlsnamen, Variablen, Parameter und Codebl√∂cke identifizieren. Lernziele Programmstuktur Wie wissen, dass ein Python-Programm grunds√§tzlich sequentiell (d.h. zeilenweise) ausgef√ºhrt wird. Sie k√∂nnen Befehle aus anderen Bibliotheken importieren (import). Sie verwenden for-Schleifen, um Befehlssequenzen zu wiederholen. Sie k√∂nnen eigene Unterprogramme / Befehle definieren (def). Sie k√∂nnen Unterprogramme mit einem oder mehreren Parametern definieren und aufrufen. Sie wissen, was Kommentare (#) sind und k√∂nnen Programme kommentieren. Sie wissen was eine Variable ist und k√∂nnen diese verwenden. Sie k√∂nnen Struktogramme lesen und verstehen Sie k√∂nnen Struktogramme in ein Programm √ºbersetzen, bzw. ein Programm in ein Struktogramm √ºberf√ºhren Lernziele Turtlegrafik Sie k√∂nnen die Turtle mit forward, backward, left, right und goto bewegen. Sie k√∂nnen mit pencolor die Farbe √§ndern. Sie k√∂nnen mit fillcolor, begin_fill und end_fill ausgef√ºllte Figuren zeichnen. Sie k√∂nnen mit shape und speed das Aussehen und die Geschwindigkeit der Turtle √§ndern. Sie k√∂nnen mit pensize, penup und pendown, dot, hideturtle den Zeichenstift kontrollieren. Lernziele Benutzerinteraktion Sie k√∂nnen die Programmbenutzer:in mit input nach einer Eingabe fragen. Sie wissen, dass Python zwischen Text (str), ganzen Zahlen (int) und Dezimalzahlen (float) unterscheidet und k√∂nnen Text in Zahlen/Dezimalzahlen umwandeln. Sie k√∂nnen Platzhalter in formatierten Texten f'' einf√ºgen. Sie k√∂nnen Texte klein- oder grossschreiben (lower(), upper()) sowie Wortteile ersetzen (replace).","keywords":""},{"title":"Test 26P","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Probe/ProbeP","content":"Test 26P Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":" Pygame Zero","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero","content":" Pygame Zero @ üîó Offizielle Dokumentation üîó Coding Games With Pygame Zero &amp; Python üîó Beispiele aus dem Wireframe Magazine","keywords":""},{"title":"Beispiele","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples","content":"Beispiele","keywords":""},{"title":"Struktogramme","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Struktogramme","content":"Struktogramme Struktogramme sind eine M√∂glichkeit, Programme und Algorithmen grafisch darzustellen. Diese Dartstellungsform wurde 1973 von Isaac Nassi und Ben Shneiderman vorgeschlagen und heisst deshalb auch Nassi-Shneiderman-Diagramm.1 Sequenz üë£‚Äã In einem Struktogramm wird jeder Befehl in einen rechteckigen Kasten geschrieben. Befehle m√ºssen nicht in einer Programmiersprache geschrieben werden, Parameter werden unterstrichen. from turtle import * forward(100) left(90) forward(50) 100 Schritte vorw√§rts 90¬∞ nach links 50 Schritte vorw√§rts Wiederholung üîÅ‚Äã Eine Wiederholung wird wie folgt dargestellt. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Bemerke Beim Struktogramm wird der wiederholte Teil durch die Einr√ºckung ersichtlich. Auch in Python werden wiederholte Sequenzen (Zeilen 4-5) visuell mit einem Tabulator einger√ºckt. Der Doppelpunkt am Zeilenende zeigt an, dass eine einger√ºckte Sequenz (beim Programmieren spricht man von einem Codeblock) folgt. Unterprogramm üè∑‚Äã Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, gen√ºgt es den Namen aufzuschreiben. from turtle import * def zick_zack(): left(60) forward(30) right(120) forward(30) left(60) forward(100) zick_zack() zick_zack() zick_zack: 60¬∞ nach links 30 Schritte vorw√§rts 120¬∞ nach rechts 30 Schritte vorw√§rts 60¬∞ nach links 100 Schritte vorw√§rts zick_zack zick_zack Bemerke Um ein Unterprogramm aufzurufen, wird beim Struktogramm der Kasten mit doppelten Seitenstrichen markiert, bei Python werden runde Klammern am Ende des Namens angegeben. Den Namen f√ºr Unterprogramm kann beliebig gew√§hlt werden, sofern er nicht mit einer Zahl beginnt und keine Sonderzeichen enth√§lt. Leerschl√§ge und Bindestriche sind nicht erlaubt - stattdessen werden Unterstriche _ verwendet: Statt zick zack wird der Name zick_zack verwendet. Parameter ‚äï ‚äñ‚Äã Ein Unterprogramm kann mit Parametern aufgerufen werden. Parameter werden jeweils unterstrichen, so dass klar ist, welche Werte sich √§ndern k√∂nnen. Variablen‚Äã Bei Programmen wird zwischen Parametern und Variablen unterschieden. Genau wie Paramter k√∂nnen diese das Ergebnis eines Algorithmus √§ndern. Sie werden in einem Struktogramm speziell als markiert, damit klar ist, dass eigentlich der in der Variable gespeicherte Wert gemeint ist. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. Quelle: rothe.io ‚Ü©","keywords":""},{"title":"RoboZZle","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Algorithmen/Uebungen/robozzle","content":"RoboZZle Aufgabe 1 Puzzle 1 Aufgabe 2 Puzzle 2 Aufgabe 3 Puzzle 3 Aufgabe 4 Puzzle 4 Aufgabe 5 Puzzle 5 Aufgabe 6. Puzzle 6 Aufgabe 7. Puzzle 7 Aufgabe 8. Puzzle 8 Aufgabe 9. Puzzle 9 ‚≠êÔ∏è Aufgabe 10. Puzzle 10","keywords":""},{"title":"Gr√ºfnisch","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/gruefnisch","content":"Gr√ºfnisch Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden alle Vokale wie folgt ersetzt:1 a anafa e enefe i inifi o onofo u unufu √§ √§n√§f√§ √∂ √∂n√∂f√∂ √º √ºn√ºf√º Beispiele‚Äã Hallo Hanafallonofo Gymnasium Biel Seeland Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Ziel: Python spricht Gr√ºfnisch Das Ziel ist, einen vorgegebenen Text auf Gr√ºfnisch zu √ºbersetzen. In Python lassen sich Texte ver√§ndern, zusammenf√ºgen und trennen. Texte verkn√ºpfen‚Äã Texte k√∂nnen verkn√ºpft werden - entweder mit + oder indem eine spezielle Syntax f√ºr die Verkn√ºpfung von Textteilen verwendet wird. Definition 'hallo ' + 'bello'‚Äã Mit + lassen sich zwei gleichwertige Datentypen (daher, entweder zwei Zahlen, oder zwei Texte, nicht jedoch Texte und Zahlen, verkn√ºpfen) print('Hallo ' + 'Biber') Definition f'', f'Hallo, Nr. {7}'‚Äã Ein formatierter Text wird in Python mit f' (statt nur ') gestartet. Anschliessend k√∂nnen geschweifte Klammern verwendet werden, welche durch deren Inhalt ersetzt werden. Hier Spielt es keine Rolle, ob Texte oder Zahlen verwendet werden. name = 'Maria' print(f'Hallo {name}, ich bin {15} j√§hrig.') Gross- und Kleinschreibung‚Äã Definition .upper(): Grossbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' gross = text.upper() print(gross) Definition .lower(): Kleinbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' klein = text.lower() print(klein) Text ersetzen‚Äã Definition .replace(alt, neu)‚Äã Mit replace(alt, neu) werden alle alten Textst√ºcke durch die neuen ersetzt. Der Text wird dabei nicht direkt ver√§ndert, sondern nur der R√ºckgabewert (=das Resultat) ist ver√§ndert. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' # Alle &quot;.&quot; durch &quot;!!!&quot; ersetzen text = text.replace('.', '!!!') print(text) Gross- &amp; Kleinschreibung Python nimmts genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle, nicht jedoch der Ort des alten Wortes! Im folgenden Beispiel wird etwa nur das kleingeschriebene ich ersetzt, jedoch auch wenn es inmitten eines Textes auftritt. Das grossgeschrieben Ich zu Beginn des Satzes wird ignoriert... text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'ICH') print(text) L√∂sungen: (1) auch den Gross- und kleingeschriebenes ersetzen, oder (2) zuerst alles klein schreiben und dann ersetzen. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen text = text.replace('Ich', 'XXX') # Alle 'Ich' durch XXX ersetzen print(text) text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.lower() # text kleinschreiben text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen print(text) Vervielfachen‚Äã Um Textteile zu vervielfachen, k√∂nnen diese mit einem Faktor 'multipliziert' werden. print('‚ù§Ô∏è ' * 5) oder auch komplizierter: for i in range(5): print('‚ù§Ô∏è ' * (i + 1)) Beispiel‚Äã Gr√ºfnisch Wie lautet der Satz hallo, es ist winter auf Gr√ºnfisch? (Von Hand, ohne Programm √ºbersetzen) Deutsch ‚Üí Gr√ºfnisch Erstellen Sie ein Programm, welches einen Satz auf Gr√ºfnisch √ºbersetzt und ausgibt. Funktioniert Ihr Text auch, wenn Sie den Satz mit Grossbuchstaben, bspw. Informatikunterricht √ºbersetzen? Passen Sie ihn entsprechen an. Um die Ausgabe etwas spannender zu machen, k√∂nnen wir die Ausgabe auch von Beavis ausgeben lassen. √Ñndern Sie Ihr Programm so, dass Beavis Gr√ºfnisch spricht... from cowsay import beavis beavis('Hanafallonofo Pythonofon') gruefnisch.py text = 'hallo, es ist winter!' print('Original', text) Weitere Figuren Anstelle von cow() k√∂nnen auch andere Figuren verwendet werden. Diese muss dann aber auch aus der Bibliothek cowsay importiert werden. beavis cheese daemon cow dragon ghostbusters kitty meow milk stegosaurus stimpy turkey turtle tux Zusatz ‚≠êÔ∏è: Passen Sie Ihr Programm so an, dass auch die Zusatzregel bei Gr√ºfnisch umgesetzt wird. Wie k√∂nnte dies gelingen? Ausnahme beim Ersetzen: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). Beispiel: &quot;Bauen&quot; hat den Diphtong au und wird also gr√ºfnisch &quot;Banafauenefen&quot; ausgesprochen. SSR SSR SSR Gr√ºfnisch ‚Üí Deutsch K√∂nnen Sie auch ein Programm schreiben, welches vom Gr√ºfnisch ins Berndeutsch √ºbersetzt? von_gr√ºfnisch.py text = 'Hanafallonofo Pythonofon' SSR Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Aktor","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/actor","content":"Aktor Grundlegendes‚Äã nemo = Actor(bild) erstellt einen neuen Aktor. bild ist der Name einer Bilddatei. nemo.draw() zeichnet den Aktor nemo in das Fenster. Position‚Äã Positionierung in Pygame Zero nemo.bottom ist die y-Koordinate des unteren Rands von nemo. nemo.left ist die x-Koordinate des linken Rands von nemo. nemo.right ist die x-Koordinate des rechten Rands von nemo. nemo.top ist die y-Koordinate des oberen Rands von nemo. nemo.x ist die x-Koordinate des Ankers von nemo. nemo.y ist die y-Koordinate des Ankers von nemo. nemo.angle ist die Rotation von nemo in Grad im Gegenuhrzeigersinn. Kollision‚Äã nemo.collidepoint(x, y) √ºberpr√ºft, ob nemo mit dem Punkt mit den Koordinaten x, y kollidiert. nemo.collidepoint(pos) √ºberpr√ºft, ob nemo mit dem Punkt mit den Punkt pos kollidiert. So kann beispielsweise √ºberpr√ºft werden, ob ein Aktor mit der Maus angeklickt wird: def on_mouse_down(pos): if nemo.collidepoint(pos): print(&quot;Nemo mit Maus ber√ºhrt.&quot;) nemo.colliderect(dory) √ºberpr√ºft, ob nemo mit dory kollidiert. nemo.collidelist(liste) √ºberpr√ºft, ob nemo mit einem Aktor in der Liste liste kollidiert. In dem Fall wird der Index des kollidierenden Aktors in der Liste zur√ºckgeliefert. Wenn kein Aktor der Liste mit nemo kollidiert, wird -1 zur√ºckgeliefert. Messung‚Äã nemo.distance_to(dory) misst die Distanz zwischen nemo und dory. nemo.angle_to(dory) misst den Winkel von nemo aus in Richtung dory.","keywords":""},{"title":"Animation","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/animation","content":"Animation def draw(): wird von Pygame Zero aufgerufen. Hier wird gezeichnet. def update(): wird von Pygame Zero aufgerufen. Hier wird der n√§chste Animationsschritt berechnet. Start von Pygame Zero‚Äã Im Pygame Zero-Modus des Mu Editors wird Pygame Zero automatisch gestartet, sobald das eigene Skript fertig abgearbeitet worden ist. In einem anderen Editor muss Pygame Zero durch einen Befehl am Ende des eigenen Skripts gestartet werden. Dazu muss das Modul pgzrun importiert werden: import pgzrun # Eigene Befehle ... pgzrun.go() Funktionsweise von Pygame Zero ohne Animation‚Äã Das Hauptprogramm von Pygame Zero wird erst gestartet, nachdem das ganze Skript abgearbeitet worden ist. Daf√ºr sorgt der spezielle Modus des Mu-Editors. Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen WIDTH und HEIGHT verwendet. Anschliessend ruft Pygame Zero das Unterprogramm draw() auf, welches im eignen Skript definiert worden ist. import pgzrun WEISS = (255, 255, 255) SCHWARZ = (0, 0, 0) def draw(): screen.fill(WEISS) screen.draw.text(&quot;Hallo Welt&quot;, top=10, left=10, color=SCHWARZ) pgzrun.go() Funktionsweise von Pygame Zero mit Animation‚Äã Falls im eigenen Skript ein Unterprogramm mit dem Namem update definiert wird, geht Pygame Zero davon aus, dass es sich um eine Animation handelt. Die Funktionsweise von Pygame Zero √§ndert sich entsprechend: Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen TITLE, WIDTH und HEIGHT verwendet. Anschliessend startet Pygame Zero den sogenannten Game Loop. Dabei wird erst das Unterprogramm update aufgerufen und anschliessend draw. Dies wird so lange wiederholt, bis das Programm abgebrochen wird. import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def update(): nemo.x = nemo.x + 1 def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Zeichenprogramm","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples/paint","content":"Zeichenprogramm Beschreibung‚Äã Ein Zeichenprogramm Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Paint&quot; WIDTH = 800 HEIGHT = 800 farbwahl = Actor(&quot;button_red&quot;) farbwahl.farbe = 255, 0, 0 farbwahl.top = 10 farbwahl.left = 10 loeschen = Actor(&quot;button_grey&quot;) loeschen.top = 70 loeschen.left = 10 def on_mouse_down(pos): if farbwahl.collidepoint(pos): if farbwahl.image == &quot;button_red&quot;: farbwahl.image = &quot;button_blue&quot; farbwahl.farbe = 0, 0, 255 elif farbwahl.image == &quot;button_blue&quot;: farbwahl.image = &quot;button_green&quot; farbwahl.farbe = 0, 255, 0 elif farbwahl.image == &quot;button_green&quot;: farbwahl.image = &quot;button_yellow&quot; farbwahl.farbe = 255, 255, 0 elif farbwahl.image == &quot;button_yellow&quot;: farbwahl.image = &quot;button_red&quot; farbwahl.farbe = 255, 0, 0 if loeschen.collidepoint(pos): screen.clear() def on_mouse_move(pos, buttons): if buttons: screen.draw.filled_circle(pos, 2, farbwahl.farbe) def draw(): farbwahl.draw() loeschen.draw() pgzrun.go() ","keywords":""},{"title":"Pong","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples/pong","content":"Pong Beschreibung‚Äã Klassisches Pong-Spiel Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Pong&quot; WIDTH = 1200 HEIGHT = 800 PLAYER_SPEED = 5 spieler_links = Actor(&quot;schlaeger_blau&quot;) spieler_links.score = 0 spieler_links.y = HEIGHT / 2 spieler_links.left = 5 spieler_rechts = Actor(&quot;schlaeger_rot&quot;) spieler_rechts.score = 0 spieler_rechts.y = HEIGHT / 2 spieler_rechts.right = WIDTH - 6 ball = Actor(&quot;ball_blau_klein&quot;) ball.x = WIDTH / 2 ball.y = HEIGHT / 2 ball.vx = 5 ball.vy = 3 def bewege_spieler(spieler, up_key, down_key): if up_key: spieler.y = spieler.y - PLAYER_SPEED if down_key: spieler.y = spieler.y + PLAYER_SPEED if spieler.bottom &gt;= HEIGHT: spieler.bottom = HEIGHT - 1 if spieler.top &lt; 0: spieler.top = 0 def bewege_ball(): # Ball bewegen ball.x = ball.x + ball.vx ball.y = ball.y + ball.vy if ball.top &lt; 0: ball.top = 0 ball.vy = -ball.vy if ball.bottom &gt;= HEIGHT - 1: ball.bottom = HEIGHT - 1 ball.vy = -ball.vy # Abprallen am rechten Schl√§ger if ball.right &gt; spieler_rechts.left and ball.bottom &gt; spieler_rechts.top and ball.top &lt; spieler_rechts.bottom: ball.right = spieler_rechts.left ball.vx = -ball.vx # Abprallen am linken Schl√§ger if ball.left &lt; spieler_links.right and ball.bottom &gt; spieler_links.top and ball.top &lt; spieler_links.bottom: ball.left = spieler_links.right ball.vx = -ball.vx # Punkt f√ºr linken Spieler if ball.right &gt;= WIDTH: spieler_links.score = spieler_links.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 # Punkt f√ºr rechten Spieler if ball.left &lt; 0: spieler_rechts.score = spieler_rechts.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def update(): # linken Schl√§ger bewegen bewege_spieler(spieler_links, keyboard.q, keyboard.a) # rechten Schl√§ger bewegen bewege_spieler(spieler_rechts, keyboard.o, keyboard.l) bewege_ball() def zeichne_punktestand(): screen.draw.text(str(spieler_links.score), centerx=WIDTH / 2 - 80, top=20, fontsize=100) screen.draw.text(str(spieler_rechts.score), centerx=WIDTH / 2 + 80, top=20, fontsize=100) def draw(): screen.clear() spieler_links.draw() spieler_rechts.draw() ball.draw() zeichne_punktestand() pgzrun.go() ","keywords":""},{"title":"Push to Hole","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples/push-to-hole","content":"Push to Hole Beschreibung‚Äã Ein Ball muss mit der Maus in ein Loch geschoben werden. Das Loch √§ndert alle paar Sekunden seine Position. Grafiken‚Äã Programm‚Äã import pgzrun import random WIDTH = 800 HEIGHT = 800 green = 60, 180, 60 ball = Actor(&quot;ball_blau&quot;) ball.radius = ball.width / 2 ball.score = 0 loch = Actor(&quot;hole&quot;) def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def setze_ball(): ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def setze_loch(): loch.x = random.randint(0, WIDTH) loch.y = random.randint(0, HEIGHT) dauer = random.randint(3, 7) kollision_rand(loch) clock.schedule_unique(setze_loch, dauer) def on_mouse_move(pos): d = ball.distance_to(pos) if d &lt; ball.radius: stoss_laenge = ball.radius - d ball.x = ball.x + (ball.x - pos[0]) * stoss_laenge ball.y = ball.y + (ball.y - pos[1]) * stoss_laenge kollision_rand(ball) def update(): if ball.distance_to(loch) &lt; 10: ball.score = ball.score + 1 setze_ball() setze_loch() def draw(): screen.fill(green) loch.draw() ball.draw() screen.draw.text(&quot;Score: &quot; + str(ball.score), (10, 10), fontsize=60) setze_ball() setze_loch() pgzrun.go() ","keywords":""},{"title":"Tippspiel","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples/typing","content":"Tippspiel Beschreibung‚Äã Spiel, bei welchem man W√∂rter richtig abtippen muss, bevor die Zeit abl√§uft. Programm‚Äã import pgzrun import random TITLE = &quot;Typing Game&quot; WIDTH = 640 HEIGHT = 360 BG_COLOUR = (255, 255, 255) BLACK = (0, 0, 0) KEYMAP = { keys.A: &quot;a&quot;, keys.B: &quot;b&quot;, keys.C: &quot;c&quot;, keys.D: &quot;d&quot;, keys.E: &quot;e&quot;, keys.F: &quot;f&quot;, keys.G: &quot;g&quot;, keys.H: &quot;h&quot;, keys.I: &quot;i&quot;, keys.J: &quot;j&quot;, keys.K: &quot;k&quot;, keys.L: &quot;l&quot;, keys.M: &quot;m&quot;, keys.N: &quot;n&quot;, keys.O: &quot;o&quot;, keys.P: &quot;p&quot;, keys.Q: &quot;q&quot;, keys.R: &quot;r&quot;, keys.S: &quot;s&quot;, keys.T: &quot;t&quot;, keys.U: &quot;u&quot;, keys.V: &quot;v&quot;, keys.W: &quot;w&quot;, keys.X: &quot;x&quot;, keys.Y: &quot;y&quot;, keys.Z: &quot;z&quot;, keys.QUOTE: &quot;√§&quot;, keys.SEMICOLON: &quot;√∂&quot;, keys.LEFTBRACKET: &quot;√º&quot;, keys.SPACE: &quot; &quot; } words = [] file = open(&quot;wordlist.txt&quot;, &quot;r&quot;, -1, &quot;utf-8&quot;) for line in file: # Newline am Zeilenende abschneiden line = line.rstrip(&quot;\\n&quot;) # Wort zur Liste hinzuf√ºgen words.append(line) file.close() game = Actor(&quot;alien&quot;) game.level = 0 game.text = &quot;&quot; game.time = 5 MAX_TIME = 10 def update(dt): game.time = game.time - dt def draw(): screen.fill(BG_COLOUR) if game.time &lt; 0: screen.draw.text( &quot;GAME OVER&quot;, centerx=WIDTH / 2, centery=HEIGHT / 2, fontsize=60, color=BLACK ) return screen.draw.text(words[game.level], left=20, top=80, fontsize=60, color=BLACK) screen.draw.text(game.text, left=20, top=160, fontsize=60, color=(255, 0, 0)) width = WIDTH * game.time / MAX_TIME screen.draw.filled_rect(Rect((0, 10), (width, 50)), BLACK) def on_key_down(key): print(key) if game.time &lt; 0: return if key in KEYMAP: char = KEYMAP[key] if keyboard.lshift or keyboard.rshift: char = char.upper() game.text = game.text + char if key == keys.BACKSPACE: game.text = game.text[:-1] if game.text == words[game.level]: game.level = game.level + 1 game.time = game.time + 0.3 * len(game.text) game.text = &quot;&quot; pgzrun.go() ","keywords":""},{"title":"Asteroids","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/A-examples/asteroids","content":"Asteroids Grafiken‚Äã Quellen: Asteroid: OhjiroChan, OpenGameArt, Lizenz: CC0 Spaceship: Rawdanitsu, OpenGameArt, Lizenz: CC0 Laser and Thrust: Rawdanitsu, OpenGameArt, Lizenz: CC0 Programm‚Äã import math import pgzrun import random TITLE = &quot;Asteroids&quot; WIDTH = 1600 HEIGHT = 1200 ACCELERATION = 0.2 ROTATION = 3 SHOT_SPEED = 5 SHOT_COOLDOWN = 0.2 SHOT_DAMAGE = 10 SHOT_MAX_AGE = 3 background = Actor(&quot;weltraum&quot;) ship = Actor(&quot;raumschiff&quot;) thrust = Actor(&quot;raumschiff2&quot;) thrust.on = False asteroids = [] shots = [] def add_asteroid(parent=None): if parent: category = parent.category - 1 else: category = 3 asteroid = Actor(&quot;asteroid-&quot; + str(category)) if parent: asteroid.x = parent.x asteroid.y = parent.y else: asteroid.x = random.randint(0, WIDTH) asteroid.y = random.randint(0, HEIGHT) asteroid.vx = 0 asteroid.vy = 0 asteroid.category = category asteroid.stability = 30 * category acc = random.randint(1, 2) dir = random.randint(0, 360) accelerate(asteroid, acc, dir) asteroids.append(asteroid) def enable_shooting(): ship.can_shoot = True def add_shot(): shot = Actor(&quot;laser&quot;) shot.x = ship.x shot.y = ship.y shot.vx = 0 shot.vy = 0 shot.age = 0 shot.angle = ship.angle accelerate(shot, SHOT_SPEED, shot.angle) ship.can_shoot = False clock.schedule_unique(enable_shooting, SHOT_COOLDOWN) shots.append(shot) def accelerate(actor, acc, dir): a = math.radians(dir) actor.vx = actor.vx + math.cos(a) * acc actor.vy = actor.vy - math.sin(a) * acc def move(actor): actor.x = actor.x + actor.vx actor.y = actor.y + actor.vy if actor.x &gt; WIDTH: actor.x = 0 if actor.x &lt; 0: actor.x = WIDTH if actor.y &gt; HEIGHT: actor.y = 0 if actor.y &lt; 0: actor.y = HEIGHT def reset_game(): ship.x = WIDTH / 2 ship.y = HEIGHT / 2 ship.vx = 0 ship.vy = 0 ship.angle = 0 ship.speed = 0 ship.alive = True ship.can_shoot = True asteroids.clear() for i in range(1, 3): add_asteroid() def update_asteroid(asteroid): move(asteroid) i = asteroid.collidelist(shots) if i != -1: del shots[i] asteroid.stability = asteroid.stability - SHOT_DAMAGE if asteroid.stability &lt;= 0: asteroids.remove(asteroid) if asteroid.category &gt; 1: add_asteroid(asteroid) add_asteroid(asteroid) def update_shot(shot, dt): move(shot) shot.age = shot.age + dt if shot.age &gt; SHOT_MAX_AGE: shots.remove(shot) def update(dt): thrust.on = keyboard.up if keyboard.up: accelerate(ship, ACCELERATION, ship.angle) if keyboard.left: ship.angle = ship.angle + ROTATION if keyboard.right: ship.angle = ship.angle - ROTATION if keyboard.space and ship.can_shoot: add_shot() if keyboard.space and not ship.alive: reset_game() move(ship) if ship.collidelist(asteroids) != -1: ship.alive = False ship.can_shoot = False for asteroid in asteroids: update_asteroid(asteroid) for shot in shots: update_shot(shot, dt) def draw(): background.draw() for asteroid in asteroids: asteroid.draw() for shot in shots: shot.draw() if ship.alive: if thrust.on: thrust.x = ship.x thrust.y = ship.y thrust.angle = ship.angle thrust.draw() ship.draw() else: screen.draw.text(&quot;GAME OVER&quot;, center=(WIDTH / 2, HEIGHT / 2), fontsize=100) screen.draw.text( &quot;Press SPACE to start&quot;, center=(WIDTH / 2, HEIGHT / 2 + 60), fontsize=30 ) reset_game() pgzrun.go() ","keywords":""},{"title":"Zeichnen","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/draw","content":"Zeichnen Kreise‚Äã screen.draw.circle((x, y), r, farbe) zeichnet eine Kreislinie mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. screen.draw.filled_circle((x, y), r, farbe) zeichnet einen ausgef√ºllten Kreis mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Rechtecke‚Äã Rect(x, y, w, h) erstellt ein Rechteck-Objekt. Dabei sind x und y die Koordinaten der linken oberen Ecke, w ist die Breite und h die H√∂he des Rechtecks. screen.draw.rect(rect, farbe) zeichnet ein Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. screen.draw.filled_rect(rect, farbe) zeichnet ein ausgef√ºlltes Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. Linien‚Äã screen.draw.line((x1, y1), (x2, y2), farbe) zeichnet eine Linie vom Punkt (x1, y1) zum Punkt (x2, y2) in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Text‚Äã screen.draw.text(text, left=x, top=y, fontsize=, fontname=, color=) zeichnet den Text text an der angegebenen Position. Mit fontsize= kann die Schriftgr√∂sse festgelegt werden. Die horizontale Ausrichtung des Texts wird durch left=, centerx= oder right= angegeben, die vertikale Ausrichtung durch top=, centery= oder bottom=: Mit fontname= wird der Name einer Schriftart-Datei angegeben, welche im Unterverzeichnis fonts vorhanden sein muss. Mit color=(r, g, b) wird die Farbe angegeben. F√ºr die Angabe der horizontalen und vertikalen Koordinate muss je einer der obenstehenden Namen verwendet werden. Die folgende Anweisung zeichnet beispielsweise den Text ¬´Hallo Welt¬ª so, dass sich der Punkt (100, 100) unten und horizontal in der Mitte des Texts befindet: screen.draw.text(&quot;Hallo Welt&quot;, centerx=100, bottom=100, color=(255, 0, 0)) ","keywords":""},{"title":"How-To","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/howto","content":"How-To","keywords":""},{"title":"Aufrufe planen","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/clock","content":"Aufrufe planen Um eine Aktion erst nach einer bestimmten Zeit auszul√∂sen, k√∂nnen mit dem clock-Objekt zuk√ºnftige Aufrufe von Unterprogrammen geplant werden. clock.schedule_unique(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Alle anderen geplanten Aufrufe des gleichen Unterprogramms werden abgebrochen. clock.schedule(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.schedule_interval(u, s) plant den regelm√§ssigen Aufruf des Unterprogramms u alle s Sekunden. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.unschedule(u) bricht alle geplanten Aufrufe des Unterprogramms u ab. Beispiel‚Äã Im folgenden Beispiel √§ndert das Aussehen des Fisches 1.5 Sekunden, nachdem die [Space]-Taste gedr√ºckt wurde. F√ºr die gew√ºnschte Aktion wird das Unterprogramm aendere_nemo definiert. Der Name des Unterprogramms kann frei gew√§hlt werden. Mit der Anweisung clock.schedule() wird der Aufruf geplant. Dabei werden in Klammern das aufzurufende Unterprogramm und die Verz√∂gerung in Sekunden angegeben: import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def aendere_nemo(): nemo.image = &quot;fisch_rot_links&quot; def update(): if keyboard.space: clock.schedule(aendere_nemo, 1.5) def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Geschoss","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/howto/bullet","content":"Geschoss Schuss ausl√∂sen‚Äã Ein Geschoss ist ein Aktor, der sich nicht von Anfang an bewegt. Der Aktor muss sich somit merken, ob er schon ¬´existiert¬ª. Dies kann erreicht werden, indem eine Variable geschoss.aktiv definiert wird: geschoss = Actor(&quot;laser&quot;) geschoss.aktiv = False Der Schuss wird nur gezeichnet, wenn er aktiv ist: def draw(): if geschoss.aktiv: geschoss.draw() Wenn der Schuss ausgel√∂st wird, wird er ¬´aktiviert¬ª. Der Schuss wird an die Stelle gesetzt, wo sich das Objekt befindet, welches den Schuss abgibt: def schiesse(): geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.vx = 2 geschoss.vy = 0 geschoss.aktiv = True Schussrichtung‚Äã Damit sich der Schuss in die richtige Richtung bewegt, m√ºssen die horizontale und vertikale Geschwindigkeit des Geschosses vxv_xvx‚Äã und vyv_yvy‚Äã ausgerechnet werden. Bekannt sind die gew√ºnschte Geschwindigkeit vvv und der Winkel aaa: Im rechtwinkligen Dreieck k√∂nnen nun vxv_xvx‚Äã und vyv_yvy‚Äã mit den trigonometrischen Formeln berechnet werden: vx=v‚ãÖsin‚Å°(a)vy=v‚ãÖcos‚Å°(a)\\ v_x = v \\cdot \\sin(a)\\qquad v_y = v \\cdot \\cos(a)¬†vx‚Äã=v‚ãÖsin(a)vy‚Äã=v‚ãÖcos(a) Um die trigonometrischen Funktionen in Python verwenden zu k√∂nnen, muss das Modul math importiert werden: import math Ausserdem muss der Richtungswinkel des Raumschiffs von Grad nach Radiant umgerechnet werden: a = math.radians(raumschiff.angle) Nun k√∂nnen die trigonometrischen Formeln umgesetzt werden. Es muss beachtet werden, dass in Pygame Zero im Gegensatz zur Mathematik die y-Achse nach unten zeigt. Deshalb wird der Wert von vyv_yvy‚Äã negiert. geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) Vollst√§ndiges Beispiel‚Äã import pgzrun import math WIDTH = 1600 HEIGHT = 1200 hintergrund = Actor(&quot;weltraum&quot;) raumschiff = Actor(&quot;raumschiff&quot;) raumschiff.x = WIDTH / 2 raumschiff.y = HEIGHT / 2 geschoss = Actor(&quot;laser&quot;) geschoss.vx = 0 geschoss.vy = 0 geschoss.aktiv = False def draw(): hintergrund.draw() raumschiff.draw() if geschoss.aktiv: geschoss.draw() def schiesse(): geschoss.aktiv = True geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.angle = raumschiff.angle a = math.radians(raumschiff.angle) v = 3 geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) def on_key_down(key): if key == keys.SPACE: schiesse() def update(): geschoss.x = geschoss.x + geschoss.vx geschoss.y = geschoss.y + geschoss.vy if keyboard.a: raumschiff.angle = raumschiff.angle + 2 if keyboard.d: raumschiff.angle = raumschiff.angle - 2 pgzrun.go() ","keywords":""},{"title":"Tastatursteuerung","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/howto/keyboard-control","content":"Tastatursteuerung Beschreibung‚Äã Einfaches Beispiel, wie eine Figur mit der Tastatur gesteuert wird. Programm‚Äã import pgzrun WIDTH = 800 HEIGHT = 600 hintergrund = 0, 150, 220 nemo = Actor(&quot;fisch_rot_rechts&quot;) nemo.x = WIDTH / 2 nemo.y = HEIGHT / 2 def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def update(): if keyboard.left: nemo.x = nemo.x - 3 nemo.image = &quot;fisch_rot_links&quot; if keyboard.right: nemo.x = nemo.x + 3 nemo.image = &quot;fisch_rot_rechts&quot; if keyboard.up: nemo.y = nemo.y - 3 if keyboard.down: nemo.y = nemo.y + 3 kollision_rand(nemo) def draw(): screen.fill(hintergrund) nemo.draw() pgzrun.go() ","keywords":""},{"title":"Parallax-Scrolling","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/howto/parallax","content":"Parallax-Scrolling Bilder‚Äã Bildquelle: Craftpix.net, OpenGameArt, Lizenz: OGA Code‚Äã import pgzrun WIDTH = 800 HEIGHT = 450 ebenen = [] for i in range(7): name = &quot;hintergrund&quot; + str(i) ebene = Actor(name) ebene.geschwindigkeit = 0.2 * i ebenen.append(ebene) def update(): for ebene in ebenen: ebene.x = ebene.x - ebene.geschwindigkeit if ebene.right &lt; 0: ebene.x = ebene.x + ebene.width def draw(): screen.clear() for ebene in ebenen: ebene.draw() ebene.x = ebene.x + ebene.width ebene.draw() ebene.x = ebene.x - ebene.width pgzrun.go() ","keywords":""},{"title":"Jump & Run","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/howto/jump","content":"Jump &amp; Run import pgzrun WIDTH = 800 HEIGHT = 600 alien = Actor(&quot;alien&quot;) alien.x = WIDTH / 2 alien.vy = 0 schwerkraft = 0.1 boden = 550 sprung = -5 hintergrundfarbe = 0, 0, 0 def update(): alien.vy = alien.vy + schwerkraft alien.y = alien.y + alien.vy if alien.bottom &gt; boden: alien.vy = 0 alien.bottom = boden if keyboard.space and alien.vy == 0: alien.vy = sprung def draw(): screen.fill(hintergrundfarbe) alien.draw() pgzrun.go() ","keywords":""},{"title":"Tastatur","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/keyboard","content":"Tastatur Es gibt zwei M√∂glichkeiten, auf Tastatureingaben zu reagieren. Es wird der aktuelle Zustand einer bestimmten Taste ermittelt. Das ist beispielsweise der Fall, wenn sich die Spielfigur bewegen soll, falls eine bestimmte Taste gedr√ºckt ist. Es wird auf das Dr√ºcken oder Loslassen einer Taste reagiert. In diesem Fall wird von einem Ereignis gesprochen. Dies wird beispielsweise verwendet, wenn eine Spielfigur springen soll, wenn eine Taste gedr√ºckt wird.","keywords":""},{"title":"Tastaturereignisse","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/keyboard/event","content":"Tastaturereignisse def on_key_down(taste): wird aufgerufen, wenn eine Taste gedr√ºckt wird. def on_key_up(taste): wird aufgerufen, wenn eine Taste losgelassen wird. Die Variable taste kann folgende Werte annehmen: Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeys.A\t[Y]\tkeys.Y [B]\tkeys.B\t[Z]\tkeys.Z\t[0]\tkeys.K_0 [C]\tkeys.C\t[√§]\tkeys.QUOTE\t[1]\tkeys.K_1 [D]\tkeys.D\t[√∂]\tkeys.SEMICOLON\t[2]\tkeys.K_2 [E]\tkeys.E\t[√º]\tkeys.LEFTBRACKET\t[3]\tkeys.K_3 [F]\tkeys.F\t[,]\tkeys.COMMA\t[4]\tkeys.K_4 [G]\tkeys.G\t[.]\tkeys.PERIOD\t[5]\tkeys.K_5 [H]\tkeys.H\t[Space]\tkeys.SPACE\t[6]\tkeys.K_6 [I]\tkeys.I\t[Tab]\tkeys.TAB\t[7]\tkeys.K_7 [J]\tkeys.J\t[Backspace]\tkeys.BACKSPACE\t[8]\tkeys.K_8 [K]\tkeys.K\t[Enter]\tkeys.RETURN\t[9]\tkeys.K_9 [L]\tkeys.L\t[Esc]\tkeys.ESCAPE\t[F1]\tkeys.F1 [M]\tkeys.M\t[CapsLock]\tkeys.CAPSLOCK\t[F2]\tkeys.F2 [N]\tkeys.N\tLinke [Shift]\tkeys.LSHIFT\t[F3]\tkeys.F3 [O]\tkeys.O\tRechte [Shift]\tkeys.RSHIFT\t[F4]\tkeys.F4 [P]\tkeys.P\tLinke [Ctrl]\tkeys.LCTRL\t[F5]\tkeys.F5 [Q]\tkeys.Q\tRechte [Ctrl]\tkeys.RCTRL\t[F6]\tkeys.F6 [R]\tkeys.R\tLinke [Alt]\tkeys.LALT\t[F7]\tkeys.F7 [S]\tkeys.S\tRechte [Alt Gr]\tkeys.RALT\t[F8]\tkeys.F8 [T]\tkeys.T\t[Up]\tkeys.UP\t[F9]\tkeys.F9 [U]\tkeys.U\t[Left]\tkeys.LEFT\t[F10]\tkeys.F10 [V]\tkeys.V\t[Down]\tkeys.DOWN\t[F11]\tkeys.F11 [W]\tkeys.W\t[Right]\tkeys.RIGHT\t[F12]\tkeys.F12 [X]\tkeys.X ","keywords":""},{"title":"Maus","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/mouse","content":"Maus def on_mouse_down(pos): wird aufgerufen, wenn eine Maustaste gedr√ºckt wird. def on_mouse_up(pos): wird aufgerufen, wenn eine Maustaste losgelassen wird. def on_mouse_move(pos): wird aufgerufen, wenn die Maus bewegt wird.","keywords":""},{"title":"Random Walk","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/random-walk","content":"Random Walk Die Random-Walk-Theorie wurde zun√§chst von der franz√∂sischen Mathematikerin Louise Bachelier entworfen, die glaubte, dass Aktienkursentwicklungen wie die Schritte eines Betrunkenen seien: unberechenbar. 1 @ Betrachten wir den vermeintlich zuf√§lligen Weg einer Ameise, die jeweils nach einer unbekannten Anzahl Schritten die Richtung wechselt. Wir schauen uns die ersten 20 Richtungswechsel an und √ºberlegen uns, ob die Ameise von einer runden Tischplatte mit 100 cm Radius herunterfallen w√ºrde. Ameise.py Simulieren Sie den zuf√§lligen Weg einer Ameise, die 20 mal die Richtung wechselt. Folgende Annahmen werden getroffen: die Ameise macht mindestens 4, aber maximal 20 Schritte in dieselbe Richtung die Ameise dreht sich jeweils zwischen 0 und 360 Grad ameise.py from turtle import * from random import randint # Tischplatte zeichnen pencolor('red') penup() goto(0, -100) pendown() circle(100) pencolor('black') # Random walk Hinweis Mit randint(start, ende) k√∂nnen Sie einen zuf√§lligen Wert im Bereich zwischen start und ende erzeugen. from random import randint print('Zufallszahl [0, 2]', randint(0, 2)) print('Zufallszahl [10, 20]', randint(10, 20)) print('Zufallszahl [-20, 5]', randint(-20, 5)) Zusatz 1: Simulieren Sie 30 Ameisen - wie viele fallen vom Tisch? Zusatz 2: Mit distance(0, 0) kann die Distanz zum Ursprung ausgegeben werden - zeigen Sie jeweils die Distanz zum Ursprung mit an. SSR Quelle: Gloassar ‚Ü©","keywords":""},{"title":"Musik und Soundeffekte","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/sound","content":"Musik und Soundeffekte Soundeffekte‚Äã Soundeffekte m√ºssen im Format WAV oder OGG im Unterordner sound abgespeichert werden. sounds.name.play() spielt den Soundeffekt mit dem Name name ab. Um beispielsweise den Soundeffekt extraleben.wav abzuspielen, schreibt man: sounds.extraleben.play() Musik‚Äã Musikdateien m√ºssen im Format MP3 oder OGG im Unterordner music abgelegt werden. Um die Datei hintergrundmusik.mp3 abzuspielen, schreibt man: music.play(&quot;hintergrundmusik&quot;) music.play(name) spielt die Musikdatei mit dem Namen name ab. Das Abspielen wird endlos wiederholt. music.play_once(name) spielt die Musikdatei mit dem Namen name ab. Die Musikdatei wird nur einmal abgespielt. music.queue(name) f√ºgt die Musikdatei mit dem Namen name in die Abspielliste ein. music.stop() stoppt das Abspielen der Musik. music.pause() pausiert das Abspielen der Musik. music.unpause() nimmt das Abspielen der Musik nach einer Pause wieder auf. music.is_playing() √ºberpr√ºft, ob zur Zeit Musik abgespielt wird.","keywords":""},{"title":"Fenster","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/window","content":"Fenster Fenster definieren‚Äã TITLE legt den Fenstertitel fest. WIDTH legt die Breite des Fensters in Pixel fest. HEIGHT legt die H√∂he des Fensters in Pixel fest. import pgzrun TITLE = 'Mein Spiel' WIDTH = 800 HEIGHT = 600 pgzrun.go() Fenster verwenden‚Äã Diese Anweisungen d√ºrfen nur in einem Unterprogramm verwendet werden. screen.width liefert die Breite des aktuellen Fensters in Pixel zur√ºck. screen.height liefert die H√∂he des aktuellen Fensters in Pixel zur√ºck. screen.clear() f√ºllt das Fenster mit der Farbe Schwarz. screen.fill(farbe) f√ºllt das Fenster mit der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Fenster schliessen‚Äã quit() schliesst das Fenster.","keywords":""},{"title":"Tastaturzustand","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/PyGameZero/keyboard/state","content":"Tastaturzustand Das Objekt keyboard repr√§sentiert die Tastatur. F√ºr jede Taste gibt eine entsprechende Variable des keyboard-Objekts an, ob diese gerade gedr√ºckt ist. Normale Tasten‚Äã Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeyboard.a\t[Y]\tkeyboard.y\t[0]\tkeyboard.k_0 [B]\tkeyboard.b\t[Z]\tkeyboard.z\t[1]\tkeyboard.k_1 [C]\tkeyboard.c\t[√§]\tkeyboard.quote\t[2]\tkeyboard.k_2 [D]\tkeyboard.d\t[√∂]\tkeyboard.semicolon\t[3]\tkeyboard.k_3 [E]\tkeyboard.e\t[√º]\tkeyboard.leftbracket\t[4]\tkeyboard.k_4 [F]\tkeyboard.f [5]\tkeyboard.k_5 [G]\tkeyboard.g\t[,]\tkeyboard.comma\t[6]\tkeyboard.k_6 [H]\tkeyboard.h\t[.]\tkeyboard.period\t[7]\tkeyboard.k_7 [I]\tkeyboard.i\t[Space]\tkeyboard.space\t[8]\tkeyboard.k_8 [J]\tkeyboard.j\t[Tab]\tkeyboard.tab\t[9]\tkeyboard.k_9 [K]\tkeyboard.k\t[Backspace]\tkeyboard.backspace\t[F1]\tkeyboard.f1 [L]\tkeyboard.l\t[Enter]\tkeyboard.return\t[F2]\tkeyboard.f2 [M]\tkeyboard.m\t[Esc]\tkeyboard.escape\t[F3]\tkeyboard.f3 [N]\tkeyboard.n\t[CapsLock]\tkeyboard.capslock\t[F4]\tkeyboard.f4 [O]\tkeyboard.o\tLinke [Shift]\tkeyboard.lshift\t[F5]\tkeyboard.f5 [P]\tkeyboard.p\tRechte [Shift]\tkeyboard.rshift\t[F6]\tkeyboard.f6 [Q]\tkeyboard.q\tLinke [Ctrl]\tkeyboard.lctrl\t[F7]\tkeyboard.f7 [R]\tkeyboard.r\tRechte [Ctrl]\tkeyboard.rctrl\t[F8]\tkeyboard.f8 [S]\tkeyboard.s\tLinke [Alt]\tkeyboard.lalt\t[F9]\tkeyboard.f9 [T]\tkeyboard.t\tRechte [Alt Gr]\tkeyboard.ralt\t[F10]\tkeyboard.f10 [U]\tkeyboard.u\t[Up]\tkeyboard.up\t[F11]\tkeyboard.f11 [V]\tkeyboard.v\t[Left]\tkeyboard.left\t[F12]\tkeyboard.f12 [W]\tkeyboard.w\t[Down]\tkeyboard.down [X]\tkeyboard.x\t[Right]\tkeyboard.right Ziffernblock‚Äã Taste\tVariable\tTaste\tVariable[0]\tkeyboard.kp0\t[9]\tkeyboard.kp9 [1]\tkeyboard.kp1\t[.] / [Del]\tkeyboard.kp_period [2] / [Down]\tkeyboard.kp2\t[Enter]\tkeyboard.kp_enter [3]\tkeyboard.kp3\t[+]\tkeyboard.kp_plus [4] / [Left]\tkeyboard.kp4\t[-]\tkeyboard.kp_minus [5]\tkeyboard.kp5\t[*]\tkeyboard.kp_multiply [6] / [Right]\tkeyboard.kp6\t[/]\tkeyboard.kp_divide [7]\tkeyboard.kp7\t[Num]\tkeyboard.numlock [8] / [Up]\tkeyboard.kp8 import pgzrun def update(): if keyboard.a: print(&quot;A wird gedr√ºckt&quot;) if keyboard.w: print(&quot;W wird gedr√ºckt&quot;) if keyboard.s: print(&quot;S wird gedr√ºckt&quot;) if keyboard.d: print(&quot;D wird gedr√ºckt&quot;) pgzrun.go() ","keywords":""},{"title":"10. Repetitionsfragen","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/repetition","content":"10. Repetitionsfragen Algorithmus‚Äã Was ist ein Algorithmus? Welche 5. Strukturelemente enth√§lt ein Algorithmus? Erstellen Sie einen Algorithmus f√ºr das Zusammenfalten eines T-Shirts. SSR Code Lesen‚Äã In welchem Code-Teil wird das Viereck mit der Stiftdicke 5 gezeichnet. Welche Seitenl√§nge hat das Dreieck mit Stiftdicke 7? Bei welchen Koordinaten wird das F√ºnfeck mit Stiftdicke 3 gezeichnet? F√ºgen Sie ein Quadrat mit der Seitenl√§nge 20 bei der Koordinate (20, 10) und der Stiftdicke 3 hinzu. Unterstreichen Sie in den Zeilen 1-12 alle Parameter Markieren Sie in den Zeilen 1-12 alle Befehlsnamen Turtle Ausgabe from turtle import * def move(x, y): penup() goto(x, y) pendown() pensize(2) for i in range(3): forward(18) left(120) move(-20, 30) pensize(5) for i in range(4): forward(27) left(90) move(30, 10) for i in range(5): forward(13) left(72) move(80, 80) pensize(3) for i in range(4): forward(77) left(90) move(-40, -20) for i in range(5): forward(23) left(72) move(-80, 80) pensize(7) for i in range(3): forward(44) left(120) SSR Code Ausf√ºhren‚Äã Zeichnen Sie die Ausgabe des folgenden Programms from turtle import * def square(): for i in range(4): forward(10) right(90) forward(30) left(90) forward(10) right(90) for i in range(3): forward(10) right(90) forward(10) left(90) forward(10) left(90) forward(10) right(90) left(90) square() SSR Struktogramm‚Äã Zeichnen Sie f√ºr folgende Ausgangslage ein Struktogramm: Die Benutzer:in wird nach ihrer Lieblingszahl gefragt. Die eingegebene Zahl wird verdoppelt und mit 3 addiert. So oft zeichnet man nun 55 Schritte vorw√§rts mit einer Drehung um 113¬∞ am Ende. Zusatz: Anstatt 113¬∞ soll soviel gedreht werden, dass eine geschlossene Figur entsteht. SSR Programmieren (am PC)‚Äã Definition Text vervielfachen‚Äã In Python kann Text verfielf√§ltigt werden, indem er mit der gew√ºnschten Anzahl wiederholungen multipliziert wird: print('Hallo' * 3) print('üå≤ ' * 24) Schreiben Sie einen Befehl dreieck, der ein Dreieck in Textform ausgibt. Die Gr√∂sse des Dreiecks soll als Parameter √ºbergeben werden k√∂nnen. Beispiele: dreieck(1) ergibt * dreieck(2) ergibt * * * dreieck(3) ergibt * * * * * * dreieck.py SSR","keywords":""},{"title":"2. Zeichnungsfl√§che","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/screen","content":"2. Zeichnungsfl√§che Die Zeichenfl√§che kann konfiguriert werden, z.B. mit einer Hintergrundfarbe, oder aber auch die Dimensionen des Hintergrunds. Standarm√§ssig ist keine Hintergrundfarbe gesetzt (=durchsichtig) und die Dimensionen die Koordinaten des Bildschirms sind 500x500 Pixel. Das zugrundeliegende Koordinatensystem hat den Ursprung immer in der Mitte des Bildschirms. from turtle import * # wenn die Bildschirm-Dimensionen ver√§ndert werden sollen, muss dies # zwingend als erster Befehl gemacht werden. # Die Gr√∂sse kann anschliessend nicht mehr ver√§ndert werden. turtle.set_defaults(canvwidth=200, canvheight=100) # Die Hintergrundfarbe kann auch ge√§ndert werden. Screen().bgcolor('orange') forward(100) note Wird mit Screen().bgcolor('yellow') eine Hintergrundfarbe festgelegt, kann das umgebende Rechteck der Figur (englisch Bounding Box) nicht mehr bestimmt werden und es wird immer die ganze Bildfl√§che heruntergeladen.","keywords":""},{"title":"‚≠ê Rekursion","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/rekursion","content":"‚≠ê Rekursion Ein Unterprogramm kann sich selber aufrufen. Das ergibt im Normalfall eine unendliche Wiederholung, so dass das Programm abst√ºrzt. Wird das Unterprogramm jedoch jedesmal mit einem ver√§nderten Parameter aufgerufen, so kann eine Abbruchbedingung erstellt werden, welche angibt, ob das Unterprogramm erneut aufgerufen werden soll oder nicht. Beispiel‚Äã Im folgenden Programm wird ein einfacher bin√§rer Baum gezeichnet: from turtle import * left(90) def baum(gr√∂sse): forward(gr√∂sse) left(45) forward(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) forward(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(40) Diesen Baum k√∂nnen wir nun so umbauen, dass jeder Ast auch wieder ein bin√§rer Baum ist: from turtle import * left(90) def baum(gr√∂sse): if gr√∂sse &lt; 5: forward(gr√∂sse) else: forward(gr√∂sse) left(45) baum(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) baum(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(100) Bemerken Sie, dass eine Abbruchbedingung eingef√ºgt wurde - falls die gr√∂sse kleiner als 5 ist, wird nur eine Strecke gezeichnet, andernfalls ein ganzer Baum. Koch Kurve‚Äã Aufgabe Eine Koch-Kurve ist wie folgt aufgebaut: wobei ein einzelnes Element wie folgt aussieht: koch.py from turtle import * ‚≠êÔ∏è Zusatz: Zeichnen Sie ein Sechseck bestehend aus 6 Koch-Kurven. ‚≠êÔ∏è Pythagorasbaum‚Äã Versuchen Sie, einen rekursiven Pythagoras-Baum zu zeichnen. Ein Pythagorasbaum Pythagorasbaum pythagoras.py from turtle import * Weitere Inspirationen f√ºr Fraktale üëâ https://natureofcode.com/book/chapter-8-fractals/","keywords":""},{"title":"4. Fehler","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/errors","content":"4. Fehler Sie haben bereits festgestellt, dass Python sehr pingelig ist was Tippfehler und die pr√§zise Verwendung von Klammern, Anf√ºhrungszeichen, Doppelpunkten und Leerzeichen angeht. Jede Sprache hat seine eigenen Regeln, wie W√∂rter und S√§tze strukturiert sein m√ºssen. Diese Regeln sind allgemein bekannt als die Syntax einer Sprache. Bei Programmiersprachen wird mit der Syntax festgelegt, welche W√∂rter, in welcher Reihenfolge und in welchem Kontext erlaubt sind. Syntax Fehler (syntax errors)‚Äã Syntax Fehler sind kleine Fehler in einem Programm. Da das Programm nicht von einem Mensch, sondern von einem Computer &quot;gelesen&quot; und interpretiert wird, reicht ein Tippfehler, ein fehlendes Komma oder eine fehlende Klammer, dass das Programm nicht mehr verstanden werden kann. Die Python Sprache setzt sich aus folgenden Elementen zusammen: Schl√ºsselw√∂rter (Statements): W√∂rter oder Zeichen, die ohne Anf√ºhrungszeichen und ohne Klammern geschrieben werden. z.B. import, from oder for, aber auch : oder *. Sie m√ºssen in einer vordefinierten Reihenfolge vorliegen, damit diese von Python verstanden werden. (‚Ü© alle Schl√ºsselw√∂rter) Befehle (Unterprogramme, Funktionen): vordefinierte Befehle, die mit einer runden Klammer aufgerufen werden. z.B. print('hello') Variablen: Namen, die einen Wert enthalten H√§ufigste Ursachen Fehler bei Schl√ºsselw√∂rtern vergessene oder falsch eingesetzte Feldtrenner (z.B. :) Falsche Anordnung von Schl√ºsselw√∂rtern/Feldtrennern Beispiele‚Äã frm turtle import * forward(100) from turtle import * goto(100 50) from turtle import * for i in range(4) forward(25) right(90) Fehler finden Untersuchen Sie obenstehende Programmschnipsel. Was sagen Ihnen die Fehlermeldungen? Auf welcher Zeile steht die Art des Fehlers? Wo finden Sie Hinweise auf den Fehler? Flicken Sie sie... error1.py frm turtle import * forward(100) error2.py from turtle import * goto(100 50) Hinweis Was macht der Befehl goto? Schauen Sie die Funktionsweise unter Turtle Befehle#goto(x, y) nach error3.py from turtle import * for i in range(4) forward(25) right(90) SSR Namens Fehler (NameError)‚Äã Liegt ein Fehler vor, der nicht bei Schl√ºsselw√∂rtern (oder deren Anordnung) vorliegt, so handelt es sich oft um einen Namens-Fehler (NameError). Es wird also versucht, ein Unterprogramm zu √∂ffnen, das aber unter diesem Namen nicht gefunden werden kann. H√§ufigste Ursachen Die h√§ufigste Ursachen von NameErrors sind Vertipper im Namen des Befehls nicht importierte Befehle (z.B. from turtle import * fehlt) Beispiele‚Äã from turtle import * forwrd(100) Der angegebene Befehl forwrd kann nicht gefunden werden, da er weder in einer importierten Bibliothek, noch im aktuellen Programm gefunden werden kann. Der gleiche Fehler tritt auf, wenn der Befehl zwar richtig geschrieben wird, das Importieren aber vergessen geht: forward(100) Fehler finden Finden und l√∂sen Sie die entstandenen Fehler error.py from math import ceil, floor print('15.3 gerundet =', round(15.3)) print('15.8 gerundet =', round(15.8)) print('15.3 aufgerundet =', ceyl(15.3)) print('15.8 abgerundet =', flor(15.8)) Hinweis Suchen Sie die fehlerhaften Befehle in Kombination mit Python auf Google, bspw. python ceyl. SSR Einr√ºckungsfehler (IndentationError)‚Äã Python erwartet nach jedem Doppelpunkt :, dass ein einger√ºckter Codeblock kommt. Falls kein einger√ºckter Codeblock gefunden wird, entsteht ein IndentationError. Wird jedoch f√§lschlicherweise eine Zeile einger√ºckt, so wird ebenfalls dieser Fehler angezeigt. H√§ufigste Ursachen Die n√§chste Zeile nach einem Doppelunkt : ist nicht einger√ºckt Eine Zeile ist f√§lschlicherweise einger√ºckt ein Leerschlag zu wenig einger√ºckt Beispiel‚Äã Nicht einger√ºckt for i in range(5): print('Hallo') Korrektur for i in range(5): print('Hallo') Falsch einger√ºckt print('Hallo') print('wie') print('gehts?') Korrektur print('Hallo') print('wie') print('gehts?') Fehler finden Finden und l√∂sen Sie die entstandenen Fehler, so dass die Ausgabe Hallo zum 0 Hallo zum 1 Ende lautet. errors.py for i in range(2): print('Hallo zum', i) print('Ende') SSR Logikfehler‚Äã Aus der Sicht von Python funktioniert alles, top! üëç Sobald aber das Programm ausgef√ºhrt wird, macht es nicht das, was Sie sich gew√ºnscht haben - Logik-Fehler üí©... Diese Fehler sind im allgemeinen am schwierigsten zu finden. Ein h√§ufiger Fehler ist aber, dass man bei einem Befehl die runden Klammern am Ende vergisst - f√ºr Python kein Problem, da es den Befehl kennt, jedoch nicht dazu aufgefordert wird, diesen auszuf√ºhren. H√§ufigste Ursachen Checkliste f√ºr Logikfehler sind bei Befehlen die runden Klammern () am Ende angegeben? Beispiel‚Äã from turtle import * penup() goto(-10, 10) pendown for i in range(4): forward(20) left(90) Auf Zeile 4 fehlen die runden Klammern - pendown wird nicht ausgef√ºhrt! Fehler beheben: Den Befehl mit pendown() aufrufen. Fehler finden Finden und beheben Sie alle Fehler, so dass folgende Ausgabe entsteht: errors.py from turtle import * fillcolor(&quot;Rot&quot;) penup() goto(-125 125) begin_fill() for i in range(4) forward(250) left(90) end_fill() forward(150) links(90) forward(50) fillcolor(&quot;white&quot;) begin_fill() for i in range(4): forward(50) right(90) forward(50) left(90) forward(50) left(90) end_fill SSR","keywords":""},{"title":"6. Parameter ‚äï‚äñ","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/functions-params","content":"6. Parameter ‚äï‚äñ Ein weiteres Strukturelement eines Algorithmus sind Parameter. Die Verwendung von Parametern haben wir bereits in Aktion gesehen - im Struktogramm sind alle Parameter unterstrichen, in Python werden alle Parameter als Liste, abgetrennt mit Kommas, in den runden Klammern geschrieben. Zur Erinnerung Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Beispiel: Bei einem Online-Rezept kann der Parameter Anzahl Personen mit den Kn√∂pfen ‚äï und ‚äñ variiert werden - die Mengenangaben werden dann aktualisiert. Aufgabe Markieren Sie im folgenden Programm (links) wie folgt: Parameter unterstreichen Befehlsnamen gelb markieren from turtle import * goto(20, 30) for i in range(5): left(90) forward(17) right(90) forward(29) SSR Wie k√∂nnen Unterprogramme geschrieben werden, die Parameter akzeptieren? Untersuchen Sie die folgenden Unterprogramme (f√ºhren Sie diese aus!) und notieren Sie sich, was Sie feststellen. Unterprogramme mit Parametern hello.py def hallo(name): print('Hallo', name) hallo('Maria') hallo('Reto') hallo('Hans') rechnen.py def quotient(zahl1, zahl2): print(zahl1, ':', zahl2, '=', zahl1 / zahl2) quotient(2, 3) quotient(5, 9) quotient(12, 20 + 4) ‚≠êÔ∏è Was sind die Parameter bei quotient(12, 20 + 4)? In welcher Reihenfolge werden diese verrechnet? SSR Unterprogramme mit Parametern‚Äã Parameter sind also Werte, die an ein Unterprogramm √ºbergeben werden k√∂nnen. Damit der √ºbergebene Wert im Unterprogramm wiederverwendet werden kann, braucht jeder Parameter einen Namen. Der Wert ist dann √ºber diesen Namen abrufbar. Der Parametername ist frei w√§hlbar, sollte aber seine Bedeutung widerspiegeln. Beispiel: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) color('red') quadrat(50) # ein Quadrat mit der Gr√∂sse 50 zeichnen color('blue') quadrat(100) # ein Quadrat mit der Gr√∂sse 100 zeichnen Mehrere Parameter‚Äã Manchmal ist es praktisch (oder auch n√∂tig), mehrere Parameter an ein Unterprogramm zu √ºbergeben. Das haben wir etwa beim Befehl goto(x, y) bereits gesehen. Beim obigen Programm k√∂nnte etwa auch die Farbe direkt im Unterprogramm square gesetzt werden: from turtle import * def quadrat(size, farbe): color(farbe) for i in range(4): forward(size) left(90) quadrat(50, 'red') # ein rotes Quadrat mit der Gr√∂sse 50 zeichnen quadrat(100, 'blue') # ein blaues Quadrat mit der Gr√∂sse 100 zeichnen Es ist prinzipiell m√∂glich, beliebig viele Parameter nacheinander zu √ºbergeben. H√§ufige Fehler Ein h√§ufiger Fehler sind vergessene Kommas zwischen zwei Parameternamen. Dann entsteht ein SyntaxError. Parameternamen sechseck.py from turtle import * Definieren Sie das Unterprogramm sechseck(size) welches ein Sechseck mit der Gr√∂sse size zeichnet. Rufen Sie das Programm mit sechseck(20) auf. Erzeugen Sie nun 10 Sechsecke. Das kleinste Sechseck hat die Seitenl√§nge 10, das gr√∂sste die Seitenl√§ng 100. F√ºgen Sie der Funktion sechseck(size) den Parameter farbe hinzu und erzeugen Sie mit folgendes Bild: Farben: violet, indigo, blue, green, lime, lightgreen, yellow, orange, orangered, red ‚ùì In welcher Reihenfolge m√ºssen die Sechsecke gezeichnet werden, damit genau das obige Bild entsteht? Tipp: Die Stiftdicke k√∂nnen Sie mit pensize(10) auf 10 setzen. SSR Wiederholungen‚Äã Wiederholung: üîÅ Wiederholte Ausf√ºhrung Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt. from turtle import * for i in range(4): forward(50) left(90) Wozu steht eigentlich das i im for i in range(4)? Das ist fast wie ein Parameter: i enth√§lt die Anzahl bereits ausgef√ºhrter Wiederholungen. W√§hrend Wiederholung 1: i=0, keine Wiederholung abgeschlossen ist. W√§hrend Wiederholung 2: i=1, eine Wiederholung ist bereits abgeschlossen. W√§hrend Wiederholung 3: i=2, zwei Wiederholungen sind bereits abgeschlossen. W√§hrend Wiederholung 4: i=3, drei Wiederholungen sind bereits abgeschlossen. Der Wert, welcher in i steht, kann auch verwendet werden: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) for i in range(10): quadrat(i * 10 + 10) ‚≠êÔ∏è Zusatzparameter von range() Definition range(start, ende, schritt)‚Äã Der Befehl range kann mit bis zu drei Parametern arbeiten, wobei start der erste verwendete Wert, ende das obere ganzzahlige Limit angibt, welches aber selber nie erreicht wird! und schritt den Abstand zwischen zwei Zahlen angibt. for i in range(2, 11, 3): print(i) Im obigen Beispiel startet i bei 2 und wird solange um 3 erh√∂ht, bis die Zahl 11 erreicht oder √ºberschiesst. ! 11 wird nicht angenommen. Aufgabe Kopieren Sie die Definition eines Hauses aus der letzten √úbung in dieses Programm. Modifizieren Sie das Unterprogramm haus(size) so ab, dass nun die Gr√∂sse des Hauses spezifiziert werden kann. Die Wurzel einer Zahl kann mit sqrt(zahl) berechnet werden. Schreiben Sie ein Unterprogramm move(x, y), welches die Schritte Stift heben zur Position x, y gehen Stift senken zusammenfasst. Mit dem Befehl randint(min, max) aus der Bibliothek random kann eine zuf√§llige ganze Zahl erzeugt werden. Dabei muss der kleinst und der gr√∂sstm√∂gliche Wert angegeben werden. Mit move(randint(-20, 20), randint(-20, 20)) kann also die Turtle an eine beliebige Position verschoben werden. Zeichnen Sie 20 H√§user an zuf√§lligen Positionen mit der Gr√∂sse 30. Stadt W√§hlen Sie nun auch die Gr√∂sse zuf√§llig: haus(randint(10, 100)) Nun soll auch noch die Farbe zuf√§llig gew√§hlt werden. Der Befehl choice aus der Bibliothek random gibt jeweils ein zuf√§lliges Element einer Liste zur√ºck: choice([1, 3, 5, 7, 9]) etwa w√§hlt zuf√§llig eine ungerade Zahl zwischen 1 und 10 aus. Die Liste der Farben: ['violet', 'indigo', 'blue', 'green', 'lime', 'lightgreen', 'yellow', 'orange', 'orangered', 'red'] stadt.py from turtle import * from math import sqrt from random import randint, choice SSR ‚≠êÔ∏è Zusatz Zeichnen Sie folgende Quadrate. Auf wie viele Zeilen k√∂nnen Sie Ihr Programm k√ºrzen? quadrate.py from turtle import * SSR","keywords":""},{"title":"8. Bedingte Ausf√ºhrung ‚ëÇ","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/verzweigung","content":"8. Bedingte Ausf√ºhrung ‚ëÇ Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. In Programmen m√∂chten wir w√§hrend der Ausf√ºhrung des Programms entscheiden k√∂nnen, ob Befehle ausgef√ºhrt werden oder nicht. Auch m√∂chten wir entscheiden k√∂nnen, ob eine Wiederholung abgebrochen werden soll. Vergleichen‚Äã Um zu entscheiden, ob Befehle ausgef√ºhrt werden sollen, wird immer eine eine Frage gestellt, die eindeutig mit &quot;Ja&quot; oder &quot;Nein&quot; beantwortet werden kann. Wird die Frage mit &quot;Ja&quot; beantwortet, so ist diese Aussage Wahr und die Bedingung ist erf√ºllt. Andernfalls ist die Aussage Falsch und die Bedingung ist nicht erf√ºllt. Ein Frage kann als Vergleich geschrieben werden. Beispielsweise wird die Frage &quot;Ist 4 kleiner als 2?&quot; als 4 &lt; 2 aufgeschrieben. Die offensichtliche Antwort ist &quot;Nein&quot; und entspricht in Python dem Wert False. Spannender sind vergleiche, wenn diese mit Variablen durchgef√ºhrt werden, da man nicht schon im Voraus weiss, welcher Wert in einer Variable enthalten ist. Die Frage von &quot;Ist x kleiner als 2&quot; (x &lt; 2) h√§ngt also davon ab, welcher Wert zur Zeit in der Variable x gespeichert ist. alter = Wie alt bist du? Ist das alter kleiner als 14? Ausgabe: Du darfst Velo fahren Sonst, ist das alter kleiner als 16? Ausgabe: Du darfst T√∂ffli fahren Sonst, ist das alter kleiner als 18? Ausgabe: Du darfst Roller fahren Sonst Ausgabe: Du darfst Auto fahren alter = int(input('Wie alt bist du?')) if alter &lt; 14: print('Du darfst Velo fahren') elif alter &lt; 16: print('Du darfst T√∂ffli fahren') elif alter &lt; 18: print('Du darfst Roller fahren') else: print('Du darfst Auto fahren') In Python k√∂nnen alle √ºblichen Fragen als Vergleiche von zwei Werten geschrieben werden. Name\tMathematisch\tPythongr√∂sser\t&lt;\\lt&lt;\t&lt; kleiner\t&gt;\\gt&gt;\t&gt; gr√∂sser\t‚â§\\leq‚â§\t&lt;= kleiner\t‚â•\\geq‚â•\t&gt;= gleich\t======\t== ungleich\t‚â†\\neqÓÄ†=\t!= Achtung Bei der √úberpr√ºfung auf Gleichheit werden zwei Gleichheitszeichen == geschrieben. Ausgabefenster‚Äã In Python lassen sich Ausgaben nicht nur mit print sondern auch mit dem Befehl alert() (aus der Bibliothek browser) in einer Ausgabebox anzeigen. Die Ausgabe mit alert wird hier verwendet, weil die Online-Version von Python die Ausgaben mit print erst am Ende des Programms anzeigt wird. Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Zufallszahlen erraten‚Äã Ratespiel Probieren Sie das Ratespiel aus: Ratespiel Starten Beschreiben Sie in eigenen Worten, wie das Ratespiel funktioniert. Zeichnen Sie mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. Schreiben Sie gem√§ss dem Struktogramm das Ratespiel in Python. ratespiel.py from browser import alert from random import randint Hinweis Wenn die Zahl gefunden wurde, soll die Spieler:in nicht mehr nach einer Eingabe gefragt werden. Mit dem Befehl break kann die Wiederholung abgebrochen werden. break Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus. SSR","keywords":""},{"title":"3. Wiederholung üîÅ","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/repeat","content":"3. Wiederholung üîÅ In der Aufgabe 8 haben Sie eine Treppe gezeichnet. Ihr Programm sieht vermutlich etwa wie folgt aus: from turtle import * left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) Was stellen Sie beim Treppen-Programm fest? Das Programm ist lang man sieht nicht auf einen Blick, wie viele Stufen die Treppe hat ob alle Stufen gleich breit und hoch sind Um die Stufenbreite oder die Stufenh√∂he anzupassen, m√ºssen viele Zeilen ver√§ndert werden Es kommt immer wieder dieselbe Sequenz vor: left(90) forward(17) right(90) forward(29) wir sind zu faul, um immer wieder dieselbe Sequenz aufzuschreiben (oder zu Copy&amp;Pasten) Wiederholen von Sequenzen‚Äã Ein Algorithmus kann Sequenzen wiederholt ausf√ºhren. In Python wird die zu wiederholende Sequenz Codeblock genannt. from turtle import * for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts Definition for i in range(n):‚Äã Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt, bevor weitere Anweisungen ausgef√ºhrt werden.Alles, was wiederholt werden soll, muss einger√ºckt sein. Beispiel‚Äã from turtle import * for i in range(4): forward(50) left(90) Struktogramm ‚Üí Python √úbersetzen Sie das Struktogramm in ein Python Programm. Was entsteht? wiederholung.py from turtle import * 9 mal wiederholen: 100 Schritte vorw√§rts 160¬∞ nach links Turtle verstecken SSR 1. Python ‚Üí Struktogramm Zeichnen Sie f√ºr folgendes Programm ein Struktogramm auf ein Blatt Papier. Fotografieren Sie es im Anschluss und halten Sie es im untenstehenden Textfeld fest. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) SSR 2. Python ‚Üí Struktogramm Zeichnen Sie auch f√ºr folgendes Programm ein Struktogramm und halten Sie dieses fest. from turtle import * for i in range(5): left(72) for i in range(4): forward(20) left(90) forward(100) SSR 3. Treppe vol. 2 Zeichnen Sie eine Treppe mit 20 Stufen. Die Treppe soll bei den Koordinaten (-200, -200) starten. W√§hlen Sie die Stufen-Breiten so, dass der verf√ºgbare Platz m√∂glichst gut ausgenutzt wird. treppe2.py from turtle import * Hinweis Verwenden Sie den Befehl goto(x, y) um die Turtle bei -200, -200 zu positionieren. SSR 4. Schneestern Zeichnen Sie einen Stern und gehen Sie wie folgt vor: Untersuchen Sie den Stern und identifizieren Sie die wiederholten Sequenzen. Programmieren Sie eine einzelne Sequenz. Die Knacknuss ist, dass am Ende der Sequenz die Turtle so ausgerichtet ist, dass man mit der Wiederholung beginnen k√∂nnte Programmieren Sie die Wiederholung schneestern.py from turtle import * SSR 5. Weihnachtsstern Zeichnen Sie einen Weihnachtsstern mit den Drehwinkeln 140¬∞ und 80¬∞. F√ºllen Sie den Stern mit Ihrer Lieblingsfarbe. Schauen Sie sich dazu den Abschnitt &quot;F√ºllen&quot; unter üëâ Turtle Befehle an. weihnachtsstern.py from turtle import * SSR 6. Quadrate Zeichnen Sie folgende Leiter. K√∂nnen Sie das Programm mit noch weniger Zeilen Code schreiben? Schaffen Sie es, nur 6 Zeilen Code zu verwenden? leiter.py from turtle import * SSR 7. Perlenkette Zeichnen Sie eine Perlenkette in Ihrer Lieblingsfarbe, die aus 18 Perlen (dots) besteht. perlenkette.py from turtle import * Hinweis Die Turtle muss nach 18 Drehungen wieder nach rechts schauen (hat sich also insgesamt um 360¬∞ gedreht) - pro Drehung also xxx Grad Python kann auch rechnen üòã - lassen Sie die Drehung von Python berechnen. Beispiel: left(360 / 4) ist dasselbe wie left(90) SSR 8. Vogel Zeichnen Sie einen Vogel, indem Sie mehrmals nacheinander folgende Befehle wiederholen: forward(2) right(3) vogel.py from turtle import * SSR","keywords":""},{"title":"1. Einf√ºhrung Python üë£","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/intro","content":"1. Einf√ºhrung Python üë£ Programmieren heisst, einer Maschine Befehle zu erteilen und sie damit zu steuern. Die erste solche Maschine, die Sie steuern, ist eine kleine Schildkr√∂te (bzw. ein kleines Dreieck) auf dem Bildschirm: Die Turtle. Was kann diese Turtle und was musst du wissen, um sie zu steuern? Turtlebefehle werden grunds√§tzlich Englisch geschrieben und enden immer mit einem Klammerpaar. Dieses enth√§lt weitere Angaben zum Befehl. Selbst wenn keine weiteren Angaben n√∂tig sind, muss ein leeres Klammerpaar vorhanden sein. Die Klein-/Grossschreibung muss exakt eingehalten werden. Die Turtle kann sich innerhalb ihres Fensters bewegen und dabei eine Spur zeichnen. Um die Turtle zu bewegen, verwenden wir die drei Befehle forward(distanz), left(winkel) und right(winkel). Programmierkonzepte: Quellprogramm editieren, Programm ausf√ºhren, Programmsequenz Das erste Programm‚Äã Das erste Python-Programm zeichnet ein Quadrat. Damit die Befehle zum zeichnen verwendet werden k√∂nnen, muss zuerst eine Datei mit den entsprechenden Befehlen (ein sogenanntes Modul) turtle geladen werden. Quadrat from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) from turtle import * Damit Python die Befehle zum zeichnen verwenden kann, m√ºssen diese zuerst aus einer Bibliothek importiert werden. Damit beim Importieren nicht jeder einzelne Befehl angegeben werden muss, wird das Zeichen * verwendet welches alle verf√ºgbaren Befehle importiert. Befehle: forward, left Alle Befehle in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. forward(90) \\_____/ \\ / Parameter (Bedeutung hier: 90 Schritte vorw√§rts) Befehlsname penup() \\___/ \\ / kein Parameter Befehlsname * werden mehrere Parameter √ºbergeben, dann werden diese mit Kommas abgetrennt, z.B. goto(20, 30) Aufgabe 1 Markieren Sie im untenstehenden Programm folgende Strukturmerkmale eines Algorithmus mit den vorgegebenen Farben: Unterprogramme Aufrufe eines Unterprogramms mit orange Parameter Verwendete Parameter mit gr√ºn SSR Aufgabe 2 √Ñndern Sie die Parameter im Programm QUADRAT.PY so ab, dass: das Quadrat doppelt so gross gezeichnet wird das Quadrat um 45¬∞ nach links gedreht gezeichnet wird quatrat.py from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) ‚≠êÔ∏è Zusatz:‚Äã Die Form der Turtle kann mit dem Befehl shape ver√§ndert werden. √Ñndern Sie auf Zeile 3 die Turtleform auf eine Schildkr√∂te durch Aufrufen des Befehls shape mit dem Parameter 'turtle'. M√∂gliche Parameter f√ºr den Befehl shape 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) SSR Farben‚Äã Die Stiftfarbe kann mit dem Befehl pencolor('red') auf rot gewechselt werden. Es gibt eine vordefinierte Farbpalette f√ºr die Stiftfarben. farben from turtle import * forward(30) right(90) pencolor('red') forward(30) right(90) pencolor('blue') forward(30) right(90) pencolor('green') forward(30) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white 'string' Beachten Sie die Anf√ºhrungszeichen rund um die Farb-Namen. Damit Python die Farben als Text (eng. string) erkennt und nicht pl√∂tzlich nach einem gleichnamigen Befehl sucht, werden rund um Texte immer Anf√ºhrungszeichen verwendet. Stiftbreite‚Äã Die Stiftbreite kann mit dem Befehl pensize(2) ver√§ndert werden. Standardm√§ssig ist die Stiftbreite 1 from turtle import * forward(20) pensize(5) forward(20) pensize(10) forward(20) pensize(15) forward(20) pensize(20) forward(20) Zahlen Beachten Sie, dass bei Zahlen keine Anf√ºhrungszeichen verwendet werden. Eine Verwechslungsgefahr mit anderen Befehlen besteht nicht, da in Python keine Befehle mit einer Zahl beginnen. Aufgabe 3: Zickzack Versuchen Sie, folgendes Zickzack-Muster mit einer Stiftdicke von 5 zu zeichnen. Die Streckenl√§nge und die Winkel d√ºrfen Sie sch√§tzen. zickzack.py from turtle import * ‚≠êÔ∏è Zusatz:‚Äã Machen Sie bei jedem Richtungswechsel einen Punkt: SSR Kommentare‚Äã In Python k√∂nnen Kommentare eingef√ºgt werden, die aber auf die Ausf√ºhrung des Programms keinen Einfluss haben. Kommentare sind eine wichtige Hilfe, um Programme (Algorithmen) besser zu verstehen, oder aber um zus√§tzliche Informationen, wie den Autor des Programms, festzuhalten. # Autor: B. Hofer # Datum: 5.09.2021 from turtle import * # importiere alle Befehle der Bibliothek &quot;turtle&quot; speed(1) # verlangsame die Turtle auf die langsamste Geschwindigkeit forward(100) # 100 Schritte vorw√§rts left(120) # drehe um 120 ¬∞ nach links speed(3) # zur√ºck auf Normalgeschwindigkeit forward(100) left(120) speed(10) # Schneller... forward(100) left(120) hideturtle() # verstecke die Turtle Aufgabe 4: Programm untersuchen Versuchen Sie nachzuvollziehen, welche Zeile was macht. F√ºgen Sie auf den ersten Zeilen den Autor und das Datum hinzu. F√ºgen Sie immer dann, wenn ein Unterprogramm zum ersten Mal verwendet wird, einen Kommentar hinzu, welcher beschreibt, was dieses Unterprogramm macht und, falls vorhanden, welchen Einfluss die Parameter haben. Stift-und-Punkte from turtle import * forward(40) left(90) penup() forward(40) dot(10) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) Aufgabe 5: W√ºrfel √Ñndern Sie das Programm so ab, dass die gew√ºrfelte Zahl 5 gezeichnet wird: W√ºrfel 5 Verstecken Sie auch die Turtle am Ende! W√ºrfel__5.py from turtle import * forward(40) left(90) penup() forward(40) dot(5) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) SSR Aufgaben‚Äã Aufgabe 6: Haus von Nikolaus Das &quot;Haus vom Nikolaus&quot; ist ein Zeichenspiel f√ºr Kinder. Ziel ist es, das besagte Haus in einem Linienzug aus genau acht Strecken zu zeichnen, ohne dabei eine Strecke zweimal zu durchlaufen. Zeichnen Sie das Haus vom Nikolaus. haus__nikolaus.py from turtle import * Hinweis: Diagonale Die L√§nge der Diagonale k√∂nnen Sie mithilfe von Pythagoras und einem Taschenrechner berechnen. Oder Sie verwenden den Trick, dass die Diagonale im Quadrat gerade 2\\sqrt 22‚Äã mal l√§nger ist als eine Seitenl√§nge - bei einer Seitenl√§nge von 100100100 w√§ren das also ca. 141141141. ‚≠êÔ∏è Zusatz:‚Äã Verwenden Sie f√ºr die Zeichnung Ihre Lieblingsfarbe und eine gr√∂ssere Stiftdicke. SSR Aufgabe 7: Treppe Zeichnen Sie eine Treppe mit f√ºnf Stufen, die eine Breite von 29 Pixeln und eine H√∂he von 17 Pixeln haben. treppe.py from turtle import * SSR","keywords":""},{"title":"9. ‚≠êÔ∏è While","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/while","content":"9. ‚≠êÔ∏è While Wiederholen, solange die Frage mit &quot;Ja&quot; beantwortet wird‚Äã Eine Wiederholung mit einer Frage f√ºhrt einen Codeblock so lange aus, bis die Frage nicht mehr mit &quot;Ja&quot; beantwortet wird. Im folgenden Beispiel wird solange eine Spirale gezeichnet, bis die Distanz der Turtle vom Zentrum mehr als 200px betr√§gt. Unendliche Schleife Diese Art von Wiederholung kann dazu f√ºhren, dass eine Frage immer mit &quot;Ja&quot; beantwortet wird und das Programm also nie endet. Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das Programm zu Dies gelingt: Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das laufende Programm zu stoppen, muss: der ganze Tab geschlossen und die Seite in einem neuen Tab ge√∂ffnet werden. (Tipp: Die URL zuerst kopieren...) (den ganzen Browser √ºber den Taskmanager schliessen) winkel = 20 setzen Ist der Abstand zum Zentrum kleiner als 200px? 5 Schritte vorw√§rts winkel¬∞ nach links winkel auf 99% des aktuellen Werts setzen from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Oft k√∂nnte man dies auch mit einer for-Schleife erreichen. Jedoch m√ºsste man dann zuerst berechnen, wie viele Schritte n√∂tig sind, bis dies der Fall ist. Im obigen Beispiel kann etwa der Schrumpf-Faktor (0.99) ver√§ndern, ohne die Frage (weniger als 200px Abstand zum Zentrum?) zu √§ndern. Aufgabe Probieren Sie es aus und spielen Sie mit dem Schrumpf-Faktor 0.99 im obigen Bispiel. Spirale.py from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Wann gibt es mehr/weniger Windungen? Wann entsteht eine unendliche Schleife? Wiederholungen mit der while-Schleife‚Äã Mit der while-Schleife k√∂nnen alle Wiederholungen, die mit der for i in range(...): Syntax erzeugt wurden, ebenfalls erzeugt werden. Dabei muss aber jeweils eine Variable, z.B. i, verwendet werden, welche sich die Anzahl Wiederholungen merkt. Nat√ºrlich muss diese Variable dann bei jeder Wiederholung um eins hochgez√§hlt werden. Eine solche Variable, die bei jeder Wiederholung erh√∂ht wird, wird Schleifenz√§hler oder Laufvariable genannt. from turtle import * i = 0 while i &lt; 4: forward(100) left(90) i = i + 1 for zu while Schreiben Sie das untenstehende Programm so um, dass nur noch while Schleifen verwendet werden. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) to-while.py from turtle import * SSR while zu for Schreiben Sie das untenstehende Programm so um, dass nur noch for Schleifen verwendet werden. from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() def quadrat(): i = 0 while i &lt; 4: forward(20) left(90) i = i + 1 zeile = 0 while zeile &lt; 5: spalte = 0 while spalte &lt; 3: move(zeile * 20, spalte * 20) quadrat() spalte = spalte + 1 zeile = zeile + 1 to-while.py from turtle import * SSR Anwendung‚Äã Die while-Schleife kommt oft bei Benutzerinteraktionen, Simulationen oder bei sich dynamisch √§ndernden Daten vor. Sonstige Wiederholungen lassen sich normalerweise einfacher mit einer for-Schleife umsetzen. Ratespiel √Ñndern Sie das Ratespiel aus dem Kapitel Verzweigungen so ab, dass die Spieler:in unendlich viele Versuche hat um die Zahl zu finden. Wurde die gesuchte Zahl gefunden, soll die Anzahl Versuche zur√ºckgemeldet werden. SSR","keywords":""},{"title":"5. Unterprogramme üè∑","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/functions","content":"5. Unterprogramme üè∑ Einf√ºhrung‚Äã In einer Bildkomposition kommen Figuren wie Dreiecke und Quadrate mehrmals vor. Die Turtle weiss aber nicht, was ein Dreieck oder ein Quadrat ist. Da in der Bildkomposition die Dreiecke und Quadrate nicht systematisch angeordnet sind, ist die Verwendung von Wiederholungen hier nicht naheliegend. from turtle import * fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() 26 Zeilen Code?? Geht das nicht auch einfacher? Es geht einfacher! Es lassen sich n√§mlich neue Befehle festlegen, die z.B. ein Dreieck oder ein Quadrat zeichnen. from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('red') dreieck() left(120) fillcolor('green') dreieck() left(120) fillcolor('blue') dreieck() dreieck Starte Auff√ºllen 3 mal wiederholen 50 Schritte vorw√§rts 120¬∞ nach links Ende Auff√ºllen rote F√ºllfarbe dreieck zeichnen 120¬∞ nach links gr√ºne F√ºllfarbe dreieck zeichnen 120¬∞ nach links blaue F√ºllfarbe dreieck zeichnen Aufgabe 1 Im folgenden ist zweimal derselbe Algorithmus programmiert - links ohne Unterprogramme, rechts mit Unterprogrammen. √Ñndern Sie beide Programme so ab, dass die Dreiecke doppelt so gross gezeichnet werden! sequentiell.py from turtle import * fillcolor('yellow') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('orange') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('purple') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() functions.py from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('yellow') dreieck() left(60) fillcolor('orange') dreieck() left(60) fillcolor('red') dreieck() left(60) fillcolor('purple') dreieck() left(60) fillcolor('blue') dreieck() left(60) fillcolor('green') dreieck() left(60) Wie viele Zeilen mussten Sie im linken bzw. im rechten Programm √§ndern? Welche Vorteile sehen Sie bei der Verwendung von Unterprogrammen? SSR Eigene Befehle definieren‚Äã Bei Python werden Befehle auch Funktionen genannt. Definition def name():‚Äã Mit def name(): wird ein neues Unterprogramm (ein neuer Befehl) definiert. Als Name sollte immer etwas gew√§hlt werden, das die T√§tigkeit dieser Sequenz widerspiegelt. Alle Anweisungen, die zum neuen Befehl geh√∂ren, m√ºssen einger√ºckt sein! Beispiel: def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) Befehlsaufruf Die Definition alleine f√ºhrt das Programm noch nicht aus. Dazu muss der Befehl erst noch aufgerufen werden: from turtle import * def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) ### PRE zick_zack() Aufgabe 2: Struktogramm ‚Üí Python Erzeugen Sie ein Programm gem√§ss folgendem Struktogramm: stufe 95¬∞ links 20 Schritte vorw√§rts 95¬∞ rechts 30 Schritte vorw√§rts 100 Schritte vorw√§rts stufe zeichnen stufe zeichnen stufe zeichnen befehl1.py from turtle import * √Ñndern Sie obiges Programm so, dass der Winkel einer Stufe neu 110¬∞ betr√§gt. Zeichnen Sie eine Treppe mit 30 Stufen. Denken Sie dabei auch an das letzte Kapitel (Stichwort: Wiederholungen!) SSR Aufgabe 3 ‚Äì Sechsecke sechseck.py from turtle import * Zeichnen Sie ein Sechseck Verschieben Sie die Sequenz, die das Sechseck zeichnet, in einen neuen Befehl namens sechseck(). Denken Sie daran, der neue Befehl muss aufgerufen werden, damit er ausgef√ºhrt wird. Verwenden Sie den neuen Befehl, um die folgende Figur zu zeichnen, welche aus 10 Sechsecken besteht: Tipp Nach jedem Sechseck muss 36¬∞ gedreht werden. SSR Aufgabe 4 ‚Äì H√§user F√ºr diese Aufgabe k√∂nnen Sie als Ausgangslage Ihr Programm aus Kapitel 1, Aufgabe 6 &quot;Haus von Nikolaus&quot; verwenden. stadt.py from turtle import * Definieren Sie einen Befehl haus(), der ein Haus des Nikolaus zeichnet: Achten Sie darauf, dass die Turtle am Ende eines H√§uschens jeweils unten rechts ist und nach rechts schaut. Zeichnen Sie nun 4 H√§user nacheinander in unterschiedlichen Farben. SSR Aufgabe 5 ‚Äì Blume Sie werden in dieser Aufgabe unter der Verwendung mehrerer Unterprogramme eine komplexe Aufgabe schrittweise l√∂sen. blume.py from turtle import * Definieren Sie Unterprogramm bogen(), mit dem die Turtle einen Bogen zeichnet und sich dabei insgesamt um 90¬∞ nach rechts dreht. F√ºgen Sie einen weiteren Befehl blumenblatt() hinzu, welches zwei B√∂gen zeichnet. Die Turtle sollte am Ende aber wieder in Startrichtung stehen. Erg√§nzen Sie blumenblatt() so, dass ein rot gef√ºlltes Blatt gezeichnet wird. Setzen Sie mit pencolor die Stiftfarbe ebenfalls auf rot, damit die Umrandungslinie die gleiche Farbe hat. Erweitern Sie das Programm mit dem Befehl blume(), so dass eine f√ºnfbl√§ttrige Blume gezeichnet wird. ‚≠êÔ∏è Zusatz: Blume mit Stiel. Erg√§nzen Sie die Blume mit einem Stiel. SSR","keywords":""},{"title":"7. Variablen","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/variablen","content":"7. Variablen Einf√ºhrung‚Äã Im vorhergehenden Kapitel haben Sie Quadrate gezeichnet, deren Seitenl√§nge im Programm fest eingebaut waren. Manchmal m√∂chten Sie aber die Seitenl√§nge mit einem Eingabedialog einlesen. Dazu muss das Programm die eingegebene Zahl als Variable speichern. Variablen kann man sich wie eine Z√ºgelbox vorstellen, welche mit einem Namen angeschrieben ist. Der Name beschreibt, was sich in der Box befindet, damit man den Inhalt sp√§ter auch wieder findet. Variable Zuweisen Mit der Schreibweise anzahl = 12 wird eine solche Box erstellt. In Zukunft sagen wir, dass damit die Variable anzahl definiert und ihr einen Wert zugewiesen wird. Um den Inhalt der Box zu erhalten, kann der Name (ohne Anf√ºhrungszeichen) geschrieben werden. Im Struktogramm werden alle Variablen umrahmt. anzahl = 12 Ausgabe: anzahl anzahl = 12 print(anzahl) Mit Variablen rechnen anzahl = 12 print(anzahl + 13) Mehrere Variablen anzahl = 12 gewicht = 100 print(f'{anzahl} Tafeln Schokolade sind {anzahl * gewicht} g schwer') Formatierter Text: f'{anzahl} Tafeln' Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') √úberschreiben: Variablen neu Zuweisen‚Äã In einer Box kann immer nur ein einziges Objekt abgelegt werden. Wenn sp√§ter also ein neuer Wert in bereits beschriftete Z√ºgelbox gelegt wird, so wird der aktuelle Wert verdr√§ngt. K√ºnftig wird diese erneute Zuweisung √úberschreiben einer Variable genannt. Variablen √ºberschreiben anzahl = 12 print(f'Anzahl = {anzahl}') anzahl = 7 print(f'Anzahl = {anzahl}') Im obigen Beispiel wird der initiale Wert der Variable anzahl (12) mit dem neuen Wert 7 √ºberschrieben. Merke: G√ºltigkeitsbereich Die Variable wird nicht r√ºckwirkend ver√§ndert. Solange eine Variable nicht √ºberschrieben wird, besitzt sie den aktuell zugewiesenen Wert. Aufgabe Was geschieht im untenstehenden Programm? F√ºgen Sie bei jeder Zeile mit einem print einen Kommentar hinzu mit: ausgegebene Zahl aktuell gespeicherter Wert in der Variable anzahl variable.py anzahl = 2 print(anzahl) # =&gt; 2, anzahl=2 print(anzahl + 2) anzahl = 7 print(anzahl) print(anzahl + 2) anzahl = anzahl + 3 print(anzahl) anzahl = anzahl + 3 print(anzahl + 1) anzahl = anzahl + 3 print(anzahl) SSR Gleichheitszeichen Das Gleichheitszeichen hat also in Computerprogrammen nicht dieselbe Bedeutung wie in der Mathematik. Es ist keine Gleichung, sondern eine Variablendefinition oder eine Zuweisung. Variablenwert einlesen, ver√§ndern und ausgeben Im Programm kann mit Hilfe einer Eingabeboxen Werte eingelesen und einer Variable zugewiesen werden. from turtle import * speed(12) anzahl = input('Wie viele Strecken soll die Spirale haben?') anzahl = int(anzahl) seite = 10 for i in range(anzahl): forward(seite) left(90) seite = seite + 10 Eingabe In Python ist das Resultat einer Eingabe immer ein Text. Ein Text kann aber in eine Zahl umgewandelt werden, so dass dann auch damit gerechnet werden kann. Der Befehl int wandelt eine Eingabe in eine ganze Zahl um. Der Befehl float wandelt eine Eingabe in eine Dezimalzahl um. # Centimeter zu Meter gr√∂sse = input('Wie gross bist du [cm]?') gr√∂sse = int(gr√∂sse) print(f'Ich bin {gr√∂sse / 100} m gross') # Meter zu Centimeter gr√∂sse = input('Wie gross bist du [m]?') gr√∂sse = float(gr√∂sse) print(f'Ich bin {gr√∂sse * 100} cm gross') Eingabe - Struktogramm‚Äã Wird ein Wert √ºber eine Eingabeaufforderung eingelesen, so wird dies im Struktogramm mit einem Parallelogramm angezeigt, wobei auch die Variable, welcher das Resultat zugewiesen wird, festgehalten wird: gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') Aufgabe 1 - BMI √úbersetzen Sie das folgende Struktogramm in Python Code: gr√∂sse = Wie gross bist du [m]? gewicht = Wie schwer bist du [kg]? bmi = gewicht geteilt durch gr√∂sse mal gr√∂sse Ausgabe: BMI: bmi bmi.py Hinweis Was ist die Bedeutung des folgenden Fehlers? TypeError: Can't multiply sequence by non-int of type 'str' ‚Üí Der eingegebene Text kann nicht multipliziert werden - zuerst m√ºssen gewicht und gr√∂sse in Dezimalzahlen (float) umgewandelt werden: gewicht = float(gewicht). SSR Aufgabe 2 ‚Äì n-Eck Nach Eingabe der Anzahl Ecken in einer Eingabebox soll die Turtle ein regelm√§ssiges n-Eck zeichnen. Beispielsweise wird nach der Eingabe 8 ein 8-Eck gezeichnet. Den passenden Drehwinkel soll das Programm berechnen. n-eck.py from turtle import * SSR Aufgabe 3 Nach der Eingabe eines Winkels in einer Eingabebox zeichnet die Turtle 30 Strecken der L√§nge 100, wobei sie nach jeder Strecke um den gegebenen Winkel nach links dreht. Experimentieren Sie mit verschiedenen Winkeln und zeichnen Sie sch√∂ne Figuren. Mit speed(10) k√∂nnen Sie das Zeichnen beschleunigen. star.py from turtle import * SSR","keywords":""},{"title":"Weihnachtskarten","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/weihnachten","content":"Weihnachtskarten XMAS-1.py from turtle import * XMAS-2.py from turtle import * XMAS-3.py from turtle import * XMAS-4.py from turtle import * XMAS-5.py from turtle import * SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Autokorrektur","type":0,"sectionRef":"#","url":"/26P/Texte/autokorrektur","content":"Autokorrektur Ein n√ºtzliches und m√§chtiges Feature von Word ist die Rechtschreibkorrektur. Hervorgehobene Fehler in Word Word unterschiedet zwei Fehlertypen: Rechtschreibung Tippfehler oder falsch geschriebene W√∂rter werden rot mit einer gewellten Linie unterstrichen Grammatik Fehler in der Grammatik (bspw. Satzstellung, fehlende Kommas etc) werden blau mit einer gewellten Linie unterstrichen. Um einen Fehler zu korrigieren, k√∂nnen mit Rechtsklick die Verbesserungsvorschl√§ge angesehen werden. Autokorrektur aktivieren Die Autokorrektur ist f√ºr die Rechtschreibefehler standardm√§ssig aktiviert. Bei den Grammatikfehlern ist die √úberpr√ºfung aber nicht immer aktiv: Sie sollte unbedingt unter Datei &gt; Optionen &gt; Dokumentpr√ºfung aktiviert werden! Grammatikfehler w√§hrend der Eingabe markieren Sprache‚Äã Nat√ºrlich muss Word wissen, in welcher Sprache ein Text verfasst wird. Word versucht f√ºr jeden Abschnitt zu erraten, um was f√ºr eine Sprache es sich handelt. Dies gelingt aber nicht immer automatisch und gerade &quot;Deutsch (Schweiz)&quot; oder &quot;Deutsch (Deutschland)&quot; ist f√ºr Word schwer zu unterscheiden. Die Sprache kann unten links umgestellt werden - Absatzweise oder auch nur f√ºr aktuell markierten Text. Dies ist dann n√ºtzlich, wenn Zitate oder W√∂rter einer anderen Sprache verwendet werden. Sprache √§ndern in Word Sprache √§ndern Fehler finden Datei Texte mit Fehlern.docx √Ñndern Sie f√ºr die verschiedenen Abschnitte und W√∂rter die richtige Sprache und korrigieren Sie mithilfe der Rechtschreibkorrektur alle Fehler im Dokument. Zeigen Sie das Resultat Ihren Pultnachbar:innen und helfen Sie einander gegenseitig.","keywords":""},{"title":"Turtle Befehle","type":0,"sectionRef":"#","url":"/26P/Programmieren-1/Turtlegrafik/turtle-commands","content":"Turtle Befehle Bewegungen‚Äã Definition forward(n) fd(n)‚Äã Bewegt die Turtle n Pixel nach vorne. from turtle import * ### PRE forward(100) Definition backward(n) back(n) bk(n)‚Äã Bewegt die Turtle n Pixel r√ºckw√§rts. from turtle import * ### PRE backward(100) Definition left(angle) lt(angle)‚Äã Dreht die Turtle angle Grad nach links. from turtle import * ### PRE left(90) Definition right(angle) rt(angle)‚Äã Dreht die Turtle angle Grad nach rechts. from turtle import * ### PRE right(90) Definition goto(x, y)‚Äã Bewegt die Turtle zur Position mit den Koordinaten (x, y). Beispiel: goto(50, 100) from turtle import * ### PRE goto(50, -50) Definition home()‚Äã Setzt die Turtle auf die Ursprungsposition (0, 0) zur√ºck und setzt die Orientierung der Turtle auf rechts ‚ñ∂Ô∏è. from turtle import * speed(0) penup() goto(20, 30) pendown() left(30) write('(20|30), 30¬∞ links', font=('Arial', 8, 'normal')) speed(1) ### PRE home() Definition setheading(to_angle) seth(to_angle)‚Äã Dreht die Turtle, bis der angegebene Winkel erreicht ist. Winkel\tAusrichtung0\t‚ñ∂Ô∏è 90\t‚ñ≤ 180\t‚óÄÔ∏è 270\t‚ñº from turtle import * ### PRE setheading(120) Stift‚Äã Definition penup() up() pu()‚Äã Hebt den Stift an - beim Bewegen der Turtle wird keine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) Definition pendown() down() pd()‚Äã Senkt den Stift - beim Bewegen der Turtle wird wieder eine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) pendown() forward(100) Definition isdown()‚Äã √úberpr√ºft, ob der Stift aktuell gesenkt ist und gibt das Resultat als True (=Stift gesenkt) oder False (=Stift oben) zur√ºck. from turtle import * ### PRE if isdown(): penup() forward(100) Definition pencolor(color)‚Äã Legt die Stiftfarbe fest. Der Parameter color enth√§lt Text, die Farbe muss also mit Anf√ºhrungszeichen umgeben sein. Beispiel: from turtle import * ### PRE pencolor('red') forward(100) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white RGB-Farben RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) from turtle import * pencolor('rgb(255, 217, 0)') forward(100) left(120) r = 30 g = 180 b = 77 # oder variabel pencolor(f'rgb({r}, {g}, {b}') forward(100) Unterschiede zum offiziellen Turtle-Modul Das offizielle Turtle-Modul verwendet zur Anzeige von Grafiken nicht einen Browser, sonder Tkinter. Dort k√∂nnen ebenfalls RGB-Farben verwendet werden, sie werden aber mit einer anderen Syntax √ºbergeben: Mehr dazu hier üëâ https://docs.python.org/3/library/turtle.html#turtle.color Definition pensize(size)‚Äã Legt die Stiftdicke size fest. Standard: pensize(1) from turtle import * ### PRE pensize(10) forward(100) Definition dot() dot(diameter)‚Äã Zeichnet einen Punkt an der aktuellen Position mit dem angegebenen Durchmesser diameter. Wenn kein Durchmesser angegeben wird, verwendet es standardm√§ssig das doppelte der aktuellen Stiftdicke (pensize), aber mindestens einen Durchmesser von 5. from turtle import * ### PRE dot() forward(20) dot(20) Definition circle(radius)‚Äã Zeichnet einen Kreis mit dem angegebenen radius. from turtle import * ### PRE circle(100) Definition circle(radius, angle)‚Äã Zeichnet einen Kreisbogen mit dem angegebenen radius und angle. Beispiel from turtle import * ### PRE circle(50, 180) F√ºllen‚Äã Definition fillcolor(color)‚Äã Legt die color f√ºr das F√ºllen von geschlossenen Pfaden fest. Farbpalette from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition begin_fill()‚Äã Startet einen geschlossenen Pfad. from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition end_fill()‚Äã Endet die Aufzeichnung des Pfades und schliesst diesen. Beispiel from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Aussehen und Geschwindigkeit‚Äã Definition shape(form)‚Äã √Ñndert die Form der Turtle. F√ºr den Parameter form k√∂nnen folgende Werte verwendet werden: 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) from turtle import * ### PRE shape('turtle') Definition hideturtle()‚Äã Macht die Turtle unsichtbar. ‚ö†Ô∏è Der Stift wird durch das Verstecken nicht automatisch angehoben. from turtle import * ### PRE hideturtle() forward(100) Definition showturtle()‚Äã Zeigt die Turtle wieder an. ‚ö†Ô∏è Der Stift wird durch das Anzeigen nicht automatisch wieder abgesetzt. from turtle import * speed(1) ### PRE forward(20) penup() hideturtle() forward(30) showturtle() left(90) forward(50) Definition speed(v)‚Äã Legt die Geschwindigkeit v der Turtle fest. 1 am langsamsten 3 Standard 6 schnell ... (Schnellstm√∂gliche Geschwindigkeit kann mit speed(0) festgelegt werden.) from turtle import * ### PRE speed(1) forward(100) ","keywords":""},{"title":"Dateiformat","type":0,"sectionRef":"#","url":"/26P/Texte/dateiverwaltung","content":"Dateiformat Jeder Computer hat ein Dateisystem, welches Dateien organisiert und auffindbar macht. Die Anleitung, wie eine Datei gefunden werden kann, heisst Dateipfad. Eine Datei besitzt einen Namen und ein Dateiformat. Die Dateiendung beschreibt das Dateiformat und gibt Auskunft √ºber die Art von Daten, welche in einer Datei enthalten sind. So weiss Ihr Betriebssystem bspw. mit welchem Programm eine Datei ge√∂ffnet werden soll. Ein Word-Dokument hat die Dateiendung .docx. C:\\Users\\reto\\OneDrive - EDUBERN\\Informatik\\01-Word\\dokument.docx ‚îî‚î¨‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îò | Ordner OneDrive | Dateiformat Laufwerk Dateiname Wenn Sie in Word ein Dokument abspeichern, gibt es im wesentlichen zwei M√∂glichkeiten, die zum selben Ziel f√ºhren: das Dokument direkt auf OneDrive Speichern. Die Navigation zum richtigen Ordner kann etwas tr√§ge sein, da die Ordnerstruktur √ºbers Internet direkt von OneDrive geladen wird. das Dokument wird auf dem Computer gespeichert - alle M√∂glichkeiten stehen offen - Sie k√∂nnen nach wie vor einen Ordner auf OneDrive ausw√§hlen. Sofern ein OneDrive Ordner ausgew√§hlt wurde, wird das Dokument automatisch synchronisiert. Gemeinsames Arbeiten‚Äã Ein auf OneDrive gespeichertes Word-Dokument kann zur gemeinsamen Bearbeitung (z.B. f√ºr eine Gruppenarbeit) freiegegeben werden. Bei der Freigabe m√ºssen Sie entscheiden, ob das Dokument nur betrachtet, oder auch bearbeitet werden darf: Bearbeitungsoptionen beim Teilen Linkeinstellungen f√ºr Ordner Link Kopieren üìã Erfahrungsgem√§ss funktioniert das Freigeben von Dokumenten am zuverl√§ssigsten und am schnellsten, wenn der Link kopiert und per Teams verschickt wird. Die E-Mails bleiben manchmal etwas l√§nger in einer Warteschleife bei Edubern h√§ngen. Beachten Sie, dass f√ºrs Kopieren eines Links die Link-Einstellungen auf Jeder mit dem Link bzw. Personen bei EDUBERN mit dem Link gew√§hlt werden muss. Gemeinsames Arbeiten an einem Dokument Gemeinsame Bearbeitung der Men√ºs f√ºrs Klassenlager. Namen bei Ihrer Gruppe eintragen Men√º-Vorschlag festhalten Bild vom Men√º suchen und einf√ºgen","keywords":""},{"title":"Textaufbau in Word","type":0,"sectionRef":"#","url":"/26P/Texte/dokumentstruktur","content":"Textaufbau in Word Vorgehen Theorie durchlesen - √ºberlegen Sie sich nach jedem Abschnitt, ob Ihnen die Inhalte bekannt vorkommen und ob Sie sich zutrauen, diese Schritte selber durchzuf√ºhren. Markieren Sie in bei jedem Abschnitt, wie git Sie die Inhalte verstanden haben. So k√∂nnen einzelne Themen im Plenum vorgef√ºhrt werden. Bearbeiten Sie die untenstehende Aufgabe Wenn Sie fertig sind, zeigen Sie das Resultat Herrn Hofer Drei Strukturebenenen‚Äã Ein Word-Dokument kennt drei verschiedene Strukturebenenen: Abschnitt Absatz Zeichen Auf jeder Strukturebene lassen sich unterschiedliche Formatierungen vornehmen. Abschnitt‚Äã In einem Abschnitt wird das grundlegende Erscheinungsbild vorgegeben. Ausrichtung Format Spalten (Text auf mehrere Spalten verteilen) Seitenr√§nder Seitenzahlen Unter Layout lassen sich viele Abschnitt-Einstellungen vornehmen und auch Abschnitt-Umbr√ºche einf√ºgen. Jeder Abschnitt kann unabh√§ngig vom Vorhergehenden/Nachfolgenden konfiguriert werden. Im Beispiel oben werden also zwei Fortlaufende Umbr√ºche (Umbr√ºche &gt; (Abschnittumbr√ºche) &gt; Fortlaufend) eingef√ºgt, damit kein Seitenwechsel passiert. So lassen kann in einem Abschnitt vorgegeben werden, dass er in Spalten Aufgeteilt werden soll. Im Speziellen bei mehreren Spalten kann auch eine Spaltenumbruch eingef√ºgt werden. Durch Klicken auf den rot eingef√§rbten Pfeil k√∂nnen zudem weitere Einstellungsm√∂glichkeiten angezeigt werden. Silbentrennung‚Äã Die Silbentrennung erm√∂glicht es, W√∂rter automatisch an geeigneter Stelle zu trennen, wenn dadurch der Verf√ºgbare Platz auf einer Zeile besser genutzt werden kann. Das Layout wirkt dadurch aufger√§umter und das Lesen ist angenehmer. Diese Option muss jedoch von Hand unter Layout &gt; Silbentrennung auf Automatisch gesetzt werden. Absatz‚Äã Ein Absatz entsteht, wenn eine neue Zeile mit der Enter-Taste eingef√ºgt wird. EIn Absatz wird grunds√§tzlich gem√§ss der zugewiesenen Formatvorlage formatiert. Diese Einstellungen k√∂nnen aber auch in jedem Absatz angepasst werden. Formatvorlagen‚Äã Mit einer Formatvorlage k√∂nnen Struktur- und Darstellungsinformationen zusammengefasst werden. Strukturinformationen beziehen sich auf die Art des Absatzes - ist es eine √úberschrift, eine Unter√ºberschrift, ein normaler Text oder ...? Durch das Hinterlegen dieser Strukturinformationen kann Word bspw. automatisch die √úberschriften nummerieren oder automatisch ein Inhaltsverzeichnis generieren. Da auch Darstellungsinformationen hinterlegt werden k√∂nnen, wird ein Dokument einheitlich und ohne viel Aufwand formatierbar. F√ºr die √Ñnderung der Schriftgr√∂sse von allen √úberschriften muss dann nur die Formatvorlage angepasst werden und nicht jede einzelne √úberschrift. Es gibt vordefinierte Formatvorlagen, die einem Absatz zugewiesen werden k√∂nnen: Die Formatvorlagen k√∂nnen auch nach den eigenen W√ºnschen angepasst werden: tip Erstellen Sie keine neuen Formatvorlagen f√ºr √úberschriften sonder passen Sie die vorhandenen Vorlagen an. So funktioniert die Nummerierung und das automatische Inhaltsverzeichnis ohne weitere Konfiguration. Formatierungen‚Äã Tabstopps ‚îó ‚îª ‚îõ der Cursor springt beim Dr√ºcken der Tabulator-Taste bis zu diesem Tabstopp. Die Ausrichtung bestimmt, wie der Tabulator-Text ausgerichtet wird: ‚îó ‚îª ‚îõ Die Ausrichtung kann durch Doppelklicken auf den Tabstopp ge√§ndert werden. Linker Einzug ‚ßã Der gesamte Absatz wird einger√ºckt. Erstzeileneinzug ‚ñΩ Die erste Zeile eines Absatzes kann eigens kontrolliert werden. tip Unter Ansicht &gt; Anzeige kann das Lineal eingeblendet werden. Textausrichtung (Links, Zentriert, Rechts, Blocksatz) Auflistungen Rahmen Zeilenabstand (der Zeilenabstand innerhalb eines Absatzes) Absatzabstand (der Abstand zum vorherigen/n√§chsten Absatz) Men√ºband Start Men√ºband Layout tip Ein Zeilenumbruch im selben Absatz kann mit Shift+Enter erzeugt werden. Zeichenformat‚Äã Einzelne W√∂rter und Buchstaben/Zeichen lassen sich individuell formatieren. So kann etwa festgelegt werden, ob ein Zeichen kursiv, fett oder unterstrichen dargestellt werden kann. Zeichenformat ‚â†\\neqÓÄ†= √úberschrift Ertappen Sie sich dabei, Titel oder Untertitel mit der Zeichenformatierung zu machen, sollte bei Ihnen im Kopf eine Warnleuchte angehen üí° - hier sollen Formatvorlagen verwendet werden, damit Strukturinformationen hinterlegt werden k√∂nnen. Umformatierungen oder auch Inhaltsverzeichnisse sind nur mit diesen Formatvorlagen automatisiert m√∂glich. Einf√ºgen‚Äã Beim Einf√ºgen von kopiertem Text, bspw. von einer Website, werden auch die Zeichenformate mitkopiert (z.B. Links werden dann farbig angezeigt...). Dies ist nicht immer erw√ºnscht und teilweise soll nur der Text √ºbernommen werden. Dann kann √ºber die Einf√ºge-Optionen Nur den Text √ºbernehmen ausgew√§hlt werden: √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex01-what-is-programming.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã","keywords":""},{"title":"Nummerierung und Bilder","type":0,"sectionRef":"#","url":"/26P/Texte/nummerierung","content":"Nummerierung und Bilder In diesem Abschnitt lernen Sie, wie In Word Seiten √úberschriften Abbildungen nummeriert werden und wie auf solche nummerierten Elemente verwiesen werden kann. Seitenzahlen‚Äã Das Kopf- und Fusszeilen Men√º √∂ffnen (Doppelklick in den untersten Bereich eines Blattes, oder im Suchfeld &quot;Fusszeile&quot; eingeben). Soll die erste Seite (bspw. Titelblatt) keine Seitenzahl erhalten, so kann das H√§ckchen &quot;Erste Seite Anders&quot; angew√§hlt werden: √úber die Option &quot;Seitenzahle formatieren...&quot; kann bspw. das Seitenzahlformat (z.B. r√∂mische Zahlen) oder der Startwert festgelegt werden. Die erste Seite, auch wenn &quot;Erste Seite Anders&quot; ausgew√§hlt ist, z√§hlt bei der Nummerierung auch dazu. Die Nummerierung muss also bei 0 starten, wenn die Seite nach dem Titelblatt die Seitenzahl 1 erhalten soll. √úberschriften Nummerieren‚Äã Um √úberschriften automatisiert nummerieren zu lassen, m√ºssen die √úberschriften als solche gekennzeichnet werden. Dies wird √ºber die Zuweisung einer Formatvorlage erreicht (Formatvorlagen) Die Formatvorlage f√ºr eine √úberschrift kann ge√§ndert und √ºber Format &gt; Nummerierung eine Nummerierung hinzugef√ºgt werden. Geschachtelte Nummerierung‚Äã Soll eine verschachtelte Nummerierung eingef√ºgt werden, muss zuerst der √úberschrift 1 eine einfache Nummerierung (wie oben) hinzugef√ºgt werden der Cursor im √úberschriften-Text fokussiert werden √úber die &quot;Liste mit mehreren Ebenen&quot; die verschachtelte Nummerierung eingef√ºgt werden Automatisches Inhaltsverzeichnis‚Äã Ein grosser Vorteil von zugewiesenen FOrmatvorlagen ist das Erzeugen von Verzeichnissen. Da Word nun &quot;weiss&quot;, was einer √úberschrift entspricht, lassen sich bspw. Inhaltsverzeichnisse autmatisch generieren und auf Knopfdruck auch aktualisieren. Bilder‚Äã Layoutoptionen‚Äã √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex02-machine-learning.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã Alles ausser die Bilder‚Äã ‚Äã Bilder, Bildverzeichnisse, Querverweise‚Äã","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/26P/Texte/pruefung","content":"Lernziele Dauer 45 Minuten Benotung Die Note z√§hlt 0.50.50.5 Hilfsmittel Laptop, Openbook, ohne Kommunikation untereinander Pr√ºfungsstoff Sie k√∂nnen ein Word-Dokument erstellen und unter einem vorgegebenen Namen abspeichern. Sie k√∂nnen ein Word-Dokument als PDF exportieren. Sie wissen was eine Formatvorlage ist und k√∂nnen diese ver√§ndern und anpassen (Nummerierung, Linker Einzug, Absatz, Schrfitgr√∂sse, Schriftart, Schriftfarbe...) Sie wissen wie ein Word-Dokument aufgebaut ist und welche Elemente auf den drei Strukturebenen (Abschnitt, Absatz, Zeichen) formatiert werden k√∂nnen Sie k√∂nnen Text aus dem Internet per Copy&amp;Paste in ein Word-Dokument einf√ºgen. Sie verwenden Einz√ºge (linker/rechter Einzug, Erstzeileneinzug) sowie Tabulatoren + Tabstops um die gew√ºnschte Dokumentstruktur zu erreichen. Sie wissen wie man Bilder einf√ºgt, zentriert und mit einer nummerierten Bildunterschrift erg√§nzt. Sie f√ºgen automatisch erzeugte Inhaltsverzeichnisse ein. Sie f√ºgen automatisch erzeugte Bildverzeichnisse ein. Sie k√∂nnen Kopf- und Fusszeilen einf√ºgen. Sie k√∂nnen Seitennummerierungen einf√ºgen. Sie k√∂nnen die Textausrichtung (Links-/Rechtsb√ºndig, zentriert oder Blocksatz) einstellen und die automatische Silbentrennung aktivieren.","keywords":""},{"title":"√úbung","type":0,"sectionRef":"#","url":"/26P/Texte/Uebung","content":"√úbung Oft kommt es vor, dass mehrere Texte unterschiedlicher Quellen in ein Word-Dokument kopiert werden. Dabei ist es nervend, wenn auch spezielle Formatierungen oder sonderzeichen kopiert werden. Um nur den Inhalt einzuf√ºgen, kann in Word √ºber Einf√ºgen &gt; Nur den Text einf√ºgen nur der pure Text und ohne Formatierungen √ºbernommen werden. Nat√ºrlich werden dann Bilder nicht eingef√ºgt. Alternativ kann auch alles eingef√ºgt werden und im Anschluss k√∂nnen bei ausgew√§hltem Text jegliche Formatierungen gel√∂scht werden. Aufgabe Erstellen Sie ein Word-Dokument auf OneDrive mit dem Namen 03-onlinesucht.docx. Kopieren Sie den untenstehenden Text inkl. der Bilder und formatieren Sie das Dokument gem√§ss der Vorlage. Sind Angaben nicht n√§her spezifiziert, w√§hlen Sie selber eine Formatierung, die der Vorlage m√∂glichst nahe kommt. Onlinesucht Informationen zu den Risiken und Auswirkungen von √ºberm√§ssigem Internetgebrauch Quelle: https://www.safezone.ch/de/suechte-und-substanzen/onlinesucht Mit Onlinesucht oder Internetsucht wird ein √ºberm√§ssiger Gebrauch von Diensten, Inhalten oder Apps des Internets bezeichnet, welcher durch Kontrollverlust gekennzeichnet ist. Es handelt sich um eine nicht-stoffgebundene Abh√§ngigkeit, d.h. eine Abh√§ngigkeit, die nicht auf den Konsum einer Substanz wie Tabak, Alkohol oder eine illegale Droge bezogen ist. Dabei sind es vor allem drei Bereiche des Internets, die zu einer Internetabh√§ngigkeit f√ºhren k√∂nnen: Online-Computerspiele, Kommunikationsplattformen (z.B. soziale Netzwerke) und Webseiten mit sexuellem und pornographischem Inhalt. Inhaltsverzeichnis Wann wird √ºberm√§ssiger Internetgebrauch zu einer Internetabh√§ngigkeit? Eine Person mit Onlinesucht kann ihren Internetgebrauch nicht mehr kontrollieren und sie wendet zunehmend mehr Zeit f√ºr das Internet auf. Bestimmte Inhalte oder Apps im Internet werden zum Mittelpunkt des Interesses, andere oder vorherige Interessen gehen verloren. Dies kann auch zu einer √ºberm√§ssigen Nutzung von Smartphones oder anderen internetf√§higen, mobilen Ger√§ten f√ºhren, mit Hilfe derer auf die gesuchten Inhalte zugegriffen oder online in sozialen Netzwerken kommuniziert wird. Es besteht ein un√ºberwindbares Verlangen nach internetbasierten Angeboten, die Nichtnutzung f√ºhrt zu Nervosit√§t und Entzugserscheinungen. Trotz negativer Folgen werden sie weiter genutzt oder konsumiert. Eine internets√ºchtige Person zieht sich von anderen Menschen zur√ºck und l√§sst Beziehungen abbrechen. Sie ist bis weit in die Nacht online, sodass sich der Tag-Nacht-Rhythmus ver√§ndert und sich eine √ºberm√§ssige M√ºdigkeit einstellt. Zeit im Internet zu verbringen kann auch eine Strategie sein, um unangenehme Gef√ºhle oder Stress zu vermeiden. Nicht alle diese Anzeichen m√ºssen bei einer Onlinesucht vorhanden sein. Eine Onlinesucht kann aber auch nicht allein aufgrund einer bestimmten t√§glichen Nutzungsdauer des Internets festgestellt werden - entscheidend ist der Verlust der Kontrolle √ºber die Internetnutzung. Eine Internetabh√§ngigkeit bringt biochemische Ver√§nderungen im K√∂rper mit, welche zur Sucht f√ºhren. Wie bei einer Drogenabh√§ngigkeit kommt es auch bei der Onlinesucht zu Ver√§nderungen im Belohnungszentrum des Gehirns, sodass der onlines√ºchtigen Person allt√§gliche Belohnungssituationen allein nicht mehr ausreichen. Beeinflussen Geschlecht und Alter die Entwicklung einer Onlinesucht? Jugendliche haben ein erh√∂htes Risiko f√ºr eine Internetabh√§ngigkeit oder Smartphone-Sucht, da die Gehirnregion, die f√ºr die Steuerung des Verhaltens und der Emotionen zust√§ndig ist, noch nicht vollst√§ndig entwickelt ist. Frauen zeigen √∂fter eine √ºberm√§ssige Nutzung der Onlinekommunikation sowie sozialen Netzwerken, w√§hrend M√§nner h√§ufiger Probleme mit der √ºberm√§ssigen Nutzung von pornographischen Seiten (Online-Sexsucht) sowie Online-Computerspielen (Computerspielsucht) haben. Im Vergleich zur Allgemeinbev√∂lkerung weisen Personen mit einer Onlinesucht h√§ufiger eine Depression auf, sie sind introvertierter und haben ein geringeres Selbstwertgef√ºhl. Eine Cannabisabh√§ngigkeit kommt bei Onlines√ºchtigen gleich h√§ufig vor wie in der Allgemeinbev√∂lkerung; Personen, die Kokain und Cannabis konsumieren, sind jedoch h√§ufiger von Phasen der Onlinesucht betroffen. Wir sind in einer anonymen Online-Beratung f√ºr Sie da. Zur Online-Beratung Langzeitfolgen von Internetabh√§ngigkeit Eine Onlinesucht kann zur Beeintr√§chtigung der sozialen Beziehungen und der schulischen oder beruflichen Leistungen f√ºhren. Einige Nutzungsformen k√∂nnen auch grosse finanzielle Probleme mit sich bringen. Mitunter wird auch die k√∂rperliche Gesundheit gesch√§digt. So kann es z. B. zu Haltungssch√§den, zu Problemen wegen eines gest√∂rten Essverhaltens, zu Kopfschmerzen und Sehproblemen kommen. Weiterf√ºhrende Informationen zu Internetgebrauch und Onlinesucht Zahlen und Fakten zu Internetnutzung und Onlinesucht: https://zahlen-fakten.suchtschweiz.ch; https://monam.chBeratung und Therapie bei Onlinesucht: https://spielsucht-radix.ch","keywords":""},{"title":"Cookies","type":0,"sectionRef":"#","url":"/Big-Data/cookies","content":"Cookies Wie weiss Google, welche Webseiten ich besucht habe?‚Äã Viele Webseiten nutzen z.B. den Dienst &quot;Google Analytics&quot;. √ñffnen wir solch eine Webseite wird auch Google Analytics gestartet und schon legt Google ein Cookie bei uns ab (ein sogenanntes Drittanbieter-Cookie). Cookies sind kleine Datenpakete, welche eine Webseite auf dem lokalen Computer (genau genommen im Browser) speichert. √ñffnen wir danach eine andere Webseite die Google Analytics nutzt (das nutzen die meisten Webseiten) so kann Google die eigenen Cookies lesen und weiss welche Seiten wir in welcher Reihenfolge wie lange angesehen haben. Generell nutzen online-Werbeagenturen Information von ihren Drittanbieter-Cookies um nutzerspezifische Werbung schalten zu k√∂nnen. Die Browser-Ererweiterung &quot;Thunderbeam-Lightbeam&quot; f√ºr den Chrome-Browser macht die Spuren sichtbar, welche wir mit Cookies im Internet hinterlassen. Cookies Installieren Installieren Sie Sie sich die Chrome- bzw. Edge-Erweiterung Thunderbeam-Lightbeam Surfen Sie etwas herum. √ñffnen Sie nun wieder den Tab von Lightbeam und schauen Sie, wer alles etwas von Ihren Besuchen auf anderen Webseiten mitbekommen hat. Challenge: Suchen Sie eine Webseite ohne Verbindungen zu anderen Webseiten. OFI-Website Welche Cookies gibt es auf der ofi.gbsl-Website? Cookies L√∂schen‚Äã Dr√ºcken Sie die Tasten Jetzt erscheint ein Fenster, in welchem Sie die gespeicherten Browserdaten l√∂schen k√∂nnen. Sie k√∂nnen auch w√§hlen, bspw. nur die Browserdaten der letzten Stunde/Woche zu l√∂schen. Probieren Sie es aus. Alternativen zum Shortcut:‚Äã Edge: Cookies in Microsoft Edge l√∂schen Chrome: Cache leeren und Cookies l√∂schen - Computer - Google-Konto-Hilfe Firefox: Cookies und Website-Daten in Firefox l√∂schen | Hilfe zu Firefox (mozilla.org) Safari: Verwalten von Cookies und Website-Daten mit Safari auf dem Mac - Apple Support Variante In den meisten Browsern (alle ausser Safari) k√∂nnen Cookies auch direkt √ºber das kleine Schloss üîí in der Adresszeile gel√∂scht werden: Der eigentliche Zweck von Cookies‚Äã Aufgabe L√∂schen Sie alle Cookies der Seite https://ofi.gbsl.website und aktualisieren Sie die Webseite. Was stellen Sie fest? Werbe-Cookies blockieren‚Äã Werbe-Cookies lassen sich mit Erweiterungen blockieren. Hilfreich: Auch Werbeanzeigen k√∂nnen damit blockiert werden. Aktuelle Empfehlung: Die als OpenSource entwickelte Erweiterung &quot;uBlockOrigin&quot; (https://github.com/gorhill/uBlock) installieren. Der Nachfolger von Cookies: Fingerprinting‚Äã Artikel Lesen Lesen Sie den verlinkten Artikel Artikel Halten Sie Fragen fest Erkl√§ren Sie in eigenen Worten, was Fingerprinting ist Am i Unique?‚Äã Am I Unique &quot;Am I Unique&quot; ist eine Website, welche Ihren digitalen Browser Fingerabdruck auswertet und bereitstellt. Damit ist es m√∂glich zu sehen, welche Informationen durch das Aufrufen einer Website preisgegeben werden. Testen Sie Ihren Browser - wie gut sind Sie identifizierbar? Wie sieht das Resultat auf Ihrem Smartphone aus? √Ñndert sich etwas, wenn Sie den Test in einem privaten Fenster durchf√ºhren? https://amiunique.org/fp EFF Cover your tracks Mit &quot;EFF Cover your tracks&quot; k√∂nnen Sie ebenfalls Ihren digitalen Fingerabdruck testen. Zus√§tzlich gibt Ihnen diese Website aber auch Hinweise dazu, wie gut Sie bspw. gegen Cookie-Tracking abgesichert sind. Wie steht es um Ihre Absicherung? https://coveryourtracks.eff.org/","keywords":""},{"title":"Gesellschaft","type":0,"sectionRef":"#","url":"/Big-Data/intro","content":"Gesellschaft Big Data‚Äã Mobiltelefone, Uhren, Sensoren, Kameras und Webseiten sammeln andauernd Informationen √ºber uns. Algorithmen suchen mit Hilfe von K√ºnstlicher Intelligenz in diesen riesigen Datensammlungen nach Mustern und teilen uns in Kategorien ein. Dies wird als ¬´Big Data¬ª bezeichnet. Hannah Fry zeigt in ihrem Buch ¬´Hello World¬ª f√ºr verschiedene Bereiche anhand von Beispielen auf, was heute mit ¬´Big Data¬ª gemacht wird und welche Auswirkungen das auf unser Leben hat. Es stellt sich die Frage, wann ¬´Big Data¬ª w√ºnschenswert und hilfreich ist und wann unangenehm oder sogar gef√§hrlich. @ Herunterladen * In der n√§chsten Zeit setzen Sie sich anhand des Buchs von Hannah Fry gruppenweise mit diesem Thema auseinander und halten einen Vortrag dazu. * Die Buchausschnitte sind urheberrechtlich gesch√ºtzt und d√ºrfen ausschliesslich f√ºr den schulischen Gebrauch verwendet werden. Die Weitergabe ist verboten. Ablauf‚Äã 1. Themenwahl und Gruppenbildung‚Äã Im Buch gibt es sechs Kapitel zu Spezialthemen. Sie w√§hlen eines dieser Themen und setzen sich vertieft damit auseinander: Daten (Facebook) Justiz Medizin Autos Kriminalit√§t Kunst Jedes Thema kann von maximal vier Sch√ºler:innen gew√§hlt werden. Jede Gruppe bestimmt eine Gruppenchef:in. 2. Lesen‚Äã Alle lesen zwei bis drei Kapitel - die Einleitung und die zum Thema passenden Kapitel gem. untenstehender Tabelle. Thema\tKapitel\tGruppeDaten\tEinleitung, Daten\tJael, Noemi, Rownok, Matteo Justiz\tEinleitung, Justiz\tUma, Alessia, Kyra, Annic Medizin\tEinleitung, Medizin\tMia, Berenike, Eline Autos\tEinleitung, Autos\tMa√´lle N., Ma√´lle A., Luana Kriminalit√§t\tEinleitung, Kriminalit√§t\tCedric, Julien, Emil Macht / Kunst\tEinleitung, Macht, Kunst\tCindy, L√©onie, Jana, Riana Machen Sie sich Notizen, damit Sie sich sp√§ter schnell wieder im Buch zurecht finden. Selbstverst√§ndlich d√ºrfen Sie auch weitere Kapitel oder gar das ganze Buch lesen. 3. Zus√§tzliche Quellen‚Äã Informieren Sie sich bei zus√§tzlichen Quellen √ºber Ihr Thema: Zus√§tzliche Quellen Allgemein‚Äã https://www.heise.de/hintergrund/Automatische-Ungerechtigkeit-fuer-einen-ganzen-Jahrgang-britischer-Schueler-4984692.html 1. Daten‚Äã https://www.deutschlandfunk.de/alles-unter-kontrolle-chinas-intelligenter-schule-entgeht.680.de.html?dram:article_id=438868 https://netzpolitik.org/2014/algorithmen-allmaechtig-freiheit-in-den-zeiten-der-statistik/ https://www.srf.ch/news/schweiz/automatische-gesichtserkennung-wir-muessen-vorsichtiger-mit-unseren-fotos-umgehen https://www.srf.ch/news/wirtschaft/datenauskunft-post-von-amazon-164-zip-files 2. Justiz‚Äã https://www.srf.ch/news/schweiz/datenschuetzer-raet-davon-ab-neue-fahndungs-app-sammelt-ueber-drei-milliarden-internet-fotos https://heise.de/-5001003 TV Serie: Bull https://www.vijilent.com/real-data-scientist-reviews-tv-trial-science/ 3. Medizin‚Äã https://www.datarevenue.com/de-blog/kuenstliche-intelligenz-in-der-medizin https://www.nzz.ch/wissenschaft/ki-in-der-medizin-hilfe-bei-einfachen-und-repetitiven-aufgaben-ld.1497525 NZZ-Artikel https://www.srf.ch/news/panorama/schlechter-datenschutz-menstruations-apps-intimste-angaben-landen-bei-facebook https://www.nzz.ch/meinung/ki-in-der-medizin-es-braucht-vor-allem-menschliche-intelligenz-ld.1521205 NZZ-Kommentar 4. Autos‚Äã https://www.srf.ch/audio/regionaljournal-zuerich-schaffhausen/selbstfahrender-bus-in-neuhausen-in-unfall-verwickelt?id=11558691 https://heise.de/-4852995 5. Kriminalit√§t‚Äã https://geschichtedergegenwart.ch/die-pre-cops-wie-algorithmen-die-polizeiarbeit-veraendern/ https://magazin.nzz.ch/wirtschaft/kameras-in-der-migros-datenschuetzer-greifen-ein-ld.1536443 NZZ-Artikel https://youtu.be/sxRkwdDI9Yg https://www.srf.ch/news/panorama/automatische-gesichtserkennung-heute-im-stadion-morgen-ueberall 6. Kunst‚Äã https://srf.ch/play/tv/redirect/detail/4b6a8647-b179-4dd8-89ec-3445e01dcda5 https://mixed.de/neue-bild-ki-zeigt-das-potenzial-riesiger-ki-modelle/ 4. Gruppendiskussion‚Äã Nachdem Sie alle die Kapitel gelesen haben, diskutieren Sie in der Gruppe dar√ºber. Die Gruppendiskussion findet zu einem vorgegebenen Zeitpunkt w√§hrend des Unterrichts statt. In der Gruppe besprechen Sie die folgenden Punkte: allgemeiner Gedankenaustausch zum Gelesenen Welche Abschnitte sind besonders wichtig und sollten in den Vortrag einfliessen? Einigen Sie sich in der Gruppe auf eine zentrale Fragestellung und eine Meinung inklusive Begr√ºndung dazu. Wie kann im Vortrag am besten ein Erz√§hlungsbogen eingebaut werden? In welcher Reihenfolge sollen die Themen vorgestellt werden? Wie wird der Vortrag in der Gruppe aufgeteilt? Wie sollen die Folien gestaltet werden? Halten Sie schriftlich in einem Protokoll fest, was Sie diskutiert haben. Das Protokoll geben Sie als PDF-Datei per E-Mail am Ende der Doppellektion ab. Es fliesst in die Bewertung mit ein. 5. Vortrag vorbereiten‚Äã Sie erstellen in der Gruppe Folien f√ºr Ihre Pr√§sentation. Dabei beachten Sie die Hinweise f√ºr gute Pr√§sentationen. Abgabe Folien Die Folien geben Sie als PDF per E-Mail bis um 17.00 Uhr am Abend vor der Pr√§sentation ab. 6. Vortrag halten‚Äã Der Vortrag dauert ca. 10 bis 15 Minuten. Sie f√ºhren den Vortrag als Gruppe durch. Das bedeutet, dass alle Gruppenmitglieder ein Teil des Vortrags halten und alle w√§hrend der ganzen Dauer des Vortrags vorne stehen. 7. Bewertung‚Äã Die folgenden Kriterien werden mit je 1 bis 4 Punkten bewertet. Es k√∂nnen also maximal 24 Punkte erreicht werden. Gruppenbewertung Inhalt: sich intensiv und kritisch mit dem Thema auseinandersetzen, die wichtigsten Aspekte des Themas auf den Punkt bringen und dem Publikum vermitteln Visualisierung: gestalterisch passende und ansprechende Folien gestalten, welche mit passenden Visualisierungstechniken den Inhalt des Vortrags gut unterst√ºtzen. Strukturierung: eine gute Einleitung, roter Faden, angemessener Inhaltsrahmen und Zeitrahmen (10-15 Minuten) Sprache: Laut und deutlich sprechen, frei sprechen (d.h. nicht ablesen), nicht zu schnell sprechen, keine F√ºlllaute wie ¬´√§hm¬ª verwenden Haltung: Gerade und stabil stehen, Publikum anschauen, Gestik Arbeitsprozess Lernziele‚Äã Informatik und Gesellschaft Sie setzen sich kritisch mit der Sammlung von personenbezogenen Daten und deren Auswertung durch intelligente Algorithmen auseinander. Sie k√∂nnen absch√§tzen, wo in unserer Gesellschaft grosse Datenmengen und k√ºnstliche Intelligenz eingesetzt werden um Entscheidungen zu treffen. Sie bilden sich eine Meinung zum Einsatz von grossen Datenmengen und k√ºnstlicher Intelligenz in verschiedenen Bereichen der Gesellschaft. Lernziele Gestaltung von Folien Sie gestalten Folien mit einem ansprechenden, einheitlichen Layout. Sie setzen gezielt passende Visualisierungen ein (Bilder, Grafiken, Symbole, Diagramme). Sie vermeiden die Verwendung von zu viel Text auf den Folien. Sie verwenden grosse Bilder in einer passenden Aufl√∂sung und einem passenden Dateiformat (Transparenz!).","keywords":""},{"title":"Powerpoint","type":0,"sectionRef":"#","url":"/Big-Data/powerpoint","content":"Powerpoint Pr√§sentieren Zeit: 15 Minuten Lesen Sie die folgenden Kapitel auf ict.mygymer.ch: URL\tLesearthttps://ict.mygymer.ch/praesentation/praesentieren\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/allgemein/bilder\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/animation\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/videos\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/master\t‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/referentenansicht\t‚≠êÔ∏è https://ict.mygymer.ch/praesentation/powerpoint/notizen\t‚≠êÔ∏è Halten Sie einige Take-Home Messages fest: Aufgabe Erstellen Sie eine Powerpoint Pr√§sentation, welche folgende Kriterien erf√ºllt: Im Folienmaster wird ein Logo in der Kopfzeile eingef√ºgt wird die pers√∂nliche Mail-Adresse unten rechts eingef√ºgt Die Titelseite hat ein Hintergrundbild einen gut lesbaren Titel zeigt das heutige Datum Die zweite Folie zeigt eine animierte Auflistung mit min. 5 Eintr√§gen (bei jedem Klick wird ein Bullet-Point hinzugef√ºgt) hat zus√§tzliche Notizen f√ºr die Referent:in. Die dritte Folie zeigt die folgende, selber nachgebaute Animation: Hinweis Verwenden Sie eine benutzerdefinierte Pfadanimation (Kurve Zeichnen). Lassen Sie die Animationen unendlich lange wiederholen, wobei die &quot;Animations Dauer&quot; bei einem Objekt bspw. 6 s und beim anderen Objekt 5 s dauert. Achten Sie zudem darauf, bei den Effektoptionen die Haken bei Sanft Starten und Sanfte Enden zu entfernen. Laden Sie die fertige Pr√§sentation hier hoch: Upload","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/byod-basics/v24/betriebssystem","content":"Betriebssystem Globale Suche‚Äã WindowsmacOS Startmen√º √∂ffnen (-Taste)) und direkt mit Tippen beginnen. Auf die Lupe klicken und Suchanfrage starten. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. WindowsmacOS Video","keywords":""},{"title":"Basics","type":0,"sectionRef":"#","url":"/byod-basics/v24/overview","content":"Basics Basics Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/byod-basics/v24/dateiexplorer","content":"Dateiexplorer WindowsmacOS Dateiexplorer Ansichten‚Äã WindowsmacOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã WindowsmacOS Video Ordner Erstellen‚Äã √úber das Kontextmen√º √úber das Men√ºband WindowsmacOS Video Dokumente verschieben‚Äã per Drag&amp;Drop (mit der Maus Packen und in einen anderen Ordner Ziehen) WindowsmacOS Ausschneiden&amp;Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dokumente umbenennen‚Äã WindowsmacOS Mit F2 (je nach Tastatur auch Fn+F2) Mit rechtsklick &quot;Umbenennen&quot; ZIP Dateien‚Äã Komprimieren‚Äã WindowsmacOS Video Entpacken‚Äã WindowsmacOS Video","keywords":""},{"title":"Suchmaschinen","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Grundlegendes/Suchmaschine","content":"Suchmaschinen Suchmaschinen werden verwendet, um im World Wide Web nach Informationen zu suchen. Die bekannteste Suchmaschine ist Google mit einem Marktanteil von √ºber 90%. Einschr√§nkungen Suchmaschinen‚Ä¶ k√∂nnen nicht alles finden -&gt; Deep Web k√∂nnen beeinflusst werden -&gt; SEO: Search Engine Optimization beeinlussen die Suchergebnisse -&gt; Filterblase Funktionsweise‚Äã Eine Suchmaschine hat drei Hauptaufgaben: Erstellen eines Index Verarbeiten von Suchanfragen Bewerten und Filtern der Suchergebnisse Bevor eine Suchmaschine eine Abfrage beantworten kann, muss erst eine Datenbank mit entsprechenden Informationen zu Webseiten erstellt werden. Diese Aufgabe wird von automatischen Programmen, sogenannten Webcrawlern, √ºbernommen. Sie durchsuchen das World Wide Web st√§ndig nach neuen und ge√§nderten Seiten. Die Seiten werden analysiert und in einer riesigen Datenbank eingetragen. Dabei wird jeder Eintrag mit Stichworten versehen, welche sich aus der Analyse ergeben. Wenn eine Benutzer:in eine Suchanfrage an die Maschine schickt, wird die Anfrage erst sprachlich analysiert. Beispielsweise werden falsch geschrieben Worte korrigiert. Anschliessend wird in der Datenbank nach Eintr√§gen gesucht, deren Stichworte m√∂glichst gut mit der Anfrage √ºbereinstimmen. Schliesslich werden die Resultate bewertet und entsprechend geordnet. Achtung Suchergebnisse werden von einem automatischen Lernsystem (k√ºnstliche Intelligenz) beeinflusst. Zus√§tzlich erfassbare Informationen wie Person, Ort, Ger√§t oder der verwendete Browser geben der Suchmaschine Hinweise darauf, welche Informationen relevanter sind.","keywords":""},{"title":"Cloud","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Grundlegendes/cloud","content":"Cloud ¬´Cloud¬ª bedeutet, dass Ihre Dateien auf einem Server des Cloud-Betreibers gespeichert werden. Eine Cloud kann aber auch bspw. Rechenleistung zur Verf√ºgung stellen und Teile einer Anwendung ausf√ºhren. √úblicherweise steht auf dem Server ebenfalls eine Web-App zu Verf√ºgung, damit die Dateien im Browser betrachtet oder bearbeitet werden k√∂nnen. Desktop-App ‚Äã Damit die Desktop-App verwendet werden kann, muss diese erst auf dem Ger√§t installiert worden sein. Desktop-Apps bieten meistens einen gr√∂sseren Funktionsumfang, k√∂nnen ohne aktive Internetverbindung gestartet und verwendet werden und sind meist performanter. Web-App ‚Äã Die Web-App wird beim √ñffnen des Dokuments vom Server des Anbieters heruntergeladen und im Browser (daher auf dem Prozessor des Laptops) ausgef√ºhrt. Web-App Architektur@ Einzelne Berechnungen k√∂nnen auch in die Cloud ausgelagert werden, z.B. die Autokorrektur in der Word Web-App: Bei jeder √Ñnderung wird der aktuelle Abschnitt an die Cloud geschickt und auf Fehler √ºberpr√ºft: Autokorrektur in Word Onine Auf der rechten Seite ist der Datenaustausch, der f√ºr die Autokorrektur notwendig ist, vom Laptop zur Cloud zu sehen. Bei jeder √Ñnderung des Dokuments wird der ganze Inhalt des aktuellen Abschnitts an die Cloud geschickt. Web-Apps brauchen eine aktive Internetverbindung und sind oft auch etwas langsamer als Desktop-Apps. Meist ist zudem der Funktionsumfang eingeschr√§nkt. Microsoft 365‚Äã OneDrive im Browser‚Äã In OneDrive im Browser kann eine Datei wahlweise in der Web-App oder in der Desktop-App ge√∂ffnet werden. Mit einem Doppelklick wird die Datei in der Web-App ge√∂ffnet. Klicke auf die drei vertikalen Punkte ‚ãÆ, dann auf √ñffnen und In der App √∂ffnen, um die Datei in der Desktop-App zu √∂ffnen. Teams-App‚Äã In der Teams-App muss auf die drei horizontalen Punkte ‚ãÆ geklickt werden. Es gibt zus√§tzlich die M√∂glichkeit In Teams bearbeiten. In diesem Fall wird die Web-App verwendet, diese wird jedoch innerhalb der Team-App gestartet (die Teams-App kann einen Browser anzeigen).","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/byod-basics/v24/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Frage 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Frage 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Frage 3‚Äã WindowsmacOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Frage 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Frage 5‚Äã Den Ordner &quot;programme&quot; in VS Code √∂ffnen ein neues Programm mit dem Namen &quot;fledermaus&quot; hinzuf√ºgen Frage 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop Powerpoint starten Frage 7‚Äã &quot;sonnenuntergang.docx&quot; √∂ffnen (ab jetzt nur mit Tasten-Shortcuts) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Abschnitt ausw√§hlen und l√∂schen Dokument abspeichern Frage 8‚Äã Finder und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Frage 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Frage 10‚Äã Ordner &quot;programme&quot; in VS Code √∂ffnen Das Programm &quot;create_mesh&quot; √∂ffnen, den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Frage 11‚Äã Das Programm &quot;hello_world.py&quot; in VS Code √∂ffnen Ein Bildschrim-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschrimaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Frage 12‚Äã Die kompirmierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Frage 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Frage 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Frage 15‚Äã Das Programm &quot;hello_world.py&quot; in VS Code √∂ffnen (ab jetzt mit Tasten-Shortcuts) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Frage 16‚Äã Das Programm &quot;hello_world.py&quot; in VS Code √∂ffnen (ab jetzt mit Tastenk√ºrzel) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Frage 17‚Äã Das Programm &quot;create_mesh.py&quot; in VS Code √∂ffnen Nach dem Wort &quot;SQRT3&quot; suchen. Wie oft kommt es im Programm vor? Frage 18‚Äã Den Ordner &quot;programme&quot; in VS Code √∂ffnen ein neues Python-Programm &quot;klammern.py&quot; erstellen und folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) abspeichern und Programm ausf√ºhren Frage 19‚Äã Den Ordner &quot;programme&quot; in VS Code √∂ffnen ein neues Python-Programm &quot;klammern.py&quot; erstellen und folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) abspeichern und Programm ausf√ºhren Frage 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Milch kaufen&quot; Frage 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Frage 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Frage 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Frage 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2020 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Frage 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopiereneinen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Frage 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Frage 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Frage 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Frage 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Frage 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Im OneDrive Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen","keywords":""},{"title":"Browser","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Grundlegendes/Browser","content":"Browser Begriff‚Äã Ein Webbrowser oder kurz Browser ist ein Programm, welches auf einem Benutzer-Ger√§t installiert ist. Der Browser bietet eine grafische Oberfl√§che an und fordert die f√ºr die Darstellung eine Webseite ben√∂tigten Dateien von einem Webserver an. Anschliessend analysiert es diese Dateien und stellt die Webseite entsprechend dar. Der Browser f√ºhrt auch Programme aus, welche in der Webseite enthalten sind. Produkte‚Äã Logo\tName\tHersteller\tPlattform√ºbergreifend Firefox\tMozilla Chrome\tGoogle Edge\tMicrosoft Safari\tApple nur f√ºr Apple Produkte Technologien‚Äã F√ºr moderne Webseiten werden haupts√§chlich drei Technologien verwendet: HTML (Hypertext Markup Language): Mit dieser Markup-Sprache wird die Struktur einer Webseite beschrieben. HTML-Dateien enthalten den ¬´Bauplan¬ª einer Webseite und Verweise auf alle anderen Dateien, welche f√ºr die Webseite ben√∂tigt werden. CSS (Cascading Stylesheets): Damit wir das Layout der Webseite definiert. Mit CSS werden Position, Farben, Animationseffekte und weitere Formatierungen der einzelnen Elemente der Webseite beschrieben. JS (Java Script) ist eine Programmiersprache. Moderne Webseiten enthalten teilweise umfangreiche Programme, welche vom Browser ausgef√ºhrt werden.","keywords":""},{"title":"E-Mail verwenden","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Grundlegendes/E-Mail","content":"E-Mail verwenden Eine E-Mail ist ein Brief‚Äã Im Gegensatz zu einem Chat gelten bei der E-Mail-Kommunikation die gleichen Regeln wie beim Briefverkehr. Eine E-Mail enth√§lt also eine Anrede, einen h√∂flichen und sprachlich korrekten Text, sowie eine Grussformel. Bei einer E-Mail wird immer auch ein Betreff angegeben. Dieser sollte so gew√§hlt werden, dass er kurz und pr√§gnant den Inhalt der E-Mail zusammenfasst. Betreff: Wechsel Schwerpunktfach Sehr geehrter Herr Cadetg In den ersten sechs Monaten hier am Gymnasium habe ich grosse Freude am Italienischunterricht bekommen. Das von mir gew√§hlte Schwerpunktfach entspricht hingegen gar nicht meinen Vorstellungen. Deshalb frage ich Sie, ob es mir m√∂glich w√§re, in das Schwerpunktfach Italienisch zu wechseln. Freundliche Gr√ºsse Anna M√ºller Anrede‚Äã Die √ºbliche Andere ist ¬´Sehr geehrte/r Frau/Herr¬ª. Sind mehrere Personen angesprochen, schreibt man ¬´Sehr geehrte Damen und Herren¬ª. Wenn die angesprochene Person unbekannt ist (z.B. bei einer Support-E-Mail-Adresse), so kann man ¬´Guten Tag¬ª schreiben. Ist man mit der angeschriebenen Person vertrauter, schreibt man ¬´Liebe/r¬ª. Am Schluss der Anrede steht kein Satzzeichen. Es folgt eine Leerzeile, dann der erste Satz. Grussformel‚Äã Zwischen Text und Grussformel befindet sich eine Leerzeile. Die Grussformel lautet ¬´Freundliche Gr√ºsse¬ª ohne Satzzeichen. Ist man vertrauter, schreibt man ¬´Liebe Gr√ºsse¬ª. Wann antworten? Wann nicht?‚Äã Benutzen Sie die Antworten-Funktion nur, wenn Sie wirklich eine Antwort auf eine Mail schreiben. So kann eine l√§ngere E-Mail-Konversation vom Mailprogramm sauber dargestellt und nachvollzogen werden. Wenn Sie jemandem eine neue Nachricht schreiben, sich also nicht auf vorhergehenden E-Mail-Verkehr beziehen, dann sollten Sie die Antworten-Funktion nicht verwenden, sondern einfach eine neue E-Mail schreiben. Allen Antworten‚Äã Die Funktion allen Antworten sollte man normalerweise nicht benutzen. Optionen CC und BCC‚Äã Optionen im Mailprogramm Kopie/CC In das An-Feld wird der eigentliche Empf√§nger geschrieben. Will man gleichzeitig eine Kopie der E-Mail versenden, nutzt man das Cc-Feld. Die Abk√ºrzung Cc steht f√ºr Carbon copy und bedeutet so viel wie Kohlepapierdurchschlag. Es ist √ºblich, dass die Personen, die in Cc stehen, die E-Mail lediglich zur Kenntnis bekommen. Die Empf√§nger in den Feldern An und Cc k√∂nnen die E-Mail-Adressen der anderen lesen und wissen somit, wer die E-Mail noch bekommen hat. Und hier lauert die Gefahr! Denn diese Art der Versendung sollte man nur w√§hlen, wenn es sich um eine geschlossene Nutzergruppe, wie z.B. innerhalb einer Organisation handelt.1 Blindkopie/BCC M√∂chte man dagegen eine E-Mail an mehrere Empf√§nger versenden, die sich untereinander nicht kennen, sollte man auf jeden Fall das Bcc-Feld nutzen. Bcc steht f√ºr Blind carbon copy und wird mit ‚Äûunsichtbarer Durchschlag‚Äú √ºbersetzt. Der Name sagt es schon: Die Empf√§nger in diesem Feld werden weder von den anderen Empf√§ngern gesehen, noch k√∂nnen sie selbst andere Adressen sehen. Lediglich das An-Feld ist f√ºr alle Teilnehmer sichtbar.1 Quelle: An-Cc-Bcc: scope-and-focus.com ‚Ü©","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Grundlegendes/URLs","content":"Links Ein Link oder URL (engl. uniform resource locator) ist eine globale, weltweit eindeutige Adresse f√ºr eine Datei. Die URL definiert, wie mit dem anderen Computer kommuniziert wird, wo dieser Computer zu finden ist, und welche Datei auf dem Computer gemeint ist. Die URL setzt sich aus vier Teilen zusammen: https:// gbsl.ch /gym/aktuelles/news/ ?language=de&amp;filter=gym ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Protokoll Server Dateipfad Suchanfrage Das Protokoll ist die √úbertragungsart der Datei, normalerweise https://, was bedeutet, dass die √úbertragung verschl√ºsselt ist. Achtung! Wenn das unverschl√ºsselte Protokoll http:// verwendet wird, k√∂nnen die √ºbertragenen Informationen von anderen Personen im gleichen Netzwerk mitgelesen werden. Dadurch k√∂nnen Passw√∂rter oder Kreditkarteninformationen leicht abgegriffen werden! Gerade bei Zahlungen muss unbedingt darauf geachtet werden, dass das https:// Protokoll verwendet wird. Der Name des Servers oder Dom√§nenname ist ein weltweit eindeutiger Name f√ºr den Computer, auf welchem die Datei gespeichert ist. Der Dateipfad ist eine eindeutige Bezeichnung einer Datei pro Computer. Die Suchanfrage enth√§lt Benutzereingaben, die auf interaktiven Webseiten erfasst werden. Aufgabe Wie lauten die vier Teile des folgenden URL? https://www.google.ch/search?q=Quellenangabe SSR Verf√ºgbarkeit von Links‚Äã Oft sind Links nicht lange g√ºltig. Wenn beispielsweise eine Website restrukturiert wird, stimmen die Links oft nicht mehr. Deshalb ist es in schriftlichen Arbeiten bei der Quellenangabe wichtig, dass das Datum des Zugriffs angegeben wird. So kann nachvollzogen werden, wann die verlinkte Website verf√ºgbar war. Aufgabe Die folgenden Quellenangaben stammen aus einem PDF zum korrekten Zitieren und Bibliographieren. Die Links funktionieren aber nicht mehr. Versuchen Sie, den richtigen Link zu finden: Goethe-Universit√§t Frankfurt a. M.: Neurolinguistik (ge√§ndert am 6. November 2007) http://www1.uni-frankfurt.de/fb/fb10/KogLi/Lehrstuehle/ehem__Lehrstuhl_Leuninger/Neurolinguistik/index.html (abgerufen am 03.03.2018). Baader, S.: Geometrie ‚Äì Vorlesungsscript. Mitschrift von Alex Aeberli und Raoul Bourquin, Wintersemester 07. [PDF], Skript zur Vorlesung Geometrie an der ETHZ im Wintersemester 2007, (2007) https://www.mitschriften.ethz.ch/main.php?page=3&amp;scrid=1&amp;pid=29&amp;eid=1 (abgerufen am 31.01.2018). ParlCH: ¬´Erkl√§r mir das Parlament¬ª. 18.02.2016 https://www.youtube.com/watchv=vtfEG0txhOU (abgerufen am 31.01.2018). Web Archiv - Einmal im Internet, immer im Internet‚Äã Websites die einmal online gestellt wurden, sind oft auch Jahre nachdem sie abgeschaltet wurden, noch zug√§nglich. Ein Tool, welches dies erm√∂glicht, ist bspw. das Web Archiv Wayback Machine. Diese Website l√§dt regelm√§ssig die √ºber Suchmaschinen verf√ºgbaren Websiten herunter und archiviert diese. So k√∂nnen teilweise auch alte, heute nicht mehr verf√ºgbare Websiten ge√∂ffnet werden. Achtung Da die Websiten archiviert sind, dauert es sehr lange, bis eine Website geladen ist. Die Versionen der Seite srf.ch Aufgabe Seit wann ist unter srf.ch die heutige Website vom Schweizer Radio und Fernsehen zu finden? Wem hat die Webseite vor diesem Zeitpunkt geh√∂rt? Wie erkl√§ren Sie sich die unterschiedlichen Wechsel? SSR","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/byod-basics/v24/navigation","content":"Systemnavigation Tastatur‚Äã Windows 10macOS Win (oder Windows-Taste) Shift (oder Umschalttaste) ‚áß Alt (oder Wahltaste-Taste) Ctrl (oder Control-Taste-Taste) Feststelltaste (oder Caps-Lock-Taste) ‚á™ Funktionstaste Fn Tastenk√ºrzel‚Äã Windows 10macOS Ctrl-X: Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl-C: Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl-V: Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl-Z: &quot;R√ºckg√§ngig machen&quot; - Den vorherigen Befehl widerrufen. Du kannst anschlie√üend zum Wiederholen den Tastaturkurzbefehl Shift-Ctrl-Z dr√ºcken, um den Widerrufen-Befehl umzukehren. Ctrl-A: Alle Objekte ausw√§hlen. Ctrl-F: Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl-P: Das aktuelle Dokument drucken. Ctrl-S: Das aktuelle Dokument sichern. Ctrl-T: Einen neuen Tab √∂ffnen. -Tabulatortaste: Alle ge√∂ffneten Apps anzeigen. Alt-Tabulatortaste: Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift-Enter: Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) Pfeiltasten‚Äã Windows 10macOS Shift-Pfeiltasten Text ausw√§hlen Ctrl-Pfeiltasten ganze W√∂rter √ºberspringen Ctrl-Shift-Pfeiltasten ganze W√∂rter selektieren Win-Pfeiltasten Fenster auf dem Bildschirm anordnen Klammern‚Äã Windows 10macOS () (normalerweise: Shift + 8 / Shift + 9) {} (normalerweise: Alt Gr + √§ / Alt Gr + $)) [] (normalerweise: Alt Gr + √º / Alt Gr + !) Backtick `: Shift + ^ und dann ein Leerschlag Link √∂ffnen: Ctrl+Click Weitere g√§ngige Zeichen‚Äã Windows 10macOS @: Alt Gr + 2 #: Alt Gr + 3 *: Shift + 3 *: Shift + 3 %: Shift + 5 &amp;: Shift + 6 /: Shift + 7 \\: Shift + 7 &lt;: &lt; &gt;: Shift + &lt; Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. Windows 10macOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werdem. Windows 10macOS Scrollen‚Äã Windows 10macOS Alle Programme Anzeigen‚Äã Windows 10macOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen. Erstellen‚Äã Windows 10macOS Virtuelle Desktops: Mit Win-Tabulatortaste alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* Windows 10macOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. Windows 10macOS Weitere Gesten hier","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Sicherheit/Authentifizierung","content":"Authentifizierung Authentifizierung (engl. authentication) ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Passw√∂rter","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Sicherheit/Passwoerter","content":"Passw√∂rter Unter https://howsecureismypassword.net/ kann die Sicherheit Ihres Passworts analysiert werden - insbesondere spannend ist die gesch√§tzte Zeit, um das Passwort zu knacken. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwort √ºberpr√ºfen‚Äã Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. 4. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (Empfehlung) - gute Basis-Funktionen und einfaches Handling. KeePass LastPass","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/byod-basics/v24/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã WindowsmacOS Ausschneiden und Skizzieren Unter dem Startmen√º nach Ausschneiden und Skizzieren (franz√∂sisch: Capture et croquis) suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: der ganze Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã WindowsmacOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen&gt;Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - mittels rechtsklick auf das Video und dann &quot;Medien speichern unter...&quot;. Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. WindowsmacOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Direkt zuschneiden oder drehen (Alternativ: Bearbeiten &gt; Bearbeiten) Video zuschneiden‚Äã WindowsmacOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl+f oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl+p) Neuer Tab √∂ffnen (Ctrl+t) Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Eine Mail-Signatur hinzuf√ºgen/√§ndern. Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) WindowsmacOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365 An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã WindowsmacOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã WindowsmacOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"Schadsoftware","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Sicherheit/Schadsoftware","content":"Schadsoftware Ransomware Wanna Cry@ Schadsoftware oder Schadprogramm (auch Malware) sind Computerprogramme, welche entwickelt wurden, um aus Sicht der Betroffenen unerw√ºnschte und sch√§dliche Funktionen auszuf√ºhren. Bezeichnungen‚Äã Computerviren sind Programme, welche sich selbst√§ndig und automatisch auf m√∂glichst viele Ger√§te kopieren. Trojaner sind Schadprogramme, welche sich als andere App, beispielsweise als Spiel tarnen. Ransomware sind Schadsoftware, welche die Daten auf den infizierten Ger√§ten verschl√ºsseln und f√ºr deren Entschl√ºsselung ein L√∂segeld verlangen. Spyware sind Schadprogramme, welche den Benutzer ausspionieren, indem sie Daten und Aktivit√§ten am Ger√§t an Dritte weiterleiten. Aufgabe Wer hat den ersten Computervirus geschrieben? Wie heisst der Virus? Wie hat sich das Virus verbreitet? Computerschutz‚Äã Damit ein Schadprogramm auf dem Computer ausgef√ºhrt werden kann, muss es zuerst einmal dorthin kommen. Damit dies klappt muss entweder ein Benutzer einen Trojaner installieren oder ein Computervirus kann einbrechen. Die Voraussetzung dass ein Computervirus ein System infizieren kann, sind Sicherheitsl√ºcken. Das sind nicht bedachte Wege, √ºber welche Programme auf einem Computer ausgef√ºhrt werden k√∂nnen, ohne dass dazu eine Best√§tigung der Anwender:in n√∂tig ist (normalerweise muss beim bspw. beim Installieren eines Programms die Installation abgesegnet werden.). Diese Wege sind meist ausgekl√ºgelt und sehr clever. Um sich vor Schadsoftware zu sch√ºtzen, gilt es folgende Punkte zu beachten: gesunder Menschenverstand - die Herausgeber:innen von Programmen sollten verifizierbar und vertrauensw√ºrdig sein. Heruntergeladene Programme von dubiosen Seiten sollte grunds√§tzlich misstraut werden. das System aktuell halten - Updates nerve zwar gewaltig; sie flicken jedoch entdeckte L√ºcken, so dass der Computer Schritt-f√ºr-Schritt sicherer wird. Virenprogramme verwenden - Dubiose Aktivit√§ten von Programmen (Netzwerkverkehr, Festplatten- oder Arbeitsspeicherzugriffe), sowie der Inhalt von Dateien k√∂nnen von Virenprogrammen analysiert und ggf. blockiert werden. Virenprogramme‚Äã Aktuelle Versionen von Windows und Mac OS Computer sind mit den Grundeinstellungen gen√ºgend gegen allt√§gliche Bedrohungen gesch√ºtzt. Bei Mac passiert der Virenschutz ausschliesslich im Hintergrund (mit XProtect), bei Windows heisst der Virenschutz Microsoft Defender und besitzt auch eine grafische Oberfl√§che. Auf beiden Betriebssystemen werden bspw. heruntergeladene Dateien auf bekannte Schadsoftware analysiert. Der Virenschutz hinkt dabei immer ein bisschen hinterher - sobald eine neue L√ºcke ausgenutzt wird, muss diese geschlossen werden und die Ausf√ºhrung der entsprechenden Schadprogramme sollte durch den Virenschutz verhindert werden. Damit auch aktuelle So Die Anwender:in bekommt von diesem Schutz nur dann etwas mit, wenn ein m√∂glicherweise gef√§hrliche Software heruntergeladen wurde updates ausgef√ºhrt werden m√ºssen. Funktioniert mein Virenschutz? Damit getestet werden kann, ob der Virenschutz auf einem System funktioniert, gibt es eine EICAR-Testdatei (erzeugt vom European Institute for Computer Antivirus Research (EICAR)), die unsch√§dlich ist, aber von jedem g√§ngigen Antivirus-Programm erkannt werden muss. Der Inhalt der Datei sieht wie folgt aus: EICAR-Testdatei X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* Aufgabe: Laden Sie die EICAR-Testdatei herunter und √ºberpr√ºfen Sie, dass ihr System Alarm schl√§gt. Download","keywords":""},{"title":"Datenverlust","type":0,"sectionRef":"#","url":"/byod-basics/v25/ICT/Sicherheit/Datenverlust","content":"Datenverlust Eine oft untersch√§tzte Gefahr ist der Verlust von Daten. @ Ursachen‚Äã F√ºr den Verlust von Daten gibt es verschiedene Ursachen, beispielsweise: Defekt des Ger√§ts, auf welchem die Daten gespeichert sind, Verlust des Ger√§ts, auf welchem die Daten gespeichert sind, Zerst√∂rung der Daten durch Schadsoftware, Verschl√ºsselung der Daten durch Schadsoftware. Massnahmen‚Äã Cloudspeicher verwenden‚Äã Daten sollten nie auf nur einem Ger√§t gespeichert werden. Mit Cloud-L√∂sung werden Daten automatisch zwischen mehreren Ger√§ten und einem Cloudspeicher synchronisiert. Damit stehen die Daten auch noch zu Verf√ºgung, wenn ein Ger√§t verloren geht oder einen Defekt hat. Schutz vor Schadsoftware‚Äã Kapitel Schadsoftware","keywords":""},{"title":"Basics","type":0,"sectionRef":"#","url":"/byod-basics/v25/overview","content":"Basics Basics Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/betriebssystem","content":"Betriebssystem Globale Suche‚Äã WindowsmacOS Startmen√º mit √∂ffnen und direkt mit Tippen beginnen. Auf die Lupe klicken und Suchanfrage starten. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. WindowsmacOS Video","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/dateiexplorer","content":"Dateiexplorer WindowsmacOS Dateiexplorer Ansichten‚Äã WindowsmacOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã Sie k√∂nnen Dateien in einem Ordner nach unterschiedlichen Kriterien sortieren. Im Downloads Ordner ist etwa die Sortierung nach dem &quot;Erstellungsdatum&quot; sinnvoll, bei Aufr√§umarbeiten wo die gr√∂ssten Dateien gel√∂scht werden sollen, die &quot;Gr√∂sse&quot; oder beim Aufsuchen eines Bildes (oder eines anderen spezifischen Dateityps) das Sortieren nach dem &quot;Dateityp&quot; (bzw. nach der &quot;Art&quot;). Standardm√§ssig wird nach dem &quot;Namen&quot; sortiert. WindowsmacOS Video Ordner Erstellen‚Äã Ein Ordner gruppiert mehrere Dateien an einem Ort. Eine Datei in einem Ordner besitzt den Ordnernamen im Dateipfad. Sie k√∂nnen einen neuen Ordner mit einem gew√ºnschten Namen erstellen: √ºber das Kontextmen√º √ºber das Men√ºband WindowsmacOS Video Dokumente verschieben‚Äã Sie k√∂nnen Dateien zwischen verschiedenen Ordnern, die allenfalls auf unterschiedlichen Laufwerken liegen, verschieben. per Drag&amp;Drop (mit der Maus Packen und in einen anderen Ordner Ziehen) (oder √ºber Kopieren bzw. Ausschneiden und anschliessendes Einf√ºgen) WindowsmacOS Ausschneiden&amp;Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dateien und Dokumente umbenennen‚Äã WindowsmacOS Mit F2 (je nach Tastatur auch Fn+F2) Mit rechtsklick &quot;Umbenennen&quot; ZIP Dateien‚Äã Dateien k√∂nnen komprimiert werden - sie brauchen dann weniger Speicherplatz auf Ihrem Ger√§t, k√∂nnen im Gegenzug aber nicht mehr bearbeitet werden (ausser Sie entpacken die Dateien wieder). Komprimieren‚Äã WindowsmacOS Video Entpacken‚Äã WindowsmacOS Video","keywords":""},{"title":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/material_python","content":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung ‚¨á Download BYOD Material Alle Python-Bezogenen Aufgabe sollen direkt auf dieser Seite gemacht werden. hello__world.py print(&quot;Hello World! It's a beautiful Day.&quot;) create__mesh.py from turtle import * from math import sqrt import random SQRT3 = sqrt(3) COLORS = ['red', 'blue', 'orange', 'green', 'purple', 'brown'] speed(7) for index_x in range(5): for index_y in range(5): x = index_x * 30 if index_y % 2 == 1: x = x - 15 y = index_y * 15 * SQRT3 penup() goto(x, y) pendown() for i in range(3): color(random.sample(COLORS, 1)[0]) forward(30) left(120) klammern.py ","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/navigation","content":"Systemnavigation Tastatur‚Äã WindowsmacOS , Win Windows-Taste , Shift (oder Umschalttaste) Alt (oder Wahltaste) Ctrl (oder Control-Taste) Feststelltaste (oder Caps-Lock-Taste), Tabulator-Taste Escape-Taste Funktionstaste Fn Tastenk√ºrzel‚Äã WindowsmacOS Ctrl + X: Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl + C: Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl + V: Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl + Z: &quot;R√ºckg√§ngig machen&quot; - Den vorherigen Befehl widerrufen. Sie k√∂nnen anschliessend zum Wiederholen den TastaturkurzbefehlShift + Ctrl + Z dr√ºcken, um den Widerrufen-Befehl umzukehren. Ctrl + A: Alle Objekte ausw√§hlen. Ctrl + F: Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl + P: Das aktuelle Dokument drucken. Ctrl + S: Das aktuelle Dokument sichern. Ctrl + T: Einen neuen Tab √∂ffnen. + Tabulatortaste : Alle ge√∂ffneten Apps anzeigen. Alt + Tabulatortaste : Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift + Enter : Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) Pfeiltasten‚Äã WindowsmacOS Shift + Pfeiltasten Text ausw√§hlen Ctrl + Pfeiltasten ganze W√∂rter √ºberspringen Ctrl + Shift + Pfeiltasten ganze W√∂rter selektieren Win + Pfeiltasten Fenster auf dem Bildschirm anordnen Klammern‚Äã WindowsmacOS ( Shift + 8 ) Shift + 9 { Normalerweise Alt Gr + √§ } Normalerweise Alt Gr + $ [ Normalerweise Alt Gr + √º ] Normalerweise Alt Gr + ! Weitere g√§ngige Zeichen‚Äã WindowsmacOS ` Shift + ^ + Leerschlage (Backtick) @ Alt Gr + 2 # Alt Gr + 3 * Shift + 3 * Shift + 3 % Shift + 5 &amp; Shift + 6 / Shift + 7 \\ Shift + 7 &lt; &lt; &gt; Shift + &lt; Link √ñffnen‚Äã Links in bspw. in Word/Powerpoint √∂ffnen Link auf einer Webseite in einem neuen Tab √∂ffnen ... Cmd + Click Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. WindowsmacOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werden. WindowsmacOS Scrollen‚Äã WindowsmacOS Alle Programme Anzeigen‚Äã WindowsmacOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen. Erstellen‚Äã WindowsmacOS Virtuelle Desktops: Mit +Tabulator alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* WindowsmacOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. WindowsmacOS Weitere Gesten hier","keywords":""},{"title":"","type":0,"sectionRef":"#","url":"/byod-basics/v26","content":"Zeit 5 Minuten Vorbereitung, 5 Minuten Pr√ºfung Szenarien 10 Szenarien aus den Pr√ºfungsfragen Note Halb z√§hlende Note Seit dem Sommer 2020 bringen alle Sch√ºler:innen ihre eigenen Laptops mit in den Unterricht (BYOD - Bring Your Own Device). Den gr√∂ssten Nutzen bringt das pers√∂nliche Ger√§t, wenn es im Unterricht effizient als Mittel zum Zweck eingesetzt werden kann. Dies erfordert die Beherrschung der Grundlegenden Funktionen des Ger√§ts - Dokumente erstellen, speichern, teilen, wiederfinden, ... - sowie das Wissen, wie gewisse Abl√§ufe effizient gestaltet werden k√∂nnen. In diesem Abschnitt geht es darum, Ihr Ger√§t genauer kennen zu lernen und sich die wichtigsten Abl√§ufe - auch unter Zeitdruck - anzueignen. Die BYOD-Basics werden gepr√ºft, indem Sie 10 Szenarien innerhalb von 5 Minuten durchf√ºhren sollen.","keywords":""},{"title":"Betriebssystem","type":0,"sectionRef":"#","url":"/byod-basics/v26/betriebssystem","content":"Betriebssystem Globale Suche‚Äã Windows 11Windows 10macOS Startmen√º mit √∂ffnen und direkt mit Tippen beginnen. Es kann nach Programmen, Ordnern, Dateien, aber auch z.B. nach dem Wetter gesucht werden. Night-Shift‚Äã Wenns mal sp√§t wird - Augenschonender Bildschirm um den Schlafrhythmus nicht zu st√∂ren. Windows 11Windows 10macOS Video","keywords":""},{"title":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung","type":0,"sectionRef":"#","url":"/byod-basics/v26/material_python","content":"‚úçÔ∏è Python Material f√ºr die BYOD Pr√ºfung ‚¨á Download BYOD Material Alle Python-Bezogenen Aufgabe sollen direkt auf dieser Seite gemacht werden. hello__world.py print(&quot;Hello World! It's a beautiful Day.&quot;) create__mesh.py from turtle import * from math import sqrt import random SQRT3 = sqrt(3) COLORS = ['red', 'blue', 'orange', 'green', 'purple', 'brown'] speed(7) for index_x in range(5): for index_y in range(5): x = index_x * 30 if index_y % 2 == 1: x = x - 15 y = index_y * 15 * SQRT3 penup() goto(x, y) pendown() for i in range(3): color(random.sample(COLORS, 1)[0]) forward(30) left(120) klammern.py ","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Pr√ºfung‚Äã Es werden Ihnen 10 der untenstehenden Szenarien zugelost Sie haben min. 2 Minuten Zeit, um die Fragen vorg√§ngig zu sortieren Die Pr√ºfung beginnt mit einem leeren Desktop und ohne vorg√§ngig ge√∂ffnete Programme. Die heruntergeladenen Dateien m√ºssen im Original vorliegen und die Programme auf der Website m√ºssen zur√ºckgesetzt sein. Sie haben 5 Minuten Zeit, um die Szenarien vorzuzeigen F√ºr jedes korrekt vorgezeigte Szenario erhalten Sie 1 Punkt, f√ºr teilweise korrekte Szenarien (bspw. Maus statt Tastatur verwendet) gibt es 0.5 Punkte. Notenskala Punkte\tNote10\t6 9.5\t6 9\t5.7 8.5\t5.5 8\t5.2 7.5\t4.9 7\t4.7 6.5\t4.4 6\t4.2 5.5\t3.9 5\t3.6 4.5\t3.4 4\t3.1 3.5\t2.8 3\t2.6 2.5\t2.3 2\t2.1 1.5\t1.8 1\t1.5 0.5\t1.3 0\t1 Szenario 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Szenario 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Szenario 3‚Äã WindowsmacOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Szenario 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Szenario 5‚Äã √ñffnen Sie das Bild &quot;sonnenuntergang.jpg&quot; und f√ºgen Sie die Beschriftungen &quot;Palme&quot; und &quot;Sonne&quot; hinzu. Edited Die Schriftfarbe &amp; Gr√∂sse kann frei gew√§hlt werden, sie muss aber lesbar sein. Szenario 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop Powerpoint starten Szenario 7‚Äã sonnenuntergang.docx √∂ffnen (ab jetzt nur mit der Tastatur und ohne Maus!) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Absatz ausw√§hlen und l√∂schen Dokument abspeichern Szenario 8‚Äã Datei-Explorer und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Szenario 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Szenario 10‚Äã Das Programm create_mesh.py √∂ffnen und den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Szenario 11‚Äã Das Programm create_mesh.py √∂ffnen Ein Bildschrim-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschrimaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Szenario 12‚Äã Die kompirmierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Szenario 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Szenario 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Szenario 15‚Äã Das Programm hello_world.py √∂ffnen (ab jetzt nur noch mit der Tastatur ohne Maus!) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Szenario 16‚Äã Das Programm hello_world.py √∂ffnen (ab jetzt nur noch mit der Tastatur ohne Maus!) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Szenario 17‚Äã Das Programm create_mesh.py √∂ffnen Nach der Zahl 3 suchen. Wie oft kommt es im Programm vor? Szenario 18‚Äã Das Programm klammern.py √∂ffnen im Python-Programm folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) Das Programm ausf√ºhren Szenario 19‚Äã Das Programm klammern.py √∂ffnen im Python-Programm folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) Programm ausf√ºhren Szenario 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Absenzenheft unterschreiben lassen&quot; Szenario 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2021 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Szenario 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopiereneinen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Szenario 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Szenario 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Szenario 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Szenario 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Szenario 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Online im OneDrive Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen √úberpr√ºfen dass die Datei wieder auf Ihren Laptop synchronisiert wird.","keywords":""},{"title":"‚úçÔ∏è Pr√ºfungsfragen","type":0,"sectionRef":"#","url":"/byod-basics/v26/pruefungsfragen","content":"‚úçÔ∏è Pr√ºfungsfragen Vorbereitung‚Äã Vorbereitung der Pr√ºfung Material material_byod.zip herunterladen material_byod.zip entpacken und nach OneDrive verschieben Wichtig: Eine Kopie von &quot;material_byod.zip&quot; muss weiterhin im Downloads-Ordner sein, damit alle Fragen sinnvoll sind. Pr√ºfung‚Äã Es werden Ihnen 10 der untenstehenden Szenarien zugelost Sie haben min. 2 Minuten Zeit, um die Fragen vorg√§ngig zu sortieren Die Pr√ºfung beginnt mit einem leeren Desktop und ohne vorg√§ngig ge√∂ffnete Programme. Die heruntergeladenen Dateien m√ºssen im Original vorliegen und die Programme auf der Website m√ºssen zur√ºckgesetzt sein. Sie haben 5 Minuten Zeit, um die Szenarien vorzuzeigen F√ºr jedes korrekt vorgezeigte Szenario erhalten Sie 1 Punkt, f√ºr teilweise korrekte Szenarien (bspw. Maus statt Tastatur verwendet) gibt es 0.5 Punkte. Notenskala Punkte\tNote10\t6 9.5\t6 9\t5.7 8.5\t5.5 8\t5.2 7.5\t4.9 7\t4.7 6.5\t4.4 6\t4.2 5.5\t3.9 5\t3.6 4.5\t3.4 4\t3.1 3.5\t2.8 3\t2.6 2.5\t2.3 2\t2.1 1.5\t1.8 1\t1.5 0.5\t1.3 0\t1 Szenario 1‚Äã einen neuen Ordner namens &quot;Flattermaus&quot; im OneDrive Ordner &quot;material_byod&quot; erstellen diesen Ordner immer synchronisieren Szenario 2‚Äã Nightshift Modus von 21:30 bis 06:00 einschalten Szenario 3‚Äã Windows 11Windows 10macOS Ein Bilschirmfoto vom Programmfenster Datei-Explorer erstellen Das Bilschirmfoto zu &quot;01_explorer&quot; umbenennen Das Bilschirmfoto in den Ordner &quot;material_byod&quot; verschieben Szenario 4‚Äã Downloads ordner √∂ffnen Sortieren nach √Ñnderungsdatum, so dass die zuletzt heruntergeladenen Dokumente zuoberst angezeigt werden Szenario 5‚Äã √ñffnen Sie das Bild &quot;sonnenuntergang.jpg&quot; und f√ºgen Sie die Beschriftungen &quot;Palme&quot; und &quot;Sonne&quot; hinzu. Original Bild Bearbeitetes Bild Schrift Die Schriftfarbe &amp; Gr√∂sse kann frei gew√§hlt werden, sie muss aber lesbar sein. Szenario 6‚Äã Einen neuen virtuellen Desktop erstellen Auf neuem virtuellen Desktop einen Internet-Browser √∂ffnen Auf dem anderen virtuellen Desktop PowerPoint starten Szenario 7‚Äã sonnenuntergang.docx √∂ffnen (ab jetzt nur mit der Tastatur und ohne Maus!) &quot;ipsum dolor sit amet&quot; ausw√§hlen und l√∂schen Den ganzen zweiten Absatz ausw√§hlen und l√∂schen Dokument abspeichern Szenario 8‚Äã Datei-Explorer und das Mail-Programm √∂ffnen Mit Tasten-Shortcuts zwischen diesen Programmen hin- und herwechseln Szenario 9‚Äã Mail-Programm √∂ffnen Signatur-Einstellungen √∂ffnen und eine Signatur erstellen (oder wenn vorhanden √§ndern) Szenario 10‚Äã Das Programm create_mesh.py √∂ffnen und den ganzen Code kopieren Teams √∂ffnen und eine Nachricht mit einer kurzen Begr√ºssung, dem kopierten Code und einem kurzen Gruss an Herrn Hofer schicken. Szenario 11‚Äã Das Programm create_mesh.py √∂ffnen Ein Bildschirm-Video erstellen in welchem die Ausf√ºhrung des Programms gezeigt wird. Bildschirmaufnahme im Ordner &quot;material_byod&quot; abspeichern/dorthin verschieben. Szenario 12‚Äã Die komprimierte Datei &quot;material_byod.zip&quot; vom Downloads-Ordner in den Ordner &quot;material_byod&quot; unter OneDrive verschieben. Szenario 13‚Äã Den Ordner &quot;programme&quot; komprimieren Den komprimierten Ordner per Mail an Herrn Hofer schicken. Szenario 14‚Äã In der globalen Suche nach &quot;fledermaus.docx&quot; suchen und dieses Dokument √∂ffnen Den Wikipedia Link √∂ffnen Die Einleitung kopieren und im Word Dokument einf√ºgen Das Word-Dokument speichern Szenario 15‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) den ganzen Text ausw√§hlen und l√∂schen abspeichern √Ñnderung r√ºckg√§ngig machen und wieder speichern Szenario 16‚Äã Das Programm hello_world.py √∂ffnen (auf der Webseite) (ab jetzt nur noch mit der Tastatur ohne Maus!) Den Text &quot;It's a beautiful Day.&quot; ausw√§hlen, ausschneiden und vor &quot;Hello World&quot; einf√ºgen. (Resultat: print(&quot;It's a beautiful Day. Hello World!&quot;)) abspeichern Szenario 17‚Äã Das Programm create_mesh.py √∂ffnen (auf der Webseite) Nach der Zahl 3 suchen. Wie oft kommt es im Programm vor? Szenario 18‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Klammern: (), [], {}&quot;) Das Programm ausf√ºhren Szenario 19‚Äã Das Programm klammern.py √∂ffnen (auf der Webseite) im Python-Programm folgenden Code eintippen: print(&quot;Sonderzeichen: #, &amp;, &lt;, &gt;&quot;) Programm ausf√ºhren Szenario 20‚Äã ToDo-App √∂ffnen und einen neuen Task erfassen: &quot;Absenzenheft unterschreiben lassen&quot; Szenario 21‚Äã Eine neue Powerpoint-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 22‚Äã Eine neue Excel-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 23‚Äã Eine neue Word-Datei erstellen und unter dem Namen &quot;test_vorname_nachname&quot; im Ordner &quot;material_byod&quot; abspeichern. (vorname/nachname ersetzen Sie durch Ihren eigenen Vor-/Nachnamen) Szenario 24‚Äã Auf Forms eine neue Umfrage mit dem Titel &quot;Testumfrage&quot; erstellen Start Datum auf den 6.12.2022 setzen Eine Antwort pro Person zulassen Link zum Ausf√ºllen kopieren und per Teams an Herrn Hofer schicken. Szenario 25‚Äã Auf Google nach &quot;Kalender&quot; suchen Mit Touch-Gesten durch die Ergebnisse scrollen einen Link anklicken, die URL kopieren, einen neuen Tab √∂ffnen und auf bitly.com gehen den kopierten Link k√ºrzen Szenario 26‚Äã Ein 5 Sekunden Ausschnitt aus dem Video &quot;yogi_bear.mp4&quot; ausschneiden. Das zugeschnittene Video im Ordner &quot;material_byod&quot; unter dem Namen &quot;bear&quot; abspeichern. Szenario 27‚Äã Teams √∂ffnen und eine Video-Konferenz mit Herrn Hofer starten Den Bildschirm freigeben Szenario 28‚Äã Den Ordner &quot;programme&quot; zur Bearbeitung freigeben Den Link per Teams an Herrn Hofer schicken. Szenario 29‚Äã Den Ordner &quot;programme&quot; immer auf ihrem Laptop synchronisieren Dateien aus dem Ordner &quot;programme&quot; nicht mehr immer synchronisieren. Szenario 30‚Äã Die Datei &quot;sonnenuntergang.docx&quot; auf Ihrem Laptop l√∂schen Online unter https://onedrive.com im Papierkorb die Datei &quot;sonnenuntergang.docx&quot; wiederherstellen √úberpr√ºfen dass die Datei wieder auf Ihren Laptop synchronisiert wird.","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/byod-basics/v25/Skills/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã WindowsmacOS Ausschneiden und Skizzieren Unter dem Startmen√º nach Ausschneiden und Skizzieren (franz√∂sisch: Capture et croquis) suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: der ganze Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã WindowsmacOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen &gt; Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - mittels rechtsklick auf das Video und dann &quot;Medien speichern unter...&quot;. Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. WindowsmacOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Direkt zuschneiden oder drehen (Alternativ: Bearbeiten &gt; Bearbeiten) Video zuschneiden‚Äã WindowsmacOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl+f oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl+p) Neuer Tab √∂ffnen (Ctrl+t) Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Eine Mail-Signatur hinzuf√ºgen/√§ndern. Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) WindowsmacOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365 An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã WindowsmacOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã WindowsmacOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"Dateiexplorer","type":0,"sectionRef":"#","url":"/byod-basics/v26/dateiexplorer","content":"Dateiexplorer Windows 11Windows 10macOS Dateiexplorer Ansichten‚Äã Windows 11Windows 10macOS Navigationsbereich Vorschaufenster Mittelgrosse Symbole Liste Details* * wird als Standardoption empfohlen. Sortieren‚Äã Sie k√∂nnen Dateien in einem Ordner nach unterschiedlichen Kriterien sortieren. Im Downloads Ordner ist etwa die Sortierung nach dem Erstelldatum sinnvoll, bei Aufr√§umarbeiten wo die gr√∂ssten Dateien gel√∂scht werden sollen, die Gr√∂sse oder beim Aufsuchen eines Bildes (oder eines anderen spezifischen Dateityps) das Sortieren nach dem Dateityp (bzw. nach der Art). Standardm√§ssig wird nach dem &quot;Namen&quot; sortiert. Windows 11Windows 10macOS Einige Kriterien (wie das Erstelldatum) wird nicht automatisch verf√ºgbar und m√ºssen zuerst noch aktiviert werden: rechtskick &gt; Sortieren nach &gt; Mehr... &gt; Erstelldatum Video Ordner Erstellen‚Äã Ein Ordner gruppiert mehrere Dateien an einem Ort. Eine Datei in einem Ordner besitzt den Ordnernamen im Dateipfad. Sie k√∂nnen einen neuen Ordner mit einem gew√ºnschten Namen erstellen: √ºber das Kontextmen√º √ºber das Men√ºband Windows 11Windows 10macOS Variante Kontextmen√º Variante Men√ºband Dokumente verschieben‚Äã Sie k√∂nnen Dateien zwischen verschiedenen Ordnern, die allenfalls auf unterschiedlichen Laufwerken liegen, verschieben. per Drag &amp; Drop (mit der Maus Packen und in einen anderen Ordner ziehen und loslassen) oder per Copy &amp; Paste (Ausschneiden/Kopieren und anschliessendes Einf√ºgen) Windows 11Windows 10macOS Ausschneiden &amp; Einf√ºgen (auch √ºber Tastenk√ºrzel ctrl+x und ctrl+v m√∂glich) Video Dateien und Dokumente umbenennen‚Äã Windows 11Windows 10macOS √úbers Men√ºband √úbers Kontextmen√º: rechtskick &gt; Umbenennen Mit F2 (je nach Tastatur auch Fn+F2) Komprimierte Dateien .zip‚Äã Dateien k√∂nnen komprimiert werden - sie brauchen dann weniger Speicherplatz auf Ihrem Ger√§t, k√∂nnen im Gegenzug aber nicht mehr bearbeitet werden (ausser Sie entpacken die Dateien wieder). Als Analogie wird in der Informatik ein Reissverschluss verwendet, welcher durch das Zumachen Platz einspart. Deshalb das englische Wort Zip f√ºr Zipper f√ºr komprimierte Dateien. Reissverschluss (Zipper) Komprimieren‚Äã Die gew√ºnschten Dateien Ausw√§hlen und anschliessend komprimieren. Das Symbol f√ºr einen komprimierten Ordner weist oft einen Reissverschluss auf. ZIP Datei Windows 11Windows 10macOS Video Entpacken‚Äã Windows 11Windows 10macOS Video","keywords":""},{"title":"Systemnavigation","type":0,"sectionRef":"#","url":"/byod-basics/v26/navigation","content":"Systemnavigation Wichtige Tasten und ihre Namen‚Äã Windows 11Windows 10macOS , Win Windows-Taste , Shift Umschalttaste Alt Wahltaste Ctrl Control-Taste , Feststelltaste (oder Caps-Lock-Taste) Bezweckt, dass alle Buchstaben gross geschrieben werden - auch Umlaute! Tabulator-Taste Zweck: Springt zur n√§chsten Spalte oder r√ºckt den Cursor in Fliesstext ein. Escape-Taste Zweck: springt aus dem aktuellen Kontext heraus (bspw. die aktuelle Auswahl aufheben) Fn Funktionstaste Hilfreiche Tastaturk√ºrzel (Tasten Shortcuts)‚Äã Windows 11Windows 10macOS Ctrl + X Ausschneiden Ausgew√§hltes Objekt aus dem Originaltext l√∂schen und in die Zwischenablage kopieren. Ctrl + C Kopieren Ausgew√§hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Explorer. Ctrl + V Einf√ºgen Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf√ºgen. Dies funktioniert auch mit Dateien im Explorer. Ctrl + Z R√ºckg√§ngig machen - Den vorherigen Befehl widerrufen. Shift + Ctrl + Z Widerrufen das Umgekehrte von Ctrl + Z: um den Widerrufen-Befehl umzukehren. Ctrl + A Alle Objekte ausw√§hlen. Ctrl + F Finden Elemente in einem Dokument suchen oder ein Suchfenster √∂ffnen. Ctrl + P Drucken Das aktuelle Dokument drucken. Ctrl + S Speichern Das aktuelle Dokument speichern. Ctrl + T Tabs Einen neuen Tab √∂ffnen. + Tabulatortaste Alle ge√∂ffneten Apps anzeigen. Alt + Tabulatortaste Unter den ge√∂ffneten Apps zur zuletzt verwendeten wechseln. Shift + Enter Neue Zeile im selben Absatz (oder eine neue Zeile in Teams/WhatsApp ohne zu senden) + . Emoji √ñffnet die Emoji-Liste Quizz L√∂sen Sie das Quizz und markieren Sie die Aufgabe anschliessend als erledigt. Pfeiltasten‚Äã Windows 11Windows 10macOS Shift + Pfeiltasten Text ausw√§hlen Ctrl + Pfeiltasten ganze W√∂rter √ºberspringen Ctrl + Shift + Pfeiltasten ganze W√∂rter selektieren + Pfeiltasten Fenster auf dem Bildschirm anordnen Weitere M√∂glichkeiten f√ºrs Anordnen von Fenstern Shortcuts Tastatur&amp;Pfeiltasten ausprobieren Probieren Sie die verschiedenen Shortcuts im untenstehenden Textfeld aus! Klammern‚Äã Windows 11Windows 10macOS ( Shift + 8 ) Shift + 9 { Normalerweise Alt Gr + √§ } Normalerweise Alt Gr + $ [ Normalerweise Alt Gr + √º ] Normalerweise Alt Gr + ! Klammern schreiben Versuchen Sie, alle Klammern selber zu tippen! Weitere g√§ngige Zeichen‚Äã Windows 11Windows 10macOS ` Shift + ^ + Leerschlage (Backtick) @ Alt Gr + 2 # Alt Gr + 3 * Shift + 3 * Shift + 3 % Shift + 5 &amp; Shift + 6 / Shift + 7 \\ ctrl + alt + &lt; oder Alt Gr + &lt; &lt; &lt; &gt; Shift + &lt; Sonderzeichen K√∂nnen Sie die obigen Sonderzeichen selber erzeugen? Quizz Werden Sie Million√§r? ü§ëüí∞ü§ëüí∞ü§ëüí∞ üåü Arcade Game (englisch) Freiwillig: Spielen Sie das Tastenk√ºrzel-Game üëâ https://mattshaw.org/projects/shortcutgame/ Link √ñffnen‚Äã Links in bspw. in Word/Powerpoint √∂ffnen Link auf einer Webseite in einem neuen Tab √∂ffnen ... Cmd + Click Touch-Gesten‚Äã Klicken durch Tippen‚Äã Auf modernen Touchpads reicht ein Antippen aus, um einen Klick auszul√∂sen. Windows 11Windows 10macOS Rechtsklick‚Äã Auch hier kann wahlweise Geklickt oder nur getippt werden. Windows 11Windows 10macOS Scrollen‚Äã Windows 11Windows 10macOS Alle Programme Anzeigen‚Äã Windows 11Windows 10macOS (Diese Option ist nicht bei allen Touchpads verf√ºgbar.) Virtuelle Desktops‚Äã Mit virtuellen Desktops lassen sich mehrere Arbeitsbereiche und Fensteranordnungen erstellen, so dass Sie ge√∂ffnete Programme √ºbersichtlicher ordnen k√∂nnen. Dank virtueller Desktops k√∂nnen Programme aufgeteilt werden, um mehr √úberblick in der Taskleiste und auf den jeweiligen Desktops zu haben. Durch einfaches Drag &amp; Drop k√∂nnen Programme von einem auf den anderen Desktop verschoben werden. Bei der Ordnung zwischen Freizeit, Arbeit, Uni etc. helfen virtuelle Desktops. So k√∂nnen Ihre Gedanken, Projekte und Aufgaben thematisch gruppiert werden. Erstellen‚Äã Windows 11Windows 10macOS Virtuelle Desktops: Mit +Tabulator alle ge√∂ffneten Fenster anzeigen und oben im Fenster einen neuen Virtuellen Desktop erstellen: Video Wechseln‚Äã Mit folgenden Gesten kann zwischen diesen Desktops hin- und hergewechselt werden.* Windows 11Windows 10macOS * Je nach Voreinstellungen ist diese Geste mit nur 3 statt 4 Fingern zu machen. Windows 11Windows 10macOS Weitere Gesten hier","keywords":""},{"title":"Software","type":0,"sectionRef":"#","url":"/byod-basics/v26/software","content":"Software Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenst√ºck zu dem wesentlich √§lteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn k√∂nnten unter Software ‚Äì als dem Gegenst√ºck zur Hardware ‚Äì grunds√§tzlich alle elektronisch gespeicherten Daten verstanden werden. Als Software werden jedoch nur Programme (bspw. Word oder Firefox) bezeichnet - die damit erzeugten Dateien/Daten werden jedoch nicht als solche bezeichnet. 1 Im folgenden werden g√§ngige Abl√§ufe zu verschiedener Software auf dem BYOD-Ger√§t gezeigt. Oft gibt es mehr als eine M√∂glichkeit, das gew√ºnschte Ziel zu erreichen (bspw. √ºber Tastenk√ºrzel, sog. &quot;Shortcuts&quot;). Es steht Ihnen frei, auch eigene Varianten auszuprobieren und sich anzueignen. Fotos / Videos‚Äã Bildschirmfoto erstellen‚Äã Windows 11Windows 10macOS Snipping Tool Unter dem Startmen√º nach Snipping Tool suchen. Es gibt drei Optionen um eine Bildschirmaufnahme zu erfassen: deb ganzen Bildschirm ein einzelnes Fenster ein selbst gew√§hlter Ausschnitt Bildschirmaufnahme erstellen‚Äã Windows 11Windows 10macOS Unter Windows gibt es aktuell keine M√∂glichkeit, den gesamten Bildschirm (inkl. dem Desktop und dem Dateiexplorer) aufzunehmen. Hier springt Powerpoint ein - in einem Powerpointdokument kann unter Einf√ºgen &gt; Bildschirmaufzeichnung eine Bildschirmaufnahme gestartet werden. Das aufgenommene Video muss dann gespeichert werden - Rechtsklick &gt; Medien speichern unter.... Optional kann das Video zuerst noch zugeschnitten werden. Video Foto zuschneiden, drehen und bearbeiten‚Äã Bekanntlich sagt ein Foto mehr als 1000 Worte - allerdings sollte sich das Foto auf das Wesentliche beziehen... Deshalb ist es wichtig, dass Sie ein Foto (oder einen Screenshot) f√ºr die Verwendung in einem Bericht oder in einer Nachricht bearbeiten k√∂nnen. Windows 11Windows 10macOS Zeichnung hinzuf√ºgen Foto doppelklicken (√∂ffnen in &quot;Fotos&quot;) Bearbeiten &gt; Zeichnen Zuschneiden/Drehen Text zu Bildern hinzuf√ºgen‚Äã Windows 11Windows 10macOS Text hinzuf√ºgen Video zuschneiden‚Äã Windows 11Windows 10macOS Video zuschneiden Video in &quot;Fotos&quot; √∂ffnen Bearbeiten &gt; Zuschneiden Browser‚Äã Vergewissern Sie sich, dass Sie folgende Aufgaben ohne weiteres im Browser ihrer Wahl (bspw. Firefox, Chrome, Edge, Safari...) durchf√ºhren k√∂nnen: Internetseite aufrufen (bspw. https://srf.ch) Auf Seite suchen (Ctrl + F oder Einstellungen &gt; Auf Seite suchen) Seite drucken (Ctrl + P) Neuer Tab √∂ffnen (Ctrl + T) URL k√ºrzen um sie einfacher zu teilen, bspw. mit https://bitly.com/ Privates Fenster √∂ffnen (Inkognito Mode) hier werden alle pers√∂nlichen Daten nach dem Schliessen des Fensters wieder gel√∂scht. So werden Sie bspw. auch von allen angemeldeten Websites automatisch abgemeldet und auch &quot;Automatische Logins&quot; werden verworfen. Auf fremden Laptops empfielt sich also der private Modus. Mailprogramm &amp; Kalender‚Äã Sie richten ihr Mail-Konto auf einem Mailprogramm (bspw. im Programm &quot;Mail&quot;) ein und k√∂nnen anschliessend die folgenden Aufgaben durchf√ºhren: Eine neue Mail schreiben und verschicken Einen neuen Kalender-Eintrag erstellen (bspw. √ºber die Kalender-App) Eine Mail-Signatur hinzuf√ºgen/√§ndern Als Signatur wird ein Textabschnitt bezeichnet, der h√§ufig am Ende von E-Mails, Usenet-Postings oder Beitr√§gen in Internetforen steht und Angaben zum Absender enth√§lt. Etablierte Konvention ist, eine Signatur durch einen Signaturtrenner vom Nachrichtentext abzutrennen. Dieser besteht aus einer Zeile, die nur die Zeichenfolge -- (zwei Bindestriche und ein Leerzeichen) enth√§lt. Dadurch erm√∂glicht man es den meisten E-Mail-Programmen und Newsreadern, eine Signatur automatisch zu erkennen und beim Antworten nicht zu zitieren.2 Beispiel f√ºr eine Signatur: Hallo, das ist ein Beispieltext, um Signaturen zu demonstrieren. Viele Gr√º√üe Reto -- Reto Holzer Holzerstrasse. 8, 2502 Biel Tel.: +41 079 123 45 67 E-Mail: reto@holzer.ch Windows 11Windows 10macOS Mail Einrichten In der Mail-App einen neuen Exchange Mailaccount hinzuf√ºgen: Einstellungen √∂ffnen Konto hinzuf√ºgen Exchange-Konto hinzuf√ºgen Signatur hinzuf√ºgen Office 365‚Äã An der Schule wird die Office 365 Suite verwendet. Word/Powerpoint/Excel‚Äã Neue Datei erstellen Datei in einem vorgegebenen Ordner auf dem Computer speichern To Do‚Äã Was kann Microsoft To Do? Mit Microsoft To Do k√∂nnen Sie Folgendes erledigen 3: Behalten Sie mit Mein Tag, Ihrem personalisierten Tagesplaner mit Aufgabenvorschl√§gen, stets Ihre Priorit√§ten im Blick Greifen Sie √ºberall, auf jedem Ger√§t auf Ihre Listen zu Teilen Sie Listen und Aufgaben mit Ihren Freunden, der Familie, Kollegen und Klassenkameraden Erstellen Sie farbig codierte Listen Legen Sie einmalige oder wiederkehrende F√§lligkeiten und Erinnerungen fest Teilen Sie Ihre Aufgaben in √ºberschaubare Schritte auf F√ºgen Sie beliebigen Aufgaben Anmerkungen hinzu F√ºgen Sie beliebigen Aufgaben Dateien hinzu Synchronisieren Sie Ihre Aufgaben zwischen Outlook und To Do Installationsanleitungen Onlineversion: https://to-do.office.com/. Auf dem Laptop installieren Auf dem iPhone installieren Auf Android installieren Sie k√∂nnen: Neue ToDo-Liste erstellen Neue ToDos erfassen Erinnerung festlegen und einschalten Forms‚Äã Was kann Microsoft Forms? Microsoft Forms erm√∂glicht das schnelle und einfache Erstellen von benutzerdefinierte Quizfragen, Umfragen und Frageb√∂gen. Nach der √úbermittlung der Ergebnisse k√∂nnen Sie die integrierte Analysefunktion zum Auswerten der Antworten verwenden. Formulardaten k√∂nnen f√ºr eine tiefer greifende Analyse oder die Benotung ganz einfach nach Excel exportiert werden. Beim Erstellen der Umfrage kann konfiguriert werden, wer die Umfrage ausf√ºllen darf und welche Daten von den Teilnehmern erfasst werden: Personendaten erfassen\tBenutzerkonto erforderlich\tEine Antwort pro Person*‚ùå\t‚ùå\t‚ùå ‚ùå\t‚úÖ\t‚úÖ ‚úÖ\t‚úÖ\t‚úÖ * Durch die Anmeldung mit einem Benutuerkonto kann optional sichergestellt werden, dass jede Person eine Umfrage nur genau ein Mal ausf√ºllt. Die Personendaten werden aber nicht weitergeleitet (Antworten sind anonym.) Online unter https://forms.office.com Neue Umfrage erstellen und teilen Anonyme Umfrage erstellen Bei Umfragen die Email-Adresse von Teilnehmenden erfassen Umfragen mit Zeitbeschr√§nkungen erstellen Benachrichtigungseinstellungen f√ºr ausgef√ºllte Umfragen festlegen Teams‚Äã Windows 11Windows 10macOS Nachrichten mit √úberschrift verfassen Nachrichten mit Code-Teilen verfassen: Code kommt zwischen Backticks `code` Nachrichten mit Codebl√∂cken verfassen Bildschirm freigeben Ordner Synchronisieren Benachrichtigungen verwalten Zoom Faktor einstellen Nachrichten an Lehrpersonen‚Äã Nachrichten an Lehrpersonen werden mit Sorgfalt geschrieben. Es geh√∂rt eine kurze Anrede sowie eine Schlussformel dazu. In der Schlussformel am Ende der Nachricht halten Sie nebst ihrem Namen auch die Klassenbezeichnung fest. Lieber Herr M√ºller Ist bei der Nettobilanz beim Citratzyklus mit &quot;aktiver Essigs√§ure&quot; die gebundene Essigs√§ure gemeint? Mit freundlichen Gr√ºssen Mark Muster, 24z Teams ‚â† WhatsApp Auch wenn Sie nur eine kurze Frage haben, geh√∂rt die Anrede und Schlussformel dazu (es ist kein WhatsApp-Chat unter Freunden!). Entwickelt sich durch die Antwort der Lehrperson einen Chat-Charakter (daher die Lehrperson schreibt innerhalb kurzer Zeit zur√ºck und Sie haben eine R√ºckfrage zum selben Thema), darf die Anrede und die Schlussformel anschliessend f√ºr diese Unterhaltung weggelassen werden. OneDrive‚Äã Synchronisierungsoptionen f√ºr OneDrive Dateien Windows 11Windows 10macOS Auf den Laptop Synchronisieren Dateien freigeben F√ºr freigegebene Dateien k√∂nnen die Berechtigungen online ge√§ndert oder widerrufen werden: Rechtsklick &gt; Online anzeigen &gt; ... &gt; Zugriff verwalten Dateien/Ordner immer synchronisieren Dateien/Ordner nicht mehr immer synchronisieren Speicherplatz freigeben - die Dateien sind weiterhin auf OneDrive verf√ºgbar, es braucht aber Internet damit Sie diese auf Ihrem Ger√§t verwenden k√∂nnen. Dateiversionsverlauf Gel√∂schte Dateien Wiederherstellen Gel√∂schte Dateien k√∂nnen online w√§hrend 30 Tagen wiederhergestellt werden. Danach sind sie definitiv gel√∂scht. Quelle: Wikipedia ‚Ü© Quelle: Wikipedia ‚Ü© Quelle: Microsoft ‚Ü©","keywords":""},{"title":"3. Fehlerkorrektur","type":0,"sectionRef":"#","url":"/Codes-and-Data/Anwendungen/fehlerkorrektur","content":"3. Fehlerkorrektur @ Im Unterricht haben Sie gesehen, wie die umgedrehte Karte sofort entdeckt wurde - Zauberei!?!? Aufgaben Beschreiben Sie, nach welchem Prinzip Herr Hofer das 5x5-Muster zu einem 6x6-Muster erg√§nzt hat. Spielen Sie das XO-Spiel1 mit verschiedenen Mustern durch. Jede Spieler:in darf zweimal ‚Äûraten‚Äú. Von nun an soll das gelegte 6x6-Muster nicht mehr ge√§ndert werden. √úberpr√ºfen Sie, ob es eine Position in diesen 6x6-Muster gibt, bei der die Drehung einer Karte nicht erkannt wird. Zwei nebeneinander liegende K√§rtchen werden umgedreht. √úberpr√ºfen Sie, ob der Fehler erkannt werden kann. Wenn ja, k√∂nnen Sie den Fehler auch korrigieren? Nun werden zwei beliebige K√§rtchen umgedreht. √úberpr√ºfen Sie wieder, ob der Fehler erkannt und korrigiert werden kann. Geben Sie an, wie viele M√∂glichkeiten zur Korrektur gefunden werden k√∂nnen. Markieren Sie farbig (zusammengeh√∂rende K√§rtchenpaare jeweils in einer Farbe) in den abgegebenen leeren 6x6-Raster diejenigen Positionen von K√§rtchen, welche zur Korrektur in Frage kommen. Wiederholen Sie Aufgabe 5 noch zwei bis drei weitere Male und erg√§nzen Sie die K√§stchen. Halten Sie Ihre Erkenntnisse mit einem Bild unten fest. Parit√§tspr√ºfung (Parit√§tsbit)‚Äã Eine Information soll bin√§r codiert und anschliessend √ºbertragen werden. Dabei soll erkannt werden, ob diese fehlerfrei √ºbertragen wurde. Eine sehr einfache Methode zur Fehlererkennung bei bin√§r codierten Informationen ist die Parit√§tspr√ºfung. Dabei wird die Anzahl der Einsen der bin√§r codierten Information gez√§hlt: Ist sie ungerade, wird an die Bitfolge eine ‚Äû1‚Äú angeh√§ngt, so dass die Anzahl der ‚ÄûEinsen‚Äú gerade wird. Ist sie gerade, wird an die Bitfolge eine ‚Äû0‚Äú angeh√§ngt, so dass die Anzahl der Einsen gerade bleibt. Man spricht hierbei von einer geraden Parit√§t. Das angeh√§ngte Bit wird Parit√§tsbit genannt. Beispiel‚Äã Bin√§r codierte Information (7 Bit lang): 100110 Zu √ºbertragender Code mit Parit√§tsbit (7+1 Bit lang): 1001101 Das Parit√§tsbit ist hier 1. Parit√§tsbit Schreiben Sie mit Parit√§tsbit: Sie erhalten 10 Bit-Sequenzen, wobei jede Sequenz mit einem Parit√§tsbit abgeschlossen ist. 10110100 11000011 11101011 01000011 11100001 11001010 11100100 01110011 11001010 11010010 Entfernen die fehlerhaft √ºbertragenen Sequenzen und entfernen Sie alle Parit√§ts-Bits. Welche Nachricht wird angezeigt? Bin√§r Decodierer Wieso wird ein p statt der Buchstabe b angezeigt? (b ist bin√§r 1100010). Weshalb wurde dies nicht als Fehler erkannt? EAN-13‚Äã Letzthin beim Vorbereiten im Kaffee nebenan, wollte ich eine Packung Kaffee kaufen - doch das Einscannen des Codes ging nicht, so dass der Strichcode einer anderen Packung eingelesen werden musste... Doch wie funktioniert das? Weshalb wurde erkannt, dass der Code kaputt war? Nach einer kurzen Recherche: Die Strichcodes auf Verpackungen sind sog. EAN-13-Codes (EAN = European Article Number). Doch wie funktionieren diese? EAN 13 Aufgabe Was k√∂nnte passieren, wenn ein Strichcode verdreckt oder besch√§digt ist? Die ersten 12 Stellen des (richtigen) EAN-13 Codes der Baslercaf√© Verpackung lautet: 7610 4430 0204. Wie berechnet sich daraus nun die letzte Stelle, die Pr√ºfziffer? Erkennen Sie das System? (Einfachheitshalber wurde eine weitere EAN-Nummer abgedruckt 4260 0806 8005). F√ºhren Sie zu diesen Codierungen die beiden untenstehende Rechnungen aus und halten Sie die Ergebnisse fest. Ermitteln Sie anhand der beiden Beispiele, wie die letzte Ziffer mit der Rechnung zusammenh√§ngt und beschreiben Sie das gefundene Verfahren. Berechnen Sie auch f√ºr die folgenden Strichcodes die Pr√ºfziffer: Inspirationsquelle: lehrerfortbildung-bw.de ‚Ü©","keywords":""},{"title":"1. Morsecode","type":0,"sectionRef":"#","url":"/Codes-and-Data/Anwendungen/morsecode","content":"1. Morsecode Der Morsecode (auch Morsealphabet oder Morsezeichen genannt) ist ein gebr√§uchlicher Code zur telegrafischen √úbermittlung von Buchstaben, Ziffern und weiterer Zeichen. Er bestimmt das Zeitschema, nach dem ein diskretes Signal ein- und ausgeschaltet wird.1 Morsetaste der Firma Hasler Bern, ca. 1900@ Tabelle zur Codierung‚Äã Buchstabe\tCode\tBuchstabe\tCode\tBuchstabe\tCodeA\t¬∑‚àí\tK\t-¬∑-\tU\t¬∑¬∑- B\t-¬∑¬∑¬∑\tL\t¬∑-¬∑¬∑\tV\t¬∑¬∑¬∑- C\t-¬∑-¬∑\tM\t--\tW\t¬∑-- D\t-¬∑¬∑\tN\t-¬∑\tX\t-¬∑¬∑- E\t¬∑\tO\t---\tY\t-¬∑-- F\t¬∑¬∑-¬∑\tP\t¬∑--¬∑\tZ\t--¬∑¬∑ G\t--¬∑\tQ\t--¬∑-\t√Ñ\t¬∑-¬∑- H\t¬∑¬∑¬∑¬∑\tR\t¬∑-¬∑\t√ñ\t---¬∑ I\t¬∑¬∑\tS\t¬∑¬∑¬∑\t√ú\t¬∑¬∑-- J\t¬∑---\tT\t-\tCH\t---- Morse-Code Schreiben Sie ein Wort mit 6 Buchstaben in Morse-Code. Entziffern Sie die codierten Worte Ihrer Pultnachbar:innen. Wie viele Zeichen wurden verwendet? Was hat der Morsecode mit der Huffman-Codierung zu tun? Finden Sie Parallelen? Erstellen Sie eine praktischere Tabelle f√ºr die Decodierung von Nachrichten SSR Verwendung Recherchieren Sie im Internet, √ºber welche Medien Morsezeichen √ºbertragen werden k√∂nnen (bspw. als elektrischer Puls √ºber eine Leitung) wo Morsezeichen auch heute noch eingesetzt werden. Akkustischer Morsecode Gehen Sie in Vierergruppen zu einem Treppengel√§nder, jeweils zwei Personen an einem Ende des Gel√§nders. K√∂nnen Sie sich ausschliesslich √ºber akkustische Morsezeichen verst√§ndigen? Verschicken- und empfangen Sie jeweils ein Wort mit mindestens 6 Buchstaben. Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"2. QR Code","type":0,"sectionRef":"#","url":"/Codes-and-Data/Anwendungen/qr-code","content":"2. QR Code Was enth√§lt der QR-Code? üè¥‚Äç‚ò†Ô∏è‚ò†Ô∏èùúã Auftrag Recherchieren Sie in einer 2er bis 3er Gruppe wie ein QR-Code funktioniert welche Elemente darin vorkommen wie viele Zeichen darin codiert werden k√∂nnen weshalb der Inhalt immer noch lesbar ist, auch wenn ein Teil des QR-Codes abgedeckt ist weitere spannende Fakten, denen Sie begegnen Halten Sie Ihre Erkenntnisse auf einem A3-Plakat fest. Loading... PDF-Quelle 1 Quelle: swisseduc.ch ‚Ü©","keywords":""},{"title":"8. Sehsterne","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Sehsterne","content":"8. Sehsterne @ Sehsterne (das sind Seesterne mit Augen) kennen nur die f√ºnf Buchstaben A ,C, I, N, T, die sie auf einem gesunkenen Schiff entdeckt haben. Alle W√∂rter setzen sie aus diesen Buchstaben zusammen. ACINT-Code‚Äã Die Sehsterninformatiker haben eine bin√§ren Code f√ºr ihr Alphabet entwickelt, den sie ACINT-Code nennen: 1. ACINT Decodieren Sie die folgende Nachricht: ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÖ‚òÜ ‚òÜ‚òÖ‚òÖ ‚òÖ‚òÜ‚òÜ ‚òÖ‚òÜ‚òÜ ‚òÜ‚òÜ‚òÖ ‚òÖ‚òÜ‚òÖ ‚òÜ‚òÖ‚òÖ SSR Codieren Sie die folgende Nachricht in ACINT-Code: A CAT CAN ACT SSR @ Geb√§rdensprache‚Äã Die Sehsterne haben keinen Mund. Sie kommunizieren, indem sie nacheinander f√ºr jeden Buchstaben den entsprechenden Arm heben. Eines Tages entdecken die Sehsterne ein weiteres gesunkenes Schiff mit f√ºnf neuen Buchstaben: E, H, J, M, R. 2. Geb√§rdensprache Schlagen Sie den Sehsternen ein System vor, wie sie alle zehn Buchstaben durch Heben der f√ºnf Arme darstellen k√∂nnen. SSR Wie viele unterschiedliche Buchstaben k√∂nnen Sehsterne maximal durch heben der f√ºnf Arme darstellen? SSR @ Erweiterter ACINT-Code‚Äã Die Sehstern-Informatiker m√∂chten einen neuen bin√§ren Code entwickeln, um die neuen Buchstaben darstellen zu k√∂nnen. Der neue Code soll aber kompatibel mit dem bisherigen ACINT-Code sein. 3. Erweiterung ACINT-Code Machen Sie einen Vorschlag f√ºr einen solchen Code. SSR ‚≠êÔ∏è Gesunkenes Schiff (Bonus)‚Äã 4. Gesunkenes Schiff Wie lautet der Name des ersten gesunkenen Schiffs? SSR","keywords":""},{"title":"1. Begriff","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Begriff","content":"1. Begriff Aufgabe Wo befindet sich der Ort k√∂nigin.gesehen.damals? Verwenden Sie die Seite what3words.com. Bei welchen drei W√∂rtern wohnen Sie? In welchen Situationen ist dieser Code vorteilhafter als eine Adresse? Code Information Unter einer Information versteht man ¬´das Wissen, das ein Sender einem Empf√§nger √ºber einen Informationskanal √ºbermittelt¬ª.[1] Daten Daten sind Zeichen oder Symbole, die Informationen darstellen. Daten k√∂nnen gesendet, empfangen und verarbeitet werden. Code Ein Code ist eine ¬´Sprache¬ª, die festlegt, wie Informationen vom Sender in Daten √ºbersetzt und vom Empf√§nger wieder interpretiert werden. @ Code‚Äã Die Informations√ºbertragung kann nur funktionieren, wenn Sender und Empf√§nger den gleichen Code verwenden. Bei zwischenmenschlicher Kommunikation ist der Code normalerweise nicht explizit festgelegt. Dann muss der Empf√§nger den Code erraten, was zu Missverst√§ndnissen f√ºhren kann. Ein Code ist eine Vorschrift, welche Daten von einer Darstellung in eine andere umwandelt. Dabei darf keine Information verloren gehen, eine R√ºckumwandlung muss m√∂glich sein. Beispiel eines Codes: Umwandlung von Braillezeichen in Buchstaben und umgekehrt. Das Ziel dieser Umwandlung ist es, eine f√ºr einen bestimmten Zweck optimierte Darstellung Informationen zu erreichen. So ist die Brailleschrift daf√ºr optimiert, per Tastsinn gelesen werden zu k√∂nnen. Beispiele f√ºr Codes‚Äã Brailleschrift‚Äã ASCII‚Äã Genetischer Code‚Äã QR-Code‚Äã ISBN‚Äã what3words.com‚Äã","keywords":""},{"title":"√úbungen UTF-8","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Uebungen","content":"√úbungen UTF-8 1. Wie viele Zeichen? Wie viele Zeichen sind in folgender bit-Squenz codiert? 11100010 10011101 10000000 01000110 11010011 10111111 11110110 10011010 10101010 10001111 00010010 2. UTF-8 Decodieren Folgende bit-Sequenzen sind UTF-8 Codiert. Welche Dezimalzahlen sind codiert? 11000010 10011001 11100001 10000000 10001111 3. UTF-8 Codieren Codieren Sie folgende bit-Sequenz zu UTF-8: 1100 10010101 10010110 Codieren Sie die Zahl 260 zu UTF-8: 4. UTF-8 Emojis Codieren Sie drei Weihnachts-Emojis zu UTF-8: Verwenden Sie Python, um die Ordnungszahl der Emojis herauszufinden. Wandeln Sie die Ordnungszahlen ins Bin√§re um (auch hier darf Python verwendet werden) Codieren Sie die Bin√§rzeichen-Kette zu UTF-8 und halten Sie das Resultat fest. Probieren Sie Ihre L√∂sung im UTF-8 Decodier-Modus Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin","keywords":""},{"title":"7. Textcodierung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Textcodierung","content":"7. Textcodierung In dieser praktischen √úbung speichern Sie auf Ihrem Computer eine Textdatei und √ºberpr√ºfst anschliessend, ob die in der Datei gespeicherten Bits tats√§chlich der Unicode/UTF-8-Codierung des Texts entsprechen. 1. Texteditor √∂ffnen Der Editor ist eine App, in welcher man Textdateien erstellen und bearbeiten kann. Das kann man auch mit Word, dies ist jedoch umst√§ndlicher. Word-Dateien sind keine reinen Textdateien, sie enthalten auch andere Daten wie Formatierungen und Bilder. WindowsWindows 10macOS Starten Sie die Editor-App, indem Sie im Startmen√º nach ¬´editor¬ª suchen: 2. Text eingeben Geben Sie einen kurzen Text ein. Dieser sollte nicht nur ASCII-Zeichen enthalten, sondern auch ein Umlaut wie ¬´√§¬ª und Emojis. WindowsmacOS Emojis k√∂nnen unter Windows mit dem Tastenk√ºrzel + . eingef√ºgt werden. Alternativ findet man unter üëâ Emojipedia viele weitere Emojis. WindowsmacOS 3. Textdatei speichern Speichern Sie die Textdatei unter dem Namen Unicode-Test.txt indem Sie WindowsmacOS die Tastenkombination Ctrl+s dr√ºcken oder den Men√ºpunkt Datei &gt; Speichern ausw√§hlen. 4. Datei als Bytes betrachten Mit dem Online-Tool HexEd.it k√∂nnen Sie eine beliebige Datei Byte f√ºr Byte betrachten: üëâ HexEd.it Klicken Sie auf Datei √∂ffnen und w√§hlen Sie die vorhin gespeicherte Textdatei aus. Nun sehen Sie die einzelnen Bytes, welche die Datei enth√§lt, beispielsweise: 54 73 63 68 C3 BC 73 73 20 F0 9F 98 80 21 Die Bytes werden wie in der Informatik √ºblich als Hexadezimalzahlen angegeben. Wenn man √ºber die einzelnen Bytes navigiert (mit den Pfeiltasten), sieht man auf der linken Seite die entsprechende Bin√§rcodierung. Alternativ finden Sie hier auch einen Umrechner zwischen Bin√§r-, Dezimal- und Hexadezimalzahlen. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 Dec - Bin - Hex Dezimal Bin√§r Hexadezimal Text: Hex - Bin Hexadezimal 08 Bin√§r 00001000 In der bin√§ren Darstellung sehen Sie sofort die Zeichen, welche mehrere Bytes ben√∂tigen. Sie beginnen mit einer 1. So ist 11000011 10111100 die Codierung des Buchstabens ¬´√º¬ª. Nun k√∂nnen Sie mit folgenden Hilfsmitteln √ºberpr√ºfen, ob die Bytes tats√§chlich der Unicode/UTF-8-Codierung Ihres Textes entsprechen: üëâ ASCII-Tabelle f√ºr Bytes, die mit einer 0 starten üëâ Unicode-Tabelle f√ºr zusammengesetzte Zeichen mit mehreren Bytes Halten Sie die Hexadezimalzeichen Ihres Textes fest. Wo ist das erste Emoji? √úberpr√ºfen Sie, ob Sie den Dezimalwert des Emojis entziffern und auf üëâ https://unicode-table.com/de/ finden Hinweis Im vorliegenden Beispiel sieht das so aus: Byte(s)\tZeichen54\tT 73\ts 63\tc 68\th C3 BC\t√º 73\ts 73\ts 20\t‚ê£ F0 9F 98 80\tüòÄ 21\t! ‚≠êÔ∏è Zusatzaufgabe - Andere Dateien Betrachten Sie andere Dateien in HexEd.it und achten Sie auf folgendes: Finden Sie in anderen Dateien auch Unicode-codierten Text? Erkennen Sie ein Muster bei den ersten paar Bytes von Dateien des gleichen Typs?","keywords":""},{"title":"Kompression","type":0,"sectionRef":"#","url":"/Codes-and-Data/Compression-v24","content":"Kompression @ Die Datenkompression (abgeleitet aus dem lateinischen Wort ‚ÄûCompressio‚Äú: ‚ÄûZusammendr√ºcken‚Äú) ‚Äì oder auch Datenkomprimierung genannt ‚Äì ist ein Vorgang, bei dem die Menge digitaler Daten verdichtet oder reduziert wird. Dadurch sinkt der ben√∂tigte Speicherplatz, und die √úbertragungszeit der Daten verk√ºrzt sich. Grunds√§tzlich wird bei der Datenkompression versucht, redundante Informationen (daher mehrfach vorhandene Informationen) zu entfernen. Dazu werden die Daten in eine Darstellung √ºberf√ºhrt, mit der sich alle ‚Äì oder zumindest die meisten ‚Äì Informationen in k√ºrzerer Form darstellen lassen. Diesen Vorgang √ºbernimmt ein Kodierer und man bezeichnet den Vorgang als Kompression oder Komprimierung. Die Umkehrung bezeichnet man als Dekompression oder Dekomprimierung. Man spricht von verlustfreier Kompression wenn aus den komprimierten Daten wieder exakt die Originaldaten gewonnen werden k√∂nnen. Das ist beispielsweise bei der Kompression von Textdokumenten notwendig. Bei der verlustbehafteten Kompression k√∂nnen die Originaldaten aus den komprimierten Daten meist nicht mehr exakt zur√ºckgewonnen werden - ein Teil der Information geht also verloren. Die Algorithmen versuchen, m√∂glichst nur ‚Äûunwichtige‚Äú Informationen wegzulassen. Solche Verfahren werden h√§ufig zur Bild- oder Videokompression und Audiodatenkompression eingesetzt.1 Ein Dateiformat (bspw. .docx oder .jpeg) enthalten komprimierte Daten, so dass ein spezielles Programm (bspw. Word oder ein Fotobetrachter) verwendet werden muss, damit der Inhalt dekomprimiert und angezeigt werden kann. ZIP Ordner Sollen Datei(en) m√∂glichst platzsparend abgespeichert werden, kann eine Benutzer:in daraus eine .zip-Datei erstellen. Also eine Datei, die genauso wie ein Reissverschluss (engl. Zipper) die Daten platzsparend zusammenf√ºgt und abspeichert. Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"4. Unicode","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Unicode","content":"4. Unicode Unicode ist ein internationaler Standard f√ºr Schriftzeichen und Symbole. Das Unicode-Konsortium erstellt einen Katalog von allen sinnvollen Schriftzeichen, welcher st√§ndig erweitert wird. In der Version 40.0, welche im Oktober 2021 ver√∂ffentlicht wurde, umfasst Unicode ca. 140‚Ä≤000140'000140‚Ä≤000 Zeichen. Hier sind ein paar Zeichen aufgef√ºhrt, um zu illustrieren wie umfangreich Unicode ist: Lateinischer Grossbuchstaben A, 656565 oder U+0041 Hiragana-Buchstabe Ya, 124201242012420 oder U+3084 Cherokee-Buchstabe S, 506950695069 oder U+13CD Spielkarte Neun der Herzen, 127161127161127161 oder U+1F0B9 Entsetztes Gesicht mit explodierendem Kopf, 129327129327129327 oder U+1F92F Affe, 128018128018128018 oder U+1F412 Power-Symbol, 921192119211 oder U+23FB √Ñgyptische Hieroplyphe Nl012, 783807838078380 oder U+1322C Quelle: UT - Unicode Table Jedes Unicode-Zeichen hat eine eindeutige Unicode-Nummer, welche h√§ufig als hexadezimale Zahl geschrieben wird, aber nat√ºrlich auch dezimal oder bin√§r dargestellt werden kann. ‚≠êÔ∏è Hexadezimal Zahlen Anstatt Zahlen im Dezimalsystem oder Bin√§rsystem zu schreiben, kann auch das Hexadezimalsystem mit 16 eindeutigen Zeichen verwendet werden. Dabei werden die zehn Zahlenziffern mit den ersten 6 Buchstaben des Alphabets erg√§nzt: Hex16Hex_{16}Hex16‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\tA\tB\tC\tD\tE\tF Dez10Dez_{10}Dez10‚Äã\t0\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15 Bin2Bin_{2}Bin2‚Äã\t0000\t0001\t0010\t0011\t0100\t0101\t0110\t0111\t1000\t1001\t1010\t1011\t1100\t1101\t1110\t1111 Jede Stelle in einer Hexadezimal-Zahl entspricht hier einer 16er Potenz: A3D16=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710\\ \\begin{aligned} A3D_{16} &amp;= A \\cdot 16^2 + 3 \\cdot 16^1 + D \\cdot 16^0 \\\\ &amp;= 11 \\cdot 256 + 3 \\cdot 16 + 13 \\cdot 1 \\\\ &amp;= 2816 + 48 + 13 \\\\ &amp;= 2877_{10} \\end{aligned}¬†A3D16‚Äã‚Äã=A‚ãÖ162+3‚ãÖ161+D‚ãÖ160=11‚ãÖ256+3‚ãÖ16+13‚ãÖ1=2816+48+13=287710‚Äã‚Äã Anwendungsbereich‚Äã Das praktische bei Hexadezimalzahlen: 4 bits k√∂nnen mit nur einer Hexadezimalzahl geschrieben werden, was deutlich √ºbersichtlicher wird: 11012=1310=D161101_{2} = 13_{10} = D_{16}11012‚Äã=1310‚Äã=D16‚Äã Ein Byte (8 bits) werden dann konventionell als zwei Hexadezimal Zahlen geschrieben: 1101 1001 = D9 F5 = 1111 1001 ","keywords":""},{"title":"5. UTF-8","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/UTF8","content":"5. UTF-8 Werden Unicode-Zeichen ins bin√§re √ºbersetzt wird klar, dass diese Zahlen nicht mehr nur mit einem Byte dargestellt werden k√∂nnen. Beispielsweise ist dem Affen-Emoji üêí die Zahl 12801810128018_{10}12801810‚Äã zugewiesen, was der Bin√§rzahl 00000001‚ÄÖ11110100‚ÄÖ00010010200000001\\:11110100\\:00010010_{2}0000000111110100000100102‚Äã entspricht, also 3 Bytes Speicherplatz ben√∂tigt. info 1 Byte entspricht 888 Bit 1 Megabit entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bit 1 Megabyte entspricht 1‚Ä≤000‚Ä≤0001'000'0001‚Ä≤000‚Ä≤000 Bytes oder 8‚Ä≤000‚Ä≤0008'000'0008‚Ä≤000‚Ä≤000 Bit UTF-8 ist ein Code, der Unicode-Zeichen in Bitmuster √ºbersetzt. Ein Unicode-Zeichen wird mit ein bis vier Bytes (daher 8-32 bit) dargestellt. Die folgende Tabelle zeigt, wie die Codierung funktioniert: Unicode-Bereich\tBitmuster\tAnzahl Bit\tByte 1: Anzahl Kontroll-Bits0 bis 127\t0xxxxxxx\t7\t1 128 bis 2047\t110xxxxx 10xxxxxx\t11\t3 2048 bis 65535\t1110xxxx 10xxxxxx 10xxxxxx\t16\t4 ab 65536\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\t21\t5 Unicode-Zeichen mit einer Nummer zwischen 0 und 127 werden mit einem Byte dargestellt, welches mit 0 beginnt. Somit ist UTF-8 in diesem Bereich identisch mit ASCII (und Latin 1). F√ºr die anderen Zeichen wird mehr als ein Byte verwendet. Dabei beginnt jedes Byte mit einer oder mehreren 1, gefolgt von einer 0. Die Anzahl 1 im ersten Byte definieren, wie viele Bytes f√ºr das Zeichen verwendet werden. Die folgenden Bytes werden mit 10 markiert. Die x werden mit der Bin√§rdarstellung der Unicode-Nummer aufgef√ºllt. Zeichen\tNummer\tBitmusterA\t65\t01000001 √§\t228\t11000011 10100100 Schwarze Sonne mit Strahlen ‚òÄ\t9728\t11100010 10011000 10000000 Affe üêí\t128018\t11110000 10011111 10010000 10010010 Der Vorteil dieser Codierung ist, dass anhand der ersten Bits eines Bytes erkannt wird, ob es sich um den Anfang oder die Fortsetzung eines Zeichens handelt. Beginn\tBedeutung0‚Ä¶\tASCII-Zeichen 10‚Ä¶\tFortsetzung eines Zeichens mit mehreren Bytes 110‚Ä¶\tBeginn eines Zeichens mit zwei Bytes 1110‚Ä¶\tBeginn eines Zeichens mit drei Bytes 11110‚Ä¶\tBeginn eines Zeichens mit vier Bytes Dies wird noch deutlicher, wenn man dies als Bin√§rbaum darstellt: UTF-8 Pr√§fix Ausprobieren‚Äã Bin Decoder Modus Latin1UTF-8 01010010 01100101 01110100 01101111 Start Chr\tDec\tBin Aufgabe Codieren Sie Ihre zwei lieblings Emojis als UTF-8 Bin√§r-Kette. Verwenden Sie f√ºr das Herausfinden der bin√§ren Codierung die Hilfe von Python. Mehrstufige Codierung 1‚Äã Oft werden Informationen mehrstufig codiert. So wird beispielsweise die Information ¬´Ich bin m√ºde.¬ª als Emoji dargestellt. Das Handy ordnet dem Emoji die entsprechende Unicode-Nummer zu. Diese wird mit UTF-8 in eine Bitfolge √ºbersetzt, welche √ºber das Mobilfunknetz √ºbermittelt wird. Das Handy des Empf√§ngers √ºbersetzt die Bitfolge wieder zur√ºck in eine Unicode-Nummer und das entsprechende Emoji. Die Interpretation des Emojis muss vom Empf√§nger selbst vorgenommen werden. Unicode zu UTF-8 Remix rothe.io ‚Ü©","keywords":""},{"title":"1. Huffman-Codierung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Compression-v24/huffman","content":"1. Huffman-Codierung David Huffman hat 1952 ein Verfahren entwickelt, mit welchem Zeichen platzsparender codiert werden k√∂nnen. Seine Idee ist, dass Zeichen, welche h√§ufig im Text vorkommen, einen k√ºrzeren Code erhalten, als Zeichen, welche selten im Text vorkommen. Alltagsbezug Die Huffman-Codierung und √§hnliche Verfahren werden f√ºr das Komprimieren von Dateiformaten wie DOCX, JPG oder MP3 eingesetzt. 1 Codebaum‚Äã Ein Codebaum ist eine Struktur mit einem Startknoten. Von diesem aus geht es entweder nach links oder rechts unten weiter. Eine 0 im Code bedeutet nach links gehen, eine 1 nach rechts gehen. Wenn ein Knoten mit einem Buchstaben erreicht wird, hat man ein Zeichen decodiert, man beginnt wieder von vorne. Erstellen eines Huffman-Baumes‚Äã Am Beispiel der Codierung des Texts ¬´EINTRITT FREI¬ª soll der Huffman-Algorithmus erl√§utert werden. Zuerst z√§hlt man, wie oft jedes Zeichen im Text vorkommt und erstellt eine H√§ufigkeitstabelle. Zeichen\tH√§ufigkeit‚ê£\t1 F\t1 N\t1 R\t2 E\t2 I\t3 T\t3 Nun geht es darum, einen Codierungsbaum zu erstellen. Die H√§ufigkeiten der Buchstaben bilden je einen Knoten. Die H√§ufigkeit steht im Knoten, der Buchstaben darunter. Die Knoten werden nach H√§ufigkeit sortiert: Nun werden die zwei Knoten mit den kleinsten H√§ufigkeiten an einen neuen Knoten angeh√§ngt. Der neue Knoten enth√§lt die Summe der H√§ufigkeiten der urspr√ºnglichen Knoten und wird gem√§ss der Summe neu eingeordnet. Dies wird wiederholt bis alle Knoten miteinander verbunden sind. Wenn zwei Knoten die gleiche H√§ufigkeit haben, spielt es keine Rolle, welcher gew√§hlt wird. Im n√§chsten Schritt wird der kleinste Knoten ¬´N¬ª mit ¬´R¬ª zusammengefasst. Man k√∂nnte aber ¬´N¬ª auch mit ¬´E¬ª oder dem neuen Knoten ¬´2¬ª zusammenfassen. Wichtig ist, dass immer die kleinsten Knoten zusammengefasst werden. Hier werden die zwei Knoten mit H√§ufigkeit 2 zusammengefasst: Wenn der Baum fertig ist, werden alle √Ñste, welche nach links zeigen, mit einer ¬´0¬ª markiert, alle die nach rechts zeigen mit einer ¬´1¬ª. Nun kann eine Codierungstabelle erstellt werden, indem der Code f√ºr jedes Zeichen vom Baum abgelesen wird: Zeichen\tCodeI\t00 T\t01 N\t100 R\t101 E\t110 ‚éµ\t1110 F\t1111 Zusammenfassung‚Äã √úbungen‚Äã 1. Decodieren Decodieren Sie diese Bitfolge mit dem obenstehenden Codebaum. Das Symbol ‚éµ steht f√ºr das Leerzeichen. 0111101011000110110101 2. Huffman-Codierung 1 Erstellen Sie zum Wort ¬´MISSISSIPPI¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum. (Laden Sie ein Foto davon hier hoch) Codieren Sie das Wort. Angenommen, der Text w√ºrde mit UTF-8 codiert. Wie viele Bits wurden mit der Huffman-Codierung eingespart? Angenommen die 4 Buchstaben werden mit einer naiven Codierung ohne Huffman-Baum codiert. Wie viele Bits w√§ren dann n√∂tig? Wie viele Bits werden im Vergleich dazu eingespart? SSR 3. Huffman-Codierung 2 Erstellen Sie zum Wort ¬´EXTERNER EFFEKT¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum. (Laden Sie ein Bild davon hier hoch). Codieren Sie das Wort. Wie viele Bits k√∂nnen durch die Huffman-Codierung hier im Vergleich zu (i) UTF-8 und (ii) zu einer naiven Codierung eingespart werden? Bei welcher Art von Text w√ºrden Sie diese allenfalls eher einsetzen? SSR Take-Home Message Quelle: Wikipedia: Huffman coding ‚Ü©","keywords":""},{"title":"2. Informationsgehalt","type":0,"sectionRef":"#","url":"/Codes-and-Data/Compression-v24/redundancy","content":"2. Informationsgehalt Buchstabenh√§ufigkeit‚Äã Die Buchstabenh√§ufigkeit gibt an, wie oft ein Buchstabe in einem Text vorkommen. Die H√§ufigkeit der einzelnen Buchstaben ist je nach Sprache unterschiedlich. Das folgende Diagramm zeigt die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten1: Informationsgehalt‚Äã Wir f√ºhren ein Experiment durch. Aus einem deutschen Text werden etwa 40% der Buchstaben entfernt. Zuerst werden die vier h√§ufigsten Buchstaben E, N, R und I entfernt. Danach werden diese Buchstaben sowie T, S und A beibehalten und die restlichen entfernt. Obschon etwa die gleiche Menge Buchstaben entfernt worden sind, bleibt der Text nach dem Entfernen der h√§ufigen Buchstaben verst√§ndlicher. Notizen Buchstaben Redundanz Originaltext H√§ufige EntfernenSeltene entfernen Ausgabe Ohne: E, N, I, R Offenbar tragen die h√§ufigen Buchstaben weniger zum Inhalt des Textes bei. Sie haben einen kleineren Informationsgehalt. Take-Home Message ‚≠êÔ∏è Huffman Codierung f√ºr die deutsche Sprache Die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten kann der folgenden Tabelle entnommen werden: E\t15.99%\tA\t6.34%\tO\t2.75%\tW\t1.40%\tJ\t0.27 % N\t9.59%\tD\t4.92%\tM\t2.75%\tZ\t1.22%\t√ñ\t0.24 % R\t7.71%\tH\t4.11%\tC\t2.71%\tP\t1.06%\t√ü\t0.15 % I\t7.60%\tU\t3.76%\tB\t2.21%\tV\t0.94%\tY\t0.13 % T\t6.43%\tL\t3.72%\tF\t1.80%\t√ú\t0.63%\tX\t0.07 % S\t6.41%\tG\t3.02%\tK\t1.50%\t√Ñ\t0.54%\tQ\t0.04 % Daraus ergibt sich Codebaum der Huffman-Codierung f√ºr deutsche Texte Zeichen\tCode\tZeichen\tCode(leer)\t100\tO\t01001 A\t0101\tP\t1010111 B\t111000\tQ\t11100110111 C\t01111\tR\t1111 D\t0110\tS\t0011 E\t110\tT\t0010 F\t000110\tU\t11101 G\t01000\tV\t1110010 H\t10100\tW\t1010100 I\t0000\tX\t11100110110 J\t111001100\tY\t1110011010 K\t000111\tZ\t1010101 L\t000100\t√Ñ\t10101101 M\t01110\t√ñ\t111001110 N\t1011\t√ú\t10101100 Verlustbehaftete Kompression W√ºrden bei Textdokumenten Algorithmen eingesetzt, welche Zeichen mit tiefem Informationsgehalt weglassen, so w√ºrde man von verlustbehafteter Kompression sprechen, da der Originaltext ggf. nicht wieder hergestellt werden kann. Practical Cryptography: German Letter Frequencies ‚Ü©","keywords":""},{"title":"1. Huffman-Codierung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Compression/huffman","content":"1. Huffman-Codierung David Huffman hat 1952 ein Verfahren entwickelt, mit welchem Zeichen platzsparender codiert werden k√∂nnen. Seine Idee ist, dass Zeichen, welche h√§ufig im Text vorkommen, einen k√ºrzeren Code erhalten, als Zeichen, welche selten im Text vorkommen. Alltagsbezug Die Huffman-Codierung und √§hnliche Verfahren werden f√ºr das Komprimieren von Dateiformaten wie DOCX, JPG oder MP3 eingesetzt. 1 Codebaum‚Äã Ein Codebaum ist eine Struktur mit einem Startknoten. Von diesem aus geht es entweder nach links oder rechts unten weiter. Eine 0 im Code bedeutet nach links gehen, eine 1 nach rechts gehen. Wenn ein Knoten mit einem Buchstaben erreicht wird, hat man ein Zeichen decodiert, man beginnt wieder von vorne. Erstellen eines Huffman-Baumes‚Äã Am Beispiel der Codierung des Texts ¬´EINTRITT FREI¬ª soll der Huffman-Algorithmus erl√§utert werden. Zuerst z√§hlt man, wie oft jedes Zeichen im Text vorkommt und erstellt eine H√§ufigkeitstabelle. Zeichen\tH√§ufigkeit‚ê£\t1 F\t1 N\t1 R\t2 E\t2 I\t3 T\t3 Nun geht es darum, einen Codierungsbaum zu erstellen. Die H√§ufigkeiten der Buchstaben bilden je einen Knoten. Die H√§ufigkeit steht im Knoten, der Buchstaben darunter. Die Knoten werden nach H√§ufigkeit sortiert: Nun werden die zwei Knoten mit den kleinsten H√§ufigkeiten an einen neuen Knoten angeh√§ngt. Der neue Knoten enth√§lt die Summe der H√§ufigkeiten der urspr√ºnglichen Knoten: Dies wird wiederholt bis alle Knoten miteinander verbunden sind. Wenn zwei Knoten die gleiche H√§ufigkeit haben, spielt es keine Rolle, welcher gew√§hlt wird. Im n√§chsten Schritt wird der kleinste Knoten ¬´N¬ª mit ¬´R¬ª zusammengefasst. Man k√∂nnte aber ¬´N¬ª auch mit ¬´E¬ª oder dem neuen Knoten ¬´2¬ª zusammenfassen. Wichtig ist, dass immer die kleinsten Knoten zusammengefasst werden. Hier werden die zwei Knoten mit H√§ufigkeit 2 zusammengefasst: Wenn der Baum fertig ist, werden alle √Ñste, welche nach links zeigen, mit einer ¬´0¬ª markiert, alle die nach rechts zeigen mit einer ¬´1¬ª. Nun kann eine Codierungstabelle erstellt werden, indem der Code f√ºr jedes Zeichen vom Baum abgelesen wird: Zeichen\tCodeI\t00 T\t01 N\t100 R\t101 E\t111 ‚éµ\t1100 F\t1101 Zusammenfassung‚Äã √úbungen‚Äã 1. Decodieren Decodieren Sie diese Bitfolge mit dem obenstehenden Codebaum. Das Symbol ‚éµ steht f√ºr das Leerzeichen. 0111101011000110110101 2. Huffman-Codierung 1 Erstellen Sie zum Wort ¬´MISSISSIPPI¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum Codieren Sie das Wort. Angenommen, der Text w√ºrde mit UTF-8 codiert. Wie viele Bits k√∂nnen eingespart werden? Angenommen die 4 Buchstaben w√ºrden ohne Huffman-Baum Codiert. Wie viele Bits w√§ren dann n√∂tig? Wie viele Bits werden im Vergleich dazu eingespart? SSR 3. Huffman-Codierung 2 Erstellen Sie zum Wort ¬´EXTERNER EFFEKT¬ª eine H√§ufigkeitstabelle. Erstellen Sie einen Huffman-Baum Codieren Sie das Wort. Lohnt sich die Huffman-Codierung? Wo w√ºrden Sie diese allenfalls einsetzen? SSR Take-Home Message Quelle: Wikipedia: Huffman coding ‚Ü©","keywords":""},{"title":"1. Grundlagen","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate-v24/basics","content":"1. Grundlagen Raster- und Vektorgrafik‚Äã Bei der Speicherung von Grafiken und Bildern im Computer wird zwischen zwei grundlegenden Darstellungsarten unterschieden: der Raster- und der Vektorgrafik. Smiley als Rastergrafik@ Smiley als Vektorgrafik@ Rastergrafik‚Äã Bei einer Rastergrafik wird das Bild in viele kleine Quadrate unterteilt. Jedes Quadrat wird mit genau einer Farbe eingef√§rbt. Diese Quadrate werden Pixel genannt. Die Anzahl Pixel, welche f√ºr eine Rastergrafik verwendet werden, wird als Aufl√∂sung des Bildes bezeichnet. Sie berechnet sich aus der Breite bbb und H√∂he hhh der Grafik in Pixel. Eine Rastergrafik mit hoher Aufl√∂sung hat eine bessere Qualit√§t, ben√∂tigt allerdings auch mehr Speicherplatz. Den theoretischen Speicherbedarf einer Rastergrafik h√§ngt von der Anzahl Pixel und dem verwendeten Farbmodell ab. Rastergrafiken werden in erster Linie zur Speicherung von Fotos verwendet. Vektorgrafik‚Äã Bei einer Vektorgrafik wird das darzustellende Bild aus geometrischen Objekten wie Linien, Kreise oder Rechtecken zusammengesetzt. Das Prinzip ist dasselbe wie bei der Turtle-Grafik - jeder Pfad wird in einem Koordinatensystem beschrieben. Durch Hinein- oder Herauszoomen kann das Bild beliebig vergr√∂ssert oder verkleinert werden, ohne dass mehr Speicherplatz ben√∂tigt wird. Vektorgrafiken haben also zwei grosse Vorteile gegen√ºber Pixelgrafiken. Erstens ben√∂tigen sie normalerweise deutlich weniger Speicherplatz als eine entsprechende Pixelgrafik, da mit einem Objekt die Farbe von vielen Pixeln festgelegt wird. Zweitens k√∂nnen Vektorgrafiken ohne Qualit√§tseinbusse beliebig vergr√∂ssert und verkleinert werden. Die einzelnen Objekte k√∂nnen einfarbig sein oder einen Farbverlauf haben, sowie teilweise transparent sein. Vektorgrafiken werden deshalb insbesondere f√ºr folgende Anwendungen eingesetzt: Logos Illustrationen Symbole, Icons Schriftarten Strassen- und Landkarten","keywords":""},{"title":"2. Informationsgehalt","type":0,"sectionRef":"#","url":"/Codes-and-Data/Compression/redundancy","content":"2. Informationsgehalt Buchstabenh√§ufigkeit‚Äã Die Buchstabenh√§ufigkeit gibt an, wie oft ein Buchstabe in einem Text vorkommen. Die H√§ufigkeit der einzelnen Buchstaben ist je nach Sprache unterschiedlich. Das folgende Diagramm zeigt die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten1: Informationsgehalt‚Äã Wir f√ºhren ein Experiment durch. Aus einem deutschen Text werden etwa 40% der Buchstaben entfernt. Zuerst werden die vier h√§ufigsten Buchstaben E, N, R und I entfernt. Danach werden diese Buchstaben sowie T, S und A beibehalten und die restlichen entfernt. Obschon etwa die gleiche Menge Buchstaben entfernt worden sind, bleibt der Text nach dem Entfernen der h√§ufigen Buchstaben verst√§ndlicher. Notizen Buchstaben Redundanz Originaltext H√§ufige EntfernenSeltene entfernen Ausgabe Ohne: E, N, I, R Offenbar tragen die h√§ufigen Buchstaben weniger zum Inhalt des Textes bei. Sie haben einen kleineren Informationsgehalt. Take-Home Message ‚≠êÔ∏è Huffman Codierung f√ºr die deutsche Sprache Die durchschnittliche Buchstabenh√§ufigkeit in deutschen Texten kann der folgenden Tabelle entnommen werden: E\t15.99%\tA\t6.34%\tO\t2.75%\tW\t1.40%\tJ\t0.27 % N\t9.59%\tD\t4.92%\tM\t2.75%\tZ\t1.22%\t√ñ\t0.24 % R\t7.71%\tH\t4.11%\tC\t2.71%\tP\t1.06%\t√ü\t0.15 % I\t7.60%\tU\t3.76%\tB\t2.21%\tV\t0.94%\tY\t0.13 % T\t6.43%\tL\t3.72%\tF\t1.80%\t√ú\t0.63%\tX\t0.07 % S\t6.41%\tG\t3.02%\tK\t1.50%\t√Ñ\t0.54%\tQ\t0.04 % Daraus ergibt sich Codebaum der Huffman-Codierung f√ºr deutsche Texte Zeichen\tCode\tZeichen\tCode(leer)\t100\tO\t01001 A\t0101\tP\t1010111 B\t111000\tQ\t11100110111 C\t01111\tR\t1111 D\t0110\tS\t0011 E\t110\tT\t0010 F\t000110\tU\t11101 G\t01000\tV\t1110010 H\t10100\tW\t1010100 I\t0000\tX\t11100110110 J\t111001100\tY\t1110011010 K\t000111\tZ\t1010101 L\t000100\t√Ñ\t10101101 M\t01110\t√ñ\t111001110 N\t1011\t√ú\t10101100 Practical Cryptography: German Letter Frequencies ‚Ü©","keywords":""},{"title":"3. Rastergrafik","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate-v24/raster","content":"3. Rastergrafik Theoretische Speichergr√∂sse‚Äã Die theoretische Speichergr√∂sse einer Rastergrafik wird berechnet, indem die Anzahl Pixel aaa mit der Farbtiefe fff multipliziert wird. Die Farbtiefe gibt an, welche Datenmenge f√ºr die Darstellung einer Farbe ben√∂tigt wird. Die Anzahl Pixel wird aus der Aufl√∂sung, also der Breite bbb und H√∂he hhh des Bildes in Pixel berechnet. F√ºr die Speichergr√∂sse rechnen wird also wie folgt: b‚ãÖh‚ãÖfb\\cdot h\\cdot fb‚ãÖh‚ãÖf Beispiel Ein Bild mit einer Aufl√∂sung von 1920√ó1080 Pixel und der Farbtiefe 3 Byte ben√∂tigt einen Speicherplatz von: 1920‚ãÖ1080‚ãÖ3=6220800‚ÄâB=6.2‚ÄâMB1920\\cdot 1080\\cdot 3 = 6220800 \\,\\text{B} = 6.2 \\,\\text{MB}1920‚ãÖ1080‚ãÖ3=6220800B=6.2MB JPEG-Grafikformat‚Äã Das Grafikformat der Joint Photographic Experts Group ist ein beliebtes Format zu Speicherung von Fotos. Es kann den ben√∂tigten Speicherplatz gegen√ºber der theoretischen Gr√∂sse von Rastergrafiken sehr stark reduzieren. Dazu wird ein komplexer mathematischer Algorithmus verwendet, welcher bewirkt, dass das urspr√ºngliche Bild nicht mehr genau Pixel f√ºr Pixel rekonstruiert werden kann. Deshalb spricht man hier von einer verlustbehafteten Kompression. Der Algorithmus kann durch die Angabe der Qualit√§t in Prozent beeinflusst werden. Die folgenden Bildausschnitte illustrieren, wie die Qualit√§t und die Speichergr√∂sse zusammenh√§ngen: h√∂chste Qualit√§t (162 kB)@ hohe Qualit√§t (42 kB)@ mittlere Qualit√§t (18 kB)@ niedrige Qualit√§t (9 kB)@ An den Bildern wird sichtbar, dass die JPEG-Kompression besonders entlang von R√§ndern St√∂rungen (¬´Artefakte¬ª) verursacht. Bei Fotos f√§llt dies weniger auf. Die folgenden zwei Bilder sind beide mit mittlerer JPEG-Qualit√§t gespeichert worden: JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ Das JPEG-Datei eignet sich also besonders, um Fotografien platzsparend zu speichern. PNG-Grafikformat‚Äã Das Portable Network Graphics-Format wird f√ºr verlustfreie Speicherung von Rastergrafiken mit Transparenz verwendet. Es eignet sich beispielsweise f√ºr Bildschirmfotos und Grafiken f√ºr Webseiten oder Computerspiele. Das folgende Beispiel zeigt links einen Baum als PNG-Grafik mit Transparenz gespeichert. Rechts ist das gleiche Bild als JPG-Grafik mit hoher Qualit√§t gespeichert. PNG-Grafik (32 kB)@ JPEG-Grafik (13 kB)@ Durch die Speicherung als JPG-Grafik geht die Transparenz verloren, das Bild kann z.B. nicht mehr auf farbigen Folien verwendet werden. Ausserdem sind JPEG-Artefakte sichtbar. Gr√∂ssenvergleich der Dateiformate‚Äã Die folgende Tabelle zeigt die Dateigr√∂ssen des gleichen Bildes (640√ó360) mit verschiedenen Dateiformaten: Format\tDateigr√∂sse\trelativtheoretische Gr√∂sse\t691 kB\t100% PNG\t146 kB\t21% JPG h√∂chste Qualit√§t\t162 kB\t23% JPG hohe Qualit√§t\t42 kB\t6% JPG mittlere Qualit√§t\t18 kB\t3% JPG tiefe Qualit√§t\t9 kB\t1% Jupyterhub ‚≠ê Loggen Sie sich auf https://jupyter.gbsl.website ein und kopieren Sie den Ordner shared/Rastergrafik in ihr Home-Verzeichnis (per Drag-and-Drop auf den kleinen Ordner oben links ziehen - es erscheint eine Fehlermeldung, die jedoch ignoriert werden kann). √ñffnen Sie danach den kopierten Ordner Rastergrafik/. In diesem Ordner finden Sie eine Datei Bild.csv - es enth√§lt eine 5x5 Pixel grosse Rastergrafik. Mit Rechtsklick &gt; √ñffnen mit &gt; editor kann das Bild bearbeitet werden. √Ñndern Sie die Farben so ab, dass ein Schweizerkreuz entsteht. Um das Bild zu betrachten, muss das Programm csv_to_png.ipynb gestartet werden (mit shift+enter). Tipp: verwenden Sie f√ºr jeden Farbkanal genau 3 Ziffern, damit die Zeilen nicht verr√ºcken. Beispiel: 255:255:000, 200:000:030, 255:255:255 ","keywords":""},{"title":"Rastergrafik praktisch","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate-v24/uebung","content":"Rastergrafik praktisch 1. Signal/Telegram/Threema/WhatsApp Machen Sie ein Portr√§t-Foto (mit der Kamera-App!) Untersuchen Sie das Foto: Erkennen Sie einzelne Wimpern auf dem Foto? Wie viel Speicherplatz braucht das Foto? In welchem Format ist es abgespeichert? Schicken Sie das Foto der Pultnachbar:in und beantworten Sie die Frage (2) mit dem empfangenen Bild erneut. Welche Unterschiede stellen Sie fest? Versuchen Sie unterschiedliche Messenger-Apps (Signal, Threema, Telegram, WhatsApp) aus: gibt es Unterschiede bei den Bildgr√∂ssen? 2. JPEG-Format 1 Das folgende Foto hat im Original eine Aufl√∂sung von 6016√ó4016 Pixel mit einer Farbtiefe von 3 Byte. Berechnen Sie die theoretische Speichergr√∂sse in Megabyte. Laden Sie das Originalbild unter dem folgenden Link herunter: Originalbild Finden Sie heraus, wie gross der tats√§chliche Speicherbedarf des Bildes in Megabyte ist. Notieren Sie diese Zahl. √ñffnen Sie das Bild in einer Foto-App (unter Mac: in der Vorschau). Exportieren Sie das Bild mehrmals nacheinander als JPEG-Datei mit den Qualit√§ten 90%, 80%, 50% und 10%. Vergleichen Sie die Bilder und die Dateigr√∂ssen. Was stellen Sie fest? WindowsmacOS Im Foto App √∂ffnen und als Kopie exportieren: Kann die Qualit√§t wiederhergestellt werden? √ñffnen Sie das zuvor mit der Qualit√§t von 10% exportierte Bild und exportieren Sie es erneut mit einer Qualit√§t von 100%. Was stellen Sie fest? Wie widerspiegelt sich dies in der Dateigr√∂sse und der Bildqualit√§t beim Betrachten? Island@ Quelle: S. Rothe, T. Jampen, R. Meyer ‚Ü©","keywords":""},{"title":"2. Farbdarstellung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate-v24/colors","content":"2. Farbdarstellung Farbkan√§le‚Äã F√ºr die digitale Verarbeitung m√ºssen Farben in Zahlen umgewandelt werden. Das geschieht, indem die Farben in verschiedene Komponenten, sogenannte Farbkan√§le aufgeteilt werden. Pro Pixel kann so die Intensit√§t je Farbkanal als Zahl bestimmt werden. Die zwei wichtigsten Ans√§tze, wie diese Aufteilung in verschiedene Kan√§le erfolgt, werden im folgenden vorgestellt. RGB-Farbmodell‚Äã Das RGB-Farbmodell basiert auf der Funktionsweise des menschlichen Auges. Dieses nimmt Farben mit Hilfe von drei Arten von sogenannten Z√§pfchen wahr, die f√ºr Licht unterschiedlicher Wellenl√§ngen empfindlich sind. So werden vom Menschen die Grundfarben Rot, Gr√ºn und Blau wahrgenommen. Farbwahrnehmung des menschlichen Auges@ Diese Eigenschaft des Auges wird bei der additiven Farbdarstellung ausgenutzt, indem sich √ºberlagernde Lichtquellen in den drei Grundfarben Rot, Gr√ºn und Blau verwendet werden. Durch die Regulierung der Helligkeit der einzelnen Lichtquellen k√∂nnen s√§mtliche Farben erzeugt werden. Dieses Farbmodell kommt √ºberall dort zum Einsatz, wo Licht verwendet wird, um ein Bild zu erzeugen, insbesondere bei Bildschirmen und Videoprojektoren (¬´Beamer¬ª). Die Farben auf einem Bildschirm werden erzeugt, indem drei nahe beieinanderliegende Leuchtdioden in den Farben Rot, Gr√ºn und Blau in unterschiedlicher Helligkeit leuchten. Ein solches Trio von Leuchtdioden wird Pixel genannt. Additives Farbmodell@ Pixel auf einem Bildschirm@ Umgekehrt kann man bei einem Bild die Rot-, Gr√ºn- und Blauanteile jedes Bildpunkts bestimmen. Man sagt, dass man das Bild in Rot-, Gr√ºn- und Blaukanal aufteilt: Aufteilung in Rot-, Gr√ºn- und Blaukanal@ Im entsprechenden RGB-Farbsystem wird eine Farbe definiert, indem die Helligkeit der Rot-, Gr√ºn- und Blauanteils durch eine Zahl zwischen 0 und 255 ausgedr√ºckt wird. Um eine Farbe bin√§r darzustellen, werden die bin√§ren Darstellungen der Zahlen f√ºr Rot, Gr√ºn und Blau nacheinander aufgeschrieben. So hat beispielsweise die Farbe mit den RGB-Werten 255, 220, 150 die bin√§re Darstellung 11111111 11011100 10010110. RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) RGBA-Farbmodell‚Äã F√ºr das RGBA-Farbmodell wird das RBG-Farbmodell um einen Kanal erweitert. Dieser heisst Alphakanal und dr√ºckt aus, wie stark die Deckkraft der Farbe ist. Ein Wert von 0 bedeutet gar keine Deckkraft und somit volle Transparenz. Ein maximaler Wert bedeutet maximale Deckkraft und somit keine Transparenz. RGBA Rot 255 Gr√ºn 217 Blau 0 Alpha 0.86 Bin√§r00000000 CSS-Farbergba(255, 217, 0, 0.86) CMYK-Farbmodell‚Äã Das CMYK-Farbmodell basiert auf der Weise, wie Gegenst√§nde farbig erscheinen. Ein Gegenstand wird √ºblicherweise mit weissem Licht, also Licht verschiedener Wellenl√§ngen (Rot, Gr√ºn und Blau) angestrahlt. Beispielsweise erscheint ein gelber Gegenstand deshalb in dieser Farbe, weil er blaues Licht absorbiert und rotes und gr√ºnes Licht reflektiert. subtraktives Farbmodell@ Bei der subtraktiven Farbdarstellung werden auf weissem Material die drei Grundfarben Cyan, Magenta (Fuchsia) und Yellow (Gelb) verwendet, welche rotes, gr√ºnes bzw. blaues Licht absorbieren. Zus√§tzlich wird schwarze Farbe (Key-Kanal) verwendet, welche alles Licht absorbiert. Aufteilung in Cyan-, Magenta-, Yellow- und Key-Kanal@ Dieses Farbmodell kommt beim Drucken zum Einsatz. CMYK Cyan 90 % Magenta 70 % Yellow 50 % Key 30 % CSS-Farbergb(0, 0, 0) ‚≠êÔ∏è Umrechnung CMYK ‚Äì RGB F√ºr die Umrechnung einer CMYK-Farbangabe nach RGB wird folgender Formelsatz verwendet: r=(1‚àíc)‚ãÖ(1‚àík)g=(1‚àím)‚ãÖ(1‚àík)b=(1‚àíy)‚ãÖ(1‚àík)\\begin{aligned} r &amp;= (1 - c) \\cdot (1 - k) \\\\ g &amp;= (1 - m) \\cdot (1 - k) \\\\ b &amp;= (1 - y) \\cdot (1 - k) \\\\ \\end{aligned}rgb‚Äã=(1‚àíc)‚ãÖ(1‚àík)=(1‚àím)‚ãÖ(1‚àík)=(1‚àíy)‚ãÖ(1‚àík)‚Äã Dabei wird vorausgesetzt, dass s√§mtliche Werte im Bereich 0 bis 1 liegen. Wenn beispielsweise die CMYK-Werte in Prozent angegeben werden und die RGB-Werte mit einem Byte codiert werden, ergeben sich folgende Formeln: r=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)g=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)b=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)\\begin{aligned} r &amp;= 255 \\cdot (1 - c \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ g &amp;= 255 \\cdot (1 - m \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ b &amp;= 255 \\cdot (1 - y \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ \\end{aligned}rgb‚Äã=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)‚Äã def sanitize(wert): # Wandelt Prozent-Werte zu Zahlen zwischen 0 und 1 um if wert &gt; 1: return wert / 100 return wert def cmyk2rgb(c, m, y, k): faktor = 1 - sanitize(k) r = (1 - sanitize(c)) * faktor g = (1 - sanitize(m)) * faktor b = (1 - sanitize(y)) * faktor return [r, g, b] print('rgb: ', cmyk2rgb(80, 60, 40, 20)) Farbtiefe‚Äã Die Farbtiefe gibt an, in wie vielen Abstufungen jeder Farbkanal vorliegt. Im interaktiven Tool l√§sst sich die Farbtiefe untersuchen. Dabei werden alle Farbabstufungen der drei Farbkan√§le Gr√ºn, Rot und Blau wie folgt kombiniert. Farbtiefen Farbabstufungen 2 M√∂gliche Farben8 Ben√∂tigte Bits pro Farbkanal1 Farbtiefe pro Farbkanal1 bit Farbtiefe3 bits 1. Aufgabe: Farbtiefe Erkennen Sie das System, wie die Farbtiefe mit der Anzahl m√∂glicher Farben zusammenh√§ngt? Wie viele Farben sind bei einer Farbabstufung von 4, 8, 16, 128 oder 256 Stufen m√∂glich? Wie viel bits sind f√ºr die Darstellung eines Farbkanals bei 4, 8, 16, 128 oder 256 Abstufungen n√∂tig? SSR Die Anzahl Bits oder Bytes, welche insgesamt f√ºr die Speicherung einer Farbe verwendet werden, wird Farbtiefe genannt. Damit wird festgelegt, wie viele unterschiedliche Abstufungen pro Farbkanal dargestellt werden k√∂nnen. Beim RGB-Farbmodell wird √ºblicherweise eine Farbtiefe von 3 Byte (entspricht 24 Bit) verwendet. Dies ergibt pro Farbkanal acht Bit, womit 256 Farbabstufungen beschrieben werden k√∂nnen. Somit k√∂nnen 256√ó256√ó256 = 16.7 Millionen unterschiedliche Farben dargestellt werden. Farbmodell\tFarbtiefe\tPlatzbedarf in ByteFarbe\t3 Byte\tb‚ãÖh‚ãÖ3b \\cdot h \\cdot 3b‚ãÖh‚ãÖ3 Farbe mit Transparenz\t4 Byte\tb‚ãÖh‚ãÖ4b \\cdot h \\cdot 4b‚ãÖh‚ãÖ4 Graustufen\t1 Byte\tb‚ãÖhb \\cdot hb‚ãÖh Schwarzweiss\t1 Bit\tb‚ãÖh‚ãÖ18b \\cdot h \\cdot \\frac{1}{8}b‚ãÖh‚ãÖ81‚Äã","keywords":""},{"title":"2. Zahlensysteme","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Zahlensysteme","content":"2. Zahlensysteme Aktuelle Computer kennen im wesentlichen zwei Zust√§nde: Strom- oder Nicht-Strom. Da es nichts dazwischen gibt, werden diese Zust√§nde auch &quot;bin√§r&quot; genannt. Dies kann mit Zahlen wie folgt dargestellt werden: 0 ‚Üí kein Strom 1 ‚Üí Strom Da wir Menschen uns besser im Zehnersystem zurechtfinden, wo es 10 eindeutige Zeichen gibt, brauchen wir eine M√∂glichkeit, zwischen diesen System hin- und herzurechnen. Jedes dieser sog. Stellenwertsysteme ist gleich aufgebaut. Schaut man sich das Zehnersystem an, bemerkt man, dass jede Stelle mit einer 10er Potenz multipliziert wird. Zehnersystem‚Äã 328=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100\\ \\begin{aligned} 328 &amp;= 300 + 20 + 8 \\\\ &amp;= 3 \\cdot 100 + 2 \\cdot 10 + 8 \\cdot 1 \\\\ &amp;= 3 \\cdot 10^2 + 2 \\cdot 10^1 + 8 \\cdot 10^0 \\\\ \\end{aligned}¬†328‚Äã=300+20+8=3‚ãÖ100+2‚ãÖ10+8‚ãÖ1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100‚Äã Bin√§rsystem‚Äã Das Bin√§rsystem wird auch Dualsystem oder Zweiersystem genannt Nun gibt es nur zwei eindeutige Zeichen, 0 und 1, und jede Stelle wird mit einer Zweierpotenz multipliziert. In der folgenden Tabelle sind die ersten 12 Dezimalzahlen auch als Bin√§rzahl angegeben. Bin√§r\tDezimal020_202‚Äã\t0100_{10}010‚Äã 121_212‚Äã\t1101_{10}110‚Äã 10210_2102‚Äã\t2102_{10}210‚Äã 11211_2112‚Äã\t3103_{10}310‚Äã 1002100_21002‚Äã\t4104_{10}410‚Äã 1012101_21012‚Äã\t5105_{10}510‚Äã Bin√§r\tDezimal1102110_21102‚Äã\t6106_{10}610‚Äã 1112111_21112‚Äã\t7107_{10}710‚Äã 100021000_210002‚Äã\t8108_{10}810‚Äã 100121001_210012‚Äã\t9109_{10}910‚Äã 101021010_210102‚Äã\t101010_{10}1010‚Äã 101121011_210112‚Äã\t111011_{10}1110‚Äã Hinweis: Subskript Die tiefgestellte 2 bzw. 10 zeigt an, in welchem Zahlensystem die Zahl dargestellt ist und wird Subskript genannt. Durch das Subskript wird ersichtlich, ob bspw. mit 101 dezimal &quot;Hundert und Eins&quot; oder bin√§r &quot;Eins Null Eins&quot; gemeint ist. Bin√§r ‚Üí Dezimal‚Äã Die Umrechnung vom Bin√§rsystem ins Dezimalsystem erfolgt durch Ausmultiplizieren mit den entsprechenden Zweierpotenzen. Beispiel: 1011 Zweierpotenz\t232^323\t222^222\t212^121\t202^020 Bin√§rzahl\t111\t000\t111\t111 Summanden\t888\t000\t222\t111 Resultat 111111 oder mathematisch formuliert: 10112=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110\\begin{aligned} 1011_2 &amp;= 1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 \\\\ &amp;= 1 \\cdot 8 + 0 \\cdot 4 + 1 \\cdot 2 + 1 \\cdot 1 \\\\ &amp;= 11_{10} \\end{aligned}10112‚Äã‚Äã=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110‚Äã‚Äã Dezimalsystem ‚Üí Bin√§rsystem‚Äã F√ºr die Umrechnung vom Dezimalsystem zum Bin√§rsystem ist die Tabelle der Zweierpotenzen essenziell: 282^828\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020256\t128\t64\t32\t16\t8\t4\t2\t1 Beispiel: 143 Die erste Zweierpotenz, die kleiner ist als 143 ist, ist 27=1282^7 = 12827=128 ‚Üí die Bin√§rzahl hat also 8 Stellen. Nun wird f√ºr jede Stelle √ºberpr√ºft, ob die entsprechende Zweierpotenz zur Zwischensumme dazuaddiert werden kann, oder ob man dadurch bereits eine zu grosse Zahl erh√§lt. 2er-Potenz\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020\tZwischensummeRechnungsschritte\t128\t64\t32\t16\t8\t4\t2\t1 1. 128 &lt;143\\lt 143&lt;143\t1 128 2. 128 + 64 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0 128 3. 128 + 32 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0 128 4. 128 + 16 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0\t0 128 5. 128 + 8 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1 136 6. 136 + 4 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1 140 7. 140 + 2&lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1\t1 142 8. 142 + 1=143= 143=143\t1\t0\t0\t0\t1\t1\t1\t1\t143 Bin ‚Üí Dez Wandeln Sie vom vom Bin√§r- ins Dezimalsystem um. Dez ‚Üí Bin Wandeln Sie vom Dezimal- ins Bin√§rsystem um.","keywords":""},{"title":"3. Zeichencodierung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Codierung/Zeichencodierung","content":"3. Zeichencodierung Datenpakete bestehen aus verschiedenen Zahlen und Zeichen. Wie lassen sich diese in Einsen und Nullen √ºbersetzen? Auf dem Computer ist jedem Zeichen eine eindeutige Zahl zugeordnet - eine sog. Zeichencodierung. Eine g√§ngige Zeichencodierung ist etwa ASCII, 128 Zeichen, wobei f√ºr ein Zeichen genau 7 bit, also 7 Stellen mit 0 oder 1, notwendig sind. In diesen 128 m√∂glichen Zeichen sind 33 Steuerzeichen und 95 normale Zeichen enthalten. Steuerzeichen spezielle Zeichen wie bspw. das Zeichen \\n f√ºr einen Zeilenumbruch oder \\t f√ºr einen Tabulator. Die ASCII-Codierung enth√§lt noch keine Umlaute, weshalb mit Latin 1, 256 Zeichen der Informationsgehalt um ein Bit erh√∂ht wurde, so dass insgesamt 256 Zeichen codiert werden k√∂nnen - die ersten 128 Zeichen sind dabei identisch mit ASCII. Zeichen\tDezimal\tBin√§r\\n\t10\t00001010 ‚éµ\t32\t00100000 !\t33\t00100001 &amp;\t38\t00100110 .\t46\t00101110 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 =\t61\t00111101 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 Zeichen\tDezimal\tBin√§rD\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 V\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 Zeichen\tDezimal\tBin√§rd\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 √§\t228\t11100100 √∂\t246\t11110110 √º\t252\t11111100 Komplette Latin 1 Tabelle Zeichen\tDezimal\tBin√§r\t0\t00000000 1\t00000001 2\t00000010 3\t00000011 4\t00000100 5\t00000101 6\t00000110 7\t00000111 8\t00001000 \\t\t9\t00001001 \\n\t10\t00001010 11\t00001011 12\t00001100 13\t00001101 14\t00001110 15\t00001111 16\t00010000 17\t00010001 18\t00010010 19\t00010011 20\t00010100 21\t00010101 22\t00010110 23\t00010111 24\t00011000 25\t00011001 26\t00011010 27\t00011011 28\t00011100 \u001d\t29\t00011101 30\t00011110 31\t00011111 ‚éµ\t32\t00100000 !\t33\t00100001 &quot;\t34\t00100010 #\t35\t00100011 $\t36\t00100100 %\t37\t00100101 &amp;\t38\t00100110 '\t39\t00100111 (\t40\t00101000 )\t41\t00101001 *\t42\t00101010 +\t43\t00101011 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 ;\t59\t00111011 &lt;\t60\t00111100 =\t61\t00111101 &gt;\t62\t00111110 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 D\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 Zeichen\tDezimal\tBin√§rV\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 [\t91\t01011011 \\\t92\t01011100 ]\t93\t01011101 ^\t94\t01011110 _\t95\t01011111 `\t96\t01100000 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 d\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 {\t123\t01111011 |\t124\t01111100 }\t125\t01111101 ~\t126\t01111110 \t127\t01111111 ¬Ä\t128\t10000000 ¬Å\t129\t10000001 ¬Ç\t130\t10000010 ¬É\t131\t10000011 ¬Ñ\t132\t10000100 ¬Ö\t133\t10000101 ¬Ü\t134\t10000110 ¬á\t135\t10000111 ¬à\t136\t10001000 ¬â\t137\t10001001 ¬ä\t138\t10001010 ¬ã\t139\t10001011 ¬å\t140\t10001100 141\t10001101 142\t10001110 143\t10001111 144\t10010000 ¬ë\t145\t10010001 ¬í\t146\t10010010 ¬ì\t147\t10010011 ¬î\t148\t10010100 ¬ï\t149\t10010101 ¬ñ\t150\t10010110 ¬ó\t151\t10010111 ¬ò\t152\t10011000 ¬ô\t153\t10011001 ¬ö\t154\t10011010 ¬õ\t155\t10011011 ¬ú\t156\t10011100 157\t10011101 158\t10011110 ¬ü\t159\t10011111 160\t10100000 ¬°\t161\t10100001 ¬¢\t162\t10100010 ¬£\t163\t10100011 ¬§\t164\t10100100 ¬•\t165\t10100101 ¬¶\t166\t10100110 ¬ß\t167\t10100111 ¬®\t168\t10101000 ¬©\t169\t10101001 ¬™\t170\t10101010 Zeichen\tDezimal\tBin√§r¬´\t171\t10101011 ¬¨\t172\t10101100 173\t10101101 ¬Æ\t174\t10101110 ¬Ø\t175\t10101111 ¬∞\t176\t10110000 ¬±\t177\t10110001 ¬≤\t178\t10110010 ¬≥\t179\t10110011 ¬¥\t180\t10110100 ¬µ\t181\t10110101 ¬∂\t182\t10110110 ¬∑\t183\t10110111 ¬∏\t184\t10111000 ¬π\t185\t10111001 ¬∫\t186\t10111010 ¬ª\t187\t10111011 ¬º\t188\t10111100 ¬Ω\t189\t10111101 ¬æ\t190\t10111110 ¬ø\t191\t10111111 √Ä\t192\t11000000 √Å\t193\t11000001 √Ç\t194\t11000010 √É\t195\t11000011 √Ñ\t196\t11000100 √Ö\t197\t11000101 √Ü\t198\t11000110 √á\t199\t11000111 √à\t200\t11001000 √â\t201\t11001001 √ä\t202\t11001010 √ã\t203\t11001011 √å\t204\t11001100 √ç\t205\t11001101 √é\t206\t11001110 √è\t207\t11001111 √ê\t208\t11010000 √ë\t209\t11010001 √í\t210\t11010010 √ì\t211\t11010011 √î\t212\t11010100 √ï\t213\t11010101 √ñ\t214\t11010110 √ó\t215\t11010111 √ò\t216\t11011000 √ô\t217\t11011001 √ö\t218\t11011010 √õ\t219\t11011011 √ú\t220\t11011100 √ù\t221\t11011101 √û\t222\t11011110 √ü\t223\t11011111 √†\t224\t11100000 √°\t225\t11100001 √¢\t226\t11100010 √£\t227\t11100011 √§\t228\t11100100 √•\t229\t11100101 √¶\t230\t11100110 √ß\t231\t11100111 √®\t232\t11101000 √©\t233\t11101001 √™\t234\t11101010 √´\t235\t11101011 √¨\t236\t11101100 √≠\t237\t11101101 √Æ\t238\t11101110 √Ø\t239\t11101111 √∞\t240\t11110000 √±\t241\t11110001 √≤\t242\t11110010 √≥\t243\t11110011 √¥\t244\t11110100 √µ\t245\t11110101 √∂\t246\t11110110 √∑\t247\t11110111 √∏\t248\t11111000 √π\t249\t11111001 √∫\t250\t11111010 √ª\t251\t11111011 √º\t252\t11111100 √Ω\t253\t11111101 √æ\t254\t11111110 √ø\t255\t11111111 Python‚Äã Auch in Python werden im Hintergrund Zahlen f√ºr Buchstaben und Bin√§rcodes f√ºr Dezimalzahlen verwendet. In Python l√§sst sich die sog. Ordnungszahl eines Buchstabens mit der Funktion ord einfach in Erfahrung bringen. Definition ord(&lt;Buchstabe&gt;)‚Äã Die sogenannte Ordnungszahl f√ºr einen (einzelnen!) Buchstaben kann mit dem Befehl ord bestimmt werden. ord_A = ord('A') ord_a = ord('a') print('Ordnungszahl A:', ord_A) print('Ordnungszahl a:', ord_a) Definition bin(&lt;Zahl&gt;)‚Äã Eine Dezimalzahl kann in eine Bin√§r-Zahl umgewandelt werden. binaer = bin(65) print(binaer) Hinweis Mit dem 0b zu Beginn zeigt Python an, dass es sich um eine Bin√§rzahl handelt. Analog zu der Subskript-Schreibweise 100000121000001_210000012‚Äã schreibt Python 0b1000001. Definition int(&lt;Bin√§rzahl&gt;), int(&lt;Bin√§rZahl&gt;, 2)‚Äã Der Befehl int (Abk√ºrzung f√ºr Integer, also Ganze Zahl) kann eine Bin√§rzahl in eine Dezimalzahl √ºbersetzen. Dabei gibt es mehrere M√∂glichkeiten: zahl = int(0b1001) # das 0b zeigt Python, dass es sich um eine bin√§re Zahl handelt print('1001 bin√§r = ', zahl) # Achtung! folgende Umwandlung klappt nicht, da jetzt ein Text √ºbergeben wird: # zahl = int('0b1001') # oder man teilt Python explizit mit, dass es sich um die Basis 2 handelt zahl2 = int('1011', 2) print('1011 bin√§r = ', zahl2) Hinweis Der zweite Parameter gibt die Basis des Zahlensystems an, hier also f√ºr Bin√§r 2. Definition chr(&lt;Zahl&gt;)‚Äã Gibt den zu einer Ordnungszahl geh√∂renden Buchstaben zur√ºck. buchstabe = chr(77) print(buchstabe) Name-&gt;Bin √Ñndern Sie das Programm unten so ab, dass Ihr Name ausgegeben wird. print(bin(ord('R'))) print(bin(ord('e'))) print(bin(ord('t'))) print(bin(ord('o'))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, bin und ord ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin-&gt;Name √Ñndern Sie das Programm unten so ab, dass Ihr Name aus dem Bin√§ren wieder in Text umgewandelt wird. print(chr(int('1010010', 2))) print(chr(int('1100101', 2))) print(chr(int('1110100', 2))) print(chr(int('1101111', 2))) Beschreiben Sie, was genau auf der ersten Zeile passiert. In welcher Reihenfolge werden die drei Befehle print, chr und int ausgef√ºhrt und welche Ergebnisse liefern sie jeweils? Bin√§rer Codierer‚Äã Aufgabe Schreiben Sie einen bin√§ren Codierer, welcher einen Text ins bin√§re √ºbersetzt. Im vorgegebenen Code sehen Sie, wie √ºber jeden Buchstaben eines Wortes iteriert werden kann. for buchstabe in 'Hallo': print(buchstabe) Aufh√ºbschen: Das 0b kann weggeschnitten werden, indem nur die Buchstaben nach dem zweiten Buchstaben verwendet werden: binaer = bin(11) # = 0b1011 binaer = binaer[2:] # alles (:) nach dem zweiten Buchstaben wird verwendet print(binaer) Jeder Buchstabe soll genau 1 Byte, also 8 Zeichen, umfassen. Dies erreicht man, wenn man mit Nullen (engl. Zeros) auff√ºllt: binaer = '1011' binaer = binaer.zfill(8) print(binaer) Statt immer eine neue Zeile zu verwenden, kann der print-Befehl auch angewiesen werden, am Ende ein Leerschlag einzuf√ºgen: for buchstabe in 'Hallo': print(buchstabe, end=' ') SSR","keywords":""},{"title":"6. Dateiformate erkennen","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/files","content":"6. Dateiformate erkennen Eine Datei ist eine Ansammlung bin√§rer Daten, also eine Aneinanderreihung von Bits. Die bin√§re Darstellung der Datei, in welcher dieser Text gespeichert ist, beginnt so: 00100011 00100000 01000100 01100001 01110100 01100101 01101001 01100101 01101110 00001010 00101101 00101101 00101101 00001010 00001010 01000101 01101001 01101110 01100101 00100000 01000100 01100001 01110100 01100101 ‚Ä¶ Dateiformat‚Äã Die f√ºr eine Datei verwendete Codierung wird auch Dateiformat genannt. Anhand der bin√§ren Daten alleine ist nicht erkennbar, was f√ºr eine Codierung f√ºr eine Datei verwendet wurde. Ohne diese zus√§tzliche Information k√∂nnen die Daten aber nicht decodiert werden. Bei jeder Datei muss also zus√§tzlich angegeben werden, welche Codierung f√ºr diese Datei verwendet wurde. Es gibt drei Ans√§tze, das Dateiformat (also die Codierung) einer Datei zu erkennen: Dateiendung Magische Bytes Internet Media Type Dateiendung‚Äã Eine Dateiendung wie .docx oder .jpg wird an den Dateinamen angeh√§ngt. Eine Dateiendung beginnt immer mit einem Punkt. So wird sie vom Dateinamen abgetrennt. Ein Betriebssystem wie Windows oder macOS verwendet die Dateiendung, um zu ermitteln, mit welcher Anwendung eine Datei ge√∂ffnet werden soll. Magische Bytes‚Äã Viele Dateiformate verwenden magische Bytes am Dateianfang zur Kennzeichnung, wie die enthaltenen Informationen codiert sind. Beispielsweise beginnt jede .jpg-Datei mit der Bitfolge 11111111 11011000 11111111. Diese Darstellung ist etwas lang und umst√§ndlich, daher wird h√§ufig das Hexadezimalsystem (16-er System) verwendet. Internet Media Type‚Äã Der Internet Media Type oder MIME-Type ist ein Standard, mit welchem Codierungen f√ºr die √úbermittlung von Daten im Internet angegeben werden. So teilt ein Webserver einem Browser per Internet Media Type mit, ob er einen Text, ein Bild oder ein Video √ºbermittelt. Auch bei der √úbermittlung von E-Mails wird dieses System verwendet. Ein Internet Media Type besteht immer aus einem Haupt- und einem Untertype. Es gibt folgende Haupttypen: Typ\tBedeutungapplication\tanwendungsspezifische Codierungen audio\tAudiodaten image\tGrafiken text\tf√ºr Text video\tf√ºr Videomaterial Wichtige Dateiformate‚Äã Bezeichnung\tDateiendung\tInternet Media Type\tMagische BytesJPEG-Bild\t.jpg / .jpeg\timage/jpeg\tFF D8 FF Portable Network Graphics\t.png\timage/png\t89 50 4E 47 0D 0A 1A 0A ZIP-Datei\t.zip\tapplication/zip\t50 4B 03 04 Word-Datei\t.docx\tapplication/vnd.openxmlformats‚Ä¶\t50 4B 03 04 (ist eigentlich eine ZIP-Datei) Excel-Datei\t.xlsx\tapplication/vnd.openxmlformats‚Ä¶\t50 4B 03 04 (ist eigentlich eine ZIP-Datei) Portable Document Format\t.pdf\tapplication/pdf\t25 50 44 46 2D Textdatei\t.txt\ttext/plain\treine Textdatei (ohne magische Bytes) Webseite\t.html\ttext/html\treine Textdatei (ohne magische Bytes) Python-Programm\t.py\ttext/python\treine Textdatei (ohne magische Bytes) Verlorene Dateiendungen Bei den folgenden Dateien ging die Dateiendung verloren. Finden Sie mit https://hexed.it/ heraus, welche Dateiendung die jeweilige Datei hat, f√ºgen Sie die Dateiendung hinzu und √∂ffnen Sie diese. download","keywords":""},{"title":"3. Rastergrafik","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/raster","content":"3. Rastergrafik Theoretische Speichergr√∂sse‚Äã Die theoretische Speichergr√∂sse einer Rastergrafik wird berechnet, indem die Anzahl Pixel aaa mit der Farbtiefe fff multipliziert wird. Die Farbtiefe gibt an, welche Datenmenge f√ºr die Darstellung einer Farbe ben√∂tigt wird. Die Anzahl Pixel wird aus der Aufl√∂sung, also der Breite bbb und H√∂he hhh des Bildes in Pixel berechnet. F√ºr die Speichergr√∂sse rechnen wird also wie folgt: b‚ãÖh‚ãÖfb\\cdot h\\cdot fb‚ãÖh‚ãÖf Beispiel Ein Bild mit einer Aufl√∂sung von 1920√ó1080 Pixel und der Farbtiefe 3 Byte ben√∂tigt einen Speicherplatz von: 1920‚ãÖ1080‚ãÖ3=6220800‚ÄâB=6.2‚ÄâMB1920\\cdot 1080\\cdot 3 = 6220800 \\,\\text{B} = 6.2 \\,\\text{MB}1920‚ãÖ1080‚ãÖ3=6220800B=6.2MB JPEG-Grafikformat‚Äã Das Grafikformat der Joint Photographic Experts Group ist ein beliebtes Format zu Speicherung von Fotos. Es kann den ben√∂tigten Speicherplatz gegen√ºber der theoretischen Gr√∂sse von Rastergrafiken sehr stark reduzieren. Dazu wird ein komplexer mathematischer Algorithmus verwendet, welcher bewirkt, dass das urspr√ºngliche Bild nicht mehr genau Pixel f√ºr Pixel rekonstruiert werden kann. Deshalb spricht man hier von einer verlustbehafteten Kompression. Der Algorithmus kann durch die Angabe der Qualit√§t in Prozent beeinflusst werden. Die folgenden Bildausschnitte illustrieren, wie die Qualit√§t und die Speichergr√∂sse zusammenh√§ngen: h√∂chste Qualit√§t (162 kB)@ hohe Qualit√§t (42 kB)@ mittlere Qualit√§t (18 kB)@ niedrige Qualit√§t (9 kB)@ An den Bildern wird sichtbar, dass die JPEG-Kompression besonders entlang von R√§ndern St√∂rungen (¬´Artefakte¬ª) verursacht. Bei Fotos f√§llt dies weniger auf. Die folgenden zwei Bilder sind beide mit mittlerer JPEG-Qualit√§t gespeichert worden: JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ JPEG-Grafik 640√ó360 Pixel in mittlerer Qualit√§t@ Das JPEG-Datei eignet sich also besonders, um Fotografien platzsparend zu speichern. PNG-Grafikformat‚Äã Das Portable Network Graphics-Format wird f√ºr verlustfreie Speicherung von Rastergrafiken mit Transparenz verwendet. Es eignet sich beispielsweise f√ºr Bildschirmfotos und Grafiken f√ºr Webseiten oder Computerspiele. Das folgende Beispiel zeigt links einen Baum als PNG-Grafik mit Transparenz gespeichert. Rechts ist das gleiche Bild als JPG-Grafik mit hoher Qualit√§t gespeichert. PNG-Grafik (32 kB)@ JPEG-Grafik (13 kB)@ Durch die Speicherung als JPG-Grafik geht die Transparenz verloren, das Bild kann z.B. nicht mehr auf farbigen Folien verwendet werden. Ausserdem sind JPEG-Artefakte sichtbar. Gr√∂ssenvergleich der Dateiformate‚Äã Die folgende Tabelle zeigt die Dateigr√∂ssen des gleichen Bildes (640√ó360) mit verschiedenen Dateiformaten: Format\tDateigr√∂sse\trelativtheoretische Gr√∂sse\t691 kB\t100% PNG\t146 kB\t21% JPG h√∂chste Qualit√§t\t162 kB\t23% JPG hohe Qualit√§t\t42 kB\t6% JPG mittlere Qualit√§t\t18 kB\t3% JPG tiefe Qualit√§t\t9 kB\t1%","keywords":""},{"title":"2. Farbdarstellung","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/colors","content":"2. Farbdarstellung Farbkan√§le‚Äã F√ºr die digitale Verarbeitung m√ºssen Farben in Zahlen umgewandelt werden. Das geschieht, indem die Farben in verschiedene Komponenten, sogenannte Farbkan√§le aufgeteilt werden. Pro Pixel kann so die Intensit√§t je Farbkanal als Zahl bestimmt werden. Die zwei wichtigsten Ans√§tze, wie diese Aufteilung in verschiedene Kan√§le erfolgt, werden im folgenden vorgestellt. RGB-Farbmodell‚Äã Das RGB-Farbmodell basiert auf der Funktionsweise des menschlichen Auges. Dieses nimmt Farben mit Hilfe von drei Arten von sogenannten Z√§pfchen wahr, die f√ºr Licht unterschiedlicher Wellenl√§ngen empfindlich sind. So werden vom Menschen die Grundfarben Rot, Gr√ºn und Blau wahrgenommen. Farbwahrnehmung des menschlichen Auges@ Diese Eigenschaft des Auges wird bei der additiven Farbdarstellung ausgenutzt, indem sich √ºberlagernde Lichtquellen in den drei Grundfarben Rot, Gr√ºn und Blau verwendet werden. Durch die Regulierung der Helligkeit der einzelnen Lichtquellen k√∂nnen s√§mtliche Farben erzeugt werden. Dieses Farbmodell kommt √ºberall dort zum Einsatz, wo Licht verwendet wird, um ein Bild zu erzeugen, insbesondere bei Bildschirmen und Videoprojektoren (¬´Beamer¬ª). Die Farben auf einem Bildschirm werden erzeugt, indem drei nahe beieinanderliegende Leuchtdioden in den Farben Rot, Gr√ºn und Blau in unterschiedlicher Helligkeit leuchten. Ein solches Trio von Leuchtdioden wird Pixel genannt. Additives Farbmodell@ Pixel auf einem Bildschirm@ Umgekehrt kann man bei einem Bild die Rot-, Gr√ºn- und Blauanteile jedes Bildpunkts bestimmen. Man sagt, dass man das Bild in Rot-, Gr√ºn- und Blaukanal aufteilt: Aufteilung in Rot-, Gr√ºn- und Blaukanal@ Im entsprechenden RGB-Farbsystem wird eine Farbe definiert, indem die Helligkeit der Rot-, Gr√ºn- und Blauanteils durch eine Zahl zwischen 0 und 255 ausgedr√ºckt wird. Um eine Farbe bin√§r darzustellen, werden die bin√§ren Darstellungen der Zahlen f√ºr Rot, Gr√ºn und Blau nacheinander aufgeschrieben. So hat beispielsweise die Farbe mit den RGB-Werten 255, 220, 150 die bin√§re Darstellung 11111111 11011100 10010110. RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) RGBA-Farbmodell‚Äã F√ºr das RGBA-Farbmodell wird das RBG-Farbmodell um einen Kanal erweitert. Dieser heisst Alphakanal und dr√ºckt aus, wie stark die Deckkraft der Farbe ist. Ein Wert von 0 bedeutet gar keine Deckkraft und somit volle Transparenz. Ein maximaler Wert bedeutet maximale Deckkraft und somit keine Transparenz. RGBA Rot 255 Gr√ºn 217 Blau 0 Alpha 0.86 Bin√§r00000000 CSS-Farbergba(255, 217, 0, 0.86) Farben ausprobieren F√ºllen Sie die drei Kreise mit unterschiedlichen Farben - Sie k√∂nnen direkt den hex Wert einsetzen, z.b. color('#3ed92161'). farben.py from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() move(0, 50) circle(100) move(50, -43) circle(100) move(-50, -43) circle(100) CMYK-Farbmodell‚Äã Das CMYK-Farbmodell basiert auf der Weise, wie Gegenst√§nde farbig erscheinen. Ein Gegenstand wird √ºblicherweise mit weissem Licht, also Licht verschiedener Wellenl√§ngen (Rot, Gr√ºn und Blau) angestrahlt. Beispielsweise erscheint ein gelber Gegenstand deshalb in dieser Farbe, weil er blaues Licht absorbiert und rotes und gr√ºnes Licht reflektiert. subtraktives Farbmodell@ Bei der subtraktiven Farbdarstellung werden auf weissem Material die drei Grundfarben Cyan, Magenta (Fuchsia) und Yellow (Gelb) verwendet, welche rotes, gr√ºnes bzw. blaues Licht absorbieren. Zus√§tzlich wird schwarze Farbe (Key-Kanal) verwendet, welche alles Licht absorbiert. Aufteilung in Cyan-, Magenta-, Yellow- und Key-Kanal@ Dieses Farbmodell kommt beim Drucken zum Einsatz. CMYK Cyan 90 % Magenta 70 % Yellow 50 % Key 30 % CSS-Farbergb(0, 0, 0) ‚≠êÔ∏è Umrechnung CMYK ‚Äì RGB F√ºr die Umrechnung einer CMYK-Farbangabe nach RGB wird folgender Formelsatz verwendet: r=(1‚àíc)‚ãÖ(1‚àík)g=(1‚àím)‚ãÖ(1‚àík)b=(1‚àíy)‚ãÖ(1‚àík)\\begin{aligned} r &amp;= (1 - c) \\cdot (1 - k) \\\\ g &amp;= (1 - m) \\cdot (1 - k) \\\\ b &amp;= (1 - y) \\cdot (1 - k) \\\\ \\end{aligned}rgb‚Äã=(1‚àíc)‚ãÖ(1‚àík)=(1‚àím)‚ãÖ(1‚àík)=(1‚àíy)‚ãÖ(1‚àík)‚Äã Dabei wird vorausgesetzt, dass s√§mtliche Werte im Bereich 0 bis 1 liegen. Wenn beispielsweise die CMYK-Werte in Prozent angegeben werden und die RGB-Werte mit einem Byte codiert werden, ergeben sich folgende Formeln: r=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)g=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)b=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)\\begin{aligned} r &amp;= 255 \\cdot (1 - c \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ g &amp;= 255 \\cdot (1 - m \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ b &amp;= 255 \\cdot (1 - y \\cdot 0.01) \\cdot (1 - k \\cdot 0.01) \\\\ \\end{aligned}rgb‚Äã=255‚ãÖ(1‚àíc‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àím‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)=255‚ãÖ(1‚àíy‚ãÖ0.01)‚ãÖ(1‚àík‚ãÖ0.01)‚Äã def sanitize(wert): # Wandelt Prozent-Werte zu Zahlen zwischen 0 und 1 um if wert &gt; 1: return wert / 100 return wert def cmyk2rgb(c, m, y, k): faktor = 1 - sanitize(k) r = (1 - sanitize(c)) * faktor g = (1 - sanitize(m)) * faktor b = (1 - sanitize(y)) * faktor return [r, g, b] print('rgb: ', cmyk2rgb(80, 60, 40, 20)) Farbtiefe‚Äã Die Anzahl Bits oder Bytes, welche insgesamt f√ºr die Speicherung einer Farbe verwendet werden, wird Farbtiefe genannt. Damit wird festgelegt, wie viele unterschiedliche Abstufungen pro Farbkanal dargestellt werden k√∂nnen. Beim RGB-Farbmodell wird √ºblicherweise eine Farbtiefe von 3 Byte oder 24 Bit verwendet. Dies ergibt pro Farbkanal acht Bit, also ein Byte. Somit k√∂nnen 256√ó256√ó256 = 16.7 Millionen unterschiedliche Farben dargestellt werden. Farbmodell\tFarbtiefe\tPixel ‚Üí BytesRGB (True Colour)\t3 Byte\t√ó3 CMYK\t4 Byte\t√ó4 Graustufen\t1 Byte\t√ó1 Schwarzweiss\t1 Bit\t√∑8","keywords":""},{"title":"5. Vektorgrafik","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate-v24/vector","content":"5. Vektorgrafik Eine SVG-Datei ist eine Textdatei, welche ¬´Befehle¬ª enth√§lt, wie Formen gezeichnet werden sollen. Grundstruktur‚Äã Eine SVG-Datei hat folgende Grundstruktur: &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt;&lt;/svg&gt; info Den hier verfassten Code kann auch in eine Datei mit der Dateiendung .svg geschrieben werden und anschliessend bspw. in einem Browser betrachtet werden. Rechtecke‚Äã Das folgende Beispiel stellt die franz√∂sische Flagge dar: Live Editor &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; Ergebnisse Loading... width=&quot;300&quot; legt die Breite des Bildes auf 300 Pixel fest. height=&quot;200&quot; legt die H√∂he des Bildes auf 200 Pixel fest. &lt;rect ...&gt; zeichnet ein Rechteck an den angegebenen Koordinaten mit der angegebenen Breite, H√∂he und Farbe. Deutsche Flagge Erstellen Sie eine SVG-Datei, welche die Deutsche Flagge darstellt. Die Flagge ist 500 Pixel breit, jeder Streifen ist 100 Pixel hoch. Das Rot ist rein (d.h. 255 Rot, 0 Gr√ºn und 0 Blau). Das Gelb hat einen Rotanteil von 255 und einen Gr√ºnanteil von 204. Halten Sie den verwendeten Code separat im untenstehenden Textfeld fest. danger √Ñnderungen im Live-Editor werden nicht gespeichert! Live Editor &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; Ergebnisse Loading... Grundformen‚Äã Auf der folgenden Seite sind die Grundformen von SVG zusammengefasst: SVG-Grundformen Grundformen Erstellen Sie eine neue SVG-Datei und probieren Sie die Grundformen aus. Live Editor &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Grundformen&lt;/desc&gt; &lt;/svg&gt; &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Grundformen&lt;/desc&gt; &lt;/svg&gt; Ergebnisse Loading... Eigene Zeichnung Erstellen Sie mit SVG eine winterliche oder festliche Grafik. Live Editor &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Eigene Zeichnung&lt;/desc&gt; &lt;/svg&gt; &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt; &lt;desc&gt;Eigene Zeichnung&lt;/desc&gt; &lt;/svg&gt; Ergebnisse Loading...","keywords":""},{"title":"1. Grundlagen","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/basics","content":"1. Grundlagen Raster- und Vektorgrafik‚Äã Bei der Speicherung von Grafiken und Bildern im Computer wird zwischen zwei grundlegenden Darstellungsarten unterschieden: der Raster- und der Vektorgrafik. Smiley als Rastergrafik@ Smiley als Vektorgrafik@ Rastergrafik‚Äã Bei einer Rastergrafik wird das Bild in viele kleine Quadrate unterteilt. Jedes Quadrat wird mit genau einer Farbe eingef√§rbt. Diese Quadrate werden Pixel genannt. Die Anzahl Pixel, welche f√ºr eine Rastergrafik verwendet werden, wird als Aufl√∂sung des Bildes bezeichnet. Sie berechnet sich aus der Breite bbb und H√∂he hhh der Grafik in Pixel. Eine Rastergrafik mit hoher Aufl√∂sung hat eine bessere Qualit√§t, ben√∂tigt allerdings auch mehr Speicherplatz. Den theoretischen Speicherbedarf einer Rastergrafik h√§ngt von der Anzahl Pixel und dem verwendeten Farbmodell ab. Farbtiefe‚Äã Die Farbtiefe gibt an, in wie vielen Abstufungen jeder Farbkanal vorliegt. Im interaktiven Tool l√§sst sich die Farbtiefe untersuchen. Farbtiefen Farbabstufungen 2 M√∂gliche Farben8 Ben√∂tigte Bits pro Farbkanal1 Farbtiefe pro Farbkanal1 bit Farbtiefe3 bits 1. Aufgabe: Farbtiefe Erkennen Sie das System, wie die Farbtiefe mit der Anzahl m√∂glicher Farben zusammenh√§ngt? Wie viele Farben sind bei einer Farbabstufung von 4, 8, 16, 128 oder 256 Stufen m√∂glich? Wie viel bits sind f√ºr die Darstellung eines Farbkanals bei 4, 8, 16, 128 oder 256 Abstufungen n√∂tig? SSR F√ºr jedes Pixel werden eine bestimmte Anzahl Bit zur Darstellung der Farben verwendet. Diese Anzahl wird Farbtiefe genannt. Typische Farbtiefen sind: Farbmodell\tFarbtiefe\tPlatzbedarf in ByteFarbe\t3 Byte\tb‚ãÖh‚ãÖ3b \\cdot h \\cdot 3b‚ãÖh‚ãÖ3 Farbe mit Transparenz\t4 Byte\tb‚ãÖh‚ãÖ4b \\cdot h \\cdot 4b‚ãÖh‚ãÖ4 Graustufen\t1 Byte\tb‚ãÖhb \\cdot hb‚ãÖh Schwarzweiss\t1 Bit\tb‚ãÖh‚ãÖ18b \\cdot h \\cdot \\frac{1}{8}b‚ãÖh‚ãÖ81‚Äã Rastergrafiken werden in erster Linie zur Speicherung von Fotos verwendet. Vektorgrafik‚Äã Bei einer Vektorgrafik wird das darzustellende Bild aus geometrischen Objekten wie Linien, Kreise oder Rechtecken zusammengesetzt. Das Prinzip ist dasselbe wie bei der Turtle-Grafik - jeder Pfad wird in einem Koordinatensystem beschrieben. Durch Hinein- oder Herauszoomen kann das Bild beliebig vergr√∂ssert oder verkleinert werden, ohne dass mehr Speicherplatz ben√∂tigt wird. Vektorgrafiken haben also zwei grosse Vorteile gegen√ºber Pixelgrafiken. Erstens ben√∂tigen sie normalerweise deutlich weniger Speicherplatz als eine entsprechende Pixelgrafik, da mit einem Objekt die Farbe von vielen Pixeln festgelegt wird. Zweitens k√∂nnen Vektorgrafiken ohne Qualit√§tseinbusse beliebig vergr√∂ssert und verkleinert werden. Die einzelnen Objekte k√∂nnen einfarbig sein oder einen Farbverlauf haben, sowie teilweise transparent sein. Vektorgrafiken werden deshalb insbesondere f√ºr folgende Anwendungen eingesetzt: Logos Illustrationen Symbole, Icons Schriftarten Strassen- und Landkarten","keywords":""},{"title":"Rastergrafik praktisch","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/uebung","content":"Rastergrafik praktisch 1. JPEG-Format Das folgende Foto hat im Original eine Aufl√∂sung von 6016√ó4016 Pixel mit einer Farbtiefe von 3 Byte. Berechnen Sie die theoretische Speichergr√∂sse in Megabyte. Laden Sie das Originalbild unter dem folgenden Link herunter: Originalbild Finden Sie heraus, wie gross der tats√§chliche Speicherplatz des Bildes in Megabyte ist. Notieren Sie diese Zahl. √ñffnen Sie das Bild in der Foto-App. √Ñndern Sie die Gr√∂sse des Bildes auf 20%. Exportieren Sie das Bild mehrmals nacheinander als JPEG-Datei mit den Qualit√§ten 100%, 75%, 50% und 0%. Vergleichen Sie die Bilder und die Dateigr√∂ssen. Was stellen Sie fest? Island@ TGA-Grafikformat‚Äã Das Targa Image File ist ein veraltetes Dateiformat, welches Pixeldaten unkomprimiert speichert. Deshalb k√∂nnen TGA-Dateien mit dem HexEd.it betrachtet und bearbeitet werden. Der Dateikopf einer TGA-Datei enth√§lt Informationen dazu, wie die Datei aufgebaut ist. Byte(s)\tBedeutung\tBeispiel1\tL√§nge der Bild-ID\t0 2\tFarbpalette vorhanden?\t0 3\tBildtyp\t2 4 - 8\tFarbpalette\t0 0 0 9 - 12\tKoordinaten\t0 0 0 13 - 14\tBreite\t10 00 15 - 16\tH√∂he\t10 00 17\tFarbaufl√∂sung\t18 18\tAlphakanal\t20 Am wichtigsten sind die Felder ¬´Breite¬ª und ¬´H√∂he¬ª, welche die Dimension des Bildes angeben. Dabei sind die beiden Bytes vertauscht. Um die korrekte Zahl zu erhalten, m√ºssen sie vertauscht und dann als Bin√§rzahl interpretiert werden. TGA-Datei Laden Sie die folgende TGA-Datei herunter: Vorlage √ñffnen Sie die Datei in HexEd.it: HexEd.it Laden Sie die ge√§nderte Datei auf den Computer und √∂ffnen Sie es.","keywords":""},{"title":"5. Vektorgrafik","type":0,"sectionRef":"#","url":"/Codes-and-Data/Grafikformate/vector","content":"5. Vektorgrafik Eine SVG-Datei ist eine Textdatei, welche ¬´Befehle¬ª enth√§lt, wie Formen gezeichnet werden sollen. Grundstruktur‚Äã Eine SVG-Datei hat folgende Grundstruktur: &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt;&lt;/svg&gt; Vorbereitung √ñffnen Sie in den Texteditor. Kopieren Sie die Grundstruktur in den Texteditor. Speichern Sie die Datei unter dem Namen Aufgabe.svg. Rechtecke‚Äã Das folgende Beispiel stellt die franz√∂sische Flagge dar: &lt;svg width=&quot;300&quot; height=&quot;200&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt; &lt;desc&gt;Flagge Frankreichs&lt;/desc&gt; &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(0, 85, 164)&quot; /&gt; &lt;rect x=&quot;100&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(255, 255, 255)&quot; /&gt; &lt;rect x=&quot;200&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;200&quot; fill=&quot;rgb(239, 69, 49)&quot; /&gt; &lt;/svg&gt; width=&quot;300&quot; legt die Breite des Bildes auf 300 Pixel fest. height=&quot;200&quot; legt die H√∂he des Bildes auf 200 Pixel fest. &lt;rect ...&gt; zeichnet ein Rechteck an den angegebenen Koordinaten mit der angegebenen Breite, H√∂he und Farbe. Deutsche Flagge Erstellen Sie eine SVG-Datei, welche die Deutsche Flagge darstellt. Die Flagge ist 500 Pixel breit, jeder Streifen ist 100 Pixel hoch. Das Rot ist rein (d.h. 255 Rot, 0 Gr√ºn und 0 Blau). Das Gelb hat einen Rotanteil von 255 und einen Gr√ºnanteil von 204. Grundformen‚Äã Auf der folgenden Seite sind die Grundformen von SVG zusammengefasst: SVG-Grundformen Grundformen Erstellen Sie eine neue SVG-Datei und probieren Sie die Grundformen aus. Eigene Zeichnung Erstellen Sie mit SVG eine winterliche oder festliche Grafik.","keywords":""},{"title":"Lernziele Codes und Daten","type":0,"sectionRef":"#","url":"/Codes-and-Data/Lernziele","content":"Lernziele Codes und Daten Pr√ºfung Die Pr√ºfung findet auf Papier statt Erlaubte Hilfsmittel: Taschenrechner (Codierungs-Tabellen werden zur Verf√ºgung gestellt) Gewichtung der Note: 1 Zeit: 60 Minuten Codes, Daten und Informationen Sie kennen die Begriffe &quot;Code&quot;, &quot;Codieren&quot; und &quot;Decodieren&quot;, k√∂nnen diese Begriffe in eigenen Worten definieren und identifizieren Codes in ihrem Alltag. Sie verstehen, dass es zwischen Daten und Informationen Unterschiede gibt, die Sie selber aufzeigen k√∂nnen. Zahlensysteme Sie wissen was ein Stellenwertsystem ist und wie es aufgebaut ist. Sie transformieren Bin√§re Zahlen zu Dezimalzahlen Sie transformieren Dezimalzahlen zu Bin√§rzahlen Zeichencodierung Sie k√∂nnen bei einer gegebenen Codierung (Latin1, UTF8, Sehstern...) Text Codieren und auch wieder Decodieren. Sie sind sich der Schwierigkeiten bei der √úbermittlung von bin√§ren Daten bewusst und kennen Strategien, wie diese behoben werden k√∂nnen. Farbe und Grafikformate Sie k√∂nnen die Unterschiede zwischen Vektor- und Rastergrafiken aufzeigen. Sie wissen, wie Farben digital abgespeichert werden und interpretieren Farben als RGB und RGBA Werte. Sie sind sich bewusst, dass mit Qualit√§tsverlust die Gr√∂sse von Bildern reduziert werden kann. Kompression und Informationsgehalt Sie kennen den Huffman-Algorithmus und k√∂nnen anhand eines Textes einen Huffman-Baum aufbauen, oder anhand eines solchen Baumes Text decodieren. Sie k√∂nnen argumentieren, wann die Huffman-Codierung eingesetzt wird. Sie k√∂nnen Berechnen, wie viele Datenbits bei der Anwendung der Huffman-Codierung eingespart werden k√∂nnen. Anwendungen Sie kennen verschiedene Anwendungen von Codes im Alltag Sie erkennen die grundlegenden Elemente eines QR-Codes Sie wissen, wie der Morsecode aufgebaut ist. (Es wird nicht erwartet, dass Sie die Codierungstabelle auswendig kennen) Sie wissen, wie eine Fehlererkennung erzeugt werden kann (Parit√§tsbit) Sie wissen, was wie ein EAN-13 Code aufgebaut ist und wie die Pr√ºfsumme berechnet wird. Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"3D Schl√ºsselanh√§nger","type":0,"sectionRef":"#","url":"/Codes-and-Data/QR-Codes/qr","content":"3D Schl√ºsselanh√§nger Mit einem 3D-Drucker lassen sich dreidimensionale Objekte erzeugen. Dabei arbeiten alle g√§ngigen Druckverfahren schichtweise - das Objekt wird aus mehreren Schichten zusammengesetzt, wobei eine einzelne Schicht zweidimensional auf die darunterliegende Schicht aufgetragen wird. @ @ @ @ Um ein Objekt zu drucken, muss in einem ersten Schritt ein 3D-Modell erstellt werden und in einem zweiten Schritt muss dieses Modell in einen konkreten Druck-Ablaufplan erstellt werden, welcher Schicht-f√ºr-Schicht vorgibt, wo sich der Druck-Kopf durchbewegen soll. Dazu werden zwei Tools gebraucht: 3D Modell erstellen und bearbeiten mit tinkercad.com Druck-Ablaufplan Plan f√ºr das Modell berechnen und die Farben ausw√§hlen mit dem Slicer QR Code 3D-Modell‚Äã Das Grundger√ºst f√ºr den QR-Code kann direkt √ºber die Webapplikation von https://printer.tools/qrcode2stl/ erzeugt werden. QR Code3D ModellSpeichern QR Code Options Der heruntergeladene .zip-Ordner enth√§lt die einzelnen Teile des 3D-Modells, so auch den QR-Code selbst: qrcode-1645205191753.stl: Das Modell des QR-Codes Slicer installieren‚Äã Der Prusa Slicer wird f√ºr den 3D-Druck an der Schule verwendet. Laden Sie ihn herunter und installieren Sie ihn: https://www.prusa3d.com/de/page/prusaslicer_424/ 1.2.‚ö†Ô∏è3.4.5.6.7.8.9.‚ö†Ô∏è10.‚ö†Ô∏è11. Installieren Offene Kanten Leider gibt es unterschiedliche Konventionen f√ºr die Erzeugung von 3D-Objektmodellen. Obwohl unser erzeugter QR-Code auf den ersten Blick gut aussieht, wurden bei der Erzeugung nicht alle Kanten miteinander verbunden, so dass einige Fl√§chen im Modell nicht abgeschlossen sind. Dies kann automatisch behoben werden: WindowsmacOS Die heruntergeladene Datei im slicer √∂ffnen. Doppelklicken auf das Symbol Das Dateiformat √§ndert sich durch die Reparatur zu .3mf. Um im n√§chsten Schritt das 3D-Modell selber anzupassen, muss das Dateiformat aber wieder auf .stl ge√§ndert werden. Dies gelingt mit dem slicer, welcher .3mf in .stl Dateien konvertieren kann: 3D-Modell erstellen: Tinkercad‚Äã Das geflickte Modell kann nun in Tinkercad weiter bearbeitet werden. Melden Sie sich bei Ihrer Klasse mit ihrem &quot;Nickname&quot; bestehend aus vorname.nachname an. 24f25h https://www.tinkercad.com/joinclass/1W8JWGIB7DWG 1.2.‚ö†Ô∏è3.4.5.6.7.8.9. Das im Slicer geflickte und zu .stl exportierte Modell kann nun in Tinkercad weiter bearbeitet werden. Dazu muss es importiert werden. Die Standardeinstellungen beim Importieren passen. Import Druck vorbereiten im Slicer‚Äã Im letzten Schritt wird nun der Druck vorbereitet. Das exportierte .stl Modell wird mit dem Prusa Slicer ge√∂ffnet. Nun k√∂nnen die unterschiedlichen Fl√§chen mit dem gew√ºnschten Filament belegt werden: Schliesslich kann das Modell &quot;geslicet&quot; werden und als G-Code f√ºr den Drucker heruntergeladen werden. .3mf Dateien zusammenf√ºgen Damit mehrere Modelle in einem Umgang gedruckt werden k√∂nnen, m√ºssen die entsprechenden Modelle zusammengef√ºgt werden. Dazu muss das Projekt im .3mf-Format gespeichert werden. Diejenige Person, welche alle Modelle zusammenf√ºgt, importiert die entsprechenden .3mf Dateien der anderen Gruppen und positioniert die Objekte auf der Druckplatte ohne √úberlagerung.","keywords":""},{"title":"Computer","type":0,"sectionRef":"#","url":"/Computer","content":"Computer Computer sind unglaublich schnell, genau und dumm. Menschen sind unglaublich langsam, ungenau und brillant. Zusammen sind sie m√§chtig jenseits aller Vorstellungskraft. ‚Äì Albert Einstein","keywords":""},{"title":"2. Bussystem","type":0,"sectionRef":"#","url":"/Computer/architecture/bus","content":"2. Bussystem Witz des Tages by 24i@ In der Informatik ist ein Bus ein System zur Daten√ºbertragung zwischen mehreren Komponenten √ºber einen gemeinsamen √úbertragungsweg. Findet eine Daten√ºbertragung zwischen zwei Komponenten statt, so m√ºssen die √ºbrigen Komponenten schweigen, da sie sich sonst gegenseitig st√∂ren w√ºrden.1 Daten√ºbertragung mit Bus Daten√ºbertragung ohne Bus Busse werden verwendet, um die Komplexit√§t der Hardware zu reduzieren. Wenn alle Komponenten direkt miteinander kommunizieren, muss zwischen allen Komponenten eine Datenleitung vorhanden sein. Wenn im Bild oben rechts eine f√ºnfte Komponente hinzukommt, m√ºssen f√ºnf neue Datenleitungen gezogen werden. Wenn ein Bus verwendet wird, muss eine neue Komponente nur am Bus angeschlossen werden. Beispiele‚Äã Systembus in einem Computer Serial AT Attachment (SATA, f√ºr Computerfestplatten) Universal Serial Bus (USB) Take-Home Message aus CPU-Rollenspiel Quelle: Wikipedia: Bus (Datenverarbeitung) ‚Ü©","keywords":""},{"title":"3. Prozessor","type":0,"sectionRef":"#","url":"/Computer/architecture/cpu","content":"3. Prozessor Take-Home Message aus CPU-Rollenspiel","keywords":""},{"title":"notes.nosync","type":0,"sectionRef":"#","url":"/Computer/architecture/notes.nosync","content":"notes.nosync Sendung mit der Maus - Wie funktioniert ein Computer (Nanoo.tv)","keywords":""},{"title":"1. Grundlagen","type":0,"sectionRef":"#","url":"/Computer/basics","content":"1. Grundlagen Definition ¬´Computer¬ª‚Äã Ein Computer oder Rechner ist ein Ger√§t, das mittels programmierbarer Rechenvorschriften (Algorithmen) Daten verarbeitet. ‚Äì Wikipedia Komponenten eines COmputer@","keywords":""},{"title":"4. Von-Neumann-Zyklus","type":0,"sectionRef":"#","url":"/Computer/architecture/cycle","content":"4. Von-Neumann-Zyklus Der Prozessor f√ºhrt immer wieder den gleichen zyklischen Ablauf aus. Dieser Ablauf wird auch Von-Neumann-Zyklus genannt und besteht aus folgenden Schritten: 1. Befehl laden‚Äã Der n√§chste Befehl wird aus dem Speicher in das Befehlsregister geladen. Dazu wird die Adresse des n√§chsten Befehls vom Programmz√§hler an das Speicherwerk √ºbertragen. Der Befehl wird aus dem Speicher √ºber den Datenbus in das Befehlsregister √ºbertragen. Anschliessend wird der Programmz√§hler um eins erh√∂ht. 2. Befehl decodieren‚Äã Nun wird der Befehl, welcher in das Befehlsregister geladen worden ist, decodiert. Das Steuerwerk √ºbersetzt also einen Code zu einer Anweisung und konfiguriert dann das Rechenwerk so, dass die gew√ºnschte Operation auch ausgef√ºhrt wird. Beispiel Addition: Decodieren: Das Rechenwerk sieht den Code 001000 und weiss (decodiert), dass dies der Befehl f√ºr die Addition ist. Konfiguration: Das Rechenwerk konfiguriert nun das Rechenwerk so, dass es zwei Zahlen miteinander Addiert. 3. Befehl ausf√ºhren‚Äã Schliesslich wird der eigentliche Befehl ausgef√ºhrt, indem das Dekodierwerk die Steuersignale an die Komponenten ausl√∂st. Im n√§chsten Abschnitt werden einige typische Befehle erl√§utert. Take-Home Message aus CPU-Rollenspiel Wie schnell war ein schneller/langsamer/durchschnittlicher Zyklus in der Menschen-CPU? Wie viele Zyklen waren f√ºr die Ausf√ºhrung eines simplen Programms n√∂tig?","keywords":""},{"title":"9. Ebenen","type":0,"sectionRef":"#","url":"/Computer/basics/Ebenen","content":"9. Ebenen Wie die Netzwerke kann auch der Computer selber auf verschiedenen Ebenen betrachtet werden. Hardware-Ebenen@ Elektronik‚Äã Auf der Ebene der Elektronik werden die Zust√§nde 0 und 1 durch unterschiedliche Spannungen dargestellt. Das grundlegende Bauelement f√ºr digitale Schaltungen ist der Transistor. Transistoren Sehen Sie sich das obige Video an. Und beschreiben Sie in eigenen Worten: welche Analogie aus dem Alltag passt zum Transistor? wozu wird ein Transistor bei Computern eingesetzt? Digitale Logik‚Äã In der digitalen Logik werden aus den Grundelementen (logische Gatter) komplexe Schaltungen aufgebaut, welche z.B. Zahlen addieren oder Werte speichern k√∂nnen. Rechnerarchitektur‚Äã Die Rechnerarchitektur legt fest, wie verschiedene Bauelemente (wie z.B. Rechenwerk und Speicher) miteinander verkn√ºpft werden und in welcher zeitlichen Abfolge Daten untereinander ausgetauscht werden. Daraus ergeben sich die grundlegenden Befehle (Maschinencode), welche der Computer versteht. Betriebssystem‚Äã Das Betriebssystem kontrolliert und koordiniert den Zugriff auf die Hardware f√ºr die verschiedenen Anwendungen, welche auf dem Computer ausgef√ºhrt werden. Es stellt grundlegende Funktionen wie die Dateiverwaltung und Netzwerkkommunikation zu Verf√ºgung. Das Betriebssystem enth√§lt viel Programmcode, der speziell f√ºr die eingesetzte Rechnerarchitektur und -hardware geschrieben ist. Anwendungen‚Äã Die Anwendungen unterst√ºtzen den/die Benutzer/in in der t√§glichen Arbeit. Sie werden in h√∂heren Programmiersprachen geschrieben, d.h. sie brauchen sich dank des Betriebssystems nicht um die eingesetzte Hardware zu k√ºmmern. Solche Programme k√∂nnen vom Prozessor nicht direkt ausgef√ºhrt, sondern m√ºssen zuerst noch von einem Compiler in Maschinencode √ºbersetzt werden. Dies erleichtert uns Menschen die Arbeit beim Programmieren, da der Programmcode nicht an bestimmte Hardware und Architektur gebunden und damit allgemeing√ºltiger und einfacher ist.","keywords":""},{"title":"5. Befehlssatz","type":0,"sectionRef":"#","url":"/Computer/architecture/insturction-set","content":"5. Befehlssatz Der Befehlssatz ist die komplette Sammlung von Befehlen, welche ein Prozessor versteht und ausf√ºhren kann. Im folgenden werden einige typische Befehle betrachtet. Wert laden‚Äã Um einen Wert bearbeiten zu k√∂nnen, muss dieser erst aus dem Hauptspeicher geladen werden. Mit einem Lade-Befehl wird ein Wert aus dem Speicher in das Register des Rechenwerks geladen. Wert speichern‚Äã Wenn im Rechenwerk ein Resultat berechnet wurde, muss es wieder in den Speicher geschrieben werden. Das geschieht mit diesem Befehl. Addieren‚Äã Im Rechenwerk k√∂nnen arithmetische Operationen durchgef√ºhrt werden. Es k√∂nnen also zwei Zahlen addiert, subtrahiert, multipliziert oder dividiert werden. Eingabe‚Äã Ein Wert kann aus einem Eingabeger√§t in den Hauptspeicher eingelesen werden. Ausgabe‚Äã Ein Wert kann aus dem Hauptspeicher auf ein Ausgabeger√§t ausgegeben werden. Take-Home Message aus CPU-Rollenspiel","keywords":""},{"title":"1 Von-Neumann-Architektur","type":0,"sectionRef":"#","url":"/Computer/architecture/von-neumann","content":"1 Von-Neumann-Architektur Die Rechnerarchitektur beschreibt die interne Organisation eines Computers. Es gibt zwei verbreitete Architekturen. Beide sind gegen Ende des zweiten Weltkriegs entstanden, als die ersten elektronischen Computer entwickelt worden sind: Von Neumann-Architektur Harvard-Architeketur Von Neumann-Architektur‚Äã Der Mathematiker John von Neumann hat 1945 eine Modellarchitektur f√ºr Computer vorgestellt, welche bis heute als Grundlage f√ºr die Entwicklung von Computern dient. John von Neumann@ Die Von-Neumann-Architektur hat folgende Eigenschaften: Die Maschine ist nicht auf eine bestimmte Aufgabe zugeschnitten. Zur L√∂sung einer Aufgabe dient ein austauschbares Programm. Programme und Daten werden im Speicher abgelegt. Ein Programm besteht aus einer Abfolge von einfachen Befehlen. Zu jedem Zeitpunkt wird genau ein Befehl ausgef√ºhrt, der genau einen Datenwert √§ndern kann. Von-Neumann-Architektur Ein Von-Neumann-Computer besteht aus folgenden Komponenten: Das Rechenwerk f√ºhrt numerische und logische Berechnungen durch (bspw. eine bin√§re Addition). Das Steuerwerk steuert die Befehlsverarbeitung im Computer. Das Speicher speichert Befehle und Daten. Das Ein- und Ausgabewerk dient der Kommunikation mit der Aussenwelt. Heute sind das Rechenwerk und das Steuerwerk normalerweise im Prozessor (engl. central processing unit, CPU) zusammengefasst. Alle Komponenten sind √ºber ein Bussystem miteinander verbunden. Weit verbreitet Die Von-Neumann-Architektur ist heute in den meisten Computern Standard ‚Äì insbesondere bei Personalcomputern und Servern. ‚≠ê Harvard-Architektur‚Äã Der Name ¬´Harvard-Architektur¬ª hat seinen Ursprung im elektromechanischen Computer Mark I, der in Kooperation zwischen IBM und der Harvard-Universit√§t entwickelt und 1944 in Betrieb genommen wurde. Im Unterschied zur Von-Neumann-Architektur sind bei der Harvard-Architektur Daten und Befehle getrennt. Dies f√ºhrt zu zwei Vorteilen: Daten k√∂nnen schneller verarbeitet werden. Bei der Von-Neumann-Architektur wird der Bus durch das Laden von Befehlen aus dem Speicher blockiert. Programme sind besser vor Manipulationen und Fehlern gesch√ºtzt. Harvard-Architektur Als Nachteil ist zu erw√§hnen, dass im Vergleich zur Von-Neumann-Architektur die Hardwarekosten h√∂her sind.","keywords":""},{"title":"3. Prozessor (CPU)","type":0,"sectionRef":"#","url":"/Computer/basics/cpu","content":"3. Prozessor (CPU) Der Prozessor ist f√ºr die Verarbeitung von Daten im Computer zust√§ndig. Ausserdem √ºberwacht und steuert er den Ablauf von Programmen. Moderne Prozessoren enthalten mehrere Kerne, welche unabh√§ngig voneinander Programme ausf√ºhren und Berechnungen vornehmen k√∂nnen. Kenngr√∂ssen‚Äã F√ºr den Prozessor gibt es folgende wichtige Kenngr√∂ssen: Die Anzahl Kerne gibt an, wie viele Berechnungen ein Prozessor gleichzeitig, also parallel, ausf√ºhren kann. Die Taktfrequenz gibt an, wie schnell der Prozessor Berechnungen durchf√ºhren kann. Sie wird in der Einheit Hertz angegeben, was ¬´pro Sekunde¬ª bedeutet. 2.1 GHz sind &quot;2.1 Gigahertz&quot;, also 2'100'000'000 Hz und somit 2.1 Milliarden Operationen, die pro Sekunde berechnet werden k√∂nnen. AMD Ryzen-Prozessor@ Pins auf Unterseite@ ge√∂ffneter Prozessor@ Kerne - wichtig f√ºr parallele Berechnungen‚Äã Jeder Kern einer CPU kann unabh√§ngig von den anderen Kernen Berechnungen durchf√ºhren. Die Herausforderung dabei ist, dass die einzelnen Kerne nur mit grossen H√ºrden Zwischen- oder Endresultate austauschen k√∂nnen. Deshalb sind mehr Kerne nicht immer besser. Es kommt darauf an, wie die einzelnen Kerne genutzt werden. Aufgaben‚Äã Der Prozessor hat zwei Hauptaufgaben. Einerseits kontrolliert er die Ausf√ºhrung der Programmanweisungen. Dabei steuert er alle anderen Komponenten des Computers. Andererseits verarbeitet der Prozessor Daten. Das heisst, er f√ºhrt mathematische oder logische Operationen mit bin√§ren Zahlen aus, beispielsweise: Vergleichen Addieren Multiplizieren Bits um eine Stelle nach links schieben Im Kapitel Rechnerarchitektur wird die Funktionsweise des Prozessors genauer erkl√§rt. Weitere Funktionen‚Äã In moderne Prozessor-Chips werden auch weitere Funktionen integriert, welche fr√ºher von separaten Bauteilen √ºbernommen wurden. Moderne Desktop-Prozessoren enthalten normalerweise eine Grafikeinheit, welche die Darstellung von Text, Bild und Video auf einem Bildschirm √ºbernimmt. Bei Prozessoren f√ºr Mobiltelefone werden √ºblicherweise spezialisierte Funktionen f√ºr GPS, W-LAN, Mobilfunk und Bluetooth auf dem Chip integriert. Dabei spricht man von einem Ein-Chip-System oder SoC (engl. system on a chip). Meine CPU Welche Merkmale weist der Prozessor Ihres Laptops auf (Modell, Taktfrequenz)? Vergleichen Sie Ihre Werte mit herk√∂mmlichen Prozessoren f√ºr Desktop-Computer auf Digitec. Beschr√§nken Sie sich dabei auf Prozessoren von den beiden gr√∂ssten CPU-Herstellern AMD und Intel. üëâ Digitec Prozessoren Welche Taktrate hat die g√ºnstigste/teuerste CPU, wenn die CPU dieselbe Anzahl Kerne hat wie Ihr Ger√§t? Worin k√∂nnte der grosse Unterschied bei den Taktraten zwischen Laptop- und Desktop-Computer liegen?","keywords":""},{"title":"2. EVAS-Prinzip","type":0,"sectionRef":"#","url":"/Computer/basics/EVAS","content":"2. EVAS-Prinzip Das EVAS-Prinzip beschreibt ein Grundprinzip der Datenverarbeitung. Die Abk√ºrzung leitet sich aus den ersten Buchstaben der Begriffe Eingabe, Verarbeitung, Ausgabe und Speicherung ab. Daten m√ºssen zuerst in den Computer gelangen. Dazu ist ein Eingabeger√§t notwendig, welches Informationen aus der Umwelt in digitale Daten umwandelt. Diese Informationen k√∂nnen Bewegungen oder Aktionen der Benutzer:innen, Messwerte oder digitale Nachrichten eines anderen Computers sein. Im Ger√§t werden die Daten gespeichert und verarbeitet. Ein Ausgabeger√§t wandelt Daten wieder in Informationen f√ºr die Umwelt um. Diese k√∂nnen beispielsweise visuell oder akustisch sein, um die Sinne der Benutzer:innen anzusprechen. Es kann sich aber auch um digitale Nachrichten handeln, die an andere Computer weitergeleitet werden. Ein- und Ausgabeger√§te‚Äã Typische Ein- und Ausgabeger√§te f√ºr Computer sind: Tastatur@ Maus@ Webcam@ Drucker@ Bildschirm@ Lautsprecher@ Aufgabe Welche M√∂glichkeiten f√ºr die Ein- und Ausgabe von Daten hat Ihr Smartphone? Versuchen Sie, m√∂glichst alle aufzuschreiben. Bilden Sie dabei folgende Kategorien: nur Eingabeger√§t Ein- und Ausgabeger√§t nur Ausgabeger√§t Hilfreiche App: üëâ PhyPhox","keywords":""},{"title":"5. Grafikkarte","type":0,"sectionRef":"#","url":"/Computer/basics/Grafikkarte","content":"5. Grafikkarte Die Grafikkarte ist neben dem Prozessor die zweite wichtige Komponente, welche im Computer f√ºr die Verarbeitung von Daten zust√§ndig ist. Grafikkarten haben folgende Aufgaben: Erzeugen einer Pixelgrafik aus einer anderen Darstellungsform, Speichern dieser Pixelgrafik, des Bildschirminhalts, Steuerung des Bildschirms, damit er den Bildschirminhalt anzeigt. Kenngr√∂ssen‚Äã F√ºr Grafikkarten gibt es drei wichtige Kenngr√∂ssen: Die maximale Aufl√∂sung, also die Anzahl der Bildpunkte (z.B. 7680√ó4320). Die Taktfrequenz gibt an, wie schnell der Grafikkarten-Prozessor Berechnungen durchf√ºhren kann. Sie wird in der Einheit Hertz angegeben, was ¬´pro Sekunde¬ª bedeutet. Die Grafikkarte hat also auch einen eigenen leistungsf√§higen Prozessor. Die Speicherkapazit√§t ist die Datenmenge, welcher der Speicher maximal aufnehmen kann. Sie wird in Byte angegeben. Die Grafikkarte besitzt also auch einen eigenen Arbeitsspeicher. Im Gegensatz zu den CPU Prozessoren, welche in der Regel wenige (&lt; 32) Kerne aufweisen, ist eine Grafikkarte hochgradig auf parallelisierte Berechnungen ausgelegt und besitzt entsprechend viele Kerne. Sequentiell vs. Parallel Schauen Sie sich das folgenden Video an und versuchen Sie zu verstehen, was die Unterschiede zwischen sequentieller und paralleler Verarbeitung sind. Halten Sie Ihre Erkenntnisse fest. Hercules-Grafikkarte@ Hercules Graphics Card‚Äã Hochaufl√∂sende monochrome Grafikkarte (720√ó348 Pixel, 1 Bit Farbe) mit 64 KB Video-RAM aus dem Jahr 1982. NVIDIA RTX 3080 Ti Trinity-Grafikkarte NVIDIA RTX 3080 Ti Trinity‚Äã Aktuelle Grafikkarte aus dem Jahr 2022 mit einer maximalen Aufl√∂sung von 7680√ó4320 Pixel pro Bildschirm, 12 GB Video-RAM und Unterst√ºtzung von Echtzeit-Raytracing. Fr√ºhe Grafikkarten konnten nur aus Text selbst√§ndig eine Pixelgrafik erzeugen. Um etwas anderes auf dem Bildschirm darzustellen, mussten Programme oder das Betriebssystem die Grafik selbst berechnen und pixelweise an die Grafikkarte √ºbermitteln. Mit der Zeit konnten neuere Grafikkarten immer mehr Funktionen der Bilderzeugung √ºbernehmen: 2D-Rasterung: Zeichnen von Linien, Rechtecken und Kreisen, 3D-Rasterung: Verdeckungsberechnung und Lichtsimulation, 3D-Raytracing: fotorealistische Berechnung basierend auf der Simulation von Lichtstrahlen. Ausserdem werden heute Grafikkarten auch f√ºr aufw√§ndige Berechnungen in anderen Bereichen eingesetzt, z.B. f√ºr neuronale Netze oder f√ºr das Mining von Kryptow√§hrungen. ‚≠êÔ∏è Raytracing Was ist Raytracing und was bringt es mir? Steuerung des Bildschirms‚Äã F√ºr die Steuerung des Bildschirms gibt es vier aktuelle Technologien. Display Port (DP)@ Digital Visual Interface (DVI)@ High-Definition Multimedia Interface (HDMI)@ Video Graphics Array (VGA)@ USB-C Heutige Laptops haben oft keine separaten Ausg√§nge f√ºr Bildschirme - dank USB-C. Die verwendete Technologie sowie die Protokolle bleiben aber dieselben, weshalb ohne weiteres Adapter f√ºr entsprechende Technologien (DP, DVI, HDMI, VGA) angeschlossen werden k√∂nnen. USB-C Displayadapter Aufgabe Grafikkarte: Rendering Recherchieren Sie den Begriff &quot;Rendering&quot;. Welche Aufgaben erfordern eine hohe Rendering-Leistung? F√ºr welche Zielgruppen nebst Gamern sind gute Grafikkarten essenziell?","keywords":""},{"title":"1. Computerkategorien","type":0,"sectionRef":"#","url":"/Computer/basics/kategorien","content":"1. Computerkategorien Computer gibt es in sehr unterschiedlichen Gr√∂ssen. Supercomputer f√ºllen grosse Hallen. Deutlich kleiner sind allt√§gliche Computersysteme wie Laptops oder Smartphones. Die kleinsten Computersysteme finden auf einem einzigen Mikrochip platz und werden in vielen allt√§glichen Ger√§ten verbaut. Sie k√∂nnen grob in folgende sieben Kategorien unterteilt werden1: Typ\tAnwendungsbeispiel\tPreis (USD)Wegwerfcomputer\tKarten, RFID-Tags\t0.5 Mikrocontroller\tUhren, Autos, Ger√§te\t5 Mobile Computer, Spielkonsolen\tHeimvideospiele und Smartphones\t50 Personalcomputer (PC)\tDesktop- oder Notebook-Computer\t500 Server\tNetzwerkserver\t5'000 Grossrechner (Mainframe)\tZahlungsverarbeitung in einer Bank\t5'000'000 Supercomputer\tForschung\t100'000'000 Smart Card@ Arduino Lilypad@ Smartphone@ Notebook@ Server@ Kei Supercomputer@ Andrew S. Tanenbaum und Todd Austin: Rechnerarchitektur, 2014, 6. Auflage, S. 49 ‚Ü©","keywords":""},{"title":"6. Netzwerkkarte","type":0,"sectionRef":"#","url":"/Computer/basics/Netzwerkkarte","content":"6. Netzwerkkarte Ein Computer ohne M√∂glichkeiten zur Kommunikation ist nicht mehr vorstellbar. Damit ein Computer sich in ein LAN einbinden kann, ben√∂tigt er eine Netzwerkkarte ‚Äì sei es eine mit Kabelanschluss oder eine drahtlose f√ºr die Teilnahme in einem WLAN. Kenngr√∂ssen‚Äã F√ºr die Netzwerkkarte gibt es folgende wichtige Kenngr√∂sse: Die maximale √úbertragungsrate gibt an, wie viele Daten pro Sekunde (im Idealfall) √ºbertragen werden k√∂nnen. Sie wird in der Einheit Mbps oder Gbps angegeben, was ¬´Mega- resp. Gigabit pro Sekunde¬ª bedeutet. Gemessen wird hier also nicht in Byte sondern in Bit, was etwas ungew√∂hnlich ist. Netzwerkkarte‚Äã Heute ist die Netzwerkkarte meist direkt auf dem Mainboard integriert und muss nicht als Steckkarte hinzugef√ºgt werden. Allerdings kann ein Computer (insbesondere Server) so immer noch aufger√ºstet und mit mehreren Netzwerkkarten ausger√ºstet werden. Netzwerkkarte mit RJ45-Buchse@ Netzwerkkabel mit RJ45-Stecker@ Drahtlose Netzwerkkarte‚Äã Netzwerkkarten zur Verbindung mit einem drahtlosen Netzwerk (WLAN) gibt es in etlichen Ausf√ºhrungen. Einerseits kann sie in PCs und Server wie andere Steckkarten eingebaut werden, andererseits gibt es sie in kleineren Ausf√ºhrungen f√ºr Notebooks oder sogar als USB-Stecker im Miniformat. Drahtlose Netzwerkkarte mit Antenne f√ºr PCs@ Drahtlose Netzwerkkarte f√ºr Notebooks@ Drahtlose Netzwerkkarte f√ºr USB-Anschluss@ Netzwerkkarte Sie wollen f√ºr die Ferien einige Filme von Netflix offline verf√ºgbar machen und m√ºssen insgesamt 10 GB Daten herunterladen. Ihr WLAN kann in ihr Zimmer maximal 150 Mbps √ºbertragen. Wie viel Zeit gewinnen Sie, wenn Sie aufstehen um das Ger√§t per Ethernet an Ihren Glasfaser-Router mit 1 Gbps anschliessen?* Berechnen Sie: die Download Dauer per WLAN die Download Dauer per Ethernet den Zeitgewinn * Die Voraussetzung f√ºr diesen Vergleich w√§re nat√ºrlich, dass die Netflix-Server die Filme auch effektiv mit 1Gbps bereitstellen w√ºrden.","keywords":""},{"title":"7. Hauptplatine","type":0,"sectionRef":"#","url":"/Computer/basics/Mainboard","content":"7. Hauptplatine Der Grundbestandteil eines jeden Computers ist seine Hauptplatine (engl. mainbaord oder auch motherboard genannt). Die Elektronik auf der Hauptplatine verbindet Prozessor, RAM, etliche weitere verbaute Chips und s√§mtliche Peripherie, die √ºber die zahlreichen Anschl√ºssen mit dem Computer verbunden werden kann. ASRock Mainboard@ Aufbau‚Äã Hauptplatinen von modernen Computern sind stets √§hnlich aufgebaut, sie bestehen aus den beiden wichtigen Komponenten Northbridge und Southbridge, die gemeinsam als Chipsatz bezeichnet werden. Im nachfolgenden Schema sieht man gut, dass √ºber die Northbridge diejenigen Computerkomponenten verbunden sind, die besonders schnell miteinander kommunizieren m√ºssen: Prozessor, RAM und allenfalls schnelle Grafikkarten. √úber die Southbridge werden die restlichen Komponenten verbunden, so zum Beispiel Festplatten, Erweiterungskarten (wie z.B. Grafik- oder Netzwerkkarten) und das BIOS (basic input and output system). Schema einer Hauptplatine@ In modernen Systemen wird die Northbridge oft auch direkt im Prozessor integriert, zudem enth√§lt die Southbridge meist einen Netzwerk- und Grafikkontroller, so dass die grundlegende Ausgabe- und Netzwerkfunktionalit√§t bereits gegeben ist. Aufgabe Hauptplatine Betrachten Sie das ASRock Mainboard. Wo werden die folgenden Komponenten eingesteckt? Prozessor RAM Festplatten allenfalls ben√∂tigte zus√§tzliche Grafik- und Netzwerkkarten Wie wird die Hauptplatine mit Strom versorgt? Welche externen Anschl√ºsse (f√ºr Peripherie wie Bildschirm, Maus, ...) gibt es auf dieser Hauptplatine? Finden Sie auf dem ASRock Mainboard die North- und die Southbridge. Womit werden die beiden Chips verdeckt? Begr√ºnden Sie! BIOS‚Äã Beim Starten des Computers wird als erstes das BIOS (engl. basic input and output system) aktiv. Das BIOS erkennt und √ºberpr√ºft die vorhandene Hardware und sorgt daf√ºr, dass ein Betriebssystem gestartet werden kann. Basierend auf der gespeicherten Konfiguration entscheidet das BIOS, welcher Datentr√§ger als Grundlage f√ºr den Startvorgang dient. Dies ist in der Regel eine eingebaute Festplatte, kann aber auch eine CD/DVD oder ein USB-Stick sein. Um die BIOS-Konfiguration zu √§ndern, muss kurz nach dem Start eine bestimmte Taste gedr√ºckt werden. In der Regel wird dies kurz auf dem Bildschirm eingeblendet. Die h√§ufigsten Tasten sind: F1, F2, Del oder Enter, bei Mac sind es die Wahltaste (‚å•) oder Alt. Windows Schnellstart Da heutige Laptops die vorhandene Hardware bereits in Sekundenbruchteilen √ºberpr√ºft hat, oder f√ºr einen schnelleren Start bei einem sog. &quot;Fastboot&quot; nicht alle Komponenten neu √ºberpr√ºft, bleibt zu wenig Zeit um die richtige Taste zu dr√ºcken. Um dennoch ins BIOS zu kommen, muss der Computer speziell √ºber den &quot;Erweiterten Start&quot; neu gestartet werden. Dann gelangt man automatisch ins BIOS: https://www.pc-magazin.de/ratgeber/bios-uefi-starten-windows-10-3201227.html Je nach Konfiguration muss noch ein Passwort eingegeben werden, bevor die BIOS-Einstellungen angezeigt oder ver√§ndert werden k√∂nnen. Es gibt verschiedene BIOS-Hersteller. Die Oberfl√§che ist sehr schlicht und einfach gestaltet. Man navigiert mit den Pfeiltasten, w√§hlt mit Enter einen Eintrag aus und beendet ein Men√º mit Hilfe von Esc. Nachfolgend zwei Beispiele: AMI BIOS@ Award BIOS@ UEFI Der grafisch aufgepeppte Nachfolger von BIOS ist UEFI (Unified Extensible Firmware Interface). Es kann im Gegensatz zum BIOS auch per Maus gesteuert werden, erf√ºllt aber dieselbe Aufgabe wie das oben beschriebene BIOS.","keywords":""},{"title":"8. Stromversorgung","type":0,"sectionRef":"#","url":"/Computer/basics/Stromversorgung","content":"8. Stromversorgung Die Stromversorgung eines Computers erfolgt √ºber Gleichstrom (DC), das heisst, dass der Wechselstrom unseres Stromnetzes zuerst in Gleichstrom umgewandelt werden muss. Diese Funktion √ºbernimmt das Netzteil. Das Netzteil eines Desktop-Computers ist stets eingebaut. Bei einem Notebook hingegen √ºbernimmt ein externes Netzteil die Stromtransformation, da im Innern des Notebooks nicht gen√ºgend Platz daf√ºr vorhanden ist. Kenngr√∂ssen‚Äã F√ºr das Netzteil gibt es die folgende wichtige Kenngr√∂sse: Die Leistung gibt an, wie viel Energie das Netzteil in einer bestimmten Zeit den Komponenten maximal zur Verf√ºgung stellen kann. Die Leistung wird gemessen in Watt. ATX-Netzteil@ Notebook-Netzteil@ Leistung und W√§rme‚Äã Die meiste Leistung verpufft als Abw√§rme, darum brauchen Desktop-PCs (und leistungsf√§hige Grafikkarten) eine aktive Prozessork√ºhlung, d.h. einen K√ºhlk√∂rper mit grosser Oberfl√§che und dar√ºber einen starken L√ºfter, um die W√§rme vom Prozessor wegzubringen. Notebooks verwenden stromsparendere Prozessoren, daher reicht dort ein kleinerer L√ºfter aus, oder sie haben gar nur eine passive K√ºhlung ohne aktiven L√ºfter. K√ºhlk√∂rper und Ventilator@ Notebook-Mainboard mit Prozessork√ºhler@ Stromversorgung Recherchieren Sie im Internet und finden Sie heraus, wie viel Leistung (Watt) folgende Ger√§te typischerweise im Betrieb beziehen: Staubsauger Desktop-PC-Netzteil Notebook-Netzteil Smartphone-Ladeger√§t LED-Lampe Wie beurteilen Sie folgende Aussagen? Ist das erw√§hnte Ger√§t neu oder alt? Ein Notebook verbraucht zum Bearbeiten eines Textdokuments oder Surfen im Internet ca. 7W. Ein Desktopcomputer braucht ein 1500W-Netzteil. Eine Stereoanlage verbraucht im Standbyzustand knapp 15W. Ein Beamer hat einen Standbystromverbrauch von ca. 0.5W.","keywords":""},{"title":"2. Logische Gatter","type":0,"sectionRef":"#","url":"/Computer/gates","content":"2. Logische Gatter Die logischen Gatter (logic gates) sind die Grundbausteine der digitalen Logik. Sie werden durch die Verkn√ºpfung von Transistoren gebaut. Transistoren Durch die logischen Gatter lassen sich ganze Schaltungen zusammenbauen, die dann bspw. eine bin√§re Addition durchf√ºhren. Diagramme logischer Gatter@","keywords":""},{"title":"Video-Auftrag","type":0,"sectionRef":"#","url":"/Computer/gates/Auftrag","content":"Video-Auftrag Sie fertigen in Kleingruppen von 3 bis max. 4 Personen ein kurzes, 3 bis 4 min√ºtiges Video an, welches die Funktionsweise der 4-bit Addition erkl√§rt. Erkl√§ren Sie dabei wie Zahlen bin√§r dargestellt werden wie zwei bin√§re Zahlen addiert werden wie die bin√§re Addition mit logischen Gattern umgesetzt werden kann Halbaddierer Volladdierer 4-bit Addierer Demonstration der 4-bit Addition Zeigen Sie f√ºr die relevanten Bausteine auch die Wahrheitstabellen. Video‚Äã Stopmotion Whiteboard/Wandtafel Screencast Powerpoint Prezi ... Ablauf‚Äã Doppellektion - individuell Erarbeiten der Grundlagen (Kapitel 2) Bearbeiten der √úbungen Arbeiten mit CircuitVerse In der Gruppe die Aufgaben zum Kapitel 8: Addierer bearbeiten Doppellektion Fertigstellen der √úbungen aus Kapitel 2 Idee und Skript f√ºr das Video zusammenstellen Aufteilen der Teile Aufnehmen Doppellektion Video-Aufnahmen fertigstellen Schneiden, evtl. vertonen der Aufnahmen Abgabe, gemeinsames Anschauen der Ergebnisse Abgabe‚Äã Video Hochladen CircuitVerse Projekt Link zum CircuitVerse Projekt des 4-bit Addierers hier einf√ºgen. Achtung: Das Projekt muss √∂ffentlich zug√§ngig sein. Beurteilungskriterien‚Äã Themen komplett abgedeckt Einhalten der Zeit (3-4 Minuten) Fachlich korrekt Jede Person der Gruppe erz√§hlt/erkl√§rt etwas Kreativit√§t Projekt auf CircuitVerse funktioniert Die Note z√§hlt 0.5","keywords":""},{"title":"4. AND-Gatter","type":0,"sectionRef":"#","url":"/Computer/gates/and","content":"4. AND-Gatter Ein AND-Gatter ist eine digitale Schaltung, welche zwei Eing√§nge und einen Ausgang hat. Der Ausgang Y hat nur dann den Wert 1Ô∏è‚É£, wenn Eingange A und Eingang B den Wert 1Ô∏è‚É£ haben. Wahrheitstabelle‚Äã A\tB\tY0\t0\t0 0\t1\t0 1\t0\t0 1\t1\t1 In Schaltpl√§nen wird ein AND-Gatter mit folgendem Symbol dargestellt: Interaktive Schaltung‚Äã Beispiele‚Äã Kaffeem√ºhle‚Äã Aus Sicherheitsgr√ºnden mahlt die Kaffeem√ºhle nur, wenn gleichzeitig der Deckel geschlossen ist und der Stromschalter eingeschaltet ist. Heizung mit Hauptschalter‚Äã Nat√ºrlich k√∂nnen auch mehrere Gatter zu einer Schaltung kombiniert werden. Im folgenden Beispiel soll eine Heizung nur eingeschaltet werden, wenn es kalt ist und der Hauptschalter eingeschaltet ist: Aufgaben Entwerfen Sie je eine Schaltung f√ºr die folgenden Szenarien. Sie k√∂nnen Inverter und AND-Gatter verwenden. Gehen Sie f√ºr jedes Szenario so vor: Erstellen Sie eine Wahrheitstabelle f√ºr das Szenario. Entwerfen Sie die Schaltung in CircuitVerse inklusive Beschriftung. √úberpr√ºfen Sie, ob die Schaltung mit der Wahrheitstabelle √ºbereinstimmt. Lesen Sie die Symbole f√ºr die Eingaben/Ausgaben hier nach. Heizung: Eine Heizung soll nur tags√ºber eingeschaltet werden, wenn es kalt ist. SSR Automatische T√ºr: Die T√ºr wird durch einen Motor betrieben. Sie soll nur aufgehen, wenn eine Bewegung entdeckt wird und der Hauptschalter eingeschaltet ist. SSR Dachfenster: Ein Dachfenster soll durch einen Motor automatisch geschlossen werden, sobald es regenet. Wenn das Fenster zu ist, dr√ºckt es einen Knopf, der bewirkt, dass der Motor ausschaltet wird. SSR Aufgabe Analysieren Sie die folgende Schaltung, indem Sie eine Wahrheitstabelle erstellen. Was macht die Schaltung eigentlich? Aufgabe ‚≠êÔ∏è Zusatzaufgabe‚Äã Wie viele unterschiedliche digitale Schaltungen mit zwei Eing√§ngen und einem Ausgang sind m√∂glich?","keywords":""},{"title":"7. NAND-Gatter","type":0,"sectionRef":"#","url":"/Computer/gates/nand","content":"7. NAND-Gatter Ein NAND-Gatter (engl. not and) hat der Ausgang Y dann den Wert 0Ô∏è‚É£, wenn Eingange A und Eingang B den Wert 1Ô∏è‚É£ haben. A\tB\tY0\t0\t1 0\t1\t1 1\t0\t1 1\t1\t0 In Schaltpl√§nen wird ein NAND-Gatter mit folgendem Symbol dargestellt: Symbol f√ºr ein NAND-Gatter Interaktive Schaltung‚Äã Ein NAND-Gatter kann aus einem AND-Gatter, gefolgt von einem Inverter zusammengesetzt werden: Universalgatter‚Äã Das NAND-Gatter hat eine besondere Bedeutung. Dank dem Mathematiker George Boole kann bewiesen werden, dass jede logische Schaltung ausschliesslich aus NAND-Gatter aufgebaut werden kann. Ausserdem sind NAND-Gatter physikalisch relativ einfach aufzubauen. Deshalb bilden NAND-Gatter den Grundbaustein f√ºr heutige Mikrochips. Aufgabe Bauen Sie eine Inverter-Schaltung ausschliesslich aus NAND-Gattern auf. SSR ‚≠êÔ∏è Bauen Sie eine AND-Schaltung ausschliesslich aus NAND-Gattern auf. SSR ‚≠êÔ∏è Bauen Sie eine OR-Schaltung ausschliesslich aus NAND-Gattern auf. SSR ‚≠êÔ∏è Bauen Sie eine XOR-Schaltung ausschliesslich aus NAND-Gattern auf. SSR","keywords":""},{"title":"4. Speicher","type":0,"sectionRef":"#","url":"/Computer/basics/Speicher","content":"4. Speicher Datenspeicher speichern Daten √ºblicherweise in bin√§rer Form. Ein Datenspeicher besteht aus einem Speichermedium, auf welchem die Bits physikalisch repr√§sentiert werden. Kenngr√∂ssen‚Äã F√ºr Speicher gibt es drei wichtige Kenngr√∂ssen: Die Speicherkapazit√§t ist die Datenmenge, welcher der Speicher maximal aufnehmen kann. Sie wird in Byte angegeben. Die Zugriffszeit ist die Zeit, die ben√∂tigt wird, um eine Dateneinheit (z.B. ein Byte) aus dem Speicher auszulesen. Die Zugriffszeit f√ºr das Speichern von Daten ist oft gr√∂sser als die Zugriffszeit f√ºr das Laden. Aus der Zugriffszeit kann die Daten√ºbertragungsrate berechnet werden, also die Datenmenge, die innerhalb einer bestimmten Zeit geladen oder gespeichert werden kann. Die Daten√ºbertragungsrate wird in Byte pro Sekunde angegeben. Arbeitsspeicher (RAM)‚Äã Der Arbeitsspeicher oder das RAM (engl. random access memory) enth√§lt die Befehle und Daten der aktuell ge√∂ffneten Programme oder Apps. Der Prozessor muss m√∂glichst schnell auf diese Daten zugreifen k√∂nnen. Der Arbeitsspeicher muss also eine m√∂glichst kleine Zugriffszeit haben. Daf√ºr werden Nachteile in Kauf genommen. So ist die Speicherkapazit√§t von Arbeitsspeicher eher klein. Ausserdem ist Arbeitsspeicher fl√ºchtig. Dies bedeutet, dass die Daten verloren gehen, sobald der Speicher nicht mehr mit Strom versorgt wird. Heute wird in Computern normalerweise sogenanntes DDR-SDRAM1 eingesetzt. Es zeichnet sich dadurch aus, dass die Daten alle paar Millisekunden wieder neu geschrieben werden m√ºssen (Refresh). DDR SDRAM@ RAM in meinem Smartphone/Laptop Wie viel Arbeitsspeicher besitzt Ihr Laptop / Ihr Smartphone? Hinweis Dies kann in den Systemeinstellungen oder im (unter Windows) im Taskmanager nachgeschaut werden. Festplatten‚Äã Der Festplatten- oder Massenspeicher erf√ºllt ganz andere Anforderungen als der Arbeitsspeicher. Wichtig ist hier, dass Daten in grossen Mengen permanent gespeichert k√∂nnen, ohne dass eine durchgehende Stromzufuhr n√∂tig ist. Dass die Daten√ºbertragungsrate deutlich langsamer als beim Arbeitsspeicher ist, spielt deshalb eine untergeordnete Rolle. Er wird ‚Äì im Gegensatz zum Arbeitsspeicher ‚Äì nicht direkt auf das Mainboard gesteckt, sondern mittels Strom- und Datenkabel angeschlossen. Heute gibt des den Festplattenspeicher in zwei Ausf√ºhrungen: herk√∂mmliche Harddisks oder HDD (engl. hard disk drive) SSDs (engl. solid state disk) Harddisk (HDD)‚Äã Der Aufbau einer herk√∂mmlichen Harddisk gleicht einem Plattenspieler. Im Innern der Harddisk drehen sich mehrere Platten, auf denen durch Magnetisierung einzelner Bereiche Daten gespeichert werden. Auf dem nachfolgenden Bild (rechts) sieht man den Arm zum Auslesen resp. Schreiben der Daten (er befindet sich momentan in der Parkposition neben den Scheiben). Dieser Speicher wird heute noch eingesetzt, um grosse Datenmengen g√ºnstig zu speichern. Er ist relativ langsam und anf√§llig auf Transportsch√§den, da es sich um einen mechanischen Speicher mit beweglichen Teilen handelt. Die Drehgeschwindigkeit der Platten ist beschr√§nkt, sie bestimmt Lese-/Schreibgeschwindigkeit. Zudem muss vor dem effektiven Zugriff stets noch gewartet werden, bis sich der Arm an der richtigen Position befindet. Harddisk@ ge√∂fffnete Harddisk@ Solid State Disk (SSD)‚Äã Der Aufbau einer SSD gleicht in keiner Weise demjenigen einer HDD. Wie der Name schon sagt, enth√§lt sie keine beweglichen Teile und ist daher robuster, schneller, leichter und verbraucht weniger Strom. Allerdings gibt es zwei gewichtige Nachteile: SSDs kosten ein Mehrfaches im Vergleich zu herk√∂mmlichen HDDs. Auf dem Markt sind nicht so grosse (in Bezug auf die Speicherkapazit√§t) SSDs erh√§ltlich wie HDDs. SSD@ ge√∂fffnete SSD@ HDD/SSD in meinem Smartphone/Laptop Wie viel Speicherplatz besitzt Ihr Smartphone, ihr Laptop? Wie viel davon ist noch frei? Laptop Wie viel Speicherplatz wird von Word, Excel, PowerPoint, ... Teams, Adobe Produkten verwendet? Smartphone Wie viel Speicherplatz wird von Ihrem Musikplayer (Spotify, Apple Music, ...) Whatsapp Instagram, Snapchat oder Tiktok belegt? Anschlusskabel‚Äã Festplatten werden mit sogenannten SATA-Kabeln angeschlossen. Die Abk√ºrzung SATA steht f√ºr serial at attachment. Das schmalere Kabel dient zur Daten√ºbertragung, das breitere f√ºr die Stromzufuhr. SATA-Kabel @ SATA-Stromanschluss @ Speicherhierarchie‚Äã Aus technischen Gr√ºnden sind schnelle Speicher viel teurer als langsame Speicher. Ausserdem sind schnelle Speicher fl√ºchtig, sie ben√∂tigen eine Stromzufuhr, um den Speicherinhalt bewahren zu k√∂nnen. Das f√ºhrt dazu, dass schneller Speicher in viel kleineren Mengen und nur wo unbedingt n√∂tig eingesetzt wird. Es ergibt sich in Computersystemen eine Hierarchie von verschiedenen Speichern. Je n√§her der Speicher beim Prozessor ist, desto schneller muss er sein. Speicherhierarchie Speicher Wieso enth√§lt ein Computer so viele verschiedene Speicherarten? √úberlegen Sie sich, welche Daten auf den einzelnen Ebenen der oben abgebildeten Speicherhierarchie gespeichert werden. Wieso kann eine Datei auf einer Festplatte viel schneller gel√∂scht als gespeichert werden? Speicherkosten und Datendurchsatz F√ºhren Sie auf üëâ Digitec eine Recherche zu den Speicherpreisen und dem Datendurchsatz (wie schnell k√∂nnen Daten geschrieben/gelesen werden) durch. Bestimmen Sie jeweils den Preis pro GB (selber berechnen) und den Datendurchsatz f√ºrs Schreiben und Lesen. f√ºr ein Modell im mittleren Preissegment. SSD, Mobile SSD, HDD, Externe HDD, USB-Stick, SD/microSD Karte DDR-SDRAM: engl. Double Data Rate Synchronous Dynamic Random Access Memory ‚Ü©","keywords":""},{"title":"5. OR-Gatter","type":0,"sectionRef":"#","url":"/Computer/gates/or","content":"5. OR-Gatter Bei einem OR-Gatter hat der Ausgang Y dann den Wert 1Ô∏è‚É£, wenn Eingang A oder Eingang B (oder beide) den Wert 1Ô∏è‚É£ haben. A\tB\tY0\t0\t0 0\t1\t1 1\t0\t1 1\t1\t1 In Schaltpl√§nen wird ein OR-Gatter mit folgendem Symbol dargestellt: Symbol f√ºr ein OR-Gatter Interaktive Schaltung‚Äã Beispiele‚Äã T√ºr√∂ffner‚Äã In einem Haus soll die Eingangst√ºre aus der Wohnung im ersten Stock sowie aus der Wohnung im zweiten Stock durch einen Knopfdruck ge√∂ffnet werden k√∂nnen. Einbruchsalarm‚Äã Ein Einbruchsalarm gibt ein akustisches Signal, wenn eine Bewegung entdeckt wurde oder wenn die T√ºre ge√∂ffnet wurde. Dies wird wie beim K√ºhlschrank durch einen Druckknopf erkannt, welcher durch die geschlossene T√ºre gedr√ºckt wird. Aufgabe Entwerfen Sie je eine Schaltung f√ºr die folgenden Szenarien. Sie k√∂nnen Inverter, AND-Gatter und OR-Gatter verwenden. Gehen Sie f√ºr jedes Szenario so vor: Erstellen Sie eine Wahrheitstabelle f√ºr das Szenario. Entwerfen Sie die Schaltung in CircuitVerse inklusive Beschriftung. √úberpr√ºfen Sie, ob die Schaltung mit der Wahrheitstabelle √ºbereinstimmt. Autoinnenbeleuchtung: Die Innenbeleuchtung in einem Auto soll eingeschaltet werden, wenn die linke oder die rechte T√ºre ge√∂ffnet wird. SSR Notruf Spitalbett: In einem Spital soll ein Alarm ert√∂nen, wenn ein Patient auf den Rufknopf dr√ºckt oder wenn seine K√∂rpertemperatur zu hoch wird. SSR Einbruchsalarm: Der Einbruchsalarm aus dem Beispiel oben soll zus√§tzlich einen Hauptschalter erhalten. Der Alarm wird nur ausgel√∂st, wenn die Alarmanlage eingeschaltet ist. Wenn die Alarmanlage ausgeschaltet ist, soll als Hinweis ein L√§mpchen brennen. SSR Aufgabe Analysieren Sie die folgende Schaltung, indem Sie eine Wahrheitstabelle erstellen. Was macht die Schaltung eigentlich? Wie kann man sie vereinfachen?","keywords":""},{"title":"2. CircuitVerse","type":0,"sectionRef":"#","url":"/Computer/gates/CircuitVerse","content":"2. CircuitVerse Wir arbeiten in diesem Kapitel zu den Logikgattern mit der Online-Plattform CircuitVerse. Dort k√∂nnen Schaltungen einfach geplant werden. √úber diverse Eingabeelemente kann gesteuert werden, ob an den Eing√§ngen eine 1Ô∏è‚É£ oder eine 0Ô∏è‚É£ anliegt. Mit verschiedenen Ausgabeelementen kann die gezeichnete Schaltung √ºberpr√ºft werden. üîó CircuitVerse CircuitVerse-Konto erstellen‚Äã Um in CircuitVerse ein eigenes Benutzerkonto anzulegen, musst du zuerst im Men√º oben rechts auf Login klicken: Anschliessend w√§hlst du unterhalb des Login-Formulars den Link Sign up: Schliesslich f√ºllst du die Benutzerdaten aus (am besten die Schul-E-Mail-Adresse angeben) und klickst auf den gr√ºnen Sign up-Knopf: Aufgabe Erstellen Sie ein eigenes Benutzerkonto bei CircuitVerse, damit Sie die eigenen Schaltungen abspeichern k√∂nnen (bitte den richtigen Namen und die Schul-E-Mail-Adresse verwenden). Simulator starten‚Äã Nach dem Einloggen klicken Sie im Men√º oben rechts auf Simulator, um in den Simulator zu wechseln: Eingabeelemente‚Äã Es stehen etliche Eingabeelemente zur Auswahl, wir verwenden allerdings nur die beiden ersten (Input und Button). Die Elemente werden links in der Spalte der Circuit Elements im Bereich Input ausgew√§hlt und anschliessend im Arbeitsbereich wie gew√ºnscht platziert. Beim Element Input (oben links) kann durch Mausklick zwischen einer 1 und einer 0 hin- und hergewechselt werden. Das Element Button (oberste Zeile Mitte) ist stets ausgeschaltet (also 0Ô∏è‚É£), ausser w√§hrend der Zeit, in der mit der Maus auf den Druckknopf gedr√ºckt wird. verf√ºgbare Eingabeelemente Ausgabeelemente‚Äã Im Bereich Output stehen wiederum etliche Elemente zur Verf√ºgung. Wir verwenden ausschliesslich die beiden oben links (Output) und oben rechts (DigitalLed). Das Element Output zeigt als Ausgabe eine 1 oder eine 0 an, w√§hrend die DigitalLed im Zustand 1Ô∏è‚É£ leuchtet. verf√ºgbare Ausgabeelemente Elemente verbinden‚Äã An s√§mtlichen Elementen ist mit gr√ºnen Punkten markiert, wo Verbindungen angeschlossen werden k√∂nnen. Um Komponenten zu verbinden, klicken Sie auf einen Punkt, halten die Maustaste gedr√ºckt und ziehen die Leitung bis zum anderen Punkt. Verbindungen Es ist erlaubt, mehrere Ausgabeelemente zu verbinden: Mehrere, miteinander verbundene Ausgabeelemente Das Verbinden mehrerer Eing√§nge f√ºhrt allerdings zu Fehlern ‚Äì schliesslich ist dann unklar, was gelten soll, wenn verschiedene Eingabewerte auf derselben Leitung anliegen: Mehrere, miteinander verbundene Eingabeelemente Elemente benennen‚Äã Ist ein Ein- oder Ausgabeelement auf dem Schaltplan aktiv (angeklickt), so k√∂nnen in der linken Spalte ganz unten unter Properties gewisse Einstellungen des Elementes ver√§ndert werden. F√ºr uns sind nur Label und Label Direction interessant. So k√∂nnen Ein- oder Ausgabeelemente angeschrieben und diese Beschriftungen sinnvoll platziert werden. Eigenschaften eines Ausgabeelementes Beschriftete Komponenten Logikgatter‚Äã Im n√§chsten Bereich Gates befinden sich alle ben√∂tigten Logikgatter. Diese werden in den folgenden Abschnitten vorgestellt. verf√ºgbare Logikgatter Projekt speichern‚Äã Sobald Sie auf das weisse H√§uschenblatt klicken, werden rechts die Project Properties angezeigt. Dort k√∂nnen Sie das Projekt Project und die aktuelle Registerkarte Circuit benennen: Anschliessend k√∂nnen Sie das Projekt speichern (durch Klicken auf Save Online in der Toolbar). Dabei w√§hlen Sie am besten aus, dass es sich um ein privates Projekt handelt. Schliesslich klicken Sie auf Update Project. Nun sehen Sie das Projekt in der √úbersicht. Es ist gespeichert und Sie k√∂nnen es jederzeit wieder durch einen Klick auf Launch simulator √∂ffnen. Aufgabe Nach dem Login wechseln Sie zum Simulator. Benennen Sie das Projekt ¬´Aufgaben¬ª und die aktuelle Registerkarte ¬´Erste Schritte¬ª. Platzieren Sie die beiden ersten Eingabeelemente Input und Button in der Registerkarte Erste Schritte untereinander und legen Sie rechts davon die beiden Ausgabeelemente Output und DigitalLed ab. Verbinden Sie jeweils ein Eingabeelement mit einem Ausgabeelement und testen Sie die Ein- und Ausgabe durch umschalten der Eingabewerte. Speichern Sie das Projekt und √∂ffnen Sie es wieder. Beschriften Sie s√§mtliche Ein- und Ausgabeelemente und w√§hlen Sie einen sinnvollen Platz f√ºr die Beschriftungen. Speichern Sie die Aufgabe ab (dies wird in Zukunft nicht mehr erw√§hnt, sondern versteht sich von selbst). Der Link zur Aufgabe k√∂nnen Sie bei Bedarf direkt im Antwort-Feld hier auf der Webseite festhalten. Am besten legen Sie f√ºr jede Aufgabe oder zumindest f√ºr jedes Kapitel eine neue Registerkarte an, indem Sie oben im Men√º auf Circuit und dann New Circuit + klickst: Aufgabe Erstellen Sie eine neue Registerkarte f√ºr die Inverter-Aufgaben im n√§chsten Kapitel. Vergessen Sie nicht, die Aufgaben immer wieder zu speichern ‚Äì insbesondere am Lektionsende! Im Dashboard ‚Äì zug√§nglich oben rechts im Men√º beim eigenen Namen ‚Äì kannst du stets eine √úbersicht deiner gespeicherten Projekte erhalten:","keywords":""},{"title":"8. Addierer","type":0,"sectionRef":"#","url":"/Computer/gates/adder","content":"8. Addierer Bin√§re Addition‚Äã Bin√§re Addition F√ºhren Sie eine schriftliche Addition f√ºr die folgenden bin√§ren Zahlen durch: 10012+11021001_2 + 110_210012‚Äã+1102‚Äã 1112+12111_2 + 1_21112‚Äã+12‚Äã 1012+1012101_2 + 101_21012‚Äã+1012‚Äã Halbaddierer‚Äã Wie k√∂nnte man die Addition zweier einstelliger Zahlen im Bin√§rsystem als Schaltung konstruieren? 0+0=0020+1=0121+0=0121+1=102\\begin{aligned} 0 + 0 &amp;= 00_2\\\\ 0 + 1 &amp;= 01_2\\\\ 1 + 0 &amp;= 01_2\\\\ 1 + 1 &amp;= 10_2 \\end{aligned}0+00+11+01+1‚Äã=002‚Äã=012‚Äã=012‚Äã=102‚Äã‚Äã Die entsprechende Schaltung ben√∂tigt zwei Eing√§nge und zwei Ausg√§nge. Die beiden Eing√§nge werden f√ºr die zwei Summanden verwendet. Die Ausg√§nge f√ºr die Einer- und Zweierstelle des Resultats. Die gesuchte Schaltung muss also folgende Wertetabelle haben: A\tB\tZweier\tEiner0\t0\t0\t0 0\t1\t0\t1 1\t0\t0\t1 1\t1\t1\t0 Der Wert der Einerstelle kann durch ein XOR-Gatter berechnet werden, der Wert der Zweierstelle durch ein AND-Gatter. Die Schaltung sieht somit so aus: Aufgabe Halbaddierer Erstellen Sie ein neues Projekt in CircuitVerse und nennen Sie es &quot;Addierer&quot;. Bauen Sie den Halbaddierer in CircuitVerse nach und probieren Sie aus, ob die Addition von zwei Bits (inklusive √úbertrag) korrekt funktioniert. Benennen Sie die Eing√§nge mit ¬´A¬ª und ¬´B¬ª, sowie die Ausg√§nge korrekt mit ¬´S¬ª (f√ºr ¬´Summe¬ª) und ¬´√ú¬ª (f√ºr ¬´√úbertrag¬ª). Benennen Sie die Schaltung (sprich die Registerkarte) mit ¬´HA¬ª (f√ºr Halbaddierer). Volladdierer‚Äã Ein Halbaddierer addiert also 2 separate Bit und sorgt daf√ºr, dass neben dem Resultat auch der √úbertrag f√ºr die n√§chste Stelle mittels zweitem Ausgang bereitsteht. Allerdings ber√ºcksichtigt ein Halbaddierer nur die beiden zu addierenden Bits am Eingang, ein allf√§llig zu ber√ºcksichtigender √úbertrag von der vorherigen Stelle bleibt unbeachtet. Wenn zwei mehrstellige bin√§re Zahlen addiert werden sollen, muss der √úbertrag der vorhergehenden Stelle ber√ºcksichtigt werden. Ab der zweithintersten Stelle muss wie folgt vorgegangen werden: Die Zifferen an der aktuellen Stelle werden addiert. Zum Resultat wird der √úbertrag der vorherigen Stelle addiert. Die h√∂here Stelle des Resultat wird als √úbertrag an die n√§chste Stelle weitergegeben. Dies kann mit der folgenden Schaltung realisiert werden. Sie besteht aus zwei Halbaddierern sowie einem OR-Gatter. Mit dem OR-Gatter werden die beiden m√∂glichen √úbertr√§ge zusammengefasst. Aufgabe Volladdierer Bauen Sie basierend auf Ihrer Halbaddierer-Schaltung einen Volladdierer: Erstellen Sie dazu zuerst die Wahrheitstabelle f√ºr den Volladdierer. Der Volladdierer hat drei Eing√§nge: A (erste Zahl) B (zweite Zahl) √ú (√úbertrag) und zwei Ausg√§nge: S (Summe) V (√úbertrag) Bauen Sie in CircuitVerse eine neue Schaltung (in einer neuen Registerkarte) im Addierer-Projekt und nenne sie ¬´VA¬ª (f√ºr Volladdierer). Verwenden Sie zum Erstellen des Volladdierers als Baustein die Schaltung ¬´HA¬ª, die Sie bereits als Baustein haben, indem Sie im Men√º Circuit auf Insert SubCircuit klicken und den Halbaddierer einf√ºgen. So wird die Schaltung √ºbersichtlicher. SSR 4-Bit-Addierer‚Äã Wir haben mit dem Volladdierer einen Baustein, der zwei 1-Bit-Zahlen addieren kann ‚Äì inklusive korrekte Behandlung des √úbertrags. Nun wollen wir aus mehreren solchen Bausteinen einen kompletten Addierer bauen, der mehrere Stellen gleichzeitig addieren kann. Aufgabe Aufgabe 4-Bit-Addierer‚Äã Erzeugen Sie eine neue Schaltung, welche zwei 4-Bit Zahlen miteinander addieren kann. Testen Sie Ihre Schaltung, indem Sie einige Rechnungen berechnen lassen: 0011 + 0001 soll 0100 ergeben 0111 + 0101 soll 1100 ergeben 1100 + 0011 soll 1111 ergeben Bauen Sie in CircuitVerse eine neue Schaltung (d.h. eine neue Registerkarte) im Addierer-Projekt und nennen Sie diese ¬´4-Bit-Addierer¬ª. Verwenden Sie zum Zeichnen der Schaltung einen Halbaddierer-Baustein ¬´HA¬ª sowie drei Volladdierer-Bausteine ¬´VA¬ª. Machen Sie durch Beschriftungen erkennbar, wo die erste Zahl, die zweite Zahl und das Resultat steht. Hinweis Zum Addieren der Einer-Stelle braucht es nur einen Halbaddierer, da dort noch kein √úbertrag vorhanden sein kann. SSR ‚≠êÔ∏è Hex-Display‚Äã Die Eingaben und das Resultat kann auch mit einem Hexadezimal-Display dargestellt werden. Um Bits darzustellen, kann ein Hex-Display als Ausgabe verwendet werden. Damit vier Eing√§nge angeschlossen werden k√∂nnen, braucht es einen Splitter, welcher vier Eing√§nge zusammenfasst. Dieser kann √ºber Misc &gt; Splitter eingef√ºgt werden, wobei nacheinander zwei Eingabeboxen angezeigt werden. In der ersten wird 4 (die Anzahl Leitungen) eingegeben, in der zweiten 1 1 1 1 (wie viele Anschlussm√∂glichkeiten): 1. Inputbox 2. Inputbox Hexadezimal System Die Zahlen werden im Hexadezimalsystem angezeigt, also im Sechzehnersystem: Dezimal\tHexadezimal\tDezimal\tHexadezimal0\t0\t8\t8 1\t1\t9\t9 2\t2\t10\tA 3\t3\t11\tB 4\t4\t12\tC 5\t5\t13\tD 6\t6\t14\tE 7\t7\t15\tF","keywords":""},{"title":"3. Inverter","type":0,"sectionRef":"#","url":"/Computer/gates/inverter","content":"3. Inverter Ein Inverter ist eine Schaltung, bei welcher der Ausgang Y den Wert 1 (hohe Spannung) hat, wenn der Eingang den Wert 0 (tiefe Spannung) hat und umgekehrt. A\tY0\t1 1\t0 In Schaltungen wird das folgende Symbol f√ºr einen Inverter verwendet: Symbol f√ºr einen Inverter Interaktive Schaltung‚Äã Beispiele‚Äã K√ºhlschrankbeleuchtung‚Äã Das Licht im K√ºhlschrank geht an, sobald die T√ºre nicht mehr auf den Knopf dr√ºckt. Heizung‚Äã Die Heizung soll einschalten, wenn es nicht warm ist. Aufgabe √úberlegen Sie sich, ob bei folgenden Schaltungen ein Inverter eingesetzt werden muss oder nicht: Einbruchalarm: Ein akustischer Alarm soll ert√∂nen, wenn eine Bewegung entdeckt wird. Bew√§sserungsanlage: Wenn die Erde in der Blumenkiste trocken ist, soll eine Wasserpumpe (Motor) eingeschaltet werden. Wenn die Erde feucht ist, soll der Motor ausgeschaltet werden. Aufgabe CircuitVerse Erstellen Sie in CircuitVerse die Schaltung f√ºr die K√ºhlschrankbeleuchtung mit einem Button als Eingabe und einem DigitalLed als Ausgabe. Erstellen Sie in CircuitVerse die Schaltung f√ºr ein Restaurant in Sizilien, das noch keine Klimaanlage besitzt: Sobald gen√ºgend Sonnenlicht (Eingabe Input, 1 oder 0) vorhanden ist, soll das Deckenlicht (Ausgabe DigitalLed) ausgeschaltet und ein Ventilator (Ausgabe Output, 1 oder 0) eingeschaltet werden. Beschriften Sie alle Elemente. Bauen Sie eine Lichterkette mit 6 DigitalLed. Jede zweite LED der Lichterkette soll leuchten. Sobald ein Druckknopf (Button) gedr√ºckt wird, soll die andere H√§lfte der LEDs leuchten. Da es sich um eine Lichterkette handelt, darf nur eine Leitung vom Druckknopf wegf√ºhren.","keywords":""},{"title":"4. Betriebssystem","type":0,"sectionRef":"#","url":"/Computer/os","content":"4. Betriebssystem ¬´No one cares what operating system you run as long as it stays up.¬ª ‚Äì Bruce Perens, Informatiker","keywords":""},{"title":"1. Schaltung","type":0,"sectionRef":"#","url":"/Computer/gates/Schaltung","content":"1. Schaltung Im folgenden betrachten wir digitale Schaltungen. Eine digitale Schaltung hat mindestens einen Eingang sowie einen oder mehrere Ausg√§nge. Da die Schaltung digital ist, sind bei jedem Eingang und Ausgang immer nur zwei Werte m√∂glich: Null oder Eins. Die obenstehende Schaltung hat zwei Eing√§nge (A und B) sowie zwei Ausg√§nge (X und Y). Wahrheitstabelle‚Äã Jede digitale Schaltung kann durch eine Wahrheitstabelle beschrieben werden. In der Wahrheitstabelle werden f√ºr alle m√∂glichen Eingabekombinationen die entsprechenden Ausgabewerte festgehalten. F√ºr eine Schaltung mit zwei Eing√§ngen gibt es insgesamt vier M√∂glichkeiten. Sowohl Eingang A als auch Eingang B k√∂nnen die Werte 0Ô∏è‚É£ oder 1Ô∏è‚É£ annehmen. Die obenstehende Schaltung kann beispielsweise mit folgender Tabelle beschrieben werden: A\tB\tX\tY0\t0\t0\t0 0\t1\t1\t0 1\t0\t0\t1 1\t1\t1\t1 Aufgabe 1 Wie k√∂nnte eine Schaltung mit dieser Wahrheitstabelle wohl aussehen? Eingabe‚Äã Um einfache Schaltungen erstellen zu k√∂nnen, ben√∂tigen wir ein paar einfachen Ein- und Ausgabem√∂glichkeiten. Wir haben folgende Eingabem√∂glichkeiten f√ºr unsere Schaltungen: Druckknopf, liefert Eingabe 1Ô∏è‚É£, wenn er gedr√ºckt wird. Schalter, kann ein- oder ausgeschaltet werden. Temperatursensor, liefert als Eingabe 1Ô∏è‚É£, wenn es warm ist. Lichtsensor, liefert als Eingabe 1Ô∏è‚É£, wenn es hell ist. Feuchtigkeitssensor, liefert als Eingabe 1Ô∏è‚É£, wenn es feucht ist. Bewegungssensor, liefert als Eingabe 1Ô∏è‚É£, wenn Bewegung entdeckt wird. Mikrofon, liefert als Eingabe 1Ô∏è‚É£, wenn ein Ger√§usch entdeckt wird. F√ºr die Ausgabe stehen folgende Ger√§te zu Verf√ºgung: Licht, brennt bei Ausgabe 1Ô∏è‚É£ Lautsprecher, t√∂nt bei Ausgabe 1Ô∏è‚É£ Heizung, heizt bei Ausgabe 1Ô∏è‚É£ Motor, l√§uft bei Ausgabe 1Ô∏è‚É£ Direkte Verbindung‚Äã Die einfachste Schaltung ist die direkte Verbindung zwischen Ein- und Ausgabe. info Beispiel: T√ºrklingel‚Äã Es klingelt, wenn die Taste gedr√ºckt wird. Verzweigung‚Äã Eine Leitung kann auf verzweigt werden. Die Verzweigung wird durch einen kleinen ausgef√ºllten Kreis markiert. info Beispiel: Feueralarm‚Äã Wenn es brennt (zu hohe Temperatur), so soll ein Warnlicht angeschaltet werden und ein akustisches Signal ert√∂nen.","keywords":""},{"title":"9. ‚≠êÔ∏è Speicher","type":0,"sectionRef":"#","url":"/Computer/gates/memory","content":"9. ‚≠êÔ∏è Speicher Die bisherigen Schaltungen f√ºr den Einbruchsalarm haben einen grossen Nachteil: sobald der Bewegungsmelder keine Bewegung mehr entdeckt, wird der Alarm abgestellt. Ein guter Einbruchsalarm sollte aber nicht mehr abschalten. Die Schaltung sollte die Information, dass eine Bewegung entdeckt wurde, speichern k√∂nnen. Mit Hilfe eines OR-Gatter kann dies realisiert werden. Dazu wird das Ausgangssignal des OR-Gatters wieder als Eingang verwendet. Das f√ºhrt dazu, dass das OR-Gatter immer den Wert 1Ô∏è‚É£ liefern wird, sobald es einmal diesen Wert im Ausgang angenommen hat. Interaktive Schaltung‚Äã In dieser interaktiven Schaltung kannst du die R√ºckkopplung testen: info R√ºckkopplung‚Äã Wenn der Ausgang einer Schaltung wieder als Eingang verwendet wird, nennt man dies R√ºckkopplung. Schaltungen mit R√ºckkopplung erm√∂glichen das Speichern von Daten sowie die Konstruktion von programmierbaren Schaltungen. Die R√ºckkopplung ist also ein zentrales Konzept f√ºr den Bau von Computern. R√ºckkopplung mit Reset‚Äã Nat√ºrlich will man die Alarmanlage auch wieder Abschalten k√∂nnen. Dazu kann in der R√ºckkopplungsschleife ein Reset-Knopf eingebaut werden: Aufgabe Da manchmal Wasser in deinen Keller eindringt, m√∂chtest du wissen, ob es seit der letzten Kontrolle besonders stark geregnet hat. Ein Feuchtigkeitssensor alleine reicht nicht. Baue in CircuitVerse eine entsprechend beschriftete Schaltung mit einer R√ºckkopplung, die speichert, wenn der Niederschlag zu stark war. Baue einen Druckknopf ein, mit dem du die Anzeige wieder zur√ºcksetzen kannst. Speicher‚Äã Die Schaltung ¬´R√ºckkopplung mit Reset¬ª wird in der Informatik als SR-Flip-Flop bezeichnet. Sie speichert den Wert 1, falls der Eingang ¬´Set¬ª aktiviert ist und speichert den Wert 0, falls der Eingang ¬´Reset¬ª aktiviert ist. Diese Schaltung bildet die Grundlage f√ºr den Bau von Speicher (RAM). Um ein Bit zu speichern, wollen wir eine Schaltung, welche die folgenden zwei Eing√§nge hat: Daten: gibt an, welcher Wert gespeichert werden soll. Speichern: gibt durch ein 1 an, ob nun der Datenwert abgespeichert werden soll.","keywords":""},{"title":"1. Aufgaben eines Betriebssystems","type":0,"sectionRef":"#","url":"/Computer/os/aufgaben","content":"1. Aufgaben eines Betriebssystems Was ist ein Betriebssystem?‚Äã Ein Betriebssystem (engl. operating system, kurz OS) ist eine Sammlung von Softwarekomponenten, die das Nutzen von Anwenderprogrammen erst m√∂glich macht. Aufgaben eines Betriebssystems‚Äã Ein Betriebssystem erm√∂glicht Benutzerinteraktion und √ºbernimmt die Benutzerverwaltung, verwaltet die Ressourcen (also die Hardware) und den Zugriff darauf, Arbeits- und Festplattenspeicher Prozessorzeit (welches Programm zu welchem Zeitpunkt wie lange ausgef√ºhrt wird) angeschlossene Ger√§te startet und unterbricht Anwendungsprogramme und stellt Dienstprogramme zur Verf√ºgung (z.B. zur Benutzer- oder Dateiverwaltung). Dies ist auch n√∂tig, denn damit mehrere Programme gleichzeitig verwendet werden k√∂nnen, muss jedes Programm immer wieder an die Reihe kommen und ein St√ºckchen weiterarbeiten d√ºrfen. Das Betriebssystem sorgt daf√ºr, dass dies fair geschieht. Zusammenhang Benutzer, Software, Hardware@ Aufstarten des Computers 2‚Äã Wenn der Computer eingeschaltet wird, so m√ºssen zuerst die Treiberprogramme und das Betriebssystem von der Harddisk oder der SSD in den Arbeitsspeicher geladen werden. Das heisst, die Programmcodes werden von der Harddisk in den Arbeitsspeicher kopiert. Erst dann k√∂nnen diese vom Prozessor ausgef√ºhrt werden und der Computer ist bereit, um weitere Applikationen zu starten. Dazu dient das BIOS (Basic Input Output System) oder UEFI (Universal Extendable Firmware Interface). Beides sind auch wieder Programme. Sie geh√∂ren aber nicht zum Betriebssystem, sondern sind selber ein eigenes, vom Hersteller des Computers auf die Hardware abgestimmtes Betriebssystem. Den Vorgang des Aufstartens wird im Fachjargon als booten bezeichnet. Pull Yourself Up By Your Bootstraps@ Der Begriff kommt von der englischen Redewendung ¬´sich an den eigenen Stiefelriemen (bootstraps) √ºber den Zaun ziehen¬ª und meint einfach, dass man sich selbst auf (scheinbar) unm√∂gliche Art aus einer Zwickm√ºhle heraushilft. Die Zwickm√ºhle beim Start des Computers besteht darin ¬´wie bringe ich die Programme in den Arbeitsspeicher, wenn ich dazu ein Programm brauche, dass bereits im Arbeitsspeicher sein muss?¬ª Beim Computer hilft man sich so, dass ein Teil des Arbeitsspeichers aus speziellen Speicherzellen besteht, welche Ihren Inhalt auch nach dem Ausschalten des Computers nicht verlieren. In diesem Teil des Arbeitsspeichers liegt dann das Programm, welches der Computer nach dem Einschalten als erstes ausf√ºhrt. Dieses Programm l√§dt das BIOS / UEFI in den Arbeitsspeicher, welches seinerseits das Betriebssystem l√§dt und startet. Betriebssysteme, Puzzle‚Äã Puzzle Jede Expertin und jeder Experte ist nach der Expertenrunde bereit, das zugeteilte Thema selbst√§ndig in der Unterrichtsrunde einer Gruppe von vier bis f√ºnf Mitsch√ºler:innen w√§hrend 10 Minuten zu vermitteln. Auftrag‚Äã Lesen und Bearbeiten Sie die Texte und Inhalte gem√§ss den Angaben zu Ihrem Thema. Diskutieren Sie in der Gruppe, welches Lernziel sp√§ter in der Unterrichtsrunde erreicht werden soll. Was sollen Ihre Kolleginnen/Kollegen wissen, k√∂nnen, verstehen? Erstellen Sie in der Expertenrunde eine kleine Pr√§sentation (2 bis 3 Folien maximal), welche Sie dann in der Unterrichtsrunde benutzen, um Ihren Kolleginnen und Kollegen Ihr Thema zu vermitteln. Formulieren Sie eine Testfrage, um in der Unterrichtsrunde zu √ºberpr√ºfen, ob das Lernziel erreicht wurde. Bereiten Sie sich darauf vor, in der Unterrichtsrunde Ihren Kolleg:innen direkt auf dem Notebook das Verwaltungsprogramm, welches zu Ihrem Thema geh√∂rt, zu demonstrieren. Im Idealfall werden Ihre Kolleg:innen unter Ihrer Anleitung das Programm auf den eigenen Notebooks √∂ffnen. Gruppe 1Gruppe 2Gruppe 3Gruppe 4Gruppe 5 Aufgabe‚Äã Erstellen Sie eine kurze Pr√§sentation (zwei bis drei Folien) zum Thema Dateisystem. Verwenden Sie dazu folgende Ressourcen: Dateisystem.pdf, Abschnitte 5.1 und 5.3 (bis und mit erster Absatz nach Abbildung) HDD oder SSD, Abschnitte HDD und SSD Computerverwaltung Windows Computerverwaltung Mac Gehen Sie auf folgende Punkte ein: Was versteht man unter einem Laufwerk? Was versteht man unter einem Block in Zusammenhang mit Laufwerken? Welche Unterschiede gibt es zwischen Harddisks und Solid-State-Disks? Was ist schliesslich die Aufgabe des Dateisystems? Machen Sie sich schlau √ºber die folgenden Dienstprogramme (siehe auch Links unten): Windows: Computerverwaltung, Datentr√§gerverwaltung Mac: Festplattendienstprogramm Wozu dienen diese Programme? Was sollte man √ºber sie wissen? Bereiten Sie sich vor, diese Programme mit Ihren Kolleginnen und Kollegen anzuschauen. Quelle: A. Scheidegger ‚Ü©","keywords":""},{"title":"6. XOR-Gatter","type":0,"sectionRef":"#","url":"/Computer/gates/xor","content":"6. XOR-Gatter Ein XOR-Gatter (engl. exclusive or) hat der Ausgang Y dann den Wert 1Ô∏è‚É£, wenn Eingang A oder Eingang B aber nicht beide den Wert 1Ô∏è‚É£ haben. A\tB\tY0\t0\t0 0\t1\t1 1\t0\t1 1\t1\t0 In Schaltpl√§nen wird ein XOR-Gatter mit folgendem Symbol dargestellt: Symbol f√ºr ein XOR-Gatter Interaktive Schaltung‚Äã Beispiele‚Äã TV-Debatte‚Äã F√ºr die TV-Debatte zwischen dem US-Pr√§sidenten und seinem Herausforderer soll sichergestellt werden, dass sich die Teilnehmer nicht dreinreden k√∂nnen. Mit einer Schaltung soll die Ton√ºbertragung nur aktiviert werden, wenn einer der Teilnehmer spricht. Wenn keiner oder beide sprechen, soll die √úbertragung ausgeschaltet werden. Dating-Show‚Äã Bei einer Dating-Show sollen die potenziellen Paare gleichzeitig aber unabh√§ngig Ja/Nein-Fragen mittels Ein-/Aus-Schalter beantworten. Bei einer √úbereinstimmung der Antworten soll ein Herz aufleuchten. Aufgabe Entwerfen Sie je eine Schaltung f√ºr die folgenden Szenarien. Sie k√∂nnen OR-Gatter oder XOR-Gatter sowie Inverter verwenden. Gehen Sie f√ºr jedes Szenario so vor: Erstellen Sie eine Wahrheitstabelle f√ºr das Szenario. Entwerfen Sie die Schaltung in CircuitVerse inklusive Beschriftung. √úberpr√ºfen Sie, ob die Schaltung mit der Wahrheitstabelle √ºbereinstimmt. Anna und Bert: Anna und Bert arbeiten in einem dunklen Archiv im Keller. Immer wenn jemand von ihnen im Archiv ist, soll Licht brennen. Sie h√∂ren gerne Musik ‚Äì allerdings nicht, wenn beide arbeiten, dann haben sie stets viel zu besprechen. Anna und Bert geben an, ob sie im B√ºro sind, indem sie je einen eigenen Schalter bet√§tigen. SSR Dating-Show 1: Die Schaltung der Dating-Show soll so erweitert werden, dass zus√§tzlich ein Kreuz aufleuchtet, falls die Antworten nicht √ºbereinstimmen. SSR Dating-Show 2: Das vorherige Beispiel soll so ausgebaut werden, dass die Lampen erst leuchten, wenn die Moderatorin mit einem Druckknopf das Resultat freigibt. SSR ‚≠êÔ∏è Schwimmbadabdeckung: Ein Schwimmbecken verf√ºgt auf einer Seite √ºber eine aufgerollte Abdeckung. Diese wird beim Schliessen von einem Motor mit zwei Seilen √ºber das Schwimmbecken gezogen. Beim √ñffnen wird die Abdeckung von einem anderen Motor aufgerollt. Jeder Motor wird mit einem eigenen Druckknopf in Gang gebracht. Es soll sichergestellt werden, dass nie beide Motoren gleichzeitig laufen und dadurch die Abdeckung in St√ºcke reissen. SSR Aufgabe Analysieren Sie die folgende Schaltungen, indem Sie eine Wahrheitstabelle erstellen. Kann man die Schaltung vereinfachen? Wie?","keywords":""},{"title":"2. Betriebssysteme","type":0,"sectionRef":"#","url":"/Computer/os/betriesbssysteme","content":"2. Betriebssysteme Bekannte Betriebssysteme‚Äã Die Liste s√§mtlicher Betriebssysteme ist zu lange und zu un√ºberschaubar, um sie hier alle einzeln aufzuf√ºhren. Wir beschr√§nken uns auf einige wichtige Betriebssysteme, die wir im Alltag h√§ufig antreffen. Hier die wichtigsten Betriebssysteme f√ºr Desktopcomputer oder Notebooks: Microsoft Windows‚Äã Microsoft Windows gibt es seit 1985 in fast 30 verschiedenen Versionen (z.B. Windows 3.1, Windows 95, Windows 2000, Windows XP). Windows l√§uft momentan auf drei verschiedenen Prozessor-Architekturen: x86, amd64 und ARM. Windows 10 Logo@ macOS von Apple‚Äã macOS ist ein Betriebssystem, das seit 1982 von Apple f√ºr Desktop- und Notebookcomputer entwickelt wird. Es l√§uft allerdings ausschliesslich auf der Mac-Hardware, die von Apple produziert wird. Zuerst erschien es als Mac OS (Classic) als komplett eigenst√§ndiges System, seit Mac OS X ist es UNIX-basiert. macOS Logo@ Linux‚Äã √úber das freie Betriebssystem Linux findest du viele weitere Informationen in einem eigenen Kapitel. Linux gibt es seit 1991, es l√§uft inzwischen auf √ºber 20 verschiedenen Prozessor-Architekturen. Linux Maskottchen@ Nachfolgend wichtige mobile Betriebssysteme, d.h. Betriebssysteme, die auf mobilen Ger√§ten (wie z.B. Smartphones und Tablets) zum Einsatz kommen. Windows Mobile‚Äã Microsoft Windows Mobile oder Windows Phone waren zwei Betriebssysteme f√ºr Smartphones und Tablets. F√ºr Windows 10 Mobile gibt es seit Januar 2020 keine Updates mehr, f√ºr Windows Phone ist der Support bereits Mitte 2017 abgelaufen. Somit entwickelt Microsoft zurzeit kein eigenes Betriebssystem f√ºr mobile Ger√§te mehr. Allerdings entwickelt Microsoft eine f√ºr Windows-Dienste optimierte Android-Version, welche auf ihren eigenen Smartphones der Surface Reihe eingesetzt werden. Mit dem Microsoft Launcher gibt es zudem die M√∂glichkeit f√ºr Android-Benutzer:innen, die Microsoft-Dienste st√§rker ins Android-System einzu gliedern. iOS von Apple‚Äã iOS ist ein Betriebssystem f√ºr die iPhone-Smartphones und iPad-Tablets von Apple. Es l√§uft ausschliesslich auf den Ger√§ten, die von Apple produziert werden. Android‚Äã Android ist ein freies Betriebssystem auf Basis des Linux-Kernels. Entwickelt wird Android von der Open Handset Alliance unter der Leitung von Google. Android l√§uft auf Smartphones und Tablets etlicher Hersteller und kommt daneben auch auf vielen weiteren Ger√§ten (z.B. Fernsehern) zum Einsatz. Android Roboter@ Betriebssysteme in meiner Umgebung‚Äã Neben den offensichtlichen Ger√§ten wie Desktopcomputer oder Smarthones resp. Tablets setzen aber viele weitere Ger√§te ein Betriebssystem ein. Aufgabe Betriebssysteme in meiner Umgebung √úberlegen Sie sich, welche Ger√§te bei Ihnen zu Hause ein Betriebssystem brauchen/haben. Wieso gibt es √ºberhaupt verschiedene Betriebssysteme? SSR","keywords":""},{"title":"3. Freie Open Source Software","type":0,"sectionRef":"#","url":"/Computer/os/foss","content":"3. Freie Open Source Software Europalette@ Sitzbank@ Aufgabe ‚úèÔ∏è Aufgabe Kosten‚Äã Was bestimmt den Preis einer Ware (z.B. M√∂bel)? Was bestimmt den Preis einer Software? Was darf/kann man mit ihnen (Ware resp. Software) nach dem Kauf tun? Was haben die beiden Bilder oben mit dieser Aufgabe zu tun? Softwarelizenzen‚Äã Im Gegensatz zu vielen anderen Betriebssystemen ist Linux freie Software. Ziel dieses Kapitels ist es, die wichtigsten Begriffe zu Softwarelizenzen zu erkl√§ren. Freie Software‚Äã Die Free Software Foundation (FSF)1 unter der Federf√ºhrung von Richard Stallman Richard Stallman@ definiert freie Software wie folgt: ¬´Free software¬ª means software that respects users‚Äô freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. [...] With these freedoms, the users (both individually and collectively) control the program and what it does for them.2 Als Begr√ºndung schreibt die FSF, dass die Benutzer von der Software kontrolliert w√ºrden, wenn sie diese nicht selber kontrollieren k√∂nnen. Und da Software von Entwicklern geschrieben wird, verf√ºgten diese √ºber zu viel Macht √ºber die Benutzer. Im Englischen hat das Wort free zwei Bedeutungen. Gemeint ist mit freier Software stets die Freiheit undnicht der Preis. H√§ufig wird dies mit folgender Aussage unterstrichen: info Free as in free speech, not as in free beer. Die vier Freiheiten‚Äã Gem√§ss der FSF gibt es vier zentrale Freiheiten: Die Freiheit, das Programm auszuf√ºhren wie man m√∂chte, f√ºr jeden Zweck. Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Datenverarbeitungbed√ºrfnissen anzupassen. Der Zugang zum Quellcode ist daf√ºr Voraussetzung. Die Freiheit, das Programm zu redistribuieren (also zu verbreiten) und damit Mitmenschen zu helfen. Die Freiheit, das Programm zu verbessern und diese Verbesserungen der √ñffentlichkeit freizugeben, damit die gesamte Gesellschaft davon profitiert. Der Zugang zum Quellcode ist daf√ºr Voraussetzung. Open Source Software (OSS)‚Äã Neben dem Begriff der freien Software wird auch h√§ufig Open Source Software (OSS) verwendet. Gem√§ss der Open Source Initiative (OSI)3 soll unter dem Begriff Open Source4 eigentlich dasselbe verstanden werden wie unter freier Software. Die Idee bei der Einf√ºhrung dieses Begriffs lag darin, das zweideutige Wort free zu umgehen, um somit potentielle Geldgeber nicht unn√∂tig abzuschrecken. Somit d√ºrfte man eigentlich OSS mit freier Software gleichsetzen. Allerdings wird mit dem Begriff Open Source Software lediglich die Verf√ºgbarkeit des Quellcodes unterstrichen, was einige Firmen dazu bewegt, ihre Programme als Open Source zu bezeichnen, obwohl die Modifikation, uneingeschr√§nkte Nutzung, Weitergabe (in originaler und/oder modifizierter Form) nicht erlaubt ist. Will man also unmissverst√§ndlich mitteilen, wovon man spricht, kann der Begriff Free Open Source Software (FOSS) verwendet werden. Propriet√§re Software‚Äã Software, die nicht frei ist, wird als propriet√§r bezeichnet. Freie Lizenzen‚Äã Als bekannteste und verbreitetste Lizenz f√ºr Quellcode muss sicherlich die GNU General Public License (GPL)5 genannt werden. Es gibt aber viele weitere freie Lizenzen. Auch f√ºr Texte, Bilder und Videos gibt es freie Lizenzen. Die bekannteste Lizenz ist die Creative Commons License (CC)6 mit ihren verschiedenen Varianten: √úbersicht √ºber die Creative Commons-Lizenzen@ √úbersicht √ºber die Creative Commons-Lizenzen@ Copyleft‚Äã Im Zusammenhang mit freien Lizenzen taucht h√§ufig auch der Begriff Copyleft auf. Gemeint ist damit eine freie Lizenz, die vorschreibt, dass ver√§nderter oder unver√§nderter Code oder Text ebenfalls wieder unter einer freien Lizenz verteilt oder verf√ºgbar gemacht werden muss7. info Im Gegensatz zu Entwicklern propriet√§rer Software, die in Copyright-Statements den Benutzern Rechte wegnehmen, soll mit freier Software die Rechte der Benutzer garantiert werden. Aus diesem Grund wurde der Begriff Copyright &quot;umgekehrt&quot; zu Copyleft. FSF ‚Ü© Definition &quot;Freie Software&quot; ‚Ü© OSI ‚Ü© Open Source ‚Ü© GPL ‚Ü© CC ‚Ü© Copyleft ‚Ü©","keywords":""},{"title":"Benutzerverwaltung","type":0,"sectionRef":"#","url":"/Computer/os/Material/benutzerverwaltung","content":"Benutzerverwaltung Wenn ein Computer von mehr als einer Person benutzt werden kann, so ist es wichtig, dass die Daten der einzelnen Benutzerinnen* gesch√ºtzt sind und die Benutzerinnen einander nicht st√∂ren k√∂nnen. F√ºr jede Benutzerin braucht es einen isolierten Bereich, in welcher sie ihre Dateien speichern kann und welcher von den anderen Benutzerinnen nicht eingesehen werden kann, es sei denn, sie h√§tten dazu die n√∂tigen Berechtigungen erhalten. Betriebssysteme arbeiten zu diesem Zweck mit Benutzerkonten. F√ºr jede Benutzerin braucht es ein eigenes Benutzerkonto. Dieses umfasst einen Benutzernamen, ein Passwort oder PIN und ein privater Ordner f√ºr Dokumente etc. Um die Daten einer Benutzerin vor unerlaubtem Zugriff zu sch√ºtzen, ordnet das Betriebssystem, genauer das Dateisystem, jedem Ordner und jeder Datei eine Benutzerin als Eigent√ºmerin zu. Diese kann dann mit dem Ordner oder der Datei machen, was immer sie will (√∂ffnen, bearbeiten, den Namen √§ndern, verschieben, l√∂schen, etc.). Ausserdem k√∂nnen auf einer Datei, oder einem Ordner Berechtigungen f√ºr weitere Benutzerinnen angelegt werden, so dass auch diese mit der Datei, oder dem Ordner bestimmte Aktionen durchf√ºhren k√∂nnen (lesen, bearbeiten, etc.). Betriebssysteme unterscheiden mindestens zwei Kategorien von Benutzerkonten: Administratorinnen und normale Benutzerinnen. Erstere k√∂nnen auf einem Computer alles machen. Sie k√∂nnen neue Benutzerkonten einrichten, bestehende l√∂schen, den Zugang zu Ordnern und Dateien freigeben und sperren, oder auch neue Programme f√ºr alle Benutzerinnen installieren. Wer √ºber ein Administratorkonto auf einem Rechner verf√ºgt, beherrscht diesen Computer. Deshalb ist es so wichtig, dass dieses Konto, welches auf jedem Computer existiert, sehr gut gesch√ºtzt ist (z.B. durch ein starkes Passwort). √úblicherweise ist das Administratorkonto dasjenige, welches beim Installieren des Betriebssystems, oder beim erstmaligen Benutzen des Computers, angelegt wird. Normale Benutzerkonten erlauben das Benutzen des Computers f√ºr die √ºblichen Arbeiten (Dokumente erstellen, bearbeiten, im Internet surfen, etc.). Man sollte aus Sicherheitsgr√ºnden auch auf einem nur pers√∂nlich genutzten Computer immer ein normales Benutzerkonto einrichten, mit welchem man arbeitet. * Es sind explizit auch Benutzer gemeint.","keywords":""},{"title":"Vom USB-Stick starten","type":0,"sectionRef":"#","url":"/Computer/praktikum/os-from-usb","content":"Vom USB-Stick starten Damit ein Betriebssystem von einem USB-Stick geladen werden kann, muss die Startreihenfolge (Boot Order) so eingestellt werden, dass der Computer zuerst die USB-Eing√§nge nach Startf√§higem Speicher √ºberpr√ºft der USB-Stick muss startf√§hig (bootf√§hig) sein. Das kostenlose und wohl bekannteste Linux-Betriebssystem heisst Ubuntu und kann hier heruntergeladen werden. Die einfachste Variante um das heruntergeladene Betriebssystem auf einem USB-Stick startf√§hig zu machen, ist balenaEtcher. balenaEtcher Mit diesem Programm kann eine Abbilddatei eines Betriebssystems (Dateierweiterung .iso) auf einen USB Stick geschrieben werden. Dabei wird der USB Stick formatiert und s√§mtliche Inhalte des USBs gehen verloren. Beim Formatieren werden zudem mehrere Speicheraufteilungen vorgenommen (sog. Partitionen), so dass der USB-Stick ohne erneute Formatierung nicht mehr als herk√∂mmliches Speichermedium benutzt werden kann. Sobald das Betriebssystem auf den USB Stick geschrieben wurde, kann im BIOS die Startreihenfolge so eingestellt werden, dass nun vom USB gebootet wird. Windows‚Äã Bei Windows muss oft nicht der Weg √ºber das BIOS gegangen werden. Es reicht, wenn man sich als Administrator anmeldet, und anschliessend einen Erweiterten Start durchf√ºhrt: Bei den Einstellungen auf Update und Sicherheit -&gt; Wiederherstellung und dort die erweiterten Startoptionen ausw√§hlen. Dann erscheint der folgende Screen, wo der Start von einem USB-Stick gew√§hlt werden kann: Mac‚Äã Unter Mac OS X ist es etwas kniffliger, deshalb hier nur der Link auf eine Anleitung zum Starten des USB's (Abschnitt &quot;Booting the Drive&quot;). Das Erstellen des USB's funktioniert aber auch am einfachsten mit balenaEtcher. https://www.howtogeek.com/213396/how-to-boot-a-linux-live-usb-drive-on-your-mac/","keywords":""},{"title":"Kryptow√§rhung","type":0,"sectionRef":"#","url":"/Cryptocurrency/Kryptowaehrung","content":"Kryptow√§rhung √úbersicht von P. Giger‚Äã Loading... Foli von P. Giger‚Äã","keywords":""},{"title":"Autokorrektur","type":0,"sectionRef":"#","url":"/dokumente/ms-word/autokorrektur","content":"Autokorrektur Ein n√ºtzliches und m√§chtiges Feature von Word ist die Rechtschreibkorrektur. Hervorgehobene Fehler in Word Word unterschiedet zwei Fehlertypen: Rechtschreibung Tippfehler oder falsch geschriebene W√∂rter werden rot mit einer gewellten Linie unterstrichen Grammatik Fehler in der Grammatik (bspw. Satzstellung, fehlende Kommas etc) werden blau mit einer gewellten Linie unterstrichen. Um einen Fehler zu korrigieren, k√∂nnen mit Rechtsklick die Verbesserungsvorschl√§ge angesehen werden. Autokorrektur aktivieren Die Autokorrektur ist f√ºr die Rechtschreibefehler standardm√§ssig aktiviert. Bei den Grammatikfehlern ist die √úberpr√ºfung aber nicht immer aktiv: Sie sollte unbedingt unter Datei &gt; Optionen &gt; Dokumentpr√ºfung aktiviert werden! Grammatikfehler w√§hrend der Eingabe markieren Sprache‚Äã Nat√ºrlich muss Word wissen, in welcher Sprache ein Text verfasst wird. Word versucht f√ºr jeden Abschnitt zu erraten, um was f√ºr eine Sprache es sich handelt. Dies gelingt aber nicht immer automatisch und gerade &quot;Deutsch (Schweiz)&quot; oder &quot;Deutsch (Deutschland)&quot; ist f√ºr Word schwer zu unterscheiden. Die Sprache kann unten links umgestellt werden - Absatzweise oder auch nur f√ºr aktuell markierten Text. Dies ist dann n√ºtzlich, wenn Zitate oder W√∂rter einer anderen Sprache verwendet werden. Sprache √§ndern in Word Sprache √§ndern Fehler finden Datei Texte mit Fehlern.docx √Ñndern Sie f√ºr die verschiedenen Abschnitte und W√∂rter die richtige Sprache und korrigieren Sie mithilfe der Rechtschreibkorrektur alle Fehler im Dokument. Zeigen Sie das Resultat Ihren Pultnachbar:innen und helfen Sie einander gegenseitig.","keywords":""},{"title":"Dateiformat","type":0,"sectionRef":"#","url":"/dokumente/ms-word/dateiverwaltung","content":"Dateiformat Jeder Computer hat ein Dateisystem, welches Dateien organisiert und auffindbar macht. Die Anleitung, wie eine Datei gefunden werden kann, heisst Dateipfad. Eine Datei besitzt einen Namen und ein Dateiformat. Die Dateiendung beschreibt das Dateiformat und gibt Auskunft √ºber die Art von Daten, welche in einer Datei enthalten sind. So weiss Ihr Betriebssystem bspw. mit welchem Programm eine Datei ge√∂ffnet werden soll. Ein Word-Dokument hat die Dateiendung .docx. C:\\Users\\reto\\OneDrive - EDUBERN\\Informatik\\01-Word\\dokument.docx ‚îî‚î¨‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚î¨‚îÄ‚îò | Ordner OneDrive | Dateiformat Laufwerk Dateiname Wenn Sie in Word ein Dokument abspeichern, gibt es im wesentlichen zwei M√∂glichkeiten, die zum selben Ziel f√ºhren: das Dokument direkt auf OneDrive Speichern. Die Navigation zum richtigen Ordner kann etwas tr√§ge sein, da die Ordnerstruktur √ºbers Internet direkt von OneDrive geladen wird. das Dokument wird auf dem Computer gespeichert - alle M√∂glichkeiten stehen offen - Sie k√∂nnen nach wie vor einen Ordner auf OneDrive ausw√§hlen. Sofern ein OneDrive Ordner ausgew√§hlt wurde, wird das Dokument automatisch synchronisiert. Gemeinsames Arbeiten‚Äã Ein auf OneDrive gespeichertes Word-Dokument kann zur gemeinsamen Bearbeitung (z.B. f√ºr eine Gruppenarbeit) freiegegeben werden. Bei der Freigabe m√ºssen Sie entscheiden, ob das Dokument nur betrachtet, oder auch bearbeitet werden darf: Bearbeitungsoptionen beim Teilen Linkeinstellungen f√ºr Ordner Link Kopieren üìã Erfahrungsgem√§ss funktioniert das Freigeben von Dokumenten am zuverl√§ssigsten und am schnellsten, wenn der Link kopiert und per Teams verschickt wird. Die E-Mails bleiben manchmal etwas l√§nger in einer Warteschleife bei Edubern h√§ngen. Beachten Sie, dass f√ºrs Kopieren eines Links die Link-Einstellungen auf Jeder mit dem Link bzw. Personen bei EDUBERN mit dem Link gew√§hlt werden muss. Gemeinsames Arbeiten an einem Dokument Gemeinsame Bearbeitung der Men√ºs f√ºrs Klassenlager. Namen bei Ihrer Gruppe eintragen Men√º-Vorschlag festhalten Bild vom Men√º suchen und einf√ºgen","keywords":""},{"title":"√úbung","type":0,"sectionRef":"#","url":"/dokumente/ms-word/Uebung","content":"√úbung Oft kommt es vor, dass mehrere Texte unterschiedlicher Quellen in ein Word-Dokument kopiert werden. Dabei ist es nervend, wenn auch spezielle Formatierungen oder sonderzeichen kopiert werden. Um nur den Inhalt einzuf√ºgen, kann in Word √ºber Einf√ºgen &gt; Nur den Text einf√ºgen nur der pure Text und ohne Formatierungen √ºbernommen werden. Nat√ºrlich werden dann Bilder nicht eingef√ºgt. Alternativ kann auch alles eingef√ºgt werden und im Anschluss k√∂nnen bei ausgew√§hltem Text jegliche Formatierungen gel√∂scht werden. Aufgabe Erstellen Sie ein Word-Dokument auf OneDrive mit dem Namen 03-onlinesucht.docx. Kopieren Sie den untenstehenden Text inkl. der Bilder und formatieren Sie das Dokument gem√§ss der Vorlage. Sind Angaben nicht n√§her spezifiziert, w√§hlen Sie selber eine Formatierung, die der Vorlage m√∂glichst nahe kommt. Onlinesucht Informationen zu den Risiken und Auswirkungen von √ºberm√§ssigem Internetgebrauch Quelle: https://www.safezone.ch/de/suechte-und-substanzen/onlinesucht Mit Onlinesucht oder Internetsucht wird ein √ºberm√§ssiger Gebrauch von Diensten, Inhalten oder Apps des Internets bezeichnet, welcher durch Kontrollverlust gekennzeichnet ist. Es handelt sich um eine nicht-stoffgebundene Abh√§ngigkeit, d.h. eine Abh√§ngigkeit, die nicht auf den Konsum einer Substanz wie Tabak, Alkohol oder eine illegale Droge bezogen ist. Dabei sind es vor allem drei Bereiche des Internets, die zu einer Internetabh√§ngigkeit f√ºhren k√∂nnen: Online-Computerspiele, Kommunikationsplattformen (z.B. soziale Netzwerke) und Webseiten mit sexuellem und pornographischem Inhalt. Inhaltsverzeichnis Wann wird √ºberm√§ssiger Internetgebrauch zu einer Internetabh√§ngigkeit? Eine Person mit Onlinesucht kann ihren Internetgebrauch nicht mehr kontrollieren und sie wendet zunehmend mehr Zeit f√ºr das Internet auf. Bestimmte Inhalte oder Apps im Internet werden zum Mittelpunkt des Interesses, andere oder vorherige Interessen gehen verloren. Dies kann auch zu einer √ºberm√§ssigen Nutzung von Smartphones oder anderen internetf√§higen, mobilen Ger√§ten f√ºhren, mit Hilfe derer auf die gesuchten Inhalte zugegriffen oder online in sozialen Netzwerken kommuniziert wird. Es besteht ein un√ºberwindbares Verlangen nach internetbasierten Angeboten, die Nichtnutzung f√ºhrt zu Nervosit√§t und Entzugserscheinungen. Trotz negativer Folgen werden sie weiter genutzt oder konsumiert. Eine internets√ºchtige Person zieht sich von anderen Menschen zur√ºck und l√§sst Beziehungen abbrechen. Sie ist bis weit in die Nacht online, sodass sich der Tag-Nacht-Rhythmus ver√§ndert und sich eine √ºberm√§ssige M√ºdigkeit einstellt. Zeit im Internet zu verbringen kann auch eine Strategie sein, um unangenehme Gef√ºhle oder Stress zu vermeiden. Nicht alle diese Anzeichen m√ºssen bei einer Onlinesucht vorhanden sein. Eine Onlinesucht kann aber auch nicht allein aufgrund einer bestimmten t√§glichen Nutzungsdauer des Internets festgestellt werden - entscheidend ist der Verlust der Kontrolle √ºber die Internetnutzung. Eine Internetabh√§ngigkeit bringt biochemische Ver√§nderungen im K√∂rper mit, welche zur Sucht f√ºhren. Wie bei einer Drogenabh√§ngigkeit kommt es auch bei der Onlinesucht zu Ver√§nderungen im Belohnungszentrum des Gehirns, sodass der onlines√ºchtigen Person allt√§gliche Belohnungssituationen allein nicht mehr ausreichen. Beeinflussen Geschlecht und Alter die Entwicklung einer Onlinesucht? Jugendliche haben ein erh√∂htes Risiko f√ºr eine Internetabh√§ngigkeit oder Smartphone-Sucht, da die Gehirnregion, die f√ºr die Steuerung des Verhaltens und der Emotionen zust√§ndig ist, noch nicht vollst√§ndig entwickelt ist. Frauen zeigen √∂fter eine √ºberm√§ssige Nutzung der Onlinekommunikation sowie sozialen Netzwerken, w√§hrend M√§nner h√§ufiger Probleme mit der √ºberm√§ssigen Nutzung von pornographischen Seiten (Online-Sexsucht) sowie Online-Computerspielen (Computerspielsucht) haben. Im Vergleich zur Allgemeinbev√∂lkerung weisen Personen mit einer Onlinesucht h√§ufiger eine Depression auf, sie sind introvertierter und haben ein geringeres Selbstwertgef√ºhl. Eine Cannabisabh√§ngigkeit kommt bei Onlines√ºchtigen gleich h√§ufig vor wie in der Allgemeinbev√∂lkerung; Personen, die Kokain und Cannabis konsumieren, sind jedoch h√§ufiger von Phasen der Onlinesucht betroffen. Wir sind in einer anonymen Online-Beratung f√ºr Sie da. Zur Online-Beratung Langzeitfolgen von Internetabh√§ngigkeit Eine Onlinesucht kann zur Beeintr√§chtigung der sozialen Beziehungen und der schulischen oder beruflichen Leistungen f√ºhren. Einige Nutzungsformen k√∂nnen auch grosse finanzielle Probleme mit sich bringen. Mitunter wird auch die k√∂rperliche Gesundheit gesch√§digt. So kann es z. B. zu Haltungssch√§den, zu Problemen wegen eines gest√∂rten Essverhaltens, zu Kopfschmerzen und Sehproblemen kommen. Weiterf√ºhrende Informationen zu Internetgebrauch und Onlinesucht Zahlen und Fakten zu Internetnutzung und Onlinesucht: https://zahlen-fakten.suchtschweiz.ch; https://monam.chBeratung und Therapie bei Onlinesucht: https://spielsucht-radix.ch","keywords":""},{"title":"IOT Workshop 2023","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop","content":"IOT Workshop 2023 Shopping List ‚Äã St√ºck\tPreis\tLink 1.70¬†CHF\tWemos D1 Mini Micro ESP8266 6.40¬†CHF\tENS160 + AHT21 Sensor 1.45¬†CHF\tOLED 0.66 Zoll 64x48 Software und Dienste ‚Äã üëâ OpenSCAD üëâ Node-RED üëâ Micro Python ","keywords":""},{"title":"Micro Python","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/micropython","content":"Micro Python","keywords":""},{"title":"Node-RED","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/node-red","content":"Node-RED Node-RED ist eine frei zug√§ngliche Open Source Software (üëâ Sourcecode) mit dem Fokus, Daten (u.a. von Sensoren) und Services miteinander zu verbinden. Das Projekt wurde 2013 von IBM gestartet und seit 2016 wird es von der OpenJS Foundation weiterentwickelt. Node-RED bietet dabei ein √ºbersichtliches, grafisches Benutzerinterface, mit welchem sich Datenstr√∂me auf einfache Art und Weise miteinander verkn√ºpfen lassen. Node Ein K√§stchen mit einer Funktion Verbindung Verbindet zwei Nodes miteinander Flow Alle Nodes die (auch indirekt) miteinander verbunden sind Jede Node kann ein, zwei oder drei Funktionalit√§ten zur Verf√ºgung stellen: Input Sobald eine Nachricht √ºber die Verbindung eintrifft, wird die Node ausgef√ºhrt Verarbeitung Der Inhalt der empfangenen Nachricht verarbeiten, anzeigen, speichern, ... Output Eine neue Nachricht kann an alle verbundenen Nodes weitergegeben werden. Im Zeitalter des Internet of Things (IoT), wo jedes &quot;Thing&quot; mit Sensoren ausgestattet und mit dem Internet verbunden ist, lassen sich so auf eine einfache Art und Weise komplexe Datenstr√∂me verarbeiten und visualisieren. Node-RED kann auch auf einem Computer, Laptop oder einem Raspberry Pi installiert werden, um so eine lokale Umgebung zu schaffen, in der Daten von Sensoren verarbeitet und visualisiert werden k√∂nnen. Sobald die erhobenen Sensordaten jedoch auch ausserhalb des eigenen Netzwerkes verf√ºgbar sein sollen, muss eine Verbindung zum Internet hergestellt werden. Dies kann zwar √ºber Umwege erreicht werden, jedoch mit einem bestehenden Risiko, dass ungewollte Personen Zugriff auf das Heimnetzwerk erhalten. Deshalb erstellen wir direkt in der Cloud eine Node-RED Umgebung, welche dann auch direkt √ºbers Internet zug√§nglich ist.","keywords":""},{"title":"Textaufbau in Word","type":0,"sectionRef":"#","url":"/dokumente/ms-word/dokumentstruktur","content":"Textaufbau in Word Vorgehen Theorie durchlesen - √ºberlegen Sie sich nach jedem Abschnitt, ob Ihnen die Inhalte bekannt vorkommen und ob Sie sich zutrauen, diese Schritte selber durchzuf√ºhren. Markieren Sie in bei jedem Abschnitt, wie git Sie die Inhalte verstanden haben. So k√∂nnen einzelne Themen im Plenum vorgef√ºhrt werden. Bearbeiten Sie die untenstehende Aufgabe Wenn Sie fertig sind, zeigen Sie das Resultat Herrn Hofer Drei Strukturebenenen‚Äã Ein Word-Dokument kennt drei verschiedene Strukturebenenen: Abschnitt Absatz Zeichen Auf jeder Strukturebene lassen sich unterschiedliche Formatierungen vornehmen. Abschnitt‚Äã In einem Abschnitt wird das grundlegende Erscheinungsbild vorgegeben. Ausrichtung Format Spalten (Text auf mehrere Spalten verteilen) Seitenr√§nder Seitenzahlen Unter Layout lassen sich viele Abschnitt-Einstellungen vornehmen und auch Abschnitt-Umbr√ºche einf√ºgen. Jeder Abschnitt kann unabh√§ngig vom Vorhergehenden/Nachfolgenden konfiguriert werden. Im Beispiel oben werden also zwei Fortlaufende Umbr√ºche (Umbr√ºche &gt; (Abschnittumbr√ºche) &gt; Fortlaufend) eingef√ºgt, damit kein Seitenwechsel passiert. So lassen kann in einem Abschnitt vorgegeben werden, dass er in Spalten Aufgeteilt werden soll. Im Speziellen bei mehreren Spalten kann auch eine Spaltenumbruch eingef√ºgt werden. Durch Klicken auf den rot eingef√§rbten Pfeil k√∂nnen zudem weitere Einstellungsm√∂glichkeiten angezeigt werden. Silbentrennung‚Äã Die Silbentrennung erm√∂glicht es, W√∂rter automatisch an geeigneter Stelle zu trennen, wenn dadurch der Verf√ºgbare Platz auf einer Zeile besser genutzt werden kann. Das Layout wirkt dadurch aufger√§umter und das Lesen ist angenehmer. Diese Option muss jedoch von Hand unter Layout &gt; Silbentrennung auf Automatisch gesetzt werden. Absatz‚Äã Ein Absatz entsteht, wenn eine neue Zeile mit der Enter-Taste eingef√ºgt wird. EIn Absatz wird grunds√§tzlich gem√§ss der zugewiesenen Formatvorlage formatiert. Diese Einstellungen k√∂nnen aber auch in jedem Absatz angepasst werden. Formatvorlagen‚Äã Mit einer Formatvorlage k√∂nnen Struktur- und Darstellungsinformationen zusammengefasst werden. Strukturinformationen beziehen sich auf die Art des Absatzes - ist es eine √úberschrift, eine Unter√ºberschrift, ein normaler Text oder ...? Durch das Hinterlegen dieser Strukturinformationen kann Word bspw. automatisch die √úberschriften nummerieren oder automatisch ein Inhaltsverzeichnis generieren. Da auch Darstellungsinformationen hinterlegt werden k√∂nnen, wird ein Dokument einheitlich und ohne viel Aufwand formatierbar. F√ºr die √Ñnderung der Schriftgr√∂sse von allen √úberschriften muss dann nur die Formatvorlage angepasst werden und nicht jede einzelne √úberschrift. Es gibt vordefinierte Formatvorlagen, die einem Absatz zugewiesen werden k√∂nnen: Die Formatvorlagen k√∂nnen auch nach den eigenen W√ºnschen angepasst werden: tip Erstellen Sie keine neuen Formatvorlagen f√ºr √úberschriften sonder passen Sie die vorhandenen Vorlagen an. So funktioniert die Nummerierung und das automatische Inhaltsverzeichnis ohne weitere Konfiguration. Formatierungen‚Äã Tabstopps ‚îó ‚îª ‚îõ der Cursor springt beim Dr√ºcken der Tabulator-Taste bis zu diesem Tabstopp. Die Ausrichtung bestimmt, wie der Tabulator-Text ausgerichtet wird: ‚îó ‚îª ‚îõ Die Ausrichtung kann durch Doppelklicken auf den Tabstopp ge√§ndert werden. Linker Einzug ‚ßã Der gesamte Absatz wird einger√ºckt. Erstzeileneinzug ‚ñΩ Die erste Zeile eines Absatzes kann eigens kontrolliert werden. tip Unter Ansicht &gt; Anzeige kann das Lineal eingeblendet werden. Textausrichtung (Links, Zentriert, Rechts, Blocksatz) Auflistungen Rahmen Zeilenabstand (der Zeilenabstand innerhalb eines Absatzes) Absatzabstand (der Abstand zum vorherigen/n√§chsten Absatz) Men√ºband Start Men√ºband Layout tip Ein Zeilenumbruch im selben Absatz kann mit Shift+Enter erzeugt werden. Zeichenformat‚Äã Einzelne W√∂rter und Buchstaben/Zeichen lassen sich individuell formatieren. So kann etwa festgelegt werden, ob ein Zeichen kursiv, fett oder unterstrichen dargestellt werden kann. Zeichenformat ‚â†\\neqÓÄ†= √úberschrift Ertappen Sie sich dabei, Titel oder Untertitel mit der Zeichenformatierung zu machen, sollte bei Ihnen im Kopf eine Warnleuchte angehen üí° - hier sollen Formatvorlagen verwendet werden, damit Strukturinformationen hinterlegt werden k√∂nnen. Umformatierungen oder auch Inhaltsverzeichnisse sind nur mit diesen Formatvorlagen automatisiert m√∂glich. Einf√ºgen‚Äã Beim Einf√ºgen von kopiertem Text, bspw. von einer Website, werden auch die Zeichenformate mitkopiert (z.B. Links werden dann farbig angezeigt...). Dies ist nicht immer erw√ºnscht und teilweise soll nur der Text √ºbernommen werden. Dann kann √ºber die Einf√ºge-Optionen Nur den Text √ºbernehmen ausgew√§hlt werden: √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex01-what-is-programming.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã","keywords":""},{"title":"Nummerierung und Bilder","type":0,"sectionRef":"#","url":"/dokumente/ms-word/nummerierung","content":"Nummerierung und Bilder In diesem Abschnitt lernen Sie, wie In Word Seiten √úberschriften Abbildungen nummeriert werden und wie auf solche nummerierten Elemente verwiesen werden kann. Seitenzahlen‚Äã Das Kopf- und Fusszeilen Men√º √∂ffnen (Doppelklick in den untersten Bereich eines Blattes, oder im Suchfeld &quot;Fusszeile&quot; eingeben). Soll die erste Seite (bspw. Titelblatt) keine Seitenzahl erhalten, so kann das H√§ckchen &quot;Erste Seite Anders&quot; angew√§hlt werden: √úber die Option &quot;Seitenzahle formatieren...&quot; kann bspw. das Seitenzahlformat (z.B. r√∂mische Zahlen) oder der Startwert festgelegt werden. Die erste Seite, auch wenn &quot;Erste Seite Anders&quot; ausgew√§hlt ist, z√§hlt bei der Nummerierung auch dazu. Die Nummerierung muss also bei 0 starten, wenn die Seite nach dem Titelblatt die Seitenzahl 1 erhalten soll. √úberschriften Nummerieren‚Äã Um √úberschriften automatisiert nummerieren zu lassen, m√ºssen die √úberschriften als solche gekennzeichnet werden. Dies wird √ºber die Zuweisung einer Formatvorlage erreicht (Formatvorlagen) Die Formatvorlage f√ºr eine √úberschrift kann ge√§ndert und √ºber Format &gt; Nummerierung eine Nummerierung hinzugef√ºgt werden. Geschachtelte Nummerierung‚Äã Soll eine verschachtelte Nummerierung eingef√ºgt werden, muss zuerst der √úberschrift 1 eine einfache Nummerierung (wie oben) hinzugef√ºgt werden der Cursor im √úberschriften-Text fokussiert werden √úber die &quot;Liste mit mehreren Ebenen&quot; die verschachtelte Nummerierung eingef√ºgt werden Automatisches Inhaltsverzeichnis‚Äã Ein grosser Vorteil von zugewiesenen FOrmatvorlagen ist das Erzeugen von Verzeichnissen. Da Word nun &quot;weiss&quot;, was einer √úberschrift entspricht, lassen sich bspw. Inhaltsverzeichnisse autmatisch generieren und auf Knopfdruck auch aktualisieren. Bilder‚Äã Layoutoptionen‚Äã √úbung‚Äã Aufgabe Laden Sie das Word-Dokument ex02-machine-learning.docx herunter. Verschieben Sie die Datei auf OneDrive in Ihren Informatik-Ordner. Formatieren Sie Ihr Word-Dokument so, dass es am Ende wie in der Vorlage unten aussieht: √úbung Schritt f√ºr Schritt im Video‚Äã Alles ausser die Bilder‚Äã ‚Äã Bilder, Bildverzeichnisse, Querverweise‚Äã","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/dokumente/ms-word/pruefung","content":"Lernziele Dauer 45 Minuten Benotung Die Note z√§hlt 0.50.50.5 Hilfsmittel Laptop, Openbook, ohne Kommunikation untereinander Pr√ºfungsstoff Sie k√∂nnen ein Word-Dokument erstellen und unter einem vorgegebenen Namen abspeichern. Sie k√∂nnen ein Word-Dokument als PDF exportieren. Sie wissen was eine Formatvorlage ist und k√∂nnen diese ver√§ndern und anpassen (Nummerierung, Linker Einzug, Absatz, Schrfitgr√∂sse, Schriftart, Schriftfarbe...) Sie wissen wie ein Word-Dokument aufgebaut ist und welche Elemente auf den drei Strukturebenen (Abschnitt, Absatz, Zeichen) formatiert werden k√∂nnen Sie k√∂nnen Text aus dem Internet per Copy&amp;Paste in ein Word-Dokument einf√ºgen. Sie verwenden Einz√ºge (linker/rechter Einzug, Erstzeileneinzug) sowie Tabulatoren + Tabstops um die gew√ºnschte Dokumentstruktur zu erreichen. Sie wissen wie man Bilder einf√ºgt, zentriert und mit einer nummerierten Bildunterschrift erg√§nzt. Sie f√ºgen automatisch erzeugte Inhaltsverzeichnisse ein. Sie f√ºgen automatisch erzeugte Bildverzeichnisse ein. Sie k√∂nnen Kopf- und Fusszeilen einf√ºgen. Sie k√∂nnen Seitennummerierungen einf√ºgen. Sie k√∂nnen die Textausrichtung (Links-/Rechtsb√ºndig, zentriert oder Blocksatz) einstellen und die automatische Silbentrennung aktivieren.","keywords":""},{"title":"Flows","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/node-red/flows","content":"Flows Node, Connection, Flow Node Ein K√§stchen mit einer Funktion Verbindung Verbindet zwei Nodes miteinander Flow Alle Nodes die (auch indirekt) miteinander verbunden sind Nodes Jede Node kann ein, zwei oder drei Funktionalit√§ten zur Verf√ºgung stellen: Input Sobald eine Nachricht √ºber die Verbindung eintrifft, wird die Node ausgef√ºhrt Verarbeitung Der Inhalt der empfangenen Nachricht verarbeiten, anzeigen, speichern, ... Output Eine neue Nachricht kann an alle verbundenen Nodes weitergegeben werden. Node RED Starten‚Äã Auf üëâ render.com kann im Dashboard beim Web Service node-red die URL, unter welcher Ihr pers√∂nlicher Node-RED Dienst verf√ºgbar ist, nachgeschaut werden: Navigieren Sie auf diese Seite - es wird relativ lange dauern (ca. 2-3 Minuten), bis die Seite geladen hat. Wieso? Um Rechenzeit und somit auch Kosten zu sparen, werden inaktive Server (nur kostenlose) in einen Ruhezustand versetzt. Ein Server gilt als inaktiv, wenn er l√§nger als 15 Minuten keine Webseite mehr anzeigen musste. Wenn Sie nun zum erste Mal nach einiger Zeit den Dienst aufrufen, dauert es einen Moment, bis die Seite wieder online ist. Hat alles geklappt, k√∂nnen Sie sich mit den bei der Installation gew√§hlten Login-Daten (NODE_RED_USERNAME und NODE_RED_PASSWORD) einloggen (Username: admin, Passwort: WasSieGesetztHaben)): Installation √úberpr√ºfen‚Äã Erster Flow erzeugen Erstellen Sie Ihren ersten Flow und √úberpr√ºfen Sie, das alles genau so funktioniert wie im Video: Immer Online‚Äã Damit unsere Flows st√§ndig aktiv bleiben, m√ºssen wir sicherstellen, dass Render.com unsere Server nicht inaktiv setzt. Dazu erzeugen wir einen Flow, welcher alle 5 Minuten die Startseite aufruft und somit verhindert, dass Node-RED in den Ruhezustand versetzt wird. KeepAlive umsetzen Erzeugen Sie einen eigenen KeepAlive Flow und deployen sie diesen:","keywords":""},{"title":"Vorbereitung auf den IOT-Workshop 2023","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/node-red/installation","content":"Vorbereitung auf den IOT-Workshop 2023 Verwendete Dienste‚Äã Datenbank PostgreSQL von ElephantSQL.com Hosting Server Plattform as a Service (PaaS) von Render.com Wir verwenden kostenlose Dienste, um Node-RED zu installieren. Diese Dienste bieten eine gewisse Anzahl von Ressourcen (z.B. Speicherplatz, Datenbanken, ...) kostenlos an. Sobald diese Ressourcen aufgebraucht sind, m√ºssen Sie entweder auf eine kostenpflichtige Version upgraden oder auf einen anderen Anbieter ausweichen. Damit Node-RED durchgehend laufen kann, konfigurieren wir die Datenbank nicht bei render.com (dort wird sie nach 3 Monaten automatisch wieder abgeschalten), sondern bei ElephantSQL.com, wo eine Datenbank kostenlos zur Verf√ºgung steht. 1. Datenbank auf ElephantSQL.com erstellen‚Äã Erstellen Sie sich einen kostenlosen Account bei ElephantSQL.com √úber Create New Instance eine neue Datenbank erstellen: Step Plan Name: node-red Step Plan Plan: Tiny Turtle (Free) Step Datacenter Region: EU-West-1 (Ireland) In der √úbersicht der ebene erstellen Datenbank die URL postgres://...@....db.elephantsql.com... kopieren - wir brauchen sie sp√§ter beim erstellen von Node RED. 2. Node-RED auf Render.com installieren‚Äã Erstellen Sie sich einen kostenlosen Account bei Render.com Eine Node-RED Instanz mit einem kostenlosen Server von Render erzeugen, indem Sie auf den untenstehenden Knopf üëâ DEPLOY TO RENDER klicken und dann die drei Felder ausf√ºllen: DATABASE_URL Die Datenbank URL, die Sie in der vorherigen Anleitung kopiert haben. Sie sieht ungef√§hr so aus: `postgres://...@....db.elephantsql.com... NODE_RED_USERNAME admin NODE_RED_PASSWORD Ein sicheres Password - Sie brauchen es jedesmal, wenn Sie auf Node-RED zugreifen wollen. Achtung: Das Passwort muss mindestens 8 Zeichen lang sein und Zahlen sowie Sonderzeichen enthalten. Auf Apply klicken. Das wars vorerst ü•≥ - im Hintergrund wird jetzt der Node-RED Server aufgesetzt. Dies dauert eine Weile; Dass die Seite nicht sofort verf√ºgbar ist oder Fehlermeldungen anzeigt, ist normal. Das werden wir am EF-IOT-Workshop 2023 gemeinsam l√∂sen.","keywords":""},{"title":"3D Drucken","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/printing","content":"3D Drucken Mit einem 3D-Drucker lassen sich dreidimensionale Objekte erzeugen. Dabei arbeiten alle g√§ngigen Druckverfahren schichtweise - das Objekt wird aus mehreren Schichten zusammengesetzt, wobei eine einzelne Schicht zweidimensional auf die darunterliegende Schicht aufgetragen wird. @ @ @ @ Um ein Objekt zu drucken, muss in einem ersten Schritt ein 3D-Modell erstellt werden und in einem zweiten Schritt muss aus dem Modell ein konkreter Druck-Ablaufplan erzeugt werden, welcher Schicht-f√ºr-Schicht vorgibt, wo sich der Druck-Kopf durchbewegen soll. F√ºr beide Varianten gibt es eine Vielzahl von verschiedenen Tools. Wir verwenden hier zwei Open-Source Tools, die plattformunabh√§ngig sind und somit auf allen Betriebssystemen laufen. Zudem ist der Speicherbedarf geringer als bei kommerziellen Tools. 3D Modell erstellen üëâ OpenSCAD Modelle Slicen üëâ Prusa Slicer An der Schule steht der 3D-Drucker Prusa i3 MK3S+ von Prusa zur Verf√ºgung. Spannender Fakt zu Prusa-Druckern: Sie haben sich &quot;selbst&quot; gedruckt - alle Teile wurden von i3 Druckern gefertigt . Die Teile des Druckers sind √ºbrigens Open-Source und k√∂nnen selber gedruckt werden.","keywords":""},{"title":"Building Micro Python","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/micropython/modules","content":"Building Micro Python This article shows how to generate the MicroPython firmware for the ESP8266 board. The operating system used for this task is Ubuntu 22 on WSL. create the Micropython folder and inside this folder the esp8266 folder mkdir Micropython cd Micropython mkdir esp8266 cd esp8266 The MicroPython source code is available at üëâ Github Micropython. Instructions to build the firmware for the ESP8266 are available at üëâ MicroPython esp8266. Clone the repository git clone https://github.com/micropython/micropython Download the cross compiler, as described in üëâ Cross compiler As indicated in the link above, download the source of the cross compiler always from the folder esp8266 git clone --recursive https://github.com/pfalcon/esp-open-sdk Install the prerequisites for building sudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python3-serial sed git unzip bash help2man wget bzip2 libtool-bin Now we must download some tarballs which are not available anymore through the mirrors used by the compiler # some tarballs (binaries) are not available anymore on the preconfigured mirror - download them manually cd crosstool-NG/.build/tarballs/ wget https://libisl.sourceforge.io/isl-0.14.tar.gz wget https://github.com/libexpat/libexpat/releases/download/R_2_1_0/expat-2.1.0.tar.gz # compiler needs Python v2.7 - new ubuntu versions have Python v3 as default mkdir /tmp/tmpbin &amp;&amp; ln -s /usr/bin/python2.7 /tmp/tmpbin/python &amp;&amp; export PATH=/tmp/tmpbin:${PATH} # ensure serial module is found - get current version from https://pypi.org/project/pyserial/#files cd /tmp/tmpbin wget https://files.pythonhosted.org/packages/1e/7d/ae3f0a63f41e4d2f6cb66a5b57197850f919f59e558159a4dd3a818f5082/pyserial-3.5.tar.gz tar -xzf pyserial-3.5.tar.gz cd pyserial-3.5 python setup.py install Proceed to the build of the cross compiler with the following commands cd esp-open-sdk make STANDALONE=y |&amp; tee make0.log At the end of the build add the binary folder of the cross compiler to the PATH envinronment variable export PATH=~/Micropython/esp8266/esp-open-sdk/xtensa-lx106-elf/bin:$PATH Go into the micropython folder available under ~/Micropython/esp8266 cd ~/Micropython/esp8266/micropython Run git submodule update --init to add external dependencies. Next step is the MicroPython cross compiler build make -C mpy-cross Finally we can build the ESP8266 firmware with the following commands cd ports/esp8266 make axtls make Add modules‚Äã Now you can place all the modules you want to add to the firmware in the Micropython\\esp8266\\micropython\\ports\\esp8266 folder. then recompile the firmware from the folder Micropython\\esp8266\\micropython\\ports\\esp8266 with the command make clean make Flash the firmware‚Äã The firmware is generated under ports/esp8266/build-GENERIC folder with the name firmware_combined.bin. Proceed to flash the firmware... WSL / Windows Sadly, WSL 2 does not support yet USB devices by default. Becaus of that we use PowerShell to flash the firmware. Open the Folder \\Micropython\\esp8266\\micropython\\ports\\esp8266 in PowerShell esptool.py --port COMXX erase_flash where COMXX is repalced with the actual serial port to which we connect the ESP8266 board. In my case, the command looked like this esptool.py --port COM3 erase_flash And then upload the firmware with the command esptool.py --port COM3 --baud 460800 write_flash --flash_size=detect 0 .\\build-GENERIC\\firmware-combined.bin UNIX esptool.py --port /dev/ttyXXX erase_flash where /dev/ttyXXX is repalced with the actual serial port to which we connect the ESP8266 board. In our case, the firmware upload was successful with the command make PORT=/dev/ttyUSB0 deploy It is also possible to load the firmware_combined.bin image with the command esptool.py --port /dev/ttyUSBX --baud 460800 write_flash --flash_size=detect 0 firmware-combined.bin ","keywords":""},{"title":"OpenSCAD","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/printing/OpenScad","content":"OpenSCAD üëâ OpenSCAD herunterladen und installieren. Einf√ºhrung‚Äã intro.scad module baustein() { difference() { union() { cube([3, 1, 1]); translate([1, 1, 0]) cube([1, 1, 1]); } translate([1.25,0.25,-0.01]) cube([0.5, 0.5, 1.02]); } } translate([2, 2, 0]) rotate([90, 0, 0]) scale([0.5, 0.5, 1]) baustein(); Knobelw√ºrfel Dateiname EF-Info/docs/IOT-Day/knobelwuerfel.md Erstellen Sie in ein 3D Modell mit den 7 Elementen eines Knobel-W√ºrfels. Die Elemente sollen sich nicht ber√ºhren und sollen sich auch nicht gegenseitig √ºberlappen. Die Gr√∂sse der Elemente k√∂nnen Sie selber w√§hlen. @ Exportieren Sie ein Bild Datei &gt; Exportieren &gt; Bild exportieren... F√ºgen Sie ein Dokument knobelwuerfel.md mit der √úberschrift Knobelw√ºrfel zu Ihrem EF-Repository hinzu: √úberschrift: Knobelw√ºrfel Das Bild Codeblock mit dem Modell ```scad Commit &amp; Push Parameter und Schrift‚Äã simple-box.scad BOX_X = 40; BOX_Y = 40; BOX_Z = 30; BOX_WALL = 1.2; // Interne Parameter BOX_INNER_X = BOX_X - 2*BOX_WALL; BOX_INNER_Y = BOX_Y - 2*BOX_WALL; module txt() { translate([BOX_X / 2, 0.25 * BOX_WALL, BOX_Z / 2]) rotate([90, 0, 0]) linear_extrude(1) text(&quot;EF INFO&quot;, size=3, halign=&quot;center&quot;, valign=&quot;center&quot;); } module box() { difference() { cube([BOX_X, BOX_Y, BOX_Z]); translate([BOX_WALL, BOX_WALL, BOX_WALL]) cube([BOX_INNER_X , BOX_INNER_Y, BOX_Z]); txt(); } } module deckel() { union() { cube([BOX_X, BOX_Y, BOX_WALL]); translate([BOX_WALL, BOX_WALL, BOX_WALL]) cube([BOX_INNER_X, BOX_INNER_Y, BOX_WALL]); } } box(); translate([BOX_X + 10, 0, 0]) deckel(); Sensor-Box‚Äã Sensor-Box Das Modell sensor-box.scad enth√§lt das Grundger√ºst f√ºr unsere Sensorbox. Untersuchen Sie das Modell und f√ºgen Sie einen Schriftzug bspw. mit Ihrem Namen hinzu. sensor-box.scad docs/EF-IOT-Workshop/03-printing/01-OpenScad/assets/sensor-box.scad loading... See full example on GitHub Achtung √ºberh√§ngende Teile Achten Sie darauf, dass Sie keine (zus√§tzlichen) √ºberh√§ngenden Teile hinzuf√ºgen.","keywords":""},{"title":"I2C","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/protokolle/i2c","content":"I2C","keywords":""},{"title":"Netzwerkkommunikation mit Python","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/protokolle/python-requests","content":"Netzwerkkommunikation mit Python","keywords":""},{"title":"L√∂ten","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/soldering","content":"L√∂ten","keywords":""},{"title":"1. Leuchtk√§fer","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/soldering/bug","content":"1. Leuchtk√§fer","keywords":""},{"title":"2. ESP 8266","type":0,"sectionRef":"#","url":"/EF-IOT-Workshop/soldering/esp","content":"2. ESP 8266","keywords":""},{"title":"Infrastruktur","type":0,"sectionRef":"#","url":"/EF-Python/Infrastruktur","content":"Infrastruktur Ziele Sie haben die n√∂tige Software f√ºr diesen Themenblock auf Ihrem Notebook installiert Sie wissen, wozu die einzelnen Apps dienen Sie haben einen ersten Einblick in diese Apps genommen Sie haben einen ersten Eintrag in Ihrer Dokumentation geschrieben.","keywords":""},{"title":"Git Commit Nachrichten","type":0,"sectionRef":"#","url":"/EF-Python/Infrastruktur/git-messages","content":"Git Commit Nachrichten Wie verfasst man gute Commit-Nachrichten? Das ist gar nicht so einfach. Schaut man sich auf Github um, so sind die meisten strukturiert verfassten Commit-Nachrichten nach dem &quot;Imperative Mood&quot; 1 aufgebaut. √úber alls Commit-Nachrichten gesehen, sind es doch immerhin fast 50% der Nachrichten, die danach verfasst sind 2. Imperative Mood‚Äã Eine Commit-Nachricht ist in zwei Teile gegliedert: Aufbau einer Commit-Nachricht Hilfestellung f√ºr die Titelzeile: If applied, this commit will... ¬´update getting started documentation¬ª Imperativ verwenden (ohne abschliessende Satzzeichen): ¬´Putz dein Zimmer¬ª ¬´Schliess die T√ºre¬ª Entferne √ºberfl√ºssige Funktion 'run' √úberarbeite code und f√ºge Kommentare hinzu Fix typo in the function name 'play' Commit-Nachrichten sollen entweder auf Englisch oder Deutsch, aber immer gleich f√ºr ein Repository. Pr√§sentation Quelle: üëâ https://www.theserverside.com/video/Follow-these-git-commit-message-guidelines ‚Ü© Quelle: üëâ https://initialcommit.com/blog/Git-Commit-Message-Imperative-Mood ‚Ü©","keywords":""},{"title":"Markdown","type":0,"sectionRef":"#","url":"/EF-Python/Infrastruktur/markdown","content":"Markdown Die Dokumentation verfassen wir im Markdown-Format - eine Markup Langauge, welche weniger explizite Steuerzeichen als etwa HTML braucht. Tutorial Bearbeiten Sie das Tutrial inkl. der √úbungen zu Markdown auf der Seite üëâ https://commonmark.org/ und markieren Sie die Aufgabe anschliessend als erledigt. Achtung Im Tutorial wird eine M√∂glichkeit gezeigt, wie man neue Zeilen macht. Verwenden Sie die Option mit zwei Leerschl√§gen am Ende der Zeile, so dass Ihre Markdowns die gr√∂sstm√∂gliche Kompatibilit√§t aufweisen - ein \\ wird nicht immer unterst√ºzt. Steckbrief F√ºgen Sie auf in Ihrem Repository das Dokument docs/about-me.md hinzu. Verfassen Sie einen kurzen Steckbrief (mit Hobbies, Lieblingsgames, Lieblingsfilmen, Lieblingsessen,) inkl. eines Bildes (nicht zwingend von Ihnen, aber eines, das Sie heruntergeladen haben)hinzu. Machen Sie einen Commit und pushen Sie die √Ñnderungen auf Github. Markieren Sie diese Aufgabe als erledigt.","keywords":""},{"title":"Finaler Blogbeitrag","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/blogbeitrag","content":"Finaler Blogbeitrag Schreiben Sie einen abschliessenden Blog-Beitrag zum NumTrip-Game. Der Blogbeitrag soll dabei folgende Punkte behandeln: Ziel des Spiels Umsetzung des Spiels Voraussetzung: Was muss ich installieren, um das Spiel zu starten? Aktualisiertes Top-Down-Diagramm f√ºr das Spiel mit den von Ihnen geschriebenen Funktionen und deren Zusammenspiel. Erkl√§rung eines algorithmischen Konzepts, das Sie in Ihrem Spiel verwendet haben. (Bspw. wie das Aufdecken der Nachbarsfelder funktioniert) Zeigen Sie dazu auch Ausschnitte aus Ihrem Code. Gr√∂sste Herausforderungen, die Sie w√§hrend der Entwicklung des Spiels hatten. Tipps f√ºr andere EF-Sch√ºler:innen, die das Spiel auch umsetzen m√∂chten. Allenfalls Link zum Spiel","keywords":""},{"title":"GitHub","type":0,"sectionRef":"#","url":"/EF-Python/Infrastruktur/github","content":"GitHub üëâ https://github.com Um unsere Repositories zu synchronisieren, verwenden wir GitHub. Github ist aktuell der Quasi-Standard f√ºr Opensource Software und bietet Entwicklern kostenlos die M√∂glichkeit Repositories zu erstellen. Zudem k√∂nnen wir sp√§ter unser Repository auch als Webseite - √§hnlich dieser Lernwebseite hier - erzeugen lassen. Dazu aber sp$ter mehr. Github Konto erstellen Erstellen Sie auf https://github.com ein Konto. Sie d√ºrfen einen beliebigen Namen ausw√§hlen - Ihre Projekte sind dann unter diesem Namen zu finden. Halten Sie Ihren Github-Namen hier fest, damit ich (@bh0fer) darauf zugreifen kann. Github Repository erstellen Erstellen Sie auf Github ein neues Repository (z.B. mit dem Namen EF-Informatik). achten Sie darauf, dass der Namen keine Leerschl√§ge enth√§lt* W√§hlen Sie die Option Add a README file aus. * Da wir das Repository sp√§ter als Webseite ver√∂ffentlichen, wird die Url das Format https://username.github.io/EF-Informatik haben. Da bei URL's Leerschl√§ge zu %20 umgewandelt werden, w√§re die Adresse f√ºr den Repo-Namen EF Informatik dann https://username.github.io/EF%20Informatik, was m√ºhsam zu tippen ist. Github Repository klonen Klonen Sie das Repository auf Ihren Laptop. Erstellen Sie auf Ihrem Laptop zuerst einen neuen Ordner (bspw. unter Dokumente/git_code), in welchem Sie alle git Repositories abspeichern. git repositories nicht auf OneDrive/Dropbox Git-Repositories haben ein grundlegend anderen Ansatz zur Synchronisierung von Daten. Wird ein git-Repo √ºber bspw. Dropbox synchronisiert, werden laufend die √Ñnderungen (von einem anderen Computer) synchronisiert, auch wenn die √Ñnderungen per Git noch gar nicht ver√∂ffentlicht wurden. Die Folge sind viele √Ñnderungen (und Probleme)... Klonen Sie das Repository (wie unten im (stummen) Video gezeigt: Klonen README.md bearbeiten: F√ºgen Sie einen Code-Block hinzu, schreiben Sie eine Commit-Nachricht und pushen Sie die √Ñnderungen. ```py print('Hello World') ``` Kontrollieren Sie, ob die √Ñnderungen online sichtbar sind. Markieren Sie die Aufgabe als erledigt. Repository Struktur Unser Repository EF-Informatik sollte in etwa die folgende Struktur haben: git_code/ ‚îú‚îÄ‚îÄ ... ‚îî‚îÄ‚îÄ EF-Informaik/ ‚îú‚îÄ‚îÄ docs/ ‚îÇ ‚îú‚îÄ‚îÄ git.md ‚îÇ ‚îî‚îÄ‚îÄ programmieren.md ‚îú‚îÄ‚îÄ exercises/ ‚îÇ ‚îî‚îÄ‚îÄ 01-hello-world.py ‚îú‚îÄ‚îÄ NumTrip ‚îÇ ‚îî‚îÄ‚îÄ main.py ‚îî‚îÄ‚îÄ README.md Alle Dokumente mit Notizen etc. werden in den Ordner docs als *.md abgelegt. √úbungen k√∂nnen Sie im Ordner exercises ablegen f√ºr das Spiel NumTrip werden wir die Programme im Ordner NumTrip abspeichern. Leere Ordner Leere Ordner werden von Git ignoriert, weshalb leere Ordner nicht als √Ñnderung angezeigt werden.","keywords":""},{"title":"NumTrip","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip","content":"NumTrip Abgabe Abgabe 24.01.2023, 12:00 Uhr M√ºndliche Pr√ºfung: üëâ Liste Ziele Entwerfen einer Funktionshierarchie f√ºr das NumTrip-Game Entwerfen der globalen Datenstrukturen f√ºr das NumTrip-Game Implementation des NumTrip-Games als konsolenbasiertes Programm ‚≠êÔ∏è Erweiterung des konsolenbasierten NumTrip-Games mit Pygame Beurteilungskriterien‚Äã Kriterien\t0 Punkte\t1 Punkte\t2 Punkte\t3 Punkte Git History‚Äã Regelm√§ssige Commits Pro Commit nur thematisch zusammengeh√∂rende √Ñnderungen Imperativ Mood Weniger als zwei Bedingungen erf√ºllt Zwei von drei Bedingungen erf√ºllt Alle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Blog / Wiki / Portfolio‚Äã Ist vollst√§ndig Ist verst√§ndlich Ist fachlich korrekt Weniger als zwei Bedingungen erf√ºllt Zwei von drei Bedingungen erf√ºllt Alle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Spielumfang, Spielbarkeit‚Äã Unspielbar z.B.: Fehler f√ºhren zum Absturz Korrekte Benutzereingabe wird falsch verarbeitet Stark eingeschr√§nkte Funktionalit√§t, z.B.: Kein Eingabevalidierung Spielende nicht erkannt Leicht eingeschr√§nkte Funktionalit√§t: Felder ausw√§hlen (ohne Nachbarfelder) Eingabevalidierung Spielende erkannt Volle Funktionalit√§t: Felder aufdecken (inkl. Nachbarfelder) Eingabevalidierung Spielende erkannt Vorbereiteter Programmierteil‚Äã Kann erkl√§ren, worum es bei diesem Teil geht Zeigen, was daran gut gelungen ist Zeigen, was daran noch verbessert werden kann Weniger als zwei Bedingungen erf√ºllt\tZwei von drei Bedingungen erf√ºllt\tAlle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt Fragen zum Programm‚Äã Kann eine Stelle im Programm erkl√§ren Verwendet passende und korrekte Fachbegriffe Kann zu einem Fachbegriff (bspw. &quot;Referenzen&quot;) eine Codestelle im Programm zeigen Weniger als zwei Bedingungen erf√ºllt\tZwei von drei Bedingungen erf√ºllt\tAlle drei Bedingungen erf√ºllt, kleinere M√§ngel\tAlle drei Bedingungen sind vollst√§ndig erf√ºllt","keywords":""},{"title":"Nachbarzellen kombinieren","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/felder-aufdecken","content":"Nachbarzellen kombinieren Wenn die Spieler:in ein Feld ausw√§hlt, m√ºssen alle Nachbarszellen √ºberpr√ºft werden, ob Sie dieselbe Zahl enthalten und dann allenfalls kombiniert werden. Falls eine Nachbarszelle dieselbe Zahl enth√§lt, so m√ºssen auch dessen Nachbarszellen √ºberpr√ºft werden, ob diese diese Zahl enthalten, usw. Das Aufdecken der Nachbarschaft endet dort, wo ein Feld aufgedeckt wird, das in seiner Nachbarschaft keine gleiche Zahl enth√§lt. 1 2 3 4 5 1 2 3 4 5 --------------------- --------------------- 1 | 2 | 4 | 1 | 8 | 8 | 1 | 2 | 4 | 1 | 8 | 8 | --------------------- --------------------- 2 | 4 | 2 | 8 | 4 | 1 | S2, Z5 2 | | 2 | 8 | | 1 | --------------------- --------&gt; --------------------- 3 | 4 | 4 | 4 | 4 | 2 | 3 | | | | | 2 | --------------------- --------------------- 4 | 2 | 8 | 1 | 4 | 1 | 4 | 2 | 8 | 1 | | 1 | --------------------- --------------------- 5 | 2 | 4 | 4 | 4 | 4 | 5 | 2 | | | | | --------------------- --------------------- Fl√§chen f√ºllen‚Äã Dieses Problem ist ein bekanntes Problem aus der Computergrafik. Es tritt zum Beispiel auf, wenn in einer Rastergrafik eine begrenzte Fl√§che mit einer bestimmten Farbe gef√ºllt werden soll. Gesucht ist also ein Algorithmus, welcher diese Problem l√∂st. Wir lernen dabei eine neue Form von Algorithmen kennen, die Rekursion. @ Die Grundidee ist folgende: Das grosse Problem &quot;ganze Fl√§che mit beliebigen Grenzen einf√§rben&quot; wird zun√§chst reduziert auf das kleinstm√∂gliche Problem, einen &quot;einzelnen Pixel einf√§rben&quot;. Daf√ºr programmieren wir eine Funktion. Diese Funktion wird nun wie folgt erg√§nzt: Im Anschluss an das Einf√§rben des einen Pixels ruft sich die Funktion f√ºr die Nachbarpixel selber wieder auf, so dass auch diese eingef√§rbt werden. Das geht immer so weiter, bis alle Pixel eingef√§rbt sind. Diese sich selber Aufrufen wird als Rekursion bezeichnet. Ganz wichtig dabei ist, zu verstehen, dass der erste Aufruf der Funktion erst dann beendet ist, wenn alle weiteren Aufrufe von sich selber beendet sind. Es entsteht bei der Rekursion also so etwas wie eine Kette von h√§ngigen Funktionsaufrufen, welche sich erst dann aufl√∂st, wenn am Ende die Funktion sich nicht weiter selber aufruft. Es braucht in der Funktion also eine Entscheidung, ob weitere Aufrufe der Funktion n√∂tig sind. Beim Einf√§rben der Pixel, ist dies der Fall, wenn wir auf einen Pixel stossen, der die Farbe des Randes tr√§gt und somit nicht eingef√§rbt werden muss. Fehlt diese Abbruchbedingung, oder ist sie falsch formuliert, l√§uft die Rekursion immer weiter. Die Kette der h√§ngigen Funktionsaufrufe wird immer l√§nger, bis irgendwann der Speicher des Computers aufgebraucht ist. Das ist die grosse Gefahr der Rekursion. Der hier skizziert Algorithmus heisst Floodfill-Algorithmus. Eine sch√∂ne Beschreibung, inkl. Python-Implementierung finden Sie hier: üëâ https://de.wikipedia.org/wiki/Floodfill. Aufgabe Studieren Sie den Abschnitt &quot;Rekursive Implementierung&quot; im Artikel und entscheiden Sie, welche der beiden Varianten f√ºr das NumTrip Spiel ben√∂tigt wird. Passen Sie dann die vorgeschlagene Python-Implementierung auf Ihre Situation im NumTrip-Spiel an. Wichtig: Vorerst &quot;l√∂schen&quot; wir nur den Zelleninhalt aller Zellen Nachbarszellen (und deren Nachbarszellen), die denselben Zahlenwert enthalten wie die ausgew√§hlte Zelle.","keywords":""},{"title":"Felder Auff√ºllen","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/felder-auffuellen","content":"Felder Auff√ºllen Im vorherigen Schritt wurden alle gleichzahligen Nachbarszellen (und deren Nachbarszellen) mit einem leeren Wert ersetzt. Nun sollen die leeren Zellen zusammengeschoben werden. An der Stelle der ausgew√§hlten Zelle wird der urspr√ºngliche Wert verdoppelt. Spalte 2, Zeile 3 ausgew√§hlt (Zahl 4) 1 2 3 4 5 1 2 3 4 5 --------------------- --------------------- 1 | 2 | 4 | 1 | 8 | 8 | 1 | 2 | 4 | 1 | 8 | 8 | --------------------- --------------------- 2 | | 2 | 8 | | 1 | 2 | | 2 | 8 | | 1 | --------------------- --------------------- 3 | |[4]| | | 2 | ---&gt; 3 | | 8 | | | 2 | --------------------- --------------------- 4 | 2 | 8 | 1 | | 1 | 4 | 2 | 8 | 1 | | 1 | --------------------- --------------------- 5 | 2 | | | | | 5 | 2 | | | | | --------------------- --------------------- Jede Spalte wird von unten her durchgegangen. Ist die Zelle leer, wird der Wert mit der n√§chstm√∂glichen, nichtleeren Zelle derselben Spalte getauscht. Beispiel 1Beispiel 2Zeilen 4-1 1 2 3 4 5 | 1 2 1 2 --------------------- | ----------- ----------- 1 | 2 | 4 | 1 | 8 | 8 | | 1 | 2 | 4 | 1 | 2 | 4 | --------------------- | ----------- ----------- 2 | | 2 | 8 | | 1 | | 2 | | 2 | 2 | | 2 | --------------------- | ----------- ----------- 3 | | 8 | | | 2 | | 3 | | 8 | ---&gt; 3 | | 8 | --------------------- | ----------- ----------- 4 | 2 | 8 | 1 | | 1 | | 4 | 2 | 8 | &lt;-- oberhalb leer? Nein 4 | 2 | | &lt;-- Werte vertauscht --------------------- | ----------- / ----------- / --&gt; 5 | 2 | | | | | | 5 | 2 | | &lt;-' 5 | 2 | 8 | &lt;-' --------------------- | ----------- ----------- ^ | ^ ^ | | | | Alle Zellen werden erneut durchgegangen. Ist eine Zelle leer, so wird eine zuf√§llige ganze Zahl oder 1 als Zellenwert festgelegt. Es kommen also die Zahlen [1, 2, 4], evtl. auch noch die 8 in Frage. Lesen Sie unter üëâ Zuf√§llige Zahlen nach, welche M√∂glichkeiten zum Erzeugen von zuf√§lligen Zahlen es unter Python gibt. Aufgabe Setzen Sie obigen Algorithmus um. Markieren Sie die Aufgabe anschliessend als erledigt.","keywords":""},{"title":"Git Grundlagen ","type":0,"sectionRef":"#","url":"/EF-Python/Infrastruktur/git","content":"Git Grundlagen üëâ https://git-scm.com/ https://www.lernmoment.de/alle/warum-git/ Warum Git? 1‚Äã Die Entwicklung von Git ist eine Erfolgsgeschichte. Als Linus Torvalds 2005 die Entwicklung von Git initiierte lag dem ein ganz pragmatisches Problem zugrunde: Als Verwalter der Entwicklung des Linux-Kernels ben√∂tigte er ein m√§chtiges, verteiltes und kollaboratives Werkzeug zur Versionsverwaltung von Quellcode. Das zuvor verwendete propriet√§re Tool bot keine M√∂glichkeit der kostenlosen Verwendung und die kostenfreien Alternativen gen√ºgten den Anforderungen von Torvalds nicht. Die Idee ein eigenes, freies Softwareprodukt zu schreiben war geboren. Seitdem wurde Git von Jahr zu Jahr popul√§rer und hat eine ganze Reihe auf Git aufsetzender Anwendungen (etwa Sourcetree und GitHub Desktop) und Webplattformen (etwa GitHub und Bitbucket) hervorgebracht. Doch warum wird Git so vielfach verwendet? Paralleles Arbeiten: Git erlaubt es mehreren Entwicklern parallel und dezentral an einem Projekt (repository) in verschiedenen Entwicklungszweigen (branches) zu arbeiten. Der eigentliche Clou liegt dabei darin, dass Git eine ganze Reihe an M√∂glichkeiten (merge, rebasing, cherry picking, etc.) bietet diese Entwicklungszweige auch wieder zusammenzuf√ºhren. Flexibilit√§t: Es ist m√∂glich verschiedenste Arbeitsweisen und Arbeitsmodelle (workflows) in Git zu realisieren. So eignet sich Git f√ºr die lokale Verwendung bei einem einzelnen Entwickler bis zur servergest√ºtzten Teamarbeit in einem internationalen Softwarekonzern. In gewisser Art und Weise baut man sich auf der Basis von Git seine eigene Versionsverwaltung auf. Einfache Beitr√§ge: Git macht es vergleichsweise einfach zu einem Projekt beizutragen bei dem man weder der Besitzer noch Teil des Kernteams ist. Bei zentralen Versionsverwaltungssystemen steht hier oft die Rechteverwaltung im Weg, doch erlaubt Git das einfache Kopieren (clone) des Quellcodes von einem gefolgten √Ñnderungsvorschlag (pull request). Performance: Selbst bei sehr gro√üen Projekten bleibt Git schnell. Auf meinem MacBook Air (11 Zoll, 2016) konnte ich von einer aktuellen Version des Quellcodes des Linux-Kernels auf eine sechs Jahre alte Version von 2010 unter einer Minute wechseln. Das mag zun√§chst gar nicht so beeindruckend klingen, doch man sollte bedenken das hier etwa 40.000 Datei√§nderungen vorlagen! Robustheit: Aufgrund der Architektur von Git ist ein gravierender Datenverlust sehr unwahrscheinlich. Pr√ºfsummen verhindern eine unbeabsichtigte Korruption von Daten, der dezentrale Aufbau sorgt daf√ºr, dass der Code auf mehreren Rechnern vorliegt und die einfache Datenstruktur sorgt f√ºr die Interpretierbarkeit der Daten. Schlussendlich erlaubt die Versionierung und Verzweigung des Quellcodes wieder zu einem funktionierenden Stand zur√ºckzukehren. Offsite und Offline: Die dezentrale und zugleich verkn√ºpfbare Struktur von Git erlaubt sowohl die Arbeit mit verteilten Entwicklungsteams als auch ‚Äì zumindest eine gewisse Zeit lang ‚Äì die Arbeit ohne Zugriff auf den Server. Erweiterbarkeit und Integrationsf√§higkeit: Git ist nahezu beliebig erweiterbar und integrierbar. Es ist offen f√ºr individuelle Anwendungen und Zusammenarbeit mit nahezu jeder belieben anderen Software. Gemeinschaft und Freiheit: Git ist nicht nur kostenlose, sondern auch freie Software. Das heisst der Quellcode steht offen bereit und Mitarbeit ist sogar erw√ºnscht. Verletzungen des Urheberrechts oder rechtliche Konflikte sind ausgeschlossen. Dar√ºber hinaus existiert ein nahezu riesiges √ñkosystem aus Dokumentationen und Erkl√§rungen, Tools, Plattformen, Dienstleistern sowie Plug-Ins. Hinsichtlich des gemeinschaftlichen Aspekts sei GitHub hervorgehoben, welches sich in den letzten Jahren zum Quasi-Standard von OpenSource-Projekten entwickelt hat. Hier findet man abertausende Entwickler und deren Softwareprojekte. Konzepte‚Äã Das Kernelement von Git sind die Repositories (Repo - ein ganz normaler Ordner, dessen Dokumente mit Git versioniert werden). Dabei wird zwischen dem remote Repos auf dem Server und den lokalen Repos auf einem Computer unterschieden. Um mit Git verwalteten Projekten zu arbeiten, muss das Repository heruntergeladen werden. Man spricht von Klonen (clone), weil sich Git die Internet-Adresse des Remote Repos merkt und man somit zu einem sp√§teren Zeitpunkt √Ñnderungen (manuell) synchronisieren kann auch alle Vorg√§ngerversionen der Projektdateien enthalten sind Repo Klonen in VS Code Anleitung, wie in VS Code ein Repository von Github geklont wird. üëâ https://code.visualstudio.com/docs/editor/github#_setting-up-a-repository Dateien in diesem Ordner sind versioniert - dies bedeutet f√ºr Git, dass zu einem gewissen Zeitpunkt √Ñnderungen vorgenommen wurden. Jede √Ñnderung ist mit einer von der Programmierer:in geschriebenen Nachricht versehen. VersionenIDNachricht Nach dem Klonen des Projektes, kann zu beliebigen sp√§teren Zeitpunkten durch einen pull der neueste Stand vom remote Repository ins lokale Repository synchronisiert werden. Dadurch stellt man sicher, dass man keine √Ñnderungen von anderen Projektmitarbeitern verpasst. √Ñnderungen vornehmen‚Äã Jetzt kann die Datei bearbeitet werden. Git kann nun anzeigen, welche Zeilen und Zeichen ver√§ndert. Dadurch k√∂nnen √Ñnderungen nochmals √ºberpr√ºft werden. def aaa(a, b): return (a + b) / 2 def durchschnitt(a, b): return (a + b) / 2 Ist man zufrieden, w√§hlt man die ver√§nderten Dateien, deren √Ñnderungen man zusammenfassen m√∂chte, aus und f√ºgt sie einem Stage hinzu (man b√ºndelt diese √Ñnderungen zusammen). Mit einer Nachricht wird beschrieben, was in dieser √Ñnderung gemacht wurde, der anschliessende Commit finalisiert das √Ñnderungspaket. Im obigen Beispiel k√∂nnte die Nachricht etwa Verwende einen sinnvollen Funktionsnamen lauten. Mit dem push Befehl wird anschliessend dieses √Ñnderungspaket an das Remote-Repository geschickt. Die wichtigste Eigenschaft von Git ist, dass es √Ñnderungen, welche von verschiedenen Personen vorgenommen wurden, zusammenf√ºhren kann, und daf√ºr sorgt, dass alle Repositories auf dem gleichen Stand sind. Dieser Vorgang wird in Git merge genannt. Visual Studio Code verf√ºgt √ºber eine eingebaute Schnittstelle zu Git. Diese werden wir im Normalfall brauchen. Manchmal ist es aber n√∂tig direkt mit Git zu arbeiten. Dazu dient die App Git Bash auf Windows. Auf dem Mac kann man dazu direkt das Terminal brauchen. Die n√∂tigen Kommandos werden wir nach und nach kennenlernen (halten Sie diese am besten in Ihrer Dokumentation fest). Quelle: Tobias Vetter ‚Ü©","keywords":""},{"title":"Game Loop","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/gameloop","content":"Game Loop Wir sind fast fertig mit der Implementation des NumTrip-Spiels. Was bleibt ist, dass die Spieler:in nicht nur einen Zug machen kann, sondern so viele, wie n√∂tig sind, bis das Spiel fertig ist. In der Spielentwicklung spricht man vom Game-Loop. Wie der Name sagt ist dies eine Schleife, welche in der Regel folgende Form hat: wiederhole bis Spielende erreicht: Eingabe von Benutzer:in Eingabe verarbeiten Neuen Spielstand anzeigen Aufgabe Erg√§nzen Sie die Hauptfunktion Ihres Spiels mit einer Game-Loop, wobei vorerst unendlich viele Runden gespielt werden k√∂nnen. commit F√ºgen Sie eine √úberpr√ºfung hinzu, ob das Spiel gewonnen oder verloren wurde: Gewonnen: Eine von Ihnen festgelegte Zahl (bspw. 1024) wurde erreicht Verloren: Es gibt keine weitere M√∂glichkeit, einen Zug zu machen. (Wenn es min. ein Feld mit einem gleichwertigen Nachbarsfeld gibt, so gibt es noch eine M√∂glichkeit...) Im Anschluss soll dann die Spieler:in mitgeteilt werden, ob das Spiel gewonnen oder verloren wurde. ‚≠ê Zusatz: Score F√ºgen Sie einen Score hinzu, der angibt, wie viele Z√ºge man gebraucht hat, um das Endziel (1024) zu erreichen.","keywords":""},{"title":"Zuf√§llige Zahlen auf dem Spielfeld","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/random-board","content":"Zuf√§llige Zahlen auf dem Spielfeld Aufgabe Lesen Sie das Kapitel zu zuf√§lligen Zahlen in Python Erstellen Sie eine Funktion, welche ein neues Spielfeld mit zuf√§lligen Zahlen erzeugt. F√ºgen Sie eine Funktion play (o.√§.) hinzu, welche ein neues Spielfeld erzeugt und dieses anschliessend anzeigt.","keywords":""},{"title":"Spielfeld","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/spielfeld","content":"Spielfeld Eine der ersten Aufgaben, wenn man ein neues Programm schreiben soll, ist sich zu √ºberlegen, welche Informationen das Programm verarbeiten muss und wie diese im Programm codiert werden sollen. Man spricht von Datenstrukturen. F√ºr alleinstehende Informationen, wie eine einzelne Zahl oder einen Text k√∂nnen wir auf Variablen zur√ºckgreifen. Beispiele: breite = 10 spieler_name = 'Globi' Oft hat man aber Daten, welche in irgend einer Form zusammengesetzt sind, zum Beispiel eine Adresse. Sie besteht aus mehreren Teilinformationen, wie Strasse, Hausnummer, PLZ und Ort. Hier w√§re es m√ºhsam, wenn man f√ºr die einzelnen Teile im Programm separate Variablen verwenden m√ºsste. Alle Programmiersprachen bieten deshalb M√∂glichkeiten an, solche zusammengesetzten oder strukturierten Daten auf einfache Weise in einem Programm zu repr√§sentieren. Eine davon kennen Sie. Es ist die Liste. Sie kommt immer dann zum Einsatz, wenn wir mehrere Informationen vom selben Datentyp zusammen speichern wollen. Genau einen solchen Fall von vielen gleichartigen Informationen stellt das Spielfeld unseres NumTrip Games dar. Hier haben wir eine Matrix von einzelnen Zellen. Jede Zelle widerspiegelt dabei den aktuellen, aufsummierten Zahlenwert. Aufgabe Dateiname EF-Informatik/docs/numtrip/datenstruktur.md √úberlegen Sie sich zu zweit oder zu dritt, wie Sie die oben beschriebenen Informationen zum Spielfeld in einer geeigneten Datenstruktur in einem Python-Programm darstellen k√∂nnen. Stellen Sie sich dazu folgenden Fragen: Welcher Datentyp wird in einer Zelle gespeichert? Braucht es eine Liste? Welche Dimension hat diese? Brauchen wir mehrere Listen? Fertigen Sie auf Papier eine kleine Illustration Ihrer Datenstruktur an und schreiben Sie einen kurzen Dokumentationsbeitrag zu Ihren √úberlegungen (jede Person f√ºr sich). (Fotografieren Sie Ihre Skizze und binden diese in Ihr Markdown ein). Commit &amp; Push","keywords":""},{"title":"‚≠ê Py Game","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/pygame","content":"‚≠ê Py Game Sie haben das NumTrip-Spiel in der Konsolenversion erfolgreich fertiggstellt. Der n√§chste Schritt ist, dazu ein grafische Benutzeroberfl√§che zu bauen. Dazu gibt es viele M√∂glichkeiten. Eine ist PyGame. Sie finden eine Einf√ºhrung unter dem folgenden Link: üëâ https://realpython.com/pygame-a-primer/ Vorgehen:‚Äã Arbeiten Sie die Einf√ºhrung soweit durch, dass Sie f√ºr die die n√§chsten Schritte bereit sind. Machen Sie eine Kopie von Ihrem NumTrip-Spiel. Erg√§nzen Sie dieses nun schrittweise mit den n√∂tigen Pygame-Anweisungen. Ein erster Schritt k√∂nnte sein, dass das Feld in einem eigenen Fenster angezeigt wird. Anschliessend k√∂nnen Sie die Game-Loop umbauen, so dass sie Pygame-Events verarbeitet. Machen Sie regelm√§ssig commits und pushs von Ihrer neuen Datei.","keywords":""},{"title":"Jetzt gehts los!","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/spielfeld-programmieren","content":"Jetzt gehts los! NumTrip numtrip.py Dateiname EF-Informatik/numtrip/game.py Programmieren Sie die Datenstruktur f√ºr das Spielfeld, so wie Sie diese in der vorhergehenden Aufgabe entworfen haben. Initialisieren Sie das Spielfeld f√ºr den Moment so, dass es einen fortgeschrittenen Spielstand eines Spiels repr√§sentiert (daher mind. eine zweistellige Zahl vorweist - welche Zahlen kommen in Frage??). Damit man auch etwas sieht, wenn Sie das Programm ausf√ºhren, programmieren Sie noch die n√∂tigen Anweisungen, welche das Spielfeld auf der Konsole anzeigt. √úberlegen Sie sich dazu, wie Sie das Spielfeld nur mit Zeichen dargestellt werden kann und dass alle Zellen immer gleich gross sind. Wenn alles zu Ihrer Zufriedenheit funktioniert, machen Sie einen Commit, pushen die √Ñnderungen und markieren diese Aufgabe als erledigt. Noch keine Spieler:inneninteraktion Es ist in diesem Schritt noch keine Interaktion mit Spielenden oder ein Spielfluss zu programmieren - nur das Anzeigen des Spielfelds... Auftrag auf Freitag, 21.10.2022 Am Freitag werden wir mit dem Spielfeld weiterarbeiten. Damit alle eine gute Ausgangslage haben, gibt es den folgenden Kurz-Auftrag: (F√ºr alle): Das Spielfeld soll wie im Beispiel unten mit einer verschachtelten Liste beschrieben werden. Die Zahlen k√∂nnen Sie selber w√§hlen. (Wer das eigene Spielfeld noch nicht fertig hat): Den untenstehenden Code √ºbernehmen und Zeile f√ºr Zeile analysieren und kommentieren. Insbesondere sollte Ihnen wieder klar werden, was folgende Syntax bezweckt: Was macht f'|{zelle}' ? was macht das end=''? Commiten und Pushen board = [ [2, 4, 1, 8, 8], [4, 2, 8, 2, 1], [4, 4, 8, 4, 2], [2, 8, 1, 4, 1], [2, 4, 4, 4, 4] ] for zeile in board: for zelle in zeile: print(' -', end='') print(' ') for zelle in zeile: print(f'|{zelle}', end='') print('|') for zelle in board[0]: print(' -', end='') print(' ') Refactoring: Funktionen verwenden‚Äã Aufgabe Packen Sie zun√§chst die Anweisungen, welche das Spielfeld auf der Konsole anzeigen aus obiger Aufgabe in eine Funktion. Erg√§nzen Sie sodann diese Funktion mit den n√∂tigen Anweisungen so, dass am Anfang jeder Zeile die Zeilennummer steht. Schreiben Sie schliesslich eine weitere Funktion, welche die Spaltennummern ausgibt und rufen Sie die beiden Funktionen im Hauptprogramm auf. Die Ausgabe auf der Konsole k√∂nnte dann wie folgt aussehen: 1 2 3 4 5 ----------- 1 |2|4|1|8|8| ----------- 2 |4|2|8|2|1| ----------- 3 |4|4|8|4|2| ----------- 4 |2|8|1|4|1| ----------- 5 |2|4|4|4|4| ----------- Wenn alles zu Ihrer Zufriedenheit funktioniert, machen Sie ein commit und push und markieren Sie die Aufgabe als erledigt. ‚≠êÔ∏è Spielfeld Farben‚Äã Konsolen-Ausgaben k√∂nnen auch koloriert werden - dazu verwendet man am besten eine Bibliothek, welche das Einf√§rben weitgehend √ºbernimmt. Bspw. üëâ https://pypi.org/project/colorama/","keywords":""},{"title":"Top-Down Entwurf Spiel","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/topdown-entwurf","content":"Top-Down Entwurf Spiel Spielentwurf Dateiname EF-Informatik/docs/numtrip/top-down-entwurf.md Setzen Sie sich in Ihrer Gruppe zusammen und entwerfen Sie auf einem Blatt Papier einen Top-down-Entwurf f√ºr das NumTrip-Spiel. Integrieren Sie dabei die bereits bestehende Funktion f√ºr die Spielfeldausgabe in Ihren Entwurf. Begrenzen Sie dabei die Anzahl der Verfeinerungsebenen auf maximal vier Ebenen. Erstellen Sie anschliessend ein neues Markdown Dokument (jedes Gruppenmitglied f√ºr sich) mit Ihrem Entwurf.","keywords":""},{"title":"Spielstart & Eingabe","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/user-input","content":"Spielstart &amp; Eingabe Nun wird's interaktiv ü•≥ Eine Gamer:in soll ein Feld ausw√§hlen k√∂nnen. Nur Felder ausw√§hlen Die Gefahr bei diesem Schritt lauert im inneren Bed√ºrfnis, in diesem ersten Schritt bereits an alles zu Denken und das ganze Spiel zu programmieren! in diesem Schritt nicht gefragt : die Eingabe auf ung√ºltige Eingaben √ºberpr√ºfen ausgew√§hlte Felder zusammenrechnen den Spielstand angebe √ºberpr√ºfen, ob das Spiel vorbei ist Sound hinzuf√ºgen ... Spielstart und Eingabe Nur eine einzelne Eingabe einlesen und das Feld nicht mehr anzeigen... Commit &amp; Push Hinweis Eingabe Koordinaten auslesen Im Spielfeld das ausgew√§hlte Feld markieren Aktualisiertes Spielfeld anzeigen (markiertes Feld soll leer sein) Eingabe und Auswerten der Eingabe in separate Funktionen verschieben und nun diese Funktionen aufrufen... Commit &amp; Push Eine Funktion play o.√§. schreiben, welche solange das Spiel l√§uft (vorerst also unendlich lange!) den ersten Schritt wiederholt... Commit &amp; Push Hinweis Weiss man nicht im voraus, wie oft etwas wiederholt wird, so ist es immer ein Hinweis, dass eine while Schleife verwendet werden sollte. Hier eine, die unendlich lange l√§uft (bis man Ctrl + c dr√ºckt): while True: eingabe() auswerten() show() Code nochmals kurz durchgehen - machen Variablen- und Funktionsnamen Sinn? K√∂nnten gewisse Dinge einfacher verst√§ndlich (‚â†\\neqÓÄ†= weniger Code) geschrieben werden? Braucht es allenfalls irgendwo noch eine weitere Funktion?... Commit &amp; Push Kurzer Blog-Eintrag in Form eines Lernjournals - was haben Sie gemacht (evtl. mit Screenshot), wie spielen die Funktionen zusammen? Aufgabe √úberpr√ºfen Sie im NumTrip Spiel die Benutzereingaben, so dass auch bei fehlerhaften Eingaben das Programm nicht abst√ºrzt. Grundger√ºst des Spiels, vol. 2 Wichtig vor der Verwendung: √úberlegen Sie sich, wie die untenstehende Version mit Ihrem Top-Down Entwurf zusammenpasst. Die √úberpr√ºfung der Eingaben muss unbedingt noch selber implementiert werden. Es sind aktuell keine Kommentare vorhanden - beschreiben Sie mit Kommentaren jede √ºbernommene Funktion, was sie macht. stage2.py loading... See full example on GitHub","keywords":""},{"title":"Python","type":0,"sectionRef":"#","url":"/EF-Python/Python","content":"Python Auffrischung der im obligatorischen Fach Informatik gewonnenen Kenntnisse. üëâ offizielle Webseite: https://www.python.org Bei Python handelt es sich um eine weit verbreitete ¬´h√∂here¬ª Programmiersprache. Im Gegensatz zu vielen anderen Programmiersprachen, wird Python interpretiert. D.h. ein Python-Code l√§uft auf allen Systemen f√ºr welche Python-Interpreter existieren und diese existieren f√ºr fast jedes Betriebssystem: Windows, macOS, Linux und andere. Python-Logo Die Syntax von Python legt viel Wert auf Lesbarkeit des Codes. Dies wird vor allem durch das Einr√ºcken von Code zur Kennzeichnung von Programmierbl√∂cken erreicht. Was bei Python zur Syntax geh√∂rt, ist bei vielen anderen Programmiersprachen nur Konvention, an welche man sich nicht zwingend halten muss. Kommentare‚Äã Kommentare werden vom Interpreter ignoriert. Sie stellen keine Anweisungen dar! Aber sie k√∂nnen uns helfen den Code zu dokumentieren, Python bietet zwei Arten von Kommentaren: einzeilige Kommentare‚Äã Wird mit einem Hashtag # gekennzeichnet ‚Äì alles was rechts davon auf dieser Zeile steht gilt als Kommentar. # Das ist ein Kommentar print(42) # ab hier ist der Rest der Zeile ein Kommentar # print('Hallo') # Diese Zeile wird nicht interpretiert mehrzeilige Kommentare‚Äã Wird durch drei Anf√ºhrungszeichen &quot;&quot;&quot; eingeleitet ‚Äì alles bis zu den n√§chsten drei Anf√ºhrungszeichen gilt als Kommentar. ''' Alles zwischen den drei Hochkommas ist ein Kommentar Alle Zeilen werden von Python ignoriert ''' print(42) print-Befehl‚Äã Der print-Befehl gibt seine Argumente auf einer Zeile aus. Dabei k√∂nnen beliebig viele Argumente √ºbergeben werden. print wandelt diese automatisch in Text um. print('Hello World') print('Hello', 'World') print('Hello, i am', 16 'years old') ","keywords":""},{"title":"‚≠ê Daten speichern & laden","type":0,"sectionRef":"#","url":"/EF-Python/NumTrip/load-data","content":"‚≠ê Daten speichern &amp; laden Das NumTrip Spiel startet derzeit jedesmal wenn wir es starten von neuem. Das heisst, der Spielstand des letzten Spiels wurde nicht gespeichert. Die spielende Person muss also entweder jedes Spiel in einem Zug durchspielen, oder verliert Ihren Fortschritt. Moderne Programme und Spiele haben meistens die M√∂glichkeit, Daten und Informationen permanent zu speichern. Das bedeutet, die Daten sind auch nach dem stoppen und Neustarten des Programms noch vorhanden. Wie funktioniert speichern?‚Äã Wenn wir in Python eine Variable generieren wird diese im Arbeitsspeicher (RAM) des Rechners gespeichert. Wie Ihr bestimmt wisst, ist der Arbeitsspeicher fl√ºchtig. Das heisst, wenn der Computer ausgeschalten wird oder das Programm beendet wird gehen die Informationen verloren. Der einzige Speicher, der auch nach einem Neustart noch vorhanden ist, ist die Festplatte (z.B. SSD). Wir brauchen also eine M√∂glichkeit, die wichtigsten Informationen auf die Festplatte zu speichern. Typischerweise funktioniert dies durch Dateien auf dem Computer. Ihr kennt das schon von anderen Programmen. Wenn Ihr z.B. im Word eine Textdatei bearbeitet, werdet Ihr beim speichern gefragt wo die Datei gespeichert werden sollte und wie sie heissen soll. Referenzen Nachdem dieser Dialog ausgef√ºhrt wird ist die Datei permanent auf der Festplatte gespeichert und kann auch wieder aufgerufen werden. In Python ‚Äã Programmiersprachen verwenden oft sogenannte standardisierte Dateiformate um Daten zu Speichern. Diese sind nichts anderes, als eine Abmachung dar√ºber, in welchem Format die Datei gespeichert ist. Wenn Ihr an das Beispiel der Word Datei zur√ºckdenkt f√§llt euch bestimmt auf, das diese Dateien z.B. die Endung .docx haben. Dies dient dem Zweck, dass andere Programme wissen, in welchem Format die Informationen in dieser Datei gespeichert sind, und wie sie beim √∂ffnen interpretiert werden sollten. Ein solches Dateiformat ist JSON. Dieses kommt urspr√ºnglich von der Programmiersprache JavaScript, wurde mittlerweile aber in vielen anderen Sprachen aufgenommen, unter anderem von Python. Wenn wir mit JSON arbeiten wollen, importieren wir das Modul dazu ganz einfach: import json Wir k√∂nnen aber nicht jegliche Variablen direkt in JSON speichern! Dazu ben√∂tigen wir eine Datensammlung: daten = {} In diese Datensammlung k√∂nnen wir nun unsere Variablen hineinschreiben. Im folgenden Beispiel wird der Inhalt der Variable spielfeld in die Datensammlung daten unter dem Namen spielfeld geschrieben: daten['spielfeld'] = spielfeld Wir k√∂nnen beliebig viele Variablen in die selbe Datensammlung packen: # selbe Datensammlung 'daten' wie oben daten['hoehe'] = hoehe Speichern‚Äã Wenn die Datensammlung alle Informationen enth√§lt, die wir speichern wollen, k√∂nnen wir diese nun sehr einfach in eine Datei schreiben: dateiname = 'numtrip.json' daten = {} with open(dateiname, 'w') as f: json.dump(daten, f) Der dateiname ist das selbe, was wir bei Word beim speichern angeben - Der Name der Datei auf dem Computer. Die Option 'w' steht f√ºr write (schreiben) und bedeutet, dass wir die Datei bearbeiten wollen. Das as datei bedeutet, dass wir im Programm unter dem Namen f (f√ºr file) auf die ge√∂ffnete Datei zugreifen k√∂nnen. Sie sehen, dass nach der Zeile, welche die Datei √∂ffnet, ein Doppelpunkt und ein einger√ºckter Block folgt. Wir k√∂nnen in diesem einger√ºckten Block mit der Datei arbeiten. Sobald wir den einger√ºckten Block verlassen, wird die Datei gespeichert und wir haben keinen Zugriff mehr darauf, bis wir sie erneut √∂ffnen. Letztendlich gibt es nur noch die Zeile json.dump(daten, datei). Diese sagt dem JSON Modul, dass es die Datensammlung daten in die ge√∂ffnete Datei f speichern soll. Laden‚Äã Wenn wir Informationen in eine Datei gespeichert haben, m√∂chten wir diese nat√ºrlich auch wider ins Programm laden. Dies funktioniert ebenfalls sehr √§hnlich: with open(dateiname) as f: daten = json.load(f) spielfeld = daten['spielfeld'] Achtet darauf, dass wir hier auch die open funktion von Python benutzen um die Datei zu √∂ffnen, dieses mal fehlt aber die option w. Da wir die Daten nur lesen und laden wollen, ben√∂tigen wir nicht die Schreibrechte. Die Datei ist jetzt also im schreibgesch√ºtzten Modus ge√∂ffnet. Mit der offenen datei k√∂nnen wir die Informationen ganz einfach mit Hilfe des JSON moduls wieder in eine Datensammlung laden (daten). Nun m√ºssen wir nur noch die Informationen aus der Datensammlung in unsere Variablen kriegen. Auf die Eintr√§ge in einer Datensammlung wird mit der Notation meine_datensammlung['mein_eintrag'] zugegriffen. Ausprobieren‚Äã Aufgabe Dateiname EF-Informatik/exercises/io/1-daten-speichern.py EF-Informatik/exercises/io/2-daten-laden.py Verwenden Sie untenstehende Code-Snippets daten_speichern.py und daten_laden.py und f√ºhren Sie diese auf Ihrem Computer aus. Achten Sie darauf, dass beide im selben Ordner auf Ihrem Computer sind. F√ºhren Sie das Snippet daten_speichern.py aus. Finden sie die entstandene Datei auf ihrem Computer und schauen Sie sich deren Inhalt in einem Text-Editor an (z.B. VSCode, Notepad, etc.). F√ºhren Sie das Snippet daten_laden.py aus und schauen Sie sich den Output auf der Kommandozeile an. Bonus: √ñffnen Sie die Datei erneut im Text Editor und ver√§ndern Sie die Teilnehmerliste: Ver√§ndern Sie einen Namen, l√∂schen sie einen, oder f√ºgen Sie einen hinzu. F√ºhren Sie danach erneut das Snippet daten_laden.py aus. Was f√§llt Ihnen auf? import json def laden(dateiname): with open(dateiname) as f: datensammlung = json.load(f) return datensammlung['teilnehmer:innen'] teilnehmer = laden('daten.json') print(teilnehmer) import json def speichern(teilnehmer, dateiname): datensammlung = {} datensammlung['teilnehmer:innen'] = teilnehmer with open(dateiname, 'w') as f: json.dump(datensammlung, f) teilnehmer = ['Anna', 'Bob', 'Theo', 'Karim', 'Robert'] speichern(teilnehmer, 'daten.json') ","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/EF-Python/Python/lernziele","content":"Lernziele Dauer zwei Teile, ca. 90 Minuten Form schriftlicher &amp; praktischer Teil Schriftlicher Teil Auf Papier, ohne Hilfsmittel Praktischer Teil Sie arbeiten auf VS Code an einem pers√∂nlichen Projekt Das Plugin Local History muss installiert sein und so konfiguriert, dass alle Versionen im aktuell ge√∂ffneten Ordner gespeichert werden. Abgabe √ºber einen OneDrive-Link Hilfsmittel: Open Book (alles erlaubt: Beispiele, eigener Code, Webseiten,...) Keine Kommunikation untereinander (Chat, Teams, ...) Themen (Voraussetzung: Python Repetition) Listen 1D, 2D, Listen erzeugen Referenzen Funktionen Python Scopes: Lokale und Globale Variablen Strings Umgang mit Fehlern, Try-Catch, Eingabe Besprochene Beispiele / Code Snippets Lernziele Sie k√∂nnen diese Python-Konzepte in kleinen Programmen (vergleichbar mit Code-Snippets) einsetzen Sie k√∂nnen Python Programme lesen, interpretieren und ab√§ndern Sie k√∂nnen unbekannte Befehle in gegebenen Programm-Ausschnitten im Internet recherchieren und anwenden Sie k√∂nnen mit VS Code umgehen, Projekte/Ordner √∂ffnen und mit dem Python-Debugger umgehen Sie k√∂nnen Fehlermeldungen interpretieren, die Fehler-Ursache identifizieren und allenfalls beheben Sie schreiben selber Funktionen mit Parametern, R√ºckgabewerten, globalen und lokalen Variablen","keywords":""},{"title":"Some useful Links","type":0,"sectionRef":"#","url":"/EF-Python/Python/links.nosync","content":"Some useful Links üëâ Namespaces and Scopes in Python üëâ Pyenv Ubuntu üëâ Quizziz Scopes","keywords":""},{"title":"Funktionen","type":0,"sectionRef":"#","url":"/EF-Python/Python/functions","content":"Funktionen Kurz zusammengefasst‚Äã Funktionsaufruf‚Äã def dreieck(): print('*') print('* *') print('* * *') dreieck() ... mit Parameter‚Äã def dreieck(size): for i in range(size + 1): print('* ' * i) dreieck(3) dreieck(5) ... mit zwei Parameter‚Äã def dreieck(size, zeichen): for i in range(size + 1): print(zeichen * i) dreieck(3, '* ') dreieck(5, 'üëç') ... mit Standardwert‚Äã def dreieck(size, zeichen = '* '): for i in range(size + 1): print(zeichen * i) dreieck(3) dreieck(5, 'üëç') R√ºckgabewerte‚Äã def pythagoras(a, b): radikand = a**2 + b**2 sqrt = radikand ** 0.5 return sqrt c = pythagoras(3, 4) print(c) Einleitung‚Äã Sie haben in Ihren Programmen schon lange Funktionen gebraucht, vielleicht ohne es zu merken. Zum Beispiel wenn Sie print(...) geschrieben haben. Aber auch math.sqrt(...) (Wurzel ziehen) und math.ceil(...) (Abrunden), welche Sie im Primzahlen-Programm gebraucht haben, sind Funktionen. Allerdings stammen diese zwei aus einem Modul, welches Sie mit import math zuerst in Ihr Programm importieren mussten. Das hinschreiben eines Funktionsnamen in einem Programm bezweckt bei der Ausf√ºhrung des Programms, dass an dieser Stelle die betreffende Funktion ausgef√ºhrt wird. Man spricht von einem Funktions-Aufruf. Sobald ein Programm l√§nger, als nur ein paar Zeilen ist, spielen Funktionen eine wichtige Rolle. Man kann n√§mlich auch selber Funktionen schreiben, die man dann an verschiedenen Stellen aufrufen kann. Das hat folgende Vorteile: √úbersichtlicher Das Programm wird √ºbersichtlicher und besser verst√§ndlich, vor allem, wenn Sie f√ºr Ihre Funktionen gute Namen w√§hlen. Die Lesbarkeit ist eine wichtige Qualit√§t von Programmen, weil diese meistens nicht nur von der Autorin bearbeitet werden. Kein doppelter Code Man kann die Wiederholung von gleichlautenden Programmteilen vermeiden. Wenn dann sp√§ter eine √Ñnderung am Programm n√∂tig wird, oder ein Fehler zu korrigieren ist, so muss man nur die betreffende Funktion √§ndern. Doch was sind Funktionen eigentlich? Eine Funktion ist eine Sequenz (Abfolge) von (Python-)Anweisungen, welche unter einem eigenen Namen, gefolgt von (), zusammengefasst werden. Die Funktion kann als neuer Befehl verstanden werden, welche dann an anderen Stellen im Programm aufgerufen werden kann, indem man den Namen und () hinschreibt. 1-sequence.py loading... See full example on GitHub 2-function.py loading... See full example on GitHub Die Beispiele 1-sequence.py und 2-function.py zeigen zweimal dasselbe Programm, einmal ohne Funktion, einmal mit Funktion. Im zweiten Beispiel sieht man, wie die Funktion count_down() definiert wird (Zeile 3 bis 14). In Zeile 3 steht der Name der Funktion, w√§hrend die Zeilen 4 bis 14 die Anweisungen enthalten, welche zur Funktion geh√∂ren. Zeile 17 zeigt, wie die Funktion count_down() aufgerufen wird. Funktionen mit Parameter Damit Funktionen noch flexibler eingesetzt werden k√∂nnen, kann man ihnen beim Aufruf bestimmte Werte in Form von Parametern mitgeben. Dazu muss man bei der Definition der Funktion zwischen den () die Namen der Parameter angeben. Diese k√∂nnen dann innerhalb der Funktion wie Variablen verwendet werden. Beim Aufruf der Funktion gibt man in den () die aktuellen Werte an, mit denen die Funktion anschliessend arbeiten soll. Man nennt diese Werte beim Aufruf die Argumente. Das k√∂nnen Zahlen, Texte, aber auch die Namen von anderen Variablen sein. Wichtig Parameter k√∂nnen nur innerhalb der Funktion verwendet werden, zu welcher Sie geh√∂ren. Ausserhalb der Funktion sind sie unbekannt. Weist man einem Parameter innerhalb einer Funktion einen neuen Wert zu, so geht dieser beim Verlassen der Funktion verloren. Das n√§chste Beispiel 3-function-with-parameter.py zeigt, wie die Funktion count_down() mit einem Parameter zahl flexibler gemacht werden kann. Jetzt kann beim Aufruf der Funktion angegeben werden, wie lange der Count-down dauern soll. Das hat zur Folge, dass die Anweisungen f√ºr die Eingabe der gew√ºnschten Count-down-Zeit durch die Benutzer:in zur√ºck ins Hauptprogramm verlagert werden m√ºssen. Dies ist aber sowieso besser, da die Funktion so viel flexibler einsetzbar ist. Die Count-down-Zeit kann ja aus einer beliebigen Quelle stammen, nicht nur von der Konsole. 3-function-with-parameter.py loading... See full example on GitHub Funktionen mit R√ºckgabewert Viele Funktionen erzeugen bei ihrer Ausf√ºhrung ein Resultat, welches dann ausserhalb der Funktion weiterverwendet werden kann. Dazu gibt es die M√∂glichkeit mit return ... einen Wert als Resultat zur√ºckzugeben. Die Funktion wird dann verlassen und der Wert steht an der Stelle des Aufrufs zur Verf√ºgung und kann dort zum Beispiel einer weiteren Variablen zugewiesen werden. Im foglenden Beispiel 4-function-with-return.py ist dieses Prinzip bei der Funktion lies_zahl() zu sehen, welche als Resultat die eingegebene Zahl zur√ºckgibt. 4-function-with-return.py loading... See full example on GitHub 1. Debuggen Dateinamen EF-Informatik/exercises/fkt/1-sequence.py EF-Informatik/exercises/fkt/2-function.py EF-Informatik/exercises/fkt/3-function-with-parameter.py EF-Informatik/exercises/fkt/4-function-with-return.py Laden Sie obige Code-Beispiele in Ihr Repository herunter, und debuggen Sie die Beispiele Schritt f√ºr Schritt. Markieren Sie die Aufgabe als erledigt. 2. Sternchen-Rechteck Dateiname EF-Informatik/exercises/fkt/sternchen.py ****** * * * * * * * * ****** Gesucht ist ein Programm, welches obige Figur auf der Konsole ausgibt. Schreiben Sie zwei Funktionen f√ºr die Ausgabe der beiden unterschiedlichen Zeilen. Verwenden Sie diese Funktionen dann im Hauptprogramm um die Figur als ganzes auszugeben. Parametrisieren Sie in einem zweiten Schritt die Funktionen so, dass die Breite der Figur (in Anzahl Zeichen) beim Aufruf der Funktionen angegeben werden kann. Machen Sie in einem dritten Schritt aus dem Hauptprogramm auch eine Funktion, bei welcher √ºber je einen Parameter die die Breite der Figur (in Anzahl Zeichen) und H√∂he der Figur (in Anzahl Zeilen) angegeben werden kann. Schreiben Sie ein neues Hauptprogramm, welches diese letzte Funktion mit einigen Werten f√ºr die Breite und H√∂he der Figur aufruft. Was passiert, wenn man Ihre Funktionen mit negativen Werten aufruft? Wie k√∂nnte man das L√∂sen? Comitten und pushen Sie Ihre L√∂sung und markieren Sie diese Aufgabe als erledigt. SSR","keywords":""},{"title":"Listen Erzeugen","type":0,"sectionRef":"#","url":"/EF-Python/Python/Listcomprehension","content":"Listen Erzeugen Aufgabe Oft w√ºnscht man Listen, welche schon mit bestimmten Werten abgef√ºllt sind, man sagt initialisiert sind. Unten sehen Sie ein paar hilfreiche Beispiele. F√ºhren Sie diese aus und bearbeiten Sie die Aufgabe. Markieren Sie anschliessend diese Aufgabe als erledigt. Hier sehen Sie, wie man auf einfache Art und Weise eine Liste erzeugen und gleich mit bestimmten Werten f√ºllen kann, man sagt intialisieren. Der Teil zwischen den [] wird als Listen-Abstraktion (englisch list comprehension) bezeichnet. Listen mit range erzeugen‚Äã Definition Mit dem von Schleifen bekannten range Befehl k√∂nnen auch Listen erzeugt werden. range(max_zahl) erzeugt einen Bereich von 0 bis (ohne mit!) max_zahl z.B. range(5) =&gt; 0, 1, 2, 3, 4 range(start, m) erzeugt einen Bereich von start bis (ohne mit!) m z.B. range(3, 7) =&gt; 3, 4, 5, 6 range(s, m, schritt) erzeugt einen Bereich von s bis (ohne mit!) m mit der gegebenen Schrittweite schritt z.B. range(3, 13, 4) =&gt; 3, 7, 11 Um aus einem Bereich (sog. Iterator) eine Liste zu erzeugen, muss der Bereich mit dem Befehl list() in eine Liste umgewandelt werden: one2ten = list(range(1, 11)) print('1 bis 10:', one2ten) odd_numbers = list(range(1, 20, 2)) print('Ungerade Zahlen:', odd_numbers) ten2zero = list(range(10, -1, -1)) print('Von Zehn r√ºckw√§rts:', ten2zero) Listen mit List Comprehension erzeugen‚Äã Definition Liste mit 1 initialisieren‚Äã Liste mit 10 Elementen. Alle enthalten den Wert 1. # Wert 1 in Liste setzen # \\ ...f√ºr alle Zahlen im Bereich 0 bis 10 # \\ / ones = [1 for i in range(10)] print(ones) Definition Zahlen von 0 bis 9‚Äã Liste mit den Zahlen 0 bis 9 initialisieren: # Aktuellen Wert des Schleifenz√§hlers i setzen # \\ ...f√ºr alle Zahlen im Bereich 0 bis 10 # \\ / zahlen = [i for i in range(10)] print(zahlen) Definition Gerade Zahlen‚Äã Liste mit 10 geraden Zahlen, beginnend bei 0. gerade_zahlen = [2*i for i in range(10)] print(gerade_zahlen) Aufgabe Initialisieren Sie mit List Comprehension eine Liste mit den ersten zehn Quadratzahlen ersten zehn Zweierpotenzen die Zweierpotenzen von 21002^{100}2100 bis 21102^{110}2110 die nat√ºrlichen Zahlen r√ºckw√§rts von 20 bis und mit 10 squares = [] # initialisierung anpassen! power2 = [] power2_100 = [] twenty2ten = [] print(squares) print(power2) print(power2_100) print(twenty2ten) SSR Definition 5x10-Matrix‚Äã 5x10-Matrix von lauter 0 (5 Zeilen, 10 Spalten) _print = print def print(mat): if type(mat).__name__ != 'list' or len(mat) &lt; 1 or type(mat[0]).__name__ != 'list': return _print(mat) max_val = max([max(z) for z in mat]) pad_sz = len(str(max_val)) _print('['); [_print(f' [{&quot;, &quot;.join(list(map(lambda v: str(v).rjust(pad_sz, &quot; &quot;), z)))}],') for z in mat]; _print(']') ### PRE zeros_5x10 = [ [0 for j in range(10)] for i in range(5) ] print(zeros_5x10) Definition 5x10-Matrix, Durchnummeriert‚Äã Elemente haben aufsteigende Werte, beginnend bei 0. Der _print = print def print(mat): if type(mat).__name__ != 'list' or len(mat) &lt; 1 or type(mat[0]).__name__ != 'list': return _print(mat) max_val = max([max(z) for z in mat]) pad_sz = len(str(max_val)) _print('['); [_print(f' [{&quot;, &quot;.join(list(map(lambda v: str(v).rjust(pad_sz, &quot; &quot;), z)))}],') for z in mat]; _print(']') ### PRE matrix = [ [i * 10 + j for j in range(10)] for i in range(5) ] print(matrix) ","keywords":""},{"title":"Programmiersprachen","type":0,"sectionRef":"#","url":"/EF-Python/Programmiersprachen","content":"Programmiersprachen Jede Programmiersprache hat eigene Regeln und Richtlinien, wie ein Programm geschrieben wird. Es wird dabei zwischen der Syntax und der Semantik unterschieden. Syntax W√∂rter und Symbole, die in einer Programmiersprache verwendet werden d√ºrfen Fehler werden bereits vor dem Programmstart erkannt Semantik Inhaltliche Bedeutung des Codes Die Bedeutung ergibt sich durch die Verwendung der gegebenen Syntax Fehler werden erst zur Laufzeit erkannt Mittlerweilen gibt es eine schier un√ºberschaubar grosse Anzahl an Programmiersprachen (Liste aller Programmiersprachen). Im EF werden wir zu Beginn mit Python 3 programmieren, bevor wir dann auch Einblicke in andere Programmiersprachen und Dom√§nenspezifische Sprachen (SQL) erhalten werden. Sprachstufen‚Äã Bei der Klassifizierung von Programmiersprachen wird aktuell unter vier Typen von Programmiersprachen unterschieden: Wobei die Interpretierten Sprachen auch oft Skriptsprachen genannt werden Maschinensprache‚Äã Zu den Pionierzeiten der Computerentwicklung war die einzige M√∂glichkeit, ein Programm f√ºr einen Computer zu erstellen, dieses in bin√§rem Maschinencode zu schreiben (bzw. auf Lochkarten zu stanzen). Aufgrund ihrere f√ºr Menschen extrem schwer verst√§ndlichen Form ist die Programmierung in Maschinensprache nicht mehr gebr√§uchlich. Die Maschinensprache kann direkt von einer CPU ausgef√ºhrt werden. Achtung Maschinencode l√§uft nicht einfach auf allen Prozessoren - je nach Aufbau/Architektur des Prozessors m√ºssen andere Befehle verwendet werdeninfo unlesbar, unver√§nderbar nur Linus Torvalds, Erfinder von Linux, schreibt und √§ndert Maschinencode In einigen wenigen Spezialf√§llen (wenn z.B. der eigentliche Quellcode oder die urspr√ºngliche Programmierumgebung nicht mehr verf√ºgbar ist) kann es unter Umst√§nden erforderlich sein, direkt den Maschinencode zu bearbeiten. Assembler Sprache‚Äã In Assembler gibt es als Erleichterung f√ºr die Programmierer:in sogenannte mnemonische K√ºrzel (Mnemonics), die eine Ged√§chtnisst√ºtze f√ºr die entsprechend m√∂glichen CPU-Befehle sein sollen, bspw. addiu f√ºr die Addition von positiven ganzen Zahlen (Add Integer Unsigned). Die Assemblersprache ist gerade noch verst√§ndlich f√ºr einen Menschen und kann leicht von einem Programm, dem sogenannten Compiler in Maschinensprache √ºbersetzt werden, da f√ºr jeden Mnemonics ein CPU-Befehl existiert. Dennoch ist Assembler-Sprache bereits auf eine CPU-Architektur zugeschnitten und es muss im Voraus entschieden werden, welches Ziel man sich vornimmt (nicht jede CPU-Familie weist dieselbe Befehlspalette auf). Ein einfaches Beispiel einer Addition von zwei ganzen Zahlen sum: addiu $sp,$sp,-8 sw $fp,4($sp) move $fp,$sp sw $4,8($fp) sw $5,12($fp) lw $3,8($fp) lw $2,12($fp) nop addiu $2,$3,$2 move $sp,$fp lw $fp,4($sp) addiu $sp,$sp,8 jr $31 nop info Aufgrund der m√ºhseligen Programmierung und der fehlenden Portabilit√§t von Programmen auf unterschiedliche Systeme ist Assembler nicht f√ºr komplexe Projekte zu empfehlen. F√ºr bestimmte zeitkritische Aufgaben (Echtzeit), wo es auf Geschwindigkeit ankommt (bspw. Grafiktreiber) oder nur sehr wenig Platz zur Verf√ºgung steht (embedded systems), wird auch heute noch auf Assembler zur√ºckgegriffen. Hochsprachen‚Äã In Hochsprachen wird eine Abstraktionsschicht f√ºr komplexen Funktionen wie Speichermanagment Repetition von immer gleichen Mustern Betriebssystemabh√§ngige Unterschiede hinzugef√ºgt. Dadurch m√ºssen Programmierer:innen Algorithmen nicht f√ºr jede CPU-Architektur neu schreiben. Zudem ist der Code nochmals bedeutend besser lesbar als in der Assembler Sprache. Obiges Beispiel in Assemblersprache sieht in Hochsprachen wie folgt aus: CJavaC#PythonRubyJavaScript #include &lt;stdio.h&gt; int sum(int zahl1, int zahl2) { return zahl1 + zahl2; } int main() { printf(&quot;3 + 4 = %d&quot;, sum(3, 4)); return 0; } Finding Was f√§llt Ihnen bei den verschiedenen Programmiersprachen auf? In Hochsprachen wird zus√§tzlich unterschieden zwischen kompilierten und interpretierten Sprachen. Kompilierte Sprachen‚Äã C C# Java ... Wie bei der Assemblersprache muss ein geschriebenes Programm durch einen Compiler in Maschinensprache √ºbersetzt werden. Dieser Prozess ist bei Hochsprachen um einiges komplexer als bei Assemblersprache, da keine direkte √úbersetzung m√∂glich ist. Da das Programm nach der Kompilierung von einem Prozessor ausgef√ºhrt wird, braucht es einen vorgegebenen Einstiegspunkt - eine Funktion namens main. Zwischenschritt Bytecode Einige kompilierte Sprachen verwenden zur Erh√∂hung der Portabilit√§t eine Zwischensprache, sogenannter Bytecode verwendet. Dieser Bytecode ist quasi die Maschinensprache f√ºr eine virtuelle Maschine (VM f√ºr Virtual Machine). Um den Bytecode auszuf√ºhren, muss also lediglich die VM auf einem System installiert werden, und der Bytecode kann ausgef√ºhrt werden. Interpretierte Sprachen‚Äã Python Ruby Java Script ... F√ºr die Programmierung einer Skriptsprache braucht es keine Installation eines zus√§tzlichen Compilers. Die Programmiersprache, also bspw. Python, interpretiert den Quellcode direkt. Dazu wird der Code gelesen (Parsen) und gem√§ss der Syntax-Vorgaben in einen Syntax-Baum (AST, Abstract Syntax Tree) √ºbersetzt. Python Code def sum(zahl1, zahl2): return zahl1 + zahl2 √úbersetzer AST üëâ Jupyter Notebook zur Erzeugung eines AST1 Auf dieser Basis entscheidet der Interpreter f√ºr jeden Knoten im Baum, welche kompilierte Funktion ausgef√ºhrt werden soll. Diese kompilierten Funktionen werden oft in C geschrieben und bei der Installation der Programmiersprache in Maschinencode compiliert (bzw. bereits compiliert heruntergeladen). Da kein eigentlicher Compile-Schritt notwendig ist, muss bei Skriptsprachen auch keine main als Einstiegspunkt vorhanden sein. Zudem ist es im Gegensatz zu kompilierten Sprachen m√∂glich, den Quellcode von laufenden Programmen zu ver√§ndern. Deshalb ist es etwa auch m√∂glich, eine interaktive Code-Konsole (REPL ReadEvaluatePrintLoop) f√ºr Skriptsprachen auszuf√ºhren. Insgesamt ist das Arbeiten mit Skriptsprachen mit weniger Konfigurationsaufwand, weniger Standardcode (Boilerplate Code) verbunden und daher effizienter. Der Nachteil ist, dass die Programme deutlich langsamer (ca. 10x langsamer) ausgef√ºhrt werden. Jupyter Notebook: ‚¨áÔ∏è Visualize-AST.ipynb, Github ‚Ü©","keywords":""},{"title":"Zuf√§llige Zahlen","type":0,"sectionRef":"#","url":"/EF-Python/Python/random","content":"Zuf√§llige Zahlen Mit dem Python Package random k√∂nnen pseudo-zuf√§llige Zufallszahlen erzeugt werden. Viele Computer Programme basieren auf zuf√§lligen Zahlen. Programmiersprachen k√∂nnen allerdings keine wirklichen Zufallszahlen erzeugen, sondern lediglich pseudo-zuf√§llige Zahlen durch einen Algorithmus berechnen. (Der in Python verwendete Algorithmus f√ºr Zufallszahlen basiert auf dem Mersenne-Twister1). Die Python Standard-Bibliothek beinhaltet das random Modul mit vielen n√ºtzlichen Funktionen. Definition random.random()‚Äã Gibt eine zuf√§llige Zahl n zwischen 0.0 und 1.0, ohne die 1.0 zur√ºck (0&lt;=n&lt;10 &lt;= n &lt;10&lt;=n&lt;1). import random print(random.random()) Definition random.seed()‚Äã Diese Funktion initialisiert den Zufallszahlengenerator. Damit kann die &quot;Zuf√§lligkeit&quot; kontrolliert werden - wird immer derselbe Initialisierungswert verwendet, so entsteht immer dieselbe &quot;zuf√§llige Sequenz&quot;. ENtsprechend wichtig ist es, dass jedesmal ein anderer Initialer Startwert gesetzt. Python verwendet automatisch die aktuelle Systemzeit. Mit random.seed() kann der Generator mit einem beliebigen int, str, byte oder bytearray neu initialisiert werden. import random random.seed(1) print(random.random()) Definition random.randint(a, b)‚Äã Gibt eine zuf√§llige ganze Zahl n zwischen a und b (a&lt;=n&lt;=ba &lt;= n &lt;= ba&lt;=n&lt;=b) zur√ºck. import random print(random.random()) Definition random.choice(seq)‚Äã Gibt ein zuf√§lliges Element der Sequenz seq (bspw. eine Liste) zur√ºck. import random destinations = ['Rom', 'Florenz', 'Paris', 'M√ºnchen'] print('Als n√§chstes gehe ich nach:', random.choice(destinations)) Definition random.shuffle(seq)‚Äã Mischt alle Elemente der eingef√ºgten Sequenz (bspw. eine Liste) - die eingegebene Sequenz wird also ver√§ndert! import random numbers = [1, 2, 3, 4, 5, 6] random.shuffle(numbers) print(numbers) Definition random.sample(seq, n)‚Äã Gibt n zuf√§llige Elemente der Sequenz seq (bspw. eine Liste) zur√ºck. Die eingegebene Sequenz bleibt unver√§ndert! import random numbers = [1, 2, 3, 4, 5, 6] print('3 zuf√§llige Zahlen', random.sample(numbers, 3)) print('Zuf√§llig gemischte Zahlen', random.sample(numbers, len(numbers))) print('Original', numbers) Quelle: Wikipedia https://en.wikipedia.org/wiki/Mersenne_Twister ‚Ü©","keywords":""},{"title":"Python Scopes","type":0,"sectionRef":"#","url":"/EF-Python/Python/scopes","content":"Python Scopes Ausgangslage‚Äã Wieso kann die Variable word auf Zeile 1 nicht ver√§ndert werden? word = 'test' def reset(): word = 'hangman' print(word) def play(): print(word) reset() print(word) play() Pr√§sentation‚Äã Notizen‚Äã Aufgabe Quizz-Aufgaben unter üëâ https://www.codequizzes.com/python/beginner-II/variable-scope bearbeiten und Aufgabe als &quot;erledigt&quot; markieren. Quizziz (im Unterricht gespielt am 4.11.2022) üëâ https://quizizz.com/admin/quiz/6364e3f4a495f3001e2cc3f2/scope-of-variables-in-python","keywords":""},{"title":"Python Repetition","type":0,"sectionRef":"#","url":"/EF-Python/Python/turtle-repe","content":"Python Repetition Auftrag: Blogbeitrag &quot;Wiedereinstieg in Python&quot; Dateiname EF-Informatik/blog/2022-08-26-wiedereinstieg-python.md Arbeiten Sie sich durch die verschiedenen Kapitel zur Repetition von Python. Notieren Sie sich dabei stichwortartig die wichtigen Dinge inkl. Codeausschnitte. Dazu geh√∂ren bspw. auch Fehlerbilder oder wichtige Aha-Momente. Verfassen Sie anschliessend in den letzten 15 Minuten des Unterrichts einen kleinen Blogbeitrag mit dem Titel &quot;Wiedereinstieg in Python&quot; in einem neuen Ordner blog/2022-08-26-wiedereinstieg-python.md, wo Sie Ihre Erfahrungen aus dieser Lektion festhalten und beschreiben. Der Blogbeitrag darf durchaus lustig und am√ºsant zu lesen sein und daher also auch witzige, offensichtliche oder unkonventionelle Fehler aufnehmen. Sie k√∂nnen dabei selber entscheiden, ob Sie auf deutsch oder englisch schreiben. Vergessen Sie nicht, die √Ñnderungen zu Commiten und zu Pushen.","keywords":""},{"title":"Referenzen","type":0,"sectionRef":"#","url":"/EF-Python/Python/referenzen","content":"Referenzen Aufgabe Dateiname EF-Informatik/exercises/referenzen.py Jetzt, wo wir Listen in Python kennen, m√ºssen wir unsere bisherige Vorstellung von Variablen √ºberdenken und anpassen. Lesen Sie die untenstehende Einf√ºhrung zum Thema Referenzen durch und f√ºhren Sie im Anschluss das Programm angeh√§ngte Programm referenzen.py im Debuuger von VS Code aus. F√ºhren Sie dann das Snippet refernzen.py im Debugger Ihres Visual Studio Code aus (falls Sie es noch nicht geklont haben, m√ºssen Sie das zuerst tun). Achten Sie auf die in der Konsole (unten) angezeigten Objekt-Ids und Datentypen. Daran k√∂nnen Sie erkennen, um welches Objekt es sich jeweils handelt und welchen Datentyp es hat. Auf der linken Seite sehen Sie die aktuellen Objektwerte in den Variablen a und b. Achten Sie besonders, was dort passiert, wenn die Zeile 30 ausgef√ºhrt wird. EF-Informatik/exercises/referenzen.py referenzen.py loading... See full example on GitHub Zum Schluss den Selbsttest ganz am Ende der Seite durchf√ºhren... Bisheriges Modell f√ºr Variablen‚Äã Bisher haben wir uns Variablen als Karteik√§rtchen vorgestellt, auf welchen sich der Computer einen bestimmten Wert (eine Zahl, ein Text, etc.) merkt. Das K√§rtchen tr√§gt einen Namen. Unter diesem Namen kann die Information zu einem sp√§teren Zeitpunkt wieder hervorgeholt werden. Die Zuweisung a = 10 f√ºhrt dazu, dass eine K√§rtchen mit dem Namen a entsteht, auf welchem der Wert 10 notiert ist. a10 Wenn man der Variablen einen neuen Wert zuweist, so wird der notierte Wert √ºberschrieben und ersetzt. a = &quot;blah&quot; f√ºhrt zu: ablah Mit der Einf√ºhrung von Listen st√∂sst dieses Modell an seine Grenzen und wir brauchen ein besseres Modell. Etiketten statt Karteik√§rtchen - Referenzen und Objekte‚Äã In diesem Modell werden die Karteikarten durch Etiketten ersetzt, welche mit einer Schnur an beliebige Gegenst√§nde gebunden werden k√∂nnen. Solche Gegenst√§nde k√∂nnen alles sein, von einer einfachen Zahl, einem Text, bis zu einer langen Liste. Die Gegenst√§nde entsprechen also den Dingen, welche wir uns merken wollen, weil wir sie sp√§ter wieder brauchen. Man spricht jetzt nicht mehr von Werten, sondern von Objekten. Man kann sich Objekte auch als Beh√§lter vorstellen, welche die eigentlichen Werte enthalten. Damit man ein bestimmtes Objekt sp√§ter wieder findet, wird es mit einer Etikette versehen, auf welcher ein Name steht. Unter diesem kann sp√§ter das mit der Etikette verbundene Objekt wieder hervorgeholt werden. Man kann sich dass auch wie ein Eimer vorstellen, in welchem sich die Objekte befinden, mit denen ein Programm arbeitet. √úber den Rand des Eimers h√§ngen Schn√ºre, an welchen K√§rtchen befestigt sind. Auf jedem K√§rtchen steht ein Name, welcher dazu dient, die verschiedenen Schn√ºre zu unterscheiden. Wenn man an einer Schnur zieht, so kommt das damit verbundene Objekt hervor. Man kann nun das Objekt ver√§ndern, oder dieses gar durch ein anderes Objekt ersetzen. Referenzen@ Eine Variable ist im neuen Modell also nichts anderes, als eine Etikette, welche mit einer Schnur an ein bestimmtes Objekt gebunden ist. Die Schnur wir als Referenz bezeichnet. Der Eimer aus obigem Vergleich entspricht dann dem Speicher des Computers. In Python‚Äã Die Zuweisung a = 10 kann im neuen Modell also so dargestellt werden: Das rechteckige K√§stchen mit dem Namen a ist die Variable oder Etikette. Der Pfeil ist die Referenz oder Schnur und das runde K√§stchen ist das Objekt mit dem Wert 10. Diese Modell hat entscheidende Konsequenzen, welche wir uns im folgenden anschauen wollen. Zuweisung von Variable zu Variable‚Äã Weist man eine Variable einer anderen zu, so l√§uft dies darauf hinaus, dass Etiketten mit anderen Objekten verbunden werden. Die Zuweisung b = a f√ºhrt im neuen Modell dazu, dass die beiden Variablen a und b jetzt beide auf das Objekt mit dem Wert 10 zeigen. Erst, wenn man einer Variablen einen anderen Wert zuweist, so zeigen beide Variablen auf verschiedene Objekte. b = 11 f√ºhrt zu: Listen sind Objekte‚Äã Eine Liste ist ein Objekt, welches nicht nur einen Wert enthalten kann, sondern viele. Man kann sich eine Liste als Kette von Elementen denken. Dabei enth√§lt jedes Element eine Referenz auf das unmittelbar nachfolgende Element und zus√§tzlich eine Referenz auf den in diesem Element gespeicherten Wert. Der Wert selber ist dann nat√ºrlich wieder in einem Objekt gekapselt. Die Elemente sind also gleichzeitig so etwas, wie Objekte und Variable. Das Resultat der Zuweisung a = [1, 2, 3] kann in unserem neuen Modell folglich so gezeichnet werden: Wird die Variable a einer Variablen b zugewiesen b = a f√ºhrt diese zu folgender Situation Wenn wir in einem Programm a[1] schreiben, so wird √ºber das K√§rtchen mit dem Namen a auf das erste Element der Liste zugegriffen und von aus auf der Kette der Element entlang, bis das Element mit dem Index 1 erreicht ist. Von da wird auf das dem Elment angeh√§ngte Objekt zugegriffen. Im obigen Fall ist das die Zahl2. Interessant ist nun der Fall, wo ein einzelnes Element der Liste ver√§ndert wird: b[0] = b[0] + 1 Im Modell wird unmittelbar klar, dass es keine Rolle spielt, ob wir die Liste √ºber die Variable a oder b ansprechen. Es gibt nur die eine Liste. a[0] und b[0] beziehen sich auf ein und dasselbe Element. Aufgabe‚Äã Laden Sie zur Illustration das folgenden Snippet auf Ihren Computer und f√ºhren Sie es aus. Hintergrund‚Äã Das neue Modell f√ºr Variablen hat folgenden Hintergrund: Alle Daten, mit welchen ein Programm arbeitet, m√ºssen im RAM (Random Access Memory) des Computers gespeichert werden. Dies ist derjenige Speicher des Computer, der sehr schnell arbeitet, aber beim Ausschalten des Computers alle gespeicherten Daten verliert. Samsung RAM DDR5 Man kann sich das RAM alls riesige Tabelle mit einer Spalte vorstellen. Jede Zelle in der Tabelle umfasst 1 Byte (8 bit) und kann also ein Zahl von 0 bis 255 (=28=2^8=28 Zust√§nde) speichern. Die Zellen sind von 0 beginnend durchnummeriert. Die Nummer einer Zelle wird als deren Adresse bezeichnet. Wenn der Prozessor auf eine bestimmte Zelle zugreifen will, um dort eine Zahl zu lesen oder zu schreiben, so muss er diese Adresse kennen. Speicher@ Wenn in einem Programm eine Variable gebraucht wird, so l√§uft das darauf hinaus, dass das Programm auf eine Zelle mit einer bestimmten Adresse zugreift. Jede Variable hat also ihren festen Platz im RAM. Beim Start des Programms wird dieser Platz f√ºr alle globalen Variablen eines Programms dauerhaft festgelegt. Bei lokalen Variablen (Variablen in Funktionen und Funktionsparameter) wird der Platz unmittelbar nach dem Aufruf einer Funktion festgelegt. Damit wir nun in unseren Programmen nicht mit physischen Speicheradressen arbeiten m√ºssen, welche wir ja zum Zeitpunkt des Programmierens gar nicht kennen, verwendet man Variablennamen als Platzhalter. Speicherbedarf von Variablen‚Äã Je nachdem, welche Werte in einer Variablen gespeichert werden sollen braucht es mehr oder weniger Platz, sprich mehr oder weniger Speicherzellen. Zum Speichern einer Zahl mit Kommastellen (Datentyp float in Python) werden oft 64 bit (8 Byte) verwendet. In vielen Programmiersprachen werden auch f√ºr ganze Zahlen (Datentyp int) eine feste Anzahl Bytes verwendet (z.B. 4 Byte). Im Speicher k√∂nnte das dann so aussehen: Variablen@ Neben den Datentypen mit fester Anzahl Bytes gibt es aber auch Datentypen, deren Speicherbedarf variieren kann. Z.B. beansprucht ein Text (datentyp str f√ºr String) je nach Inhalt mehr oder weniger Bytes zu seiner Speicherung. Zus√§tzlich ist es in Python auch so, dass eine Variable im Verlaufe der Programmausf√ºhrung Werte von unterschiedlichen Datentypen speichern kann. Z.B. startet die Variable mit einer ganzen Zahl und wechselt dann sp√§ter zu einem Text. Das k√∂nnte dazu f√ºhren, dass am Ort der Variablen pl√∂tzlich mehr Speicher gebraucht wird. Was aber, wenn dort kein Speicher mehr frei ist, weil die Variablen dicht gepackt sind? Referenzen und Objekte‚Äã Um das obige Problem zu umgehen, verwendet Python ein indirektes Verfahren, um von einer Variable zu den gespeicherten Werten zu gelangen: Am Ort der Variablen ist nur eine Adresse gespeichert. Unter dieser Adresse findet man dann den eigentlichen Wert. Diese Adresse wird als Referenz bezeichnet. Der eigentliche Wert, kann nun beliebig gross sein. Sie werden in Python (und vielen anderen Programmiersprachen) als Objekt bezeichnet. Bei der Speicherung eines neuen Objektes sucht Python im Speicher nach einer Stelle, wo es genug Platz hat und tr√§gt dan bei der Variablen die Adresse des Objektes ein. Das sieht dann so aus: Speicherreferenzen@ Merke In Python werden alle Daten als Objekte gespeichert. Zur√ºck zu den Listen‚Äã Objekte k√∂nnen wiederum Referenzen auf andere Objekte enthalten. So werden beispielsweise Listen gebildet. Eine Liste besteht aus Elementobjekten, welche einerseits eine Referenz auf den an dieser Stelle in der Liste gespeicherte Wert (auch ein Objekt, siehe oben) enth√§lt und andererseits eine Referenz auf das unmittelbar nachfolgende Elementobjekt eth√§lt. Das sieht dann so aus: Eine Liste im Speicher@ Selbsttest‚Äã","keywords":""},{"title":"Listen","type":0,"sectionRef":"#","url":"/EF-Python/Python/Listen-1D","content":"Listen Zum Speichern von mehreren Werten unter einem einzigen Namen verwendet man in Python Listen. Man kann sich Listen als Tabellen mit einer Spalte vorstellen. Die Zellen in der Tabelle werden als Elemente bezeichnet und sind durchnummeriert. So kann man einzelne in der Liste gespeichert Werte unterscheiden. Die Nummer eines Elements wird als dessen Index bezeichnet. Wichtig Das erste Element in der Liste tr√§gt den Index 0. Der Index des letzten Elementes ist die L√§nge der Liste minus 1. Das folgende Bild illustriert dies f√ºr eine Liste mit 4 Noten. Die L√§nge der Liste ist 4, das letzte Element tr√§gt den Index 3. Index Wert 0 4.5 1 5 2 3.5 3 5.5 In Python kann man diese Liste wie folgt erzeugen: noten = [4.5, 5, 3.5, 5.5] print('Die vierte Note war eine', noten[3]) Im Beispiel wird die vierte Note mit dem Index 3 ausgegeben. Aufgaben‚Äã 1. listen-1d.py Dateiname EF-Informatik/exercises/listen-1d.py Erstellen Sie das folgende Programm in Ihrem Repository Programm listen-1d.py loading... See full example on GitHub F√ºhren Sie das Programm Zeile f√ºr Zeile aus und untersuchen Sie die verschiedenen Listen-Optionen. Welche Fehlermeldung erscheint beim Szenario 6? commit &amp; push... 2. Was steht geschrieben? Dateiname EF-Informatik/exercises/listen-word-riddle.py Gegeben ist ein ALPHABET und eine Nachricht MESSAGE. In der Nachricht sind die Indices der zugeh√∂rigen Buchstaben gespeichert. Schreiben Sie ein Programm, welches die Nachricht decodiert und in Buchstabenform darstellt. ALPHABET = [' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] MESSAGE = [12, 9, 19, 20, 0, 18, 9, 4, 4, 12, 5] Hinweis 3. Meine Nummer 1 Dateiname EF-Informatik/exercises/listen-word-riddle2.py Nun wurde eine weitere Zuordnungsstufe hinzugef√ºgt üòÆ. In der MESSAGE steht, an welcher Stelle im MAPPING der Index steht, an welchem der gesuchte Buchstabe zu finden ist. Finden Sie die Nachricht? ALPHABET = [' ', '_', '.', ':', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] MAPPING = [54, 58, 53, 4, 8, 60, 45, 60, 12, 41, 13, 47, 60, 4, 44, 56, 62, 4, 58, 47, 41, 60, 55, 3, 9, 45, 60, 10, 19, 2, 54, 62, 48, 54, 56, 18, 41, 53, 44, 4, 58, 43, 1, 50, 54, 13, 2, 2, 49, 6, 1, 59, 14, 58, 16, 4] MESSAGE = [32, 5, 7, 15, 51, 23, 3, 13, 48, 2, 11, 29, 14, 6, 16, 1, 9, 0, 12, 46, 41, 22, 37, 17, 38, 25, 31, 18, 20, 30, 21, 39, 40, 36, 33, 26, 55, 53, 42, 49, 8, 52, 10, 27, 4, 24, 50, 44, 54, 28, 45, 35, 47, 43, 34, 19] Hinweis print() Optionen Normalerweise f√ºgt die print-Funktion am Ende einer Ausgabe immer das Zeichen \\n an, was von der Konsole als Steuerzeichen f√ºr eine neue Zeile interpretiert wird. Das k√∂nnen Sie aber auch √§ndern, indem Sie explizit vorgeben, welche Zeichen am Ende hinzugef√ºgt werden: # Mit L√ºcke zwischen einzelnen prints for i in range(3): print(f'L√ºcke {i}', end=' ') # Ohne Zeichen zwischen einzelnen prints for i in range(3): print(f'Ohne {i}', end='') # Fancy: mit Rakete und neuer Zeile zwischen einzelnen prints for i in range(3): print(f'Hello {i}', end=' üöÄ\\n') 4. Primzahlen Dateiname EF-Informatik/exercises/primzahlen.py Schreiben Sie ein Programm welches eine Liste mit allen Primzahlen zwischen 1 und 100 erstellt und diese Liste am Schluss auf der Konsole ausgibt. Bevor Sie Programmieren: Diskutieren Sie Ihr Vorgehen mit einer Kolleg:in und besprechen Sie gemeinsam eine algorithmische L√∂sung f√ºr das Problem. Halten Sie stichwortartig fest, was Sie besprochen haben. Hinweis Um den Rest bei einer Division zu berechnen, kann der Modulo-Operator verwendet werden. Definition Modulo %‚Äã Um den ganzzahligen Rest bei der Division von zwei ganzen Zahlen zu bestimmen, wird der Modulo-Operator verwendet. Biespiel: Was ist der ganzzahlige Rest von 7/57 / 57/5? print(7 % 5) SSR SSR SSR Eindimensionale Listen‚Äã Hier nochmals in der √úbersicht die Funktionsweise von Listen in Python. Definition Liste erzeugen []‚Äã # Liste erzeugen und Variablen zuweisen noten = [3.5, 6, 5, 4.5] # Ganze Liste anzeigen print(noten) # Element mit Index 2 aus der Liste anzeigen print(noten[2]) Definition Schleife √ºber alle Elemente der Liste‚Äã noten = [3.5, 6, 5, 4.5] for note in noten: print(note) Definition Schleife √ºber Listen-Indices‚Äã noten = [3.5, 6, 5, 4.5] # (beginnt bei 0 und endet mit 1 weniger als L√§nge der Liste) for index in range(0, len(noten)): print(index, &quot;:&quot;, noten[index]) Definition Listenelemente √§ndern‚Äã noten = [3.5, 6, 5, 4.5] # Element mit Index 3 neuen Wert zuweisen noten[3] = 5.5 print(noten) Definition Fehler: IndexError‚Äã noten = [3.5, 6, 5, 4.5] # die Liste ist nicht so lang noten[7] = 6 Definition Element hinzuf√ºgen append()‚Äã noten = [3.5, 6, 5, 4.5] # Element am Ende der Liste anh√§ngen noten.append(5) print(noten) Definition Element an bestimmter Stelle hinzuf√ºgen insert()‚Äã noten = [3.5, 6, 5, 4.5, 5] # vor dem Element mit Index 3 eine &quot;4&quot; einf√ºgen noten.insert(3, 4) print(noten) Definition Aufsteigend sortieren sort()‚Äã noten = [3.5, 6, 5, 4, 4.5, 5] noten.sort() print(noten) Definition Letztes Element entfernen pop()‚Äã Letztes Element entfernen und zur√ºckgeben. noten = [3.5, 4, 4.5, 5, 5, 6] last = noten.pop() print(last) print(noten) Definition Element bei Index entfernen pop(0)‚Äã vorderstes = noten.pop(0) print(vorderstes) print(noten) Definition Element aus der Liste entfernen remove()‚Äã noten = [3.5, 5, 4.5, 4, 5, 6] # 11) Erstes Element mit dem Wert 5 aus der Liste entfernen noten.remove(5) print(noten) Definition Mittelwert statistics.mean()‚Äã import statistics noten =[3.5, 5, 4.5, 4, 5, 6] mittelwert = statistics.mean(noten) print(mittelwert) Weitere Funktionen üëâ https://docs.python.org/3/library/statistics.html Definition Leere Liste []‚Äã # Leere Liste erstellen noten = [] print(noten) Definition Liste mit Text‚Äã # Liste mit Strings noten =['gut', 'erf√ºllt', 'mangelhaft', 'erf√ºllt'] print(noten) ","keywords":""},{"title":"Zweidimensionale Listen","type":0,"sectionRef":"#","url":"/EF-Python/Python/Listen-2D","content":"Zweidimensionale Listen Zweidimensionale Liste@ Eine Liste, welche einfach eine Reihe von Zahlen oder Texten enth√§lt, ist eine eindimensionale Liste. Aus der Mathematik kennen wir auch Matrizen, oder Tabellen. Diese bestehen aus Zeilen und Spalten, haben also zwei Dimensionen. Das kann man in Python auch machen. Man muss dazu f√ºr jede Zeile eine Liste erzeugen und dann diese Listen als Elemente in einer weiteren Liste speichern. So entsteht eine Liste von Listen. # Eine Liste [ [1, 2, 3], # Zeile [4, 5, 6], # Zeile [7, 8, 9], # Zeile ] # oder √§quivalent in einer Zeile dargestellt [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Man kann in Python auch zwei- oder gar n-dimensionale Listen haben. F√ºr Python ist das nichts anderes, als eine Liste, deren Elemente wiederum Listen sind. F√ºr jede zus√§tzlich Dimension wird eine weitere Verschachtelungsstufe hinzugef√ºgt. Bei zwei Dimensionen kann man auf diese Weise in Python Matrizen, bzw. Tabellen mit mehreren Zeilen und Spalten darstellen. Definition 3 x 3 Matrix‚Äã Eine Matrix ist eine Liste von Listen matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(matrix) Definition Zugriff [][]‚Äã Auf einzelne Element in der Matrix zugreifen # kann auch auf einer Zeile geschrieben werden: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # 1. Zeile √§ndern - zugewiesener Wert muss eine Liste sein matrix[0] = [11, 12, 13] # 3. Wert in 2. Zeile ver√§ndern matrix[1][2] = 0 # Werte ausgeben print('Matrix:', matrix) print('Erste Zeile:', matrix[0]) print('Zeile 2, Spalte 3:', matrix[1][2]) print('Zeile 3, Spalte 1:', matrix[2][0]) Definition Schleife √ºber Zeilen‚Äã Schleife √ºber einzelne Zeilen Zeilen sind wieder Listen matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for zeile in matrix: print(zeile) pprint() Schreiben Sie eine Funktion pprint (Abk√ºrzung f√ºr Pretty Print), welche eine 2D-Liste √ºbersichtlich ausgibt: pprint([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Ausgabe bspw. # [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9], # ] pprint.py def pprint(mat2d): print(mat2d) pprint([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) pprint([[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]]) √úber Funktionen... Funktionen werden in Python mit dem Schl√ºsselwort def definiert. def pretty_print(matrix2d): # \\__________/ \\_______/ # Fkt. Name Parameter # die Parameter k√∂nnen im Funktionsk√∂rper (der einger√ºckte Teil) verwendet werden print(matrix2d) SSR Definition Durch alle Elemente Iterieren‚Äã Dazu wird eine verschachtelte Schleife √ºber Zeilen und Spalten verwendet. matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for zeile in matrix: for zahl in zeile: print(zahl) Oder man greift √ºber die Zeilen- (i) und Spaltenindices (j) auf die Elemente zu: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in range(3): for j in range(3): print(f'[i: {i}, j: {j}] =', matrix[i][j]) Aufgabe Obiges Beispiel funktioniert nur f√ºr eine 3x3 Matrix. √Ñndern Sie das Programm so ab, dass es f√ºr beliebige zweidimensionale Listen funktioniert. Probieren Sie Ihre L√∂sung, indem Sie die unterschiedlichen matrix Variablen einkommentieren... matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [9, 9, 9], [1, 8, 7]] # matrix = [[1, 2, 3, 4, 5],[4, 5, 6, 5, 4], [7, 8, 9, 9, 9], [9, 9, 9, 8, 7]] # matrix = [[1, 2], [4, 5], [6, 7], [8, 9], [10, 11]] for i in range(3): for j in range(3): print(f'[i: {i}, j: {j}] =', matrix[i][j]) Hinweis Die L√§nge einer Liste kann mit len abgefragt werden: print(len([2, 3, 5])) SSR 2D-Liste erstellen create_from.py‚Äã √Ñndern Sie den untenstehenden Code so ab, dass die Variabe matrix eine Matrix mit der gegebenen Anzahl Zeilen- und Spalten sowie √ºberall den Zellenwerten ZAHL enth√§lt. Schreiben Sie das Programm so, dass es auch bei ge√§nderten ZEILEN. SPALTEN und ZAHLen Werten funktioniert. create_from.py ZEILEN = 3 SPALTEN = 4 ZAHL = 1 matrix = [] print(matrix) # =&gt; [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]] Hinweis Es braucht eine doppelte Schleife, wobei in der ersten Schleife eine leere Zeilen-Liste erzeugt wird, welche dann in der zweiten (verschachtelten) Schleife mit den Zahlen gef√ºllt wird. üëâ Elemente zu einer Liste hinzuf√ºgen SSR SSR diag.py‚Äã Erstellen Sie ein Programm, welches eine SIZE x SIZE-Matrix, die in der Diagonalen von Oben-Links nach Unten-Rechts 1en enth√§lt und sonst mit 0en gef√ºllt ist. Probieren Sie Ihr Programm auch mit anderen Werten f√ºr SIZE aus. SIZE = 4 matrix = [] # =&gt; [ # [1, 0, 0, 0], # [0, 1, 0, 0], # [0, 0, 1, 0], # [0, 0, 0, 1], # ] diag.py SIZE = 4 matrix = [] print(matrix) SSR Was ist denn hier los? Dateiname EF-Informatik/docs/python/referenzen.md a = [1, 2, 3] b = a b[1] = 5 print('Liste a: ', a) print('Liste b: ', b) Wie erkl√§ren Sie sich dieses Verhalten? Lesen Sie den Abschnitt üëâ Assignment (=) in Python (The Copy Module in Python brauchen Sie nicht zu lesen). K√∂nnen Sie damit auch folgendes Ph√§nomen erkl√§ren? matrix = [] zeile = [0, 1, 0] for i in range(3): matrix.append(zeile) print(matrix) matrix[1][1] = 0 # nur den Wert in Zeile 1 in der Mitte auf 0 Setzen print(matrix) Fassen Sie obiges Verhalten nun in eigene Worte im Dokument EF-Informatik/docs/python/referenzen.md. H√§ufige Fehlerquellen Exotisches (und oft Grund f√ºr Fehler): Innere Listen sind unterschiedlich lang durch Anh√§ngen eines weiteren Elementes Anh√§ngen einer weiteren Zeile mit unterschiedlicher L√§nge ... Einf√ºgen eines String (oder irgend etwas anderes) in die √§ussere oder innere Liste matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] matrix[1].append(13) matrix.append([31]) matrix.insert(2, 'blabla') for zeile in matrix: print(zeile) ‚≠êÔ∏è Bilder als Listen darstellen‚Äã Bilder k√∂nnen im wesentlichen auch als 2- bzw 3-Dimensionale Listen betrachtet werden. Mit dem Paket üëâ pypng lassen sich einfach Bilder erzeugen. Paket installieren: In VS Code Terminal &gt; New Terminal Eintippen pip3 install pypng Fertig ü•≥ Folgender Code erzeugt nun ein kleines Smiley: import png # Paket png importieren smiley = [ [000, 000, 000, 000, 000, 000], [000, 255, 000, 000, 255, 000], [000, 000, 000, 000, 000, 000], [000, 255, 000, 000, 255, 000], [000, 000, 255, 255, 000, 000], [000, 000, 000, 000, 000, 000] ] # Erzeuge ein Graustufen-Bild (0=Schwarz, 255=Weiss) png.from_array(simley, 'L').save('small_smiley.png') Probieren Sie es aus! Graustufen-Bilder Dateiname EF-Informatik/exercises/mat-to-png.py Wie Sie bemerken, ist das entstandene Bild nur 6x6 Pixel gross - es muss entsprechend stark gezoomt werden, um das Smiley zu identifizieren. Erweitern Sie das Programm so, dass Sie mit einem Zoom-Faktor angeben k√∂nnen, auf wie viele Pixel ein Wert verteilt werden soll. ______ ______ Zoom | | | ‚ñ¢‚ñ¢ --------&gt; | | | | | | ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ ","keywords":""},{"title":"√úbungsprobe","type":0,"sectionRef":"#","url":"/EF-Python/Python/uebungsprobe","content":"√úbungsprobe [Schriftlich] Ein Programm soll Quadrate erzeugen, wobei die Breite und die H√∂he variabel konfigurierbar sein soll. Erstellen Sie einen Top-Down Entwurf des Problems. SSR Verschiedene Konfigurationen der Ausgabe. 0 x 0 :::: :::: 1 x 1 ::=:: || || ::=:: 5 x 3 ::=====:: || || || || ::=====:: [Schriftlich] Geben Sie jeweils die Ausgabe an: a.) def f1(): x = 15 print(x) x = 12 f1() SSR b.) x = 12 def f1(a): print(x + a) x = 20 f1(2) SSR c.) x = 5 def f1(): global x x = 4 def f2(a, b): return a + b + x f1() total = f2(1, 2) print(total) SSR d.) def f1(list_in): list_in.append(9) return id(list_in) nums = [1, 2, 3] if id(nums) == f1(nums): print('Jabba') else: print('Bazinga') print(nums) SSR e.) def f1(list_in): list_in = [] nums = [1, 2, 3] f1(nums) nums.pop(0) print(nums) SSR [Schriftlich] Erkl√§ren Sie in eigenen Worten, wie in Python eine Liste abgespeichert wird. Gehen Sie auch darauf ein, wie das Hinzuf√ºgen oder Entfernen von Listen-Elementen funktioniert. Material üëâ Download [Praktisch]: Schreiben Sie das entsprechende Programm namens square.py zu dem in (1) erzeugten Top-Down Entwurfs. Keine Benutzerinteraktion Eine Benutzerinteraktion mit Validierung der Eingaben ist nicht gefragt. 0 x 0 :::: :::: 1 x 1 ::=:: || || ::=:: 5 x 3 ::=====:: || || || || || || ::=====:: SSR Code Umschreiben Das Programm zahlen_raten.py ist in sog. Spaghetti-Code geschrieben - es werden √ºberall globale Variablen gebraucht. a. Was macht das Programm? b. Bauen Sie den Code so um, dass statt der globalen Variablen Funktionsparameter und R√ºckgabewerte verwendet werden, ohne dabei die Funktionalit√§t des Programms zu ver√§ndern. SSR","keywords":""},{"title":"Sprachelemente","type":0,"sectionRef":"#","url":"/EF-Python/Sprachelemente","content":"Sprachelemente Import-Befehl‚Äã Um vordefinierte Python-Befehle aus einer Bibliothek (ein sog. Python Modul) zu verwenden, m√ºssen diese importiert werden. Dies geschieht mit dem Import-Befehl: from turtle import * In software, a wildcard character is a kind of placeholder represented by a single character, such as an asterisk (*), which can be interpreted as a number of literal characters or an empty string. 1 Es ist aber auch m√∂glich, nur einzelne Befehle (Unterprogramme) aus einem Python Modul zu importieren. from math import floor, ceil print('Zahl:', 13.1) print('Abgerundet:', floor(13.1)) print('Aufgerundet:', ceil(13.1)) Dies hat mehrere Vorteile: Code Lesbarkeit Eine andere Person erh√§lt direkt eine √úbersicht, welche Befehle von welcher Bibliothek stammen. Verhindern von Namenskonflikten Man verwendet nicht zuf√§llig einen Funktionsnamen, der bereits importiert wurde. Vereinfachtes Debuggen Beim Debuggen werden keine zus√§tzlichen, nicht verwendeten Variablen und Funktionen angezeigt. Modulname importieren‚Äã In Python ist es ebenfalls m√∂glich, ein Modulname zu importieren: import math print('Zahl:', 13.1) print('Abgerundet:', math.floor(13.1)) print('Aufgerundet:', math.ceil(13.1)) Um nun die Funktion ceil aus dem Modul math aufzurufen, muss math.ceil() geschrieben werden. Da dies oft zu viel zu schreiben gibt, kann beim Importieren auch ein selbst gew√§hlter Name verwendet werden, bspw. m: import math as m # das Math-Modul ist nun √ºber den Namen &quot;m&quot; aufrufbar print('Zahl:', 13.1) print('Abgerundet:', m.floor(13.1)) print('Aufgerundet:', m.ceil(13.1)) Unterprogramm aufrufen‚Äã Alle Funktionen in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. from turtle import * forward(30) penup() goto(20, 30) pendwon() forward(30) Wiederholungen: for-Schleife‚Äã Mit einer Schleife k√∂nnen Befehle eine bestimmte Anzahl Mal wiederholt werden. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Grundrechenoperationen‚Äã Die Grundrechenoperationen werden in Python wie folgt geschrieben: Operation\tmathematisch\tPythonAddition\ta+ba + ba+b\ta + b Subtraktion\ta‚àíba - ba‚àíb\ta - b Multiplikation\ta‚ãÖba \\cdot ba‚ãÖb\ta * b Division\ta√∑ba √∑ ba√∑b\ta / b Potenz\taba^bab\ta ** b Beispiele‚Äã print('2 + 13 =', 2 + 13) print('17 - 9 =', 7 - 9) print('312 ‚ãÖ 7 =', 312 * 7) print('231 √∑ 3 =', 231 / 3) print('2^8 =', 2 ** 8) Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Umgang mit Fehlern","type":0,"sectionRef":"#","url":"/EF-Python/Python/try-except","content":"Umgang mit Fehlern üëâ Voraussetzung: Kapitel Repetition#Fehler ???@ Was soll ein Programm tun, wenn er mit unpassenden Daten oder Eingaben konfrontiert wird? Normalerweise: Abst√ºrzen . Damit das Programm nicht abst√ºrzt, ist es unerl√§sslich, die Benutzerabfragen so gut es geht in die richtige Form umzuwandeln und dann auf Richtigkeit zu √ºberpr√ºfen! Dabei gibt es zwei Ans√§tze: Das Programm anweisen, die Ausf√ºhrung einer Sequenz zu versuchen. Die Eingabe bzgl. Randbedingungen untersuchen und √ºberpr√ºfen... Try Except‚Äã Es gibt in Python eine M√∂glichkeit dem Interpreter zu sagen: &quot;Es ist okay wenn hier ein Fehler auftaucht, wir erwarten das schon und haben eine Antwort darauf bereit&quot;. Dieses Konstrukt nennt sich ein Try-Except Block und kann folgendermassen aussehen: eingabe = input('Geben sie eine Zahl ein') try: eingabe = int(eingabe) except: print('das ist keine Zahl') Hier geschieht folgendes: Der code im try Segment wird normal der Reihe nach ausgef√ºhrt. Falls jetzt innerhalb dieses Segments ein Fehler generiert wird bricht das Programm nicht ab, sondern springt an den Anfang des except Segments und f√ºhrt dieses aus. Danach wird normal unter dem except weiter gemacht. Beispiel‚Äã Beispiel: Ein Produktcode eingeben... muss genau 9 Zeichen enthalten die ersten 4 Zeichen m√ºssen Zahlen sein und gr√∂sser 1000 sein Zeichen muss ein Buchstabe sein die letzten 4 Zeichen m√ºssen eine Hexadezimalzahl sein (starten mit '0x' und dann zwei Zeichen mit den aus 0-9 oder A-F). Beispiel: 1234A0xBC def transform_input(raw): try: zahl = int(raw[:4]) if zahl &lt; 1000: raise 'Zu kleine Zahl' kategorie = raw[4] hexa = int(raw[5:9], base=16) return [zahl, kategorie, hexa] except: return False eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') def transform_input(raw): raw = raw.upper().strip() if len(raw) != 9: print('Eingabe zu wenig lang!') return False if not raw[:4].isnumeric(): print('Die ersten 4 Ziffern m√ºssen Zahlen sein!') return False zahl = int(raw[:4]) if zahl &lt; 1000: print('Erste Ziffer muss gr√∂sser 0 sein!') return False kategorie = raw[4] if not kategorie.isalpha(): print('5. Zeichen muss ein Buchstabe sein!') return False raw_hexa = raw[-4:] if raw_hexa[:2] != '0X': print('Die letzten vier Zeichen m√ºssen mit 0x beginnen') return False for h in raw_hexa[-2:]: if h not in '0123456789ABCDEF': print('Die letzten zwei Zeichen m√ºssen Hexadezimalzahlen sein (0-9, A-F)') return False hexa = int(raw_hexa, base=16) return [zahl, kategorie, hexa] eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') Obigen Code analysieren? Welche Variante ist praktischer f√ºr die Programmierer:in? Welche Variante ist praktischer f√ºr die Benutzer:in? Was w√§re ein vern√ºnftiger Mittelweg? Copy-Pasten Sie sich eine vern√ºnftige Variante zusammen! io.py def transform_input(raw): ... eingabe = input('Geben Sie den Produktcode ein [Form 1234A0xBC]: ') produkt = transform_input(eingabe) if produkt: print('Produkt', produkt) else: print('Fehlerhafte Eingabe!') Fazit‚Äã Benutzereingaben sind m√ºhsam... Finding Es gibt keine klaren Regeln, welche Variante im Umgang mit Fehlern besser ist - entweder vorbeugen durch Sicherheitsabfragen oder Fehlerbehandlung mit try-except. Die Wahl ist oft auch einfach durch die Philosophie des Programmierers bedingt. Um die Lesbarkeit und Wartbarkeit des Programms zu verbessern, k√∂nnen Gewisse Richtlinien befolgt werden: Wenn der Fehler durch eine einfache if-Abfrage umgangen werden kann, ist dies meist die bessere L√∂sung. Wenn die n√∂tige(n) if Abfrage(n) um dem Fehler vorzubeugen, sehr lange und un√ºbersichtlich w√§re, kann ein try-except Block die bessere Wahl sein. Ein try Block sollte maximal ein par Zeilen beinhalten. Die Idee ist also nicht, ganze Funktionen in ein try packen! ... und es muss an jeden Edge-Case gedacht werden... @ @ Aufgabe √úberpr√ºfen Sie im NumTrip Spiel die Benutzereingaben, so dass auch bei fehlerhaften Eingaben das Programm nicht abst√ºrzt.","keywords":""},{"title":"Techniken im Software Engineering","type":0,"sectionRef":"#","url":"/EF-Software-Engineering/Techniken","content":"Techniken im Software Engineering Es gibt einige Techniken bei der Entwicklung von Software, welche sich immer wieder bew√§hrt haben. Ein paar davon sollen hier vorgestellt werden. Teile und herrsche - Reduktion der Komplexit√§t‚Äã Teile und herrsche ist eine Technik, welche wahrscheinlich schon im r√∂mischen Reich praktiziert wurde. Auch Niccol√≤ Machiavelli hat sie 1532 beschrieben. Es geht dabei um folgendes: Um eine Gruppe von Menschen zu beherrschen, ist es hilfreich diese zuvor zu entzweien, damit anschliessend jede Teilgruppe leichter beherrscht werden kann. In der Softwareentwicklung wollen wir nicht Menschen beherrschen, sondern Probleme l√∂sen. Wenn nun ein Problem zu gross, oder zu komplex ist, dass man es direkt l√∂sen kann, so sucht man nach einer Aufteilung in Teilprobleme, welche leichter zu l√∂sen sind. Anschliessend l√∂st man die Teilprobleme und f√ºgt schliesslich die Teill√∂sungen zu einer Gesamtl√∂sung zusammen. Dies kann man √ºber mehrere Stufen hinweg machen, bis die Teilprobleme gen√ºgend klein sind. Teile und herrsche ist ein so fundamentales Prinzip, dass man es √ºberall in der Informatik antrifft. Im Bereich der Algorithmen bedeutet Teile und herrsche in der Regel, dass man den Umfang des grossen Problems reduziert, die Problemstellung aber die selbe bleibt. Beispiel: Sortieren einer grossen Menge von Daten. Die Menge wird in Teilmengen aufgeteilt, welche je f√ºr sich sortiert werden. Das Problem &quot;sortieren&quot; bleibt das selbe, aber der Umfang hat abgenommen. Im Bereich des Softwareengineerings sind die Teilprobleme in der Regel unterschiedlicher Art. In der prozeduralen Programmierung sucht man nach einer Aufteilung des Programms (grosses Problem) in viele kleinere Funktionen (kleine Probleme). Eine solche Aufteilung wird auch als funktionale Dekomposition bezeichnet. Mehr dazu im Abschnitt Top-down und Bottom-up @ Top-down und Bottom-up‚Äã Hier geht es nun konkret um die Frage, wie man ein Programm (grosses Problem) in einzelne Funktionen (kleinere Probleme) aufteilt, also das Prinzip des Teile und herrsche anwendet. Wie die √úberschrift schon sagt, kann man dabei auf zwei Weisen vorgehen: Man beginnt zuoberst (top) mit dem grossen Problem (das gew√ºnschte Programm) und teilt diese in kleinere Teilprobleme auf. Jedes Teilproblem wird f√ºr sich betrachtet und allenfalls in noch kleinere Teilprobleme aufgeteilt, bis diese so klein sind, dass man zu ihrer L√∂sung eine einfache Funktion programmieren kann. Auf diese Weise entsteht zun√§chst ein Entwurf (englisch Design) f√ºr unser Programm. Jetzt kann man wieder zu den gr√∂sseren Problemen zur√ºckkehren und diese l√∂sen, indem man eine Funktion schreibt, welche die Funktionen zu den kleineren Problemen nutzt. Man beginnt zuunterst (bottom) und schreibt direkt Funktionen zur L√∂sung von einfachen Teilproblemen. Diese werden nach und nach in √ºbergeordneten Funktionen integriert, bis eine L√∂sung f√ºr das grosse Problem entstanden ist. Die Gefahr bei diesem Ansatz ist allerdings, dass man eine ung√ºnstige Aufteilung in Teilprobleme erh√§lt. Meist w√§hlt man eine Kombination von beiden Ans√§tzen. Am Anfang schaut man sich bestimmte Teilprobleme bottom-up an und gewinnt dabei erste Erfahrungen und Kenntnisse √ºber einzelne Aspekte des grossen Problems. Dann geht man zu top-down √ºber und entwirft eine m√∂glichst optimale Aufteilung des grossen Problems. Manchmal merkt man aber auch erst beim Programmieren einer Funktion, dass diese nochmals in Teilfunktionen aufgeteilt werden sollte, z.B. wenn gewisse Programmteile mehrfach vorkommen, oder eine Funktion zu kompliziert wird. Software Engineering √úberpr√ºfen Sie Ihr Verst√§ndnis durch das L√∂sen der folgenden Aufgabe. Markieren Sie die Aufgabe anschliessend als erledigt.","keywords":""},{"title":"Software Engineering","type":0,"sectionRef":"#","url":"/EF-Software-Engineering","content":"Software Engineering Einf√ºhrung‚Äã Die Entwicklung von grossen Programmen ist sehr anspruchsvoll. Immer wieder scheitern grosse Software-Projekte, wobei Investitionen in Millionenh√∂he verloren gehen. Schon fr√ºh wurden deshalb Methoden und Techniken entwickelt, um den Entwicklungsprozess zu steuern und m√∂glichst erfolgreich zu machen. Diese Methoden orientierten sich anf√§nglich an Vorgehensweisen, wie man sie aus anderen Ingenieur-Disziplinen, wie der Elektrotechnik, dem Bauwesen, etc. kannte. Allerdings stellte man schnell fest, dass Software-Projekte viel dynamischer verlaufen. Man kann nicht, wie beim Bau einer Maschine, einen Plan zeichnen, dann alles genau so ausf√ºhren und am Schluss hat man eine funktionierende Maschine. Oft weiss der Kunde am Anfang selber nicht genau, was er eigentlich braucht. Praktisch immer ver√§nderen sich die W√ºnsche w√§hrend der Laufzeit eines Projektes und es kommen neue W√ºnsche hinzu. Diesem Umstand muss im Software-Engineering Rechnung getragen werden. Software-Engineering-Disziplinen‚Äã Wie beim Sport, so gibt es auch im Software-Engineering verschiedene Disziplinen. In einem Software-Projekt m√ºssen alle diese Disziplinen im notwendigen Mass vetreten sein. In den folgenden Abschnitten werden die vier wichtigsten Diszplinen erkl√§rt. Analyse‚Äã Hier geht es darum zu verstehen, was der Kunde eigentlich gerne h√§tte. Oft ist das in Form von Anforderungen formuliert. Solche Anforderungen sind irgendwelche textuellen Beschreibungen, die aber teilweise unvollst√§ndig, oder gar widerspr√ºchlich sind. In der Analyse geht es darum die Anforderungen zu anlaysieren, diese zu pr√§zisieren, fehlende Teile zu erg√§nzen und Widerspr√ºche zu beheben. Entwurf‚Äã W√§hrend es in der Analyse darum geht zu verstehen, was eigentlich das Problem ist, geht es im Entwurf darum, eine m√∂glich L√∂sung f√ºr das Problem zu entwerfen. Hier geht es darum zu entscheiden, aus welchen Teilen die sp√§tere Software bestehen wird, wie die zu verarbeitenden Informationen codiert werden sollen und welche Datenstrukturen f√ºr die Speicherung n√∂tig sind. Im Entwurf geht es darum eine L√∂sung f√ºr das Problem zu skizzieren. Dabei entsteht oft ein Modell, welches die einzelnen Bestandteile der k√ºnftigen Software zeigt. Zur Darstellung von diesem Modell werden Diagramme verwendet (eine Art Baupl√§ne f√ºr Software). Implementation‚Äã Die Implementation befasst sich mit der Umsetzung der im Entwurf skizierten L√∂sung in Programmcode. In der Implementation wird das entworfene Modell in Anweisungen in der gew√§hlten Programmiersprache √ºbersetzt. Test‚Äã Jede Software enth√§lt Fehler. Im Test geht es darum m√∂glichst viele davon zu finden und zu eliminieren. Dazu muss man sich √ºberlegen, welche Situationen beim normalen Einsatz der Software vorkommen. Genau so wichtig ist aber auch, die Software unter vom Normalfall abweichenden Situationen zu testen. Was passiert, wenn der Benutzer eine ung√ºltige Eingabe macht? Kann die Software damit umgehen, oder st√ºrzt sie ab. Im Test wird eine Software unter genau definierten Bedingungen, den Testf√§llen, gepr√ºft. Ein Testfall gibt vor, welche Eingangsdaten ins System eingespiesen werden und welche Resultate erwartet werden. Vorgehensmodelle‚Äã Ein Vorgehensmodell definiert wie und wann die oben beschriebenen Disziplinen w√§hrend eines Projektes angewendet werden. Es gibt unz√§hlige solche Modelle, welche √ºber die Zeit entwickelt wurden. Zwei grunds√§tzlich unterschiedliche Modell sollen hier beschrieben werden. Wasserfall‚Äã Beim Wasserfallmodell werden die Disziplinen, beginnend mit der Analyse (im Bild als Anforderungen bezeichnet) und endend mit dem Test (im Bild √úberpr√ºfung), sch√∂n der Reihe nach durchgef√ºhrt. Man spricht jetzt von Phasen, statt von Disziplinen. Wichtig dabei ist, dass mit der nachfolgenden Phase erst dann gestartet wird, wenn die vorherige Phase vollst√§ndig abgschlossen ist. @ Und genau da liegt das Problem. Wie in der Einleitung beschrieben, √§ndern sich die W√ºnsche des Kunden w√§hrend der Projektlaufzeit, oder es kommen neue W√ºnsche hinzu. Wenn das Projekt aber schon in der Phase der Implementation angelangt ist, hat man keine M√∂glichkeit mehr zu reagieren. Man muss ja wieder zur√ºck zur Analyse und dann den Design wiederholen. Das k√∂nnte aber dazu f√ºhren, dass ein grosser Teil des bisher erstellten Programms nicht mehr passt und verloren ist. Bei kleinen Projekten ist das nicht so schlimm. Bei grossen Projekten, wo viele Leute mehrere Jahre daran arbeiten, kann das aber zu einem finanziellen Desaster f√ºhren, wenn man nach einem Jahr Analyse, einem Jahr Entwurf und einem halben Jahr Implementation wieder vorne beginnen muss. Dies ist mit ein Grund, weshalb die Kosten von Informatikprojekten in der Vergangenheit immer wieder massiv aus dem Ruder gelaufen sind. Aus diesem Grund hat man nach anderen Vorgehensweisen gesucht, welche den Anforderungen von Informatikprojekten besser gerecht werden. Iteratives Modell‚Äã Beim iterativen Modell macht man aus der Not eine Tugend. Weil es eben nicht m√∂glich ist die vier Disziplinen nur einmal und in fester Reihenfolge zu durchlaufen, zerlegt man das Projekt in kleine Zyklen, welche dann wieder nach dem Wasserfall-Modell ablaufen. In jedem Zyklus wird ein kleiner Teil des angestrebten Programms realisiert. Es resultieren viele kleine &quot;Mini-Wasserf√§lle&quot;. Man kann das Modell auch als Spirale darstellen, bei welcher man sich rundherum durch die einzelnen Disziplinen bewegt, wobei der Umfang des realisierten Programms mit jedem Zyklus gr√∂sser wird. @ Der grosse Vorteil von diesem Vorgehen ist, dass man am Anfang jedes Zyklus auf ge√§nderte oder neue Kundenw√ºnsche eingehen kann. Zwar muss man auch hier dann und wann bereits bestehende Programmteile umbauen oder gar entfernen. Das ist aber nicht so schlimm, da es sich um viel kleinere Korrekturen handelt, als wenn man wieder von vorne beginnen m√ºsste. Zudem dauern solche Zyklen nur wenige Tage oder maximal ein paar Wochen. Das heisst das finanzielle Risiko ist auch kleiner. Ein weiterer Vorteil liegt darin, dass man dem Kunden ab dem ersten vollendeten Zyklus ein lauff√§higes Programm zeigen kann und der Kunde sich so besser vorstellen kann, was er erhalten wird. Er kann auch fr√ºhzeitig eingreifen, wenn das Resultat nicht seinen Vorstellungen entspricht.","keywords":""},{"title":"Excel","type":0,"sectionRef":"#","url":"/Excel","content":"Excel Excel-Funktionen in einer anderen Sprache: üëâ https://de.excel-translator.de/translator/ Kostenlose Installation f√ºr Sch√ºler:innen mit dem Schulaccount: üëâ https://office.com","keywords":""},{"title":"Strings","type":0,"sectionRef":"#","url":"/EF-Python/Python/strings","content":"Strings Texte in Python k√∂nnen auf unterschiedliche Art und weise erzeugt werden. Definition 'text', &quot;text&quot;‚Äã ob einfache- ' oder doppelte &quot; Anf√ºhrungszeichen: Beides ist gleichbedeutend! Definition f'', f&quot;&quot; Formatierter Text‚Äã Formatierter Text kann mehrere Texte zusammenf√ºgen und dabei auch Zahlen oder Listen einf√ºgen. Inhalt in geschweiften Klammern wird zuerst ausgewertet und dann dort abgedruckt. name = 'Maria' jahrgang = 1999 print(f'Hallo {name}, du bist heute {2022 - jahrgang} Jahre alt') Definition ''', &quot;&quot;&quot;, f''', f&quot;&quot;&quot; Mehrzeiliger Text‚Äã M√∂chte man Text √ºber mehrere Zeilen schreiben, kann entweder das Zeichen f√ºr eine neue Zeile (\\n) verwendet werden, oder ein mehrzeiligen String mit ''' oder &quot;&quot;&quot; starten. Ebenso k√∂nnen mehrzeilige formatierte Bl√∂cke aussehen. for name in ['Omi', 'Maria', 'Mami und Papi']: brief = f'''Hallo {name} Ich bin in den Ferien und geniesse es. Liebe Gr√ºsse, Reto''' print(brief) print('----------') Mehrzeilige Kommentare Manchmal w√ºnscht man sich einen Kommentar √ºber mehrere Zeilen zu schreiben, ohne immer ein # am Beginn der Zeile zu schreiben. In anderen Sprachen gibt es spezielle &quot;Start-&quot; und &quot;End-Kommentar&quot; Zeichen, so dass auch mehrere Zeilen auskommentiert werden k√∂nnen. (Bspw. um eine ganze Funktion auszukommentieren...). In Python gibt es dies nicht. Es kann aber aus dem kommentierten Code Text gemacht werden, so dass dieser nicht ausgef√ºhrt (aber auch nirgends in eine Variable gespeichert) wird. from math import sqrt ''' def sqrt(zahl): # berechnet die Quadratwurzel return zahl ** 0.5 ''' print('Wurzel 2 = ', sqrt(2)) Beispiel: Urspr√ºnglich wurde die Funktion sqrt selber implementiert. Nun brauchen Sie diese vermutlich nicht mehr, das diese aus der Bibliothek math importiert wird. Vorerst wollen Sie die eigene Funktion aber noch nicht l√∂schten vorerst kommentieren Sie diese. Ver√§nderbarkeit (Mutability)‚Äã Wie im Kapitel Referenzen besprochen, haben wir unsere Vorstellung des Speichermodells in Python soweit aktualisiert, dass der Computer f√ºr Variablen eine Etikette erstellt, die auf eine Speicherstelle zeigt, an welcher dann der effektive Wert gespeichert ist. Der Python Code... a = 'das ist mein string' ... kann dargestellt werden als In Python gibt es unterschiedliche Sammel-Datentypen, daher Daten, die unterschiedlich gross sein k√∂nnen - Texte und Listen haben wir bereits kennengelernt, Dictionaries und Sets sind weitere. Dabei macht Python einen grundlegenden Unterschied zwischen Ver√§nderbaren- (Mutable) und Nicht-Ver√§nderbaren (Immutable) Datentypen. Bei ver√§nderbaren Datentypen k√∂nnen nach der Erzeugung und Zuweisung √Ñnderungen an den zugrundeliegenden Speicherstellen vorgenommen werden. Listen vs. Tupel Bei Listen k√∂nnen nach dem Erzeugen einzelne Listenwerte ver√§ndert, oder gar neue Werte hinzugef√ºgt oder entfernt werden. a = [1, 2, 3] # Liste initialisieren a.append(4) # 4 hinzuf√ºgen a.pop(0) # vorderstes Element entfernen a[0] = 5 # erste Stelle auf 5 setzen print(a) Im Gegensatz dazu gibt es das unver√§nderbare √Ñquivalent dazu: Tupel. Einmal initialisiert, lassen sich dessen Werte nur noch lesen, jedoch nicht mehr ver√§ndern. Tupel werden im Gegensatz zu Listen mit runden Klammern erzeugt (initialisiert). a = (1, 2, 3) # Tupel - eine unver√§nderbare Liste print(a) a.append(4) # FEHLER! a.pop(0) # FEHLER! a[0] = 5 # FEHLER! Eine √úbersicht √ºber die g√§ngigen Datentypen in Python zeigt deren Ver√§nderbarkeit nach der Initialisierung. Strings sind also auch immutable - es ist daher nicht m√∂glich, deren Werte direkt zu ver√§ndern. Auf Buchstaben zugreifen‚Äã Wie bei Listen, lassen sich auch hier einzelne Buchstaben gezielt abrufen vorname = 'Maria' print(vorname[0]) # erster Buchstabe print(vorname[-1]) # letzter Buchstabe Definition str[start:ende:schrittweite] Zugriff‚Äã Es ist auch m√∂glich, einen Bereich anzugeben. Wie beim range() Befehl, gibt man den Startwert und die obere Grenze an, die aber selber nicht erreicht wird. vorname = 'Reto' print(vorname[0:2]) # Buchstaben von 0 bis (ohne mit!) 2 Buchstaben print(vorname[0:3]) # Buchstaben von 0 bis (ohne mit!) 3 Buchstaben Alle Buchstaben ausser der erste‚Äã vorname = 'Reto' print(vorname[1:5]) # entweder explizit &quot;L√§nge + 1&quot; angeben print(vorname[1:]) # oder das Ende nicht angeben = bis zum Schluss Jeder zweite Buchstabe‚Äã Oder nur jeden zweiten Buchstaben namen = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' print(namen[0::2]) # Bemerke: der Endwert wird nicht angegeben = bis zum Schluss fortfahren... oder r√ºckw√§rts vorname = 'Reto' # Start beim letzten Buchstaben (-1) # Bis zum Ende der Textkette (Weglassen) # Schritt zum n√§chsten Buchstaben: -1 print(vorname[-1::-1]) √úber Buchstaben iterieren‚Äã Es kann auch √ºber alle Buchstaben in einem String iteriert werden: name = 'Maria' for buchstabe in name: print(buchstabe, end='‚≠ê') √úberpr√ºfen, ob ein Textteil in einem String vorkommt‚Äã Mit in kann √ºberpr√ºft werden, ob ein String in einem anderen vorkommt. passwort = '$uperman#1' if '$' in passwort: print('Enth√§lt $') else: print('Kein Geld') Kurzaufgaben‚Äã 1. Erkl√§ren Sie, was die Programmierer:in hier erreichen wollten, und weshalb aber ein Fehler entsteht. name = 'jimmy' name[0] = 'J' print(name) 2. Why are humans known to be extremely afraid of computers? Die Antwort finden Sie, indem Sie, startend beim 3. Buchstaben, jeden 13 Buchstaben ausgeben. Versuchen Sie, die korrekte Zugriffs-Methode zu verwenden. riddle.py joke = 'nuPLSGJwVLMtirKryXiBwBu!JcTtoSRBppmvstCTjbXACQXVFDQSVjaGPNsSDKVNIwhbczEg!B UtAgZlFmFGgwFrOm,WyDfO,qUksDgSe,.SROAMzvhTDA .xyyDTP!myzQbFDCcfHTTwA,EecYrlbCTj,dbAcJFcnWoWFuz .anNFdVrWapauRudWtfFBLuzX!kspOrgrKyf.wXieCpI ZpmMamTn xoQfMYFsbwRhtoj MsDaEuGeWhIqetWHzV YpdepptwPMnlwULsycWvctXTdzeCv GjFgzPBRLoLnbaepuVw,l?EyByDi, ,ERD!ehLt!XmI??AWsxTaeeoShEC .Bk.S!KIQBMyM.ID' print(joke) Hinweis Der 3. Buchstabe ist das P in der Liste und kann mit joke[2] abgefragt werden. Methoden von Strings‚Äã Im folgenden werden diverse Methoden im Umgang mit Strings vorgestellt. Wichtig dabei zu beachten ist die Terminologie. Betrachten Sie das folgende Beispiel: index_von_welt = 'hallo, welt'.find('welt') Hier wird die Methode .find() auf den String 'hallo, welt' aufgerufen, wobei der Kontext durch den String selbst gegeben ist. Dies ist der Unterschied von Methoden zu Funktionen: Funktionen kennen keinen Kontext, alles muss mit Parametern √ºbergeben werden (bspw. bei len() muss der String √ºbergeben werden: len('Hallo, Welt')). Die Methode .find() ist hier eine vom Objekt String zur Verf√ºgung gestellte &quot;Funktion&quot;, die den eigenen Wert kennt und auf sich aufgerufen wird. Inhalt Untersuchen‚Äã Diese Methoden bieten Hilfestellung, wenn wir eine spezifische Information √ºber einen String haben wollen. Definition .startswith(wort)‚Äã Beantwortet die Frage ob ein String mit einem wort (oder auch nur einem Buchstaben) beginnt mit einem Boolean. Achtung: Gross- Kleinschreibung. a = 'Hallo' print(a.startswith('H')) print(a.startswith('h')) Definition .endswith(wort)‚Äã Beantwortet die Frage ob ein String mit einem wort (oder auch nur einem Buchstaben) endet mit einem Boolean. Achtung: Gross- Kleinschreibung. a = 'Hallo! ' print(a.endswith('!')) print(a.endswith(' ')) # auch Leerzeichen sind Zeichen! Definition .isalpha()‚Äã Beantwortet die Frage, ob ein String nur aus Buchstaben besteht mit einem Boolean. passwort = 'p4sswort' if passwort.isalpha(): print('Schlechtes PW') else: print('Gutes PW') Definition .isnumeric()‚Äã Beantwortet die Frage, ob ein String nur aus Zahlen besteht mit einem Boolean. tel = '0797001234' if tel.isnumeric(): print('K√∂nnte Telefonnummer sein') else: print('M√§√§h, keine Telefonnummer :(') Definition .find(wort)‚Äã Findet ein wort im String und gibt den Startindex des erstmaligen Auftretens zur√ºck. Bei 'Hallo'.find('l') w√§re dies also der Startindex 2, da bei 'Hallo'[2] erstmalig ein l vorkommt. Wird das wort nicht gefunden, so gibt die Method -1 zur√ºck. passwort = 'p4ssw*rt' stern_index = passwort.find('*') if stern_index &gt;= 0: print('Passwort hat ein * Zeichen') else: print('Passwort hat kein * Zeichen') Inhalt ver√§ndern‚Äã Wie vorhin festgestellt, sind Strings immutable, k√∂nnen daher nicht ver√§ndert werden. Um dennoch m√∂glichst einfach Operationen auf Texten auszuf√ºhren, wie etwa alles gross- oder kleinzuschreiben, gibt es Methoden, welche einen ver√§nderten String zur√ºckgeben, sich selber aber nicht ver√§ndern. Definition .upper()‚Äã Schreibt den String in Grossbuchstaben, Sonderzeichen werden nicht ver√§ndert. original = 'Alles Grossbuchstaben im Titel!' gross = original.upper() print(original, gross) Definition .lower()‚Äã Schreibt den String in Kleinbuchstaben, Sonderzeichen werden nicht ver√§ndert. original = 'Alles Kleinbuchstaben in der Fusszeile!' klein = original.lower() print(original, klein) Definition .strip(&lt;zeichen&gt;)‚Äã Entfernt jeglichen White-Space (&quot;weisse Zeichen&quot;, daher Leerschl√§ge, Tabulatoren, Neue Zeilen) entfernt Leerschl√§ge am Start und Ende des Strings. vorname = ''' Maria ''' print(vorname) vorname = vorname.strip() print('Vorname:', vorname) Optional k√∂nnen mit einem Parameter auch die Zeichen angegeben werden, welche am Start und Ende entfernt werden sollen. Auch die Zeichen der Standardoption (wenn also keine Optionen angegeben werden), m√ºssen spezifiziert werden (Leerzeichen, neue Zeile \\n, Tabulator \\t) vorname = '''!!! # Reto # # ''' print(vorname) vorname = vorname.strip(' \\n\\t!#') print('Vorname:', vorname) Definition .replace(wort, ersetzen)‚Äã Ersetzt alle worte im String mit dem Parameter ersetzen. Achtung: ersetzen muss auch ein String sein, .replace('f√ºnf', 5) gibt einen Fehler. text = '''I'm at home at four or five''' text = text.replace('at', '@') text = text.replace('home', 'üèöÔ∏è') text = text.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4') text = text.replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9') print(text) 3. Emoji-Sprache Erstellen Sie eine Emoji-Sprache und ersetzen Sie typische W√∂rter in das entsprechende Emoji. Beispiel: love, liebe, li√§b√§ ‚ù§Ô∏è coffee, kaffe, kafi ‚òï ... ... Erweitern Sie anschliessend Ihr Programm so, dass eine Benutzer:in einen Satz eingeben kann, und der Emoji-Satz angezeigt wird. emoji.py Strings und Listen‚Äã Manchmal hilft es, Strings in Listen umzuwandeln und manchmal m√∂chten wir eine Liste von Buchstaben oder Strings in einen String zu vereinen. Definition .join(liste)‚Äã ben√∂tigt als Parameter eine Liste von Strings. Diese werden dann zu einem ganzen String aneinandergeh√§ngt. Das Bindeglied bildet der String, auf dem die Methode aufgerufen wurde. tage = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'] print('Wochentage: ', tage) woche = ' '.join(tage) print('Wochentage: ', woche) datum = ['18', '11', '2022'] datum = '-'.join(datum) print('Heute ist der ', datum) Definition .split(zeichen)‚Äã .split() ist die umgekehrte Aktion von .join(). Die Methode nimmt als Parameter ein zeichen [typ String] und trennt anschliessend den String √ºberall, wo das zeichen vorkommt. Dabei werden die zeichen selbst entfernt. datum = '05:12:2021' datum_als_liste = datum.split(':') print(datum_als_liste) monat = datum_als_liste[1] print('Monat: ', monat) # Kurzschreibweise print('Tag: ', datum.split(':')[0]) 4. Zeilenweise reverse.py text = '''\\ *----- -*---- --*--- ---*-- ----*- -----*\\ ''' print(text) Was bezwecken die beiden \\ auf Zeile 1 und 7? Erzeugen Sie ein in obigem Programm folgende Ausgabe, ohne dabei text zu ver√§ndern. *----------* -*--------*- --*------*-- ---*----*--- ----*--*---- -----**----- Hinweis Eine neue Zeile wird mit dem Newline-Zeichen \\n (inkl. Backslash!) erzeugt. SSR","keywords":""},{"title":"Hangman","type":0,"sectionRef":"#","url":"/EF-Software-Engineering/Hangman","content":"Hangman Bottom-up Funktionen‚Äã Funktionen‚Äã def show(): pass def is_valid(inp): return True def eingabe(): pass def auswerten(valid_inp): pass def gewonnen(): return False def game_over(): pass def play(): pass Funktionsk√∂rper‚Äã for buchstabe in gesucht: if buchstabe not in gefunden: return False return True if valid_inp in gesucht: gefunden.append(valid_inp) else: falsch_geraten.append(valid_inp) buchstabe = input('Buchstabe? ') while not is_valid(buchstabe): buchstabe = input('Buchstabe? ') return buchstabe.lower() print('Falsche Buchstaben:', falsch_geraten) for buchstabe in gesucht: if buchstabe in gefunden: print(buchstabe, end=' ') else: print('_', end=' ') print('') Variablen‚Äã # Variablen gesucht = 'test' gefunden = [] falsch_geraten = [] Hangman Dateiname EF-Informatik/exercises/hangman.py Ordnen Sie die vorhandenen Funktionsk√∂rper den richtigen Funktionsdefinitionen zu und f√ºgen Sie die Variablen ganz oben im Skript ein. Wo werden die verschiedenen Variablen verwendet? Was wird darin gespeichert? Kommentieren Sie die Funktionen. Was machen Sie? Bei Eingaben: Was f√ºr Parameter werden erwartet? Bei R√ºckgabewerten: Was wird zur√ºckgegeben Machen Sie einen ersten Commit Implementieren Sie die Funktion play gem√§ss dem Top-down Entwurf Implementieren Sie die Funktion game_over. Die Funktion gibt True zur√ºck, falls mehr als 10 mal falsch geraten wurde oder falls das Spiel gewonnen wurde. Das Spiel funktioniert ü•≥ Doch was soll passieren, wenn mehr als ein Buchstabe oder eine Zahl eingegeben wird? Setzen Sie diese Richtlinien in der Funktionen is_valid um. Folgender Link k√∂nnte hilfreich sein üëâ https://docs.python.org/3/library/stdtypes.html#str.isalpha Commit &amp; Push ‚≠ê Generieren Sie zuf√§llige W√∂rter: üëâ Zuf√§llige W√∂rter ‚≠ê Zeigen Sie ASCII-Bilder f√ºr den Spielstand an: üëâ ASCII-Bilder Markieren Sie die Aufgabe als erledigt. SSR SSR SSR Erneut Spielen Sobald man verloren hat, soll man gefragt werden, ob man erneut spielen m√∂chte. Weiterspielen 1) Neues Wort setzen (siehe Kapitel Zuf√§llige W√∂rter generieren) 2) Spielst√§nde zur√ºcksetzen 3) Wieder spielen Programm beenden mit dem Befehl exit() das ganze Programm sofort beenden ‚≠ê Zuf√§llige W√∂rter generieren‚Äã Um zuf√§llige, deutsche W√∂rter zu generieren, kann man die Bibliothek zufallsworte installieren, indem im Python-Terminal von VS Code folgender Befehl eingegeben wird: pip3 install zufallsworte Anschliessend kann wie folgt ein zuf√§lliges Wort abgefragt werden: import zufallsworte as zufall wort = zufall.zufallswoerter(1)[0] # gibt ein Zufallswort zur√ºck ‚≠ê Hangman ASCII-Bilder‚Äã HANGMANS_RAW = ''' 18 Zeichen ergeben ein Bild... __________ __________ __________ __________ __________ __________ __________ __________ __________ | | |/ |/ | |/ | |/ | |/ | |/ | |/ | |/ | | | | | | O | O | O | O | O | O | | | | | | | | -| | -| | -|- | -|- | | | | | | | | \\ | \\ | / \\ | | | | | | | | | | GAME OVER _________ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ _|_______ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ ___/ \\___ '''.split('\\n')[1:-1] # ohne erste und letzte Zeile # enth√§lt 11 ASCII-Bilder, f√ºr jeden Spiel-Zustand einen HANGMANS = ['\\n'.join([line[i : i + 18] for line in HANGMANS_RAW]) for i in range(0, 11 * 18, 18)] def get_hangman(nr): ''' nr: int values from 0 to 10 ''' return HANGMANS[nr] print(get_hangman(6)) ","keywords":""},{"title":"Statsistische Kenngr√∂ssen","type":0,"sectionRef":"#","url":"/Excel-WMS/Lageparameter","content":"Statsistische Kenngr√∂ssen Lageparameter beschrieben, wo die Stichprobe liegt, d.h. um welchen Wert sie sich gruppiert. Mittelwert‚Äã Der Mittelwert ist der Durchschnitt aller Werte. xÀâ=x1+x2+x3+...+xnn\\bar{x} = \\frac{x_1+x_2+x_3+...+x_n}{n}xÀâ=nx1‚Äã+x2‚Äã+x3‚Äã+...+xn‚Äã‚Äã In Excel kann der Mittelwert im Bereich A1:A12 mit der Funktion =MITTELWERT(A1:A12) berechnet werden. Modus‚Äã Der Modus (Modalwert) ist der Wert, der im Datensatz am h√§ufigsten vorkommt. Er ist vor allem dann wichtig, wenn man es nicht mit quantitativen Merkmalen (etwa K√∂rpergr√∂ssen) zu tun hat, sondern mit qualitativen Daten erfassbaren Daten, etwa mit verschiedenen m√∂glichen Antworten auf eine Frage. Median‚Äã Der Median ist der mittlere Wert. Er kommt also zustande, indem alle Werte der Gr√∂sse nach geordnet werden, und der Mittlere Wert ausgelesen wird. @ Im Bild Oben w√§re der Median entsprechend 8 kg. Sind in einem Datensatz eine gerade Anzahl Datens√§tze vorhanden, so berechnet sich der Median als Durchschnitt der beiden mittleren Werte. Vorteil gegen√ºber dem Mittelwert‚Äã Median vs. Mittelwert Berechnen Sie f√ºr die folgenden Gewichte den Mittelwert und den Median. Welcher Wert beschreibt die Lage des mittleren Gewichts am besten? @ Erkenntnisse Modus und Median sind einfach zu ermitteln und sind im Vergleich zum Mittelwert statistisch robust, d.h. sie reagieren wenig sensibel auf statistische Ausreisser. Die Aussage ist jedoch nicht die gleiche und insbesondere der Modus ist weniger aussagekr√§ftig! Streuungsparameter‚Äã Streuparameter beschrieben, wie Breit die Stichprobe um den Mittelwert streut, d.h. wie weit sie im Mittel vom Mittelwert entfernt sind. Spannweite‚Äã Die Spannweite ist der Abstand (die Differenz) zwischen dem kleinsten und dem gr√∂ssten Wert. Sie ist sehr einfach zu ermitteln, sagt aber wenig aus. Hauptnachteil: Die Spannweite ist nicht robust, d.h. statistische Ausreisser (einzelne Werte, die viel tiefer oder h√∂her sind als fast alle √ºbrigen ‚Äì nicht selten infolge von Messfehlern oder falsch eingegebenen Daten) fallen viel zu stark ins Gewicht. Varianz s2s^2s2‚Äã Die Varianz s2s^2s2 ist die mittlere quadratische Abweichung der Ergebnisse vom Mittelwert: s2=(x1‚àíxÀâ)2+(x2‚àíxÀâ)2+...+(xn‚àíxÀâ)2n‚àí1s^2 = \\frac{(x_1-\\bar{x})^2+(x_2-\\bar{x})^2+...+(x_n-\\bar{x})^2}{n-1}s2=n‚àí1(x1‚Äã‚àíxÀâ)2+(x2‚Äã‚àíxÀâ)2+...+(xn‚Äã‚àíxÀâ)2‚Äã wobei n die Gr√∂sse der Stichprobe, x1x_1x1‚Äã, x2x_2x2‚Äã, xnx_nxn‚Äã die verschiedenen Messwerte und xÀâ\\bar{x}xÀâ der Mittewlert darstellen. In Excel kann die Standardabweichung mit der Funktion =VAR.S berechnet werden. Zum Beispiel =VAR.S(A1:A12) f√ºr die Werte der Zellen A1 bis A12. Standardabwichung sss‚Äã Vereinfacht gesagt, ist die Standardabweichung die durchschnittliche Entfernung aller gemessenen Auspr√§gungen eines Merkmals vom Durchschnitt. Die Standardabweichung besitzt immer die gleiche Masseinheit wie das zu untersuchende Merkmal. Dadurch ist im Vergleich zur Varianz eine Interpretation einfacher. Eine kleinere Standardabweichung gibt in der Regel an, dass die gemessenen Auspr√§gungen eines Merkmals eher enger um den Mittelwert liegen, eine gr√∂ssere Standardabweichung gibt eine st√§rkere Streuung an. Die Standardabweichung sss ist die Quadratwurzel aus der Varianz: s=s2=(x1‚àíxÀâ)2+(x2‚àíxÀâ)2+...+(xn‚àíxÀâ)2n‚àí1s=\\sqrt{s^2} = \\sqrt{\\frac{(x_1-\\bar{x})^2+(x_2-\\bar{x})^2+...+(x_n-\\bar{x})^2}{n-1}}s=s2‚Äã=n‚àí1(x1‚Äã‚àíxÀâ)2+(x2‚Äã‚àíxÀâ)2+...+(xn‚Äã‚àíxÀâ)2‚Äã‚Äã In Excel kann die Standardabweichung mit der Funktion =STABW.S berechnet werden. Zum Beispiel =STABW.S(A1:A12) f√ºr die Werte der Zellen A1 bis A12. Weitere Aussagekraft F√ºr normalverteilte Merkmale (nur f√ºr solche!) gilt die Faustregel, dass innerhalb der Entfernung einer Standardabweichung nach oben und unten vom Mittelwert rund 686868 Prozent aller Datenpunkte liegen. Im Umkreis von zwei Standardabweichungen sind es rund 959595 Prozent aller Werte. Bei gr√∂sseren Abweichungen spricht man von Ausreissern. Verteilung von normalverteilten Merkmalen Boxplot‚Äã Der Boxplot stellt die Lageparameter graphisch dar. Er besteht immer aus einem Rechteck, genannt Box, und zwei Linien, die dieses Rechteck verl√§ngern. Diese Linien werden als ‚ÄûAntenne&quot; bezeichnet und werden durch einen Strich abgeschlossen. Der Strich in der Box repr√§sentiert den Median der Verteilung. Als Ausreisser werden Daten bezeichnet, die mehr als das 1.5-fache des Interquartilsabstands (der Abstand vom oberen zum unteren Quartil) vom untern bzw. oberen Quartil entfernt sind. Solche Ausreisser passen nicht zum Rest des Datensatzes und verzerren die statistischen Kenngr√∂ssen unn√∂tig. Solche Datenpunkte kommen entweder durch Messfehler oder durch Randerscheinungen zustande. Im obigen Beispiel wird bspw. der Wert 67 als Ausreisser taxiert.","keywords":""},{"title":"Grundlagen","type":0,"sectionRef":"#","url":"/Excel/basics","content":"Grundlagen Ein Excel Dokument ist wie folgt aufgebaut Dokument Arbeitsblatt (Mappe) Zelle Es gibt zwei Typen von Zellen: Fix oder Berechnet. Fixe zellen besitzen einen Wert (Zahl, Text, Datum), sie k√∂nnen direkt gesetzt werden. Berechnete Zellen starten immer mit einem = Zeichen und sind das Resultat einer Rechnung. Sobald die Zelle nicht mehr ausgew√§hlt ist, wird dort das Resultat der Berechnung angezeigt und automatisch aktualisiert. Damit man f√ºr Berechnungen nicht immer fixe Werte eingeben muss, kann auch der Wert einer anderen Zelle verwendet werden - es wird auf eine andere Zelle verwiesen. √Ñhnlich wie bei einem Schachbrett sind die Spalten alphabetisch, die Zeilen numerisch beschriftet. Um also die erste Zelle oben mit der Zelle unten Rechts zu addieren, kann eine neue Zelle mit dem Inhalt =A1+C3 erstellt werden. In berechneten Zellen k√∂nnen auch Funktionen verwendet werden, bspw. um den Durchschnitt der ersten Zeile zu bestimmen: =MITTELWERT(A1:C1). Ein Bereich wird also durch zwei Zellen, die erste und die letzte, bestimmt. Es kann auch =MITTELWERT(A1:C3) verwendet werden, um den Mittelwert aller 9 ausgef√ºllter Zellen zu berechnen. Aufgabe Dateiname 00-intro.xlsx Vorlage üëâ 00-intro.xlsx","keywords":""},{"title":"CSV Datein importieren","type":0,"sectionRef":"#","url":"/Excel/csv","content":"CSV Datein importieren CSV Comma Separated Values - also durch Kommas getrennte Werte. Es ist ein typisches Dateiformat f√ºr Tabellendaten und kann auch direkt von Excel ge√∂ffnet werden. Achtung: Trennzeichen √§ndern Wenn das angeh√§ngte CSV in Excel ge√∂ffnet wird, erscheinen die einzelnen Werte aber nicht als einzelne Zellen, weil das Schweizer-Excel statt Kommas &quot;,&quot; Strichpunkte &quot;;&quot; als Trennzeichen erwartet. Unter Daten &gt; Text in Spalten l√§sst sich dies √§ndern. üëâ support.microsoft.com: Text zu Spalten Aufgabe Dateiname 05-csv.xlsx Material üëâ 05-datafile.csv Laden Sie das Datenfile CSV herunter und √∂ffnen Sie es in Excel. √úberf√ºhren Sie die Texte in √ñffnen Sie √ºber Daten &gt; Text in Spalten die Werte in einzelne Zellen. Anschliessend, √§ndern Sie das Aussehen des Datenblatts wie folgt (zuerst m√ºssen alle Zellen ausgew√§hlt werden): Die H√∂he der Zellen auf 10 Die Breite der Zellen auf 2 Die Schriftgr√∂sse auf 5pt Start &gt; Zellen:Format Sehen Sie bereits, was die Daten enthalten? Start &gt; Formatvorlagen:Bedingte Formatierung &gt; Farbskalen und setzen Sie das Zoom-Level auf 10%. SSR","keywords":""},{"title":"Excel Diagramme","type":0,"sectionRef":"#","url":"/Excel/diagramme","content":"Excel Diagramme Daten k√∂nnen alles M√∂gliche sein: Messwerte, Ergebnisse von Umfragen, Beobachtungen und Z√§hlungen. Nicht alle diese Daten lassen sich √ºberhaupt mit Hilfe von Zahlen erfassen. Man sollte sich daher klar machen, dass es verschiedene Typen von Daten gibt. Daten sind entweder quantitativ (alles, was sich z√§hlen und messen und √ºberhaupt in Zahlen ausdr√ºcken l√§sst) oder qualitativ (alles, was man zwar beobachten und ordnen, aber nicht in Form von Zahlen angeben kann). Kreisdiagramm‚Äã Kreisdiagramme eignen sich dann besonders gut, wenn es um eine einfache Aufschl√ºsselung in genau einer Dimension geht. Anders gesagt: Verwenden Sie Kreisdiagramme, wenn Sie anhand einer Variable die Unterschiede zwischen den einzelnen Gruppen aufzeigen m√∂chten. Denken Sie immer daran, dass Kreisdiagramme nur dann eingesetzt werden sollten, wenn die Kategorien zusammengesetzt ein Ganzes ergeben.1 Kreisdiagramme werden f√ºr die Darstellung verschiedener Anteile an einem Ganzen verwendet. prozentuale Anteile der Augenfarben in der Klasse prozentualer Anteil der Haarfarben in der Bev√∂lkerung prozentuale Anteile verschiedener Altersgruppen in der Gesellschaft Vorgehen‚Äã Eine Tabelle mit der Kategorie und der effektiven Anzahl erzeugen. Die Summe aller Kategorien muss der Stichprobengr√∂sse n entsprechen! Hilfreiche Feldfunktionen: =Z√ÑHLENWENN(A1:A12; &quot;Schwarz&quot;) Z√§hlt, wie oft der Wert &quot;Schwarz&quot; im Bereich A1:A12 vorkommt =Z√ÑHLENWENNS(A1:A12; &quot;&gt;=10&quot;; A1:A12; &quot;&lt;20&quot;) Z√§hlt, wie viele Werte im Bereich A1:A12 zwischen 10 und 20 liegen. Bemerke, dass der Bereich zweimal angegeben werden muss. Die ganze Tabelle ausw√§hlen und √ºber Einf√ºgen &gt; 2D-Kreis ein Kreisdiagramm einf√ºgen. √úber Diagrammentwurf &gt; Diagrammelemente hinzuf√ºgen die Datenbeschriftung hinzuf√ºgen. Mit einem Textfeld (Einf√ºgen &gt; Formen &gt; Textfeld) ein Textfeld f√ºr die Anzahl Datens√§tze (n) hinzuf√ºgen. Rechtsklick auf eine weisse Fl√§che des Diagramms &gt; Als Bild speichern... Finding Die Stichprobengr√∂sse n muss angegeben werden (=Anzahl der Datenpunkte) Die Prozentwerte der einzelnen Kreissegmente m√ºssen bei Diagrammen mit weniger als 10 Segmenten beschriftet werden. Entweder in einer Legende oder direkt im Segment muss die Kategorie ersichtlich sein. Liniendiagramm‚Äã @ Liniendiagramme werden f√ºr die Visualisierung von Entwicklungen im zeitlichen Verlauf verwendet. Sie werden daher vor allem dann eingesetzt, wenn die langfristige Entwicklung von Ums√§tzen oder anderen Gr√∂ssen, die f√ºr Unternehmen oder Organisationen wichtig sind, gemessen werden sollen. Sie k√∂nnen auch f√ºr den Vergleich zweier Variablen √ºber die Zeit genutzt werden. Im Beispiel wird gezeigt, wie die h√∂here staatliche Unterst√ºtzung f√ºr gesunde Lebensf√ºhrung sich √ºber einen Zeitraum von f√ºnf Jahren auf die Ums√§tze bei den S√ºsswaren ausgewirkt hat. S√§ulendiaramm‚Äã S√§ulendiagramme kommen bei der Darstellung von Gr√∂ssenvergleichen innerhalb eines Zeitraums vor. Das S√§ulendiagramm eignet sich besonders, um wenige Auspr√§gungen (bis ca. 15) zu veranschaulichen. Bei mehr Kategorien leidet die Anschaulichkeit und es sind Liniendiagramme zu bevorzugen. Auch im Falle von metrisch stetigen Daten eignet sich das S√§ulendiagramm nicht, es ist ein Histogramm zu bevorzugen. Balkendiagramm‚Äã Das Balkendiagramm ist dem S√§ulendiagramm sehr √§hnlich. Es entspricht einem S√§ulendiagramm mit vertauschten Achsen. So werden aus den vertikalen S√§ulen horizontale Balken und es w√§chst bei zunehmender Stichprobengr√∂sse in die L√§nge und nicht in die Breite. Besonders gut sind Balkendiagramme f√ºr die Darstellung von Rangfolgen geeignet. Geeignetes Diagramm Bestimmen Sie das geeignete Diagramm f√ºr die gegebene Ausgangslage. Sie m√∂chten die Ausgaben Ihres letzten Monatslohnes graphisch so darstellen, dass man sieht, wie gross die prozentualen Anteile der verschiedenen Ausgabeposten waren. Sie wollen die Preise verschiedene Smartphones vergleichen. Sie wollen in einem Diagramm die Tagesh√∂chst- und -tiefsttemperaturen des letzten Monats aufzeigen. Sie wollen grafisch darstellen, wie hoch der TV-Konsum jedes Lernenden in Ihrer Klasse w√§hrend einer Woche ist. Sie haben den Durchschnitt des t√§glichen TV-Konsums Ihrer Klasse ermittelt, und zwar w√§hrend den letzten sieben Tagen. Nun visualisieren Sie das Resultat. Sie haben bei einer Klassenumfrage die Meinungen Ihrer Mitlernenden √ºber das Angebot der Schulmensa eingeholt. Sie wollen das Resultat in einem Diagramm darstellen. Quelle: www.surveymonkey.de ‚Ü©","keywords":""},{"title":"Fizz Buzz","type":0,"sectionRef":"#","url":"/Excel/fizzbuzz","content":"Fizz Buzz Das Fizz-Buzz Spiel: In einem Kreis wird der Reihe nach gez√§hlt: 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, ... Erkennen Sie das Schema dahinter? SSR Lernziele Sie lernen die Excel-Funktionen REST WENN TEXTKETTE kennen. Aufgabe Dateiname 03-fizzbuzz.xlsx Vorlage üëâ 03-fizzbuzz.xlsx Erstellen Sie Ihr Fizz-Buzz Programm Halten Sie in Stichworten fest, was diese Funktionen machen und wie Sie angewandt werden. Fortsetzung Das Programm braucht die &quot;Hilfsspalten&quot; B, C, D &amp; E. K√∂nnen Sie das Programm durch verschachteln von Funktionen so umschreiben, dass nur drei Spalten n√∂tig sind? Bspw. in Spalte B berechnen Sie &quot;Rest 3&quot; und verwenden es in Spalte D die Berechnung von Spalte B kann aber auch direkt in Spalte D vorgenommen werden, so dass die Spalte B √ºberfl√ºssig ist. Welche Variante ist √ºbersichtlicher, wieso? ‚≠ê Zusatz 1 Zus√§tzlich soll in der letzten Spalte Bazz angezeigt werden, wenn die Zahl durch 777 teilbar ist: 1, 2, Fizz, 4, Buzz, Fizz, Bazz, 8, Fizz, Buzz, 11, Fizz, 13, Bazz, FizzBuzz, 16, ... Wann tritt zum ersten mal &quot;FizzBuzzBazz&quot; auf? ‚≠ê Zusatz 2 Definieren Sie 2 (bzw. 3) Zellen, in welchen Sie die Zahlen f√ºr die Teilbarkeits-√úberpr√ºfung (3, 5, 7) frei festlegen k√∂nnen.","keywords":""},{"title":"Excel Diagramme","type":0,"sectionRef":"#","url":"/Excel-WMS/diagramme","content":"Excel Diagramme Daten k√∂nnen alles M√∂gliche sein: Messwerte, Ergebnisse von Umfragen, Beobachtungen und Z√§hlungen. Nicht alle diese Daten lassen sich √ºberhaupt mit Hilfe von Zahlen erfassen. Man sollte sich daher klar machen, dass es verschiedene Typen von Daten gibt. Daten sind entweder quantitativ (alles, was sich z√§hlen und messen und √ºberhaupt in Zahlen ausdr√ºcken l√§sst) oder qualitativ (alles, was man zwar beobachten und ordnen, aber nicht in Form von Zahlen angeben kann). Kreisdiagramm‚Äã Kreisdiagramme eignen sich dann besonders gut, wenn es um eine einfache Aufschl√ºsselung in genau einer Dimension geht. Anders gesagt: Verwenden Sie Kreisdiagramme, wenn Sie anhand einer Variable die Unterschiede zwischen den einzelnen Gruppen aufzeigen m√∂chten. Denken Sie immer daran, dass Kreisdiagramme nur dann eingesetzt werden sollten, wenn die Kategorien zusammengesetzt ein Ganzes ergeben.1 Kreisdiagramme werden f√ºr die Darstellung verschiedener Anteile an einem Ganzen verwendet. prozentuale Anteile der Augenfarben in der Klasse prozentualer Anteil der Haarfarben in der Bev√∂lkerung prozentuale Anteile verschiedener Altersgruppen in der Gesellschaft Vorgehen‚Äã Eine Tabelle mit der Kategorie und der effektiven Anzahl erzeugen. Die Summe aller Kategorien muss der Stichprobengr√∂sse n entsprechen! Hilfreiche Feldfunktionen: =Z√ÑHLENWENN(A1:A12;&quot;Schwarz&quot;) -&gt; Z√§hlt, wie oft der Wert &quot;Schwarz&quot; im Bereich A1:A12 vorkommt =Z√ÑHLENWENNS(A1:A12; &quot;&gt;=10&quot;; A1:A12; &quot;&lt;20&quot;) -&gt; Z√§hlt, wie viele Werte im Bereich A1:A12 zwischen 10 und 20 liegen. Bemerke, dass der Bereich zweimal angegeben werden muss. Die ganze Tabelle ausw√§hlen und √ºber Einf√ºgen&gt;2D-Kreis ein Kreisdiagramm einf√ºgen. √úber Diagrammentwurf&gt;Diagrammelemente hinzuf√ºgen die Datenbeschriftung hinzuf√ºgen. Mit einem Textfeld (Einf√ºgen&gt;Formen&gt;Textfeld) ein Textfeld f√ºr die Anzahl Datens√§tze (n) hinzuf√ºgen. Rechtsklick auf eine weisse Fl√§che des Diagramms &gt; Als Bild speichern... Finding Die Stichprobengr√∂sse n muss angegeben werden (=Anzahl der Datenpunkte) Die Prozentwerte der einzelnen Kreissegmente m√ºssen bei Diagrammen mit weniger als 10 Segmenten beschriftet werden. Entweder in einer Legende oder direkt im Segment muss die Kategorie ersichtlich sein. Liniendiagramm‚Äã @ Liniendiagramme werden f√ºr die Visualisierung von Entwicklungen im zeitlichen Verlauf verwendet. Sie werden daher vor allem dann eingesetzt, wenn die langfristige Entwicklung von Ums√§tzen oder anderen Gr√∂ssen, die f√ºr Unternehmen oder Organisationen wichtig sind, gemessen werden sollen. Sie k√∂nnen auch f√ºr den Vergleich zweier Variablen √ºber die Zeit genutzt werden. Im Beispiel wird gezeigt, wie die h√∂here staatliche Unterst√ºtzung f√ºr gesunde Lebensf√ºhrung sich √ºber einen Zeitraum von f√ºnf Jahren auf die Ums√§tze bei den S√ºsswaren ausgewirkt hat. S√§ulendiaramm‚Äã S√§ulendiagramme kommen bei der Darstellung von Gr√∂ssenvergleichen innerhalb eines Zeitraums vor. Das S√§ulendiagramm eignet sich besonders, um wenige Auspr√§gungen (bis ca. 15) zu veranschaulichen. Bei mehr Kategorien leidet die Anschaulichkeit und es sind Liniendiagramme zu bevorzugen. Auch im Falle von metrisch stetigen Daten eignet sich das S√§ulendiagramm nicht, es ist ein Histogramm zu bevorzugen. Balkendiagramm‚Äã Das Balkendiagramm ist dem S√§ulendiagramm sehr √§hnlich. Es entspricht einem S√§ulendiagramm mit vertauschten Achsen. So werden aus den vertikalen S√§ulen horizontale Balken und es w√§chst bei zunehmender Stichprobengr√∂sse in die L√§nge und nicht in die Breite. Besonders gut sind Balkendiagramme f√ºr die Darstellung von Rangfolgen geeignet. Geeignetes Diagramm Bestimmen Sie das geeignete Diagramm f√ºr die gegebene Ausgangslage. Sie m√∂chten die Ausgaben Ihres letzten Monatslohnes graphisch so darstellen, dass man sieht, wie gross die prozentualen Anteile der verschiedenen Ausgabeposten waren. Sie wollen die Preise verschiedene Smartphones vergleichen. Sie wollen in einem Diagramm die Tagesh√∂chst- und -tiefsttemperaturen des letzten Monats aufzeigen. Sie wollen grafisch darstellen, wie hoch der TV-Konsum jedes Lernenden in Ihrer Klasse w√§hrend einer Woche ist. Sie haben den Durchschnitt des t√§glichen TV-Konsums Ihrer Klasse ermittelt, und zwar w√§hrend den letzten sieben Tagen. Nun visualisieren Sie das Resultat. Sie haben bei einer Klassenumfrage die Meinungen Ihrer Mitlernenden √ºber das Angebot der Schulmensa eingeholt. Sie wollen das Resultat in einem Diagramm darstellen. Quelle: www.surveymonkey.de ‚Ü©","keywords":""},{"title":"Funktionsgraphen","type":0,"sectionRef":"#","url":"/Excel/funktionsgraphen","content":"Funktionsgraphen Aus der Mathematik kennen Sie die verschiedenen Repr√§sentationsformen von Funktionen: Funktionsvorschrift Wertetabelle Funktionsgraph Schritt a.) Dateiname 02_funktionen.xlsx Erzeugen Sie f√ºr die Funktion f(x)=3x2‚àí2x+4f(x)=3x^2-2x+4f(x)=3x2‚àí2x+4 eine Wertetabelle im Bereich [‚àí20;20][-20; 20][‚àí20;20] und erzeugen Sie den Funktionsgraphen Schritt b.) Stellen Sie die Funktion so um, dass eine beliebige quadratische Funktion f(x)=ax2+bx+cf(x)=ax^2+bx+cf(x)=ax2+bx+c dargestellt werden kann.","keywords":""},{"title":"Wurfweite","type":0,"sectionRef":"#","url":"/Excel/wurfweite","content":"Wurfweite Lernziele Sie brauchen dazu die Funktionen: SIN COS SUMME Sie lernen, Formeln in Excel abzutippen und dabei Verweise zu verwenden. Aufgabe Dateiname 04-wurfweite.xlsx Material üëâ 04-wurfweite.pdf Erstellen Sie die Wurfweitenberechnung* und bestimmen Sie (mit Ihrer K√∂rpergr√∂sse), wie weit Sie mit welcher Geschwindigkeit werfen k√∂nnen. Die n√∂tigen Informationen zur Berechnung finden Sie im oben verlinkten PDF. *die hier berechnete Wurfweite beachtet den Luftwiederstand nicht!","keywords":""},{"title":"Zufallszahlen","type":0,"sectionRef":"#","url":"/Excel/zufallszahlen","content":"Zufallszahlen Ziel Zufallszahlen in einem Bereich erstellen Werte in einem Koordinatensystem darstellen Auf Abruf neue Zufallszahlen generieren lassen Aufgabe Dateiname 01_intro.xlsx Zufallszahlen im Bereich [-100; 100] erzeugen und in einem Koordinatensystem darstellen","keywords":""},{"title":"Obligatorisches Fach Informatik","type":0,"sectionRef":"#","url":"/home","content":"Obligatorisches Fach Informatik Blaa Hello Tools‚Äã Mdi Icons Links:‚Äã Codes und Daten‚Äã Codes und Daten: https://lehrerfortbildung-bw.de Big Data‚Äã Datenkrake Amazon Block Chain‚Äã Blockchain Demo Pr√§sentationen‚Äã 25er‚Äã ICT‚Äã 01-ict-intro Programmieren‚Äã 01-Algorithmen 24er‚Äã Netzwerke‚Äã 01-Codierung02-Routing News Ideen‚Äã ‚úÖ Fenstermanagement unter OSX: https://rectangleapp.com/ ‚úÖ Neue Zeile in Teams, ohne die Nachricht abzuschicken Bitwarden Lolcat? Beep Sound Befehl wiederholen unter MS Office: ctrl + y Unterlagen‚Äã scg A. Helmy Software‚Äã Python v3.9 v3.10.6 v3.11.0 VS Code v1.59 v1.70 Git v2.37.1 Docusaurus v2.2.0","keywords":""},{"title":"Cloud","type":0,"sectionRef":"#","url":"/ICT/cloud","content":"Cloud ¬´Cloud¬ª bedeutet, dass Ihre Dateien auf einem Server des Cloud-Betreibers gespeichert werden. Eine Cloud kann aber auch bspw. Rechenleistung zur Verf√ºgung stellen und Teile einer Anwendung ausf√ºhren. √úblicherweise steht auf dem Server ebenfalls eine Web-App zu Verf√ºgung, damit die Dateien im Browser betrachtet oder bearbeitet werden k√∂nnen. Desktop-App ‚Äã Damit die Desktop-App verwendet werden kann, muss diese erst auf dem Ger√§t installiert worden sein. Desktop-Apps bieten meistens einen gr√∂sseren Funktionsumfang, k√∂nnen ohne aktive Internetverbindung gestartet und verwendet werden und sind meist performanter. Web-App ‚Äã Die Web-App wird beim √ñffnen des Dokuments vom Server des Anbieters heruntergeladen und im Browser (daher auf dem Prozessor des Laptops) ausgef√ºhrt. Web-App Architektur@ Einzelne Berechnungen k√∂nnen auch in die Cloud ausgelagert werden, z.B. die Autokorrektur in der Word Web-App: Bei jeder √Ñnderung wird der aktuelle Abschnitt an die Cloud geschickt und auf Fehler √ºberpr√ºft: Autokorrektur in Word Onine Auf der rechten Seite ist der Datenaustausch, der f√ºr die Autokorrektur notwendig ist, vom Laptop zur Cloud zu sehen. Bei jeder √Ñnderung des Dokuments wird der ganze Inhalt des aktuellen Abschnitts an die Cloud geschickt. Web-Apps brauchen eine aktive Internetverbindung und sind oft auch etwas langsamer als Desktop-Apps. Meist ist zudem der Funktionsumfang eingeschr√§nkt. Microsoft 365‚Äã OneDrive im Browser‚Äã In OneDrive im Browser kann eine Datei wahlweise in der Web-App oder in der Desktop-App ge√∂ffnet werden. Mit einem Doppelklick wird die Datei in der Web-App ge√∂ffnet. Klicke auf die drei vertikalen Punkte ‚ãÆ, dann auf √ñffnen und In der App √∂ffnen, um die Datei in der Desktop-App zu √∂ffnen. Teams-App‚Äã In der Teams-App muss auf die drei horizontalen Punkte ‚ãÆ geklickt werden. Es gibt zus√§tzlich die M√∂glichkeit In Teams bearbeiten. In diesem Fall wird die Web-App verwendet, diese wird jedoch innerhalb der Team-App gestartet (die Teams-App kann einen Browser anzeigen).","keywords":""},{"title":"E-Mail verwenden","type":0,"sectionRef":"#","url":"/ICT/E-Mail","content":"E-Mail verwenden Eine E-Mail ist ein Brief‚Äã Im Gegensatz zu einem Chat gelten bei der E-Mail-Kommunikation die gleichen Regeln wie beim Briefverkehr. Eine E-Mail enth√§lt also eine Anrede, einen h√∂flichen und sprachlich korrekten Text, sowie eine Grussformel. Bei einer E-Mail wird immer auch ein Betreff angegeben. Dieser sollte so gew√§hlt werden, dass er kurz und pr√§gnant den Inhalt der E-Mail zusammenfasst. Betreff: Wechsel Schwerpunktfach Sehr geehrter Herr Cadetg In den ersten sechs Monaten hier am Gymnasium habe ich grosse Freude am Italienischunterricht bekommen. Das von mir gew√§hlte Schwerpunktfach entspricht hingegen gar nicht meinen Vorstellungen. Deshalb frage ich Sie, ob es mir m√∂glich w√§re, in das Schwerpunktfach Italienisch zu wechseln. Freundliche Gr√ºsse Anna M√ºller Anrede‚Äã Die √ºbliche Andere ist ¬´Sehr geehrte/r Frau/Herr¬ª. Sind mehrere Personen angesprochen, schreibt man ¬´Sehr geehrte Damen und Herren¬ª. Wenn die angesprochene Person unbekannt ist (z.B. bei einer Support-E-Mail-Adresse), so kann man ¬´Guten Tag¬ª schreiben. Ist man mit der angeschriebenen Person vertrauter, schreibt man ¬´Liebe/r¬ª. Am Schluss der Anrede steht kein Satzzeichen. Es folgt eine Leerzeile, dann der erste Satz. Grussformel‚Äã Zwischen Text und Grussformel befindet sich eine Leerzeile. Die Grussformel lautet ¬´Freundliche Gr√ºsse¬ª ohne Satzzeichen. Ist man vertrauter, schreibt man ¬´Liebe Gr√ºsse¬ª. Wann antworten? Wann nicht?‚Äã Benutzen Sie die Antworten-Funktion nur, wenn Sie wirklich eine Antwort auf eine Mail schreiben. So kann eine l√§ngere E-Mail-Konversation vom Mailprogramm sauber dargestellt und nachvollzogen werden. Wenn Sie jemandem eine neue Nachricht schreiben, sich also nicht auf vorhergehenden E-Mail-Verkehr beziehen, dann sollten Sie die Antworten-Funktion nicht verwenden, sondern einfach eine neue E-Mail schreiben. Allen Antworten‚Äã Die Funktion allen Antworten sollte man normalerweise nicht benutzen. Optionen CC und BCC‚Äã Optionen im Mailprogramm Kopie/CC In das An-Feld wird der eigentliche Empf√§nger geschrieben. Will man gleichzeitig eine Kopie der E-Mail versenden, nutzt man das Cc-Feld. Die Abk√ºrzung Cc steht f√ºr Carbon copy und bedeutet so viel wie Kohlepapierdurchschlag. Es ist √ºblich, dass die Personen, die in Cc stehen, die E-Mail lediglich zur Kenntnis bekommen. Die Empf√§nger in den Feldern An und Cc k√∂nnen die E-Mail-Adressen der anderen lesen und wissen somit, wer die E-Mail noch bekommen hat. Und hier lauert die Gefahr! Denn diese Art der Versendung sollte man nur w√§hlen, wenn es sich um eine geschlossene Nutzergruppe, wie z.B. innerhalb einer Organisation handelt.1 Blindkopie/BCC M√∂chte man dagegen eine E-Mail an mehrere Empf√§nger versenden, die sich untereinander nicht kennen, sollte man auf jeden Fall das Bcc-Feld nutzen. Bcc steht f√ºr Blind carbon copy und wird mit ‚Äûunsichtbarer Durchschlag‚Äú √ºbersetzt. Der Name sagt es schon: Die Empf√§nger in diesem Feld werden weder von den anderen Empf√§ngern gesehen, noch k√∂nnen sie selbst andere Adressen sehen. Lediglich das An-Feld ist f√ºr alle Teilnehmer sichtbar.1 Quelle: An-Cc-Bcc: scope-and-focus.com ‚Ü©","keywords":""},{"title":"Datenverlust","type":0,"sectionRef":"#","url":"/ICT/Sicherheit/Datenverlust","content":"Datenverlust Eine oft untersch√§tzte Gefahr ist der Verlust von Daten. @ Ursachen‚Äã F√ºr den Verlust von Daten gibt es verschiedene Ursachen, beispielsweise: Defekt des Ger√§ts, auf welchem die Daten gespeichert sind, Verlust des Ger√§ts, auf welchem die Daten gespeichert sind, Zerst√∂rung der Daten durch Schadsoftware, Verschl√ºsselung der Daten durch Schadsoftware. Massnahmen‚Äã Cloudspeicher verwenden‚Äã Daten sollten nie auf nur einem Ger√§t gespeichert werden. Mit Cloud-L√∂sung werden Daten automatisch zwischen mehreren Ger√§ten und einem Cloudspeicher synchronisiert. Damit stehen die Daten auch noch zu Verf√ºgung, wenn ein Ger√§t verloren geht oder einen Defekt hat. Schutz vor Schadsoftware‚Äã Kapitel Schadsoftware","keywords":""},{"title":"Passw√∂rter","type":0,"sectionRef":"#","url":"/ICT/Sicherheit/Passwoerter","content":"Passw√∂rter Unter https://howsecureismypassword.net/ kann die Sicherheit Ihres Passworts analysiert werden - insbesondere spannend ist die gesch√§tzte Zeit, um das Passwort zu knacken. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwort √ºberpr√ºfen‚Äã Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. 4. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (Empfehlung) - gute Basis-Funktionen und einfaches Handling. KeePass LastPass","keywords":""},{"title":"Suchmaschinen","type":0,"sectionRef":"#","url":"/ICT/Suchmaschine","content":"Suchmaschinen Suchmaschinen werden verwendet, um im World Wide Web nach Informationen zu suchen. Die bekannteste Suchmaschine ist Google mit einem Marktanteil von √ºber 90%. Einschr√§nkungen Suchmaschinen‚Ä¶ k√∂nnen nicht alles finden -&gt; Deep Web k√∂nnen beeinflusst werden -&gt; SEO: Search Engine Optimization beeinlussen die Suchergebnisse -&gt; Filterblase Funktionsweise‚Äã Eine Suchmaschine hat drei Hauptaufgaben: Erstellen eines Index Verarbeiten von Suchanfragen Bewerten und Filtern der Suchergebnisse Bevor eine Suchmaschine eine Abfrage beantworten kann, muss erst eine Datenbank mit entsprechenden Informationen zu Webseiten erstellt werden. Diese Aufgabe wird von automatischen Programmen, sogenannten Webcrawlern, √ºbernommen. Sie durchsuchen das World Wide Web st√§ndig nach neuen und ge√§nderten Seiten. Die Seiten werden analysiert und in einer riesigen Datenbank eingetragen. Dabei wird jeder Eintrag mit Stichworten versehen, welche sich aus der Analyse ergeben. Wenn eine Benutzer:in eine Suchanfrage an die Maschine schickt, wird die Anfrage erst sprachlich analysiert. Beispielsweise werden falsch geschrieben Worte korrigiert. Anschliessend wird in der Datenbank nach Eintr√§gen gesucht, deren Stichworte m√∂glichst gut mit der Anfrage √ºbereinstimmen. Schliesslich werden die Resultate bewertet und entsprechend geordnet. Achtung Suchergebnisse werden von einem automatischen Lernsystem (k√ºnstliche Intelligenz) beeinflusst. Zus√§tzlich erfassbare Informationen wie Person, Ort, Ger√§t oder der verwendete Browser geben der Suchmaschine Hinweise darauf, welche Informationen relevanter sind.","keywords":""},{"title":"Browser","type":0,"sectionRef":"#","url":"/ICT/Browser","content":"Browser Begriff‚Äã Ein Webbrowser oder kurz Browser ist ein Programm, welches auf einem Benutzer-Ger√§t installiert ist. Der Browser bietet eine grafische Oberfl√§che an und fordert die f√ºr die Darstellung eine Webseite ben√∂tigten Dateien von einem Webserver an. Anschliessend analysiert es diese Dateien und stellt die Webseite entsprechend dar. Der Browser f√ºhrt auch Programme aus, welche in der Webseite enthalten sind. Produkte‚Äã Logo\tName\tHersteller\tPlattform√ºbergreifend Firefox\tMozilla Chrome\tGoogle Edge\tMicrosoft Safari\tApple nur f√ºr Apple Produkte ‚≠êÔ∏è Technologien‚Äã F√ºr moderne Webseiten werden haupts√§chlich drei Technologien verwendet: HTML (Hypertext Markup Language): Mit dieser Markup-Sprache wird die Struktur einer Webseite beschrieben. HTML-Dateien enthalten den ¬´Bauplan¬ª einer Webseite und Verweise auf alle anderen Dateien, welche f√ºr die Webseite ben√∂tigt werden. CSS (Cascading Stylesheets): Damit wir das Layout der Webseite definiert. Mit CSS werden Position, Farben, Animationseffekte und weitere Formatierungen der einzelnen Elemente der Webseite beschrieben. JS (Java Script) ist eine Programmiersprache. Moderne Webseiten enthalten teilweise umfangreiche Programme, welche vom Browser ausgef√ºhrt werden.","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/ICT/Sicherheit/Authentifizierung","content":"Authentifizierung Authentifizierung (engl. authentication) ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Schadsoftware","type":0,"sectionRef":"#","url":"/ICT/Sicherheit/Schadsoftware","content":"Schadsoftware Ransomware Wanna Cry@ Schadsoftware oder Schadprogramm (auch Malware) sind Computerprogramme, welche entwickelt wurden, um aus Sicht der Betroffenen unerw√ºnschte und sch√§dliche Funktionen auszuf√ºhren. Bezeichnungen‚Äã Computerviren sind Programme, welche sich selbst√§ndig und automatisch auf m√∂glichst viele Ger√§te kopieren. Trojaner sind Schadprogramme, welche sich als andere App, beispielsweise als Spiel tarnen. Ransomware sind Schadsoftware, welche die Daten auf den infizierten Ger√§ten verschl√ºsseln und f√ºr deren Entschl√ºsselung ein L√∂segeld verlangen. Spyware sind Schadprogramme, welche den Benutzer ausspionieren, indem sie Daten und Aktivit√§ten am Ger√§t an Dritte weiterleiten. Aufgabe Wer hat den ersten Computervirus geschrieben? Wie heisst der Virus? Wie hat sich das Virus verbreitet? Computerschutz‚Äã Damit ein Schadprogramm auf dem Computer ausgef√ºhrt werden kann, muss es zuerst einmal dorthin kommen. Damit dies klappt muss entweder ein Benutzer einen Trojaner installieren oder ein Computervirus kann einbrechen. Die Voraussetzung dass ein Computervirus ein System infizieren kann, sind Sicherheitsl√ºcken. Das sind nicht bedachte Wege, √ºber welche Programme auf einem Computer ausgef√ºhrt werden k√∂nnen, ohne dass dazu eine Best√§tigung der Anwender:in n√∂tig ist (normalerweise muss beim bspw. beim Installieren eines Programms die Installation abgesegnet werden.). Diese Wege sind meist ausgekl√ºgelt und sehr clever. Um sich vor Schadsoftware zu sch√ºtzen, gilt es folgende Punkte zu beachten: gesunder Menschenverstand - die Herausgeber:innen von Programmen sollten verifizierbar und vertrauensw√ºrdig sein. Heruntergeladene Programme von dubiosen Seiten sollte grunds√§tzlich misstraut werden. das System aktuell halten - Updates nerve zwar gewaltig; sie flicken jedoch entdeckte L√ºcken, so dass der Computer Schritt-f√ºr-Schritt sicherer wird. Virenprogramme verwenden - Dubiose Aktivit√§ten von Programmen (Netzwerkverkehr, Festplatten- oder Arbeitsspeicherzugriffe), sowie der Inhalt von Dateien k√∂nnen von Virenprogrammen analysiert und ggf. blockiert werden. Virenprogramme‚Äã Aktuelle Versionen von Windows und Mac OS Computer sind mit den Grundeinstellungen gen√ºgend gegen allt√§gliche Bedrohungen gesch√ºtzt. Bei Mac passiert der Virenschutz ausschliesslich im Hintergrund (mit XProtect), bei Windows heisst der Virenschutz Microsoft Defender und besitzt auch eine grafische Oberfl√§che. Auf beiden Betriebssystemen werden bspw. heruntergeladene Dateien auf bekannte Schadsoftware analysiert. Der Virenschutz hinkt dabei immer ein bisschen hinterher - sobald eine neue L√ºcke ausgenutzt wird, muss diese geschlossen werden und die Ausf√ºhrung der entsprechenden Schadprogramme sollte durch den Virenschutz verhindert werden. Damit auch aktuelle So Die Anwender:in bekommt von diesem Schutz nur dann etwas mit, wenn ein m√∂glicherweise gef√§hrliche Software heruntergeladen wurde updates ausgef√ºhrt werden m√ºssen. ‚≠êÔ∏è Funktioniert mein Virenschutz? Damit getestet werden kann, ob der Virenschutz auf einem System funktioniert, gibt es eine EICAR-Testdatei (erzeugt vom European Institute for Computer Antivirus Research (EICAR)), die unsch√§dlich ist, aber von jedem g√§ngigen Antivirus-Programm erkannt werden muss. Der Inhalt der Datei sieht wie folgt aus: EICAR-Testdatei X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H* Aufgabe: Laden Sie die EICAR-Testdatei herunter und √ºberpr√ºfen Sie, dass ihr System Alarm schl√§gt. Download","keywords":""},{"title":"Ziele der Kryptologie","type":0,"sectionRef":"#","url":"/Kryptologie/Alltag/konzepte","content":"Ziele der Kryptologie Als Zusammenfassung betrachten wir die Ziele der Kryptographie im √úberblick: Vertraulichkeit Informationen m√ºssen so gespeichert oder √ºber ungesch√ºtzte Kan√§le √ºbertragen werden k√∂nnen, dass nur Berechtigte sie lesen k√∂nnen. Um die Vertraulichkeit (oder den Schutz vor unbefugtem Zugriff) zu gew√§hrleisten, werden Nachrichten symmetrisch verschl√ºsselt. Integrit√§t Daten d√ºrfen (unterwegs) nicht unentdeckt manipuliert werden k√∂nnen. Sie m√ºssen nachweisbar vollst√§ndig und unver√§ndert sein. Um die Integrit√§t (oder Unversehrtheit) zu gew√§hrleisten, werden Hashwerte berechnet. Authentizit√§t Andere d√ºrfen sich nicht als mich ausgeben. Eine Person muss eindeutig identifizierbar sein. Um die Authentizit√§t (oder Echtheit/√úberpr√ºfbarkeit) zu gew√§hrleisten, werden asymmetrische Verfahren eingesetzt. Verbindlichkeit Unterschriebene Vertr√§ge sollen nicht bestritten werden k√∂nnen. Um die Verbindlichkeit (oder Nichtabstreitbarkeit) zu gew√§hrleisten, werden digitale Signaturen eingesetzt.","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"/ICT/URLs","content":"Links Ein Link oder URL (engl. uniform resource locator) ist eine globale, weltweit eindeutige Adresse f√ºr eine Datei. Die URL definiert, wie mit dem anderen Computer kommuniziert wird, wo dieser Computer zu finden ist, und welche Datei auf dem Computer gemeint ist. Die URL setzt sich aus vier Teilen zusammen: https:// gbsl.ch /gym/aktuelles/news/ ?language=de&amp;filter=gym ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Protokoll Server Dateipfad Suchanfrage Das Protokoll ist die √úbertragungsart der Datei, normalerweise https://, was bedeutet, dass die √úbertragung verschl√ºsselt ist. Achtung! Wenn das unverschl√ºsselte Protokoll http:// verwendet wird, k√∂nnen die √ºbertragenen Informationen von anderen Personen im gleichen Netzwerk mitgelesen werden. Dadurch k√∂nnen Passw√∂rter oder Kreditkarteninformationen leicht abgegriffen werden! Gerade bei Zahlungen muss unbedingt darauf geachtet werden, dass das https:// Protokoll verwendet wird. Der Name des Servers oder Dom√§nenname ist ein weltweit eindeutiger Name f√ºr den Computer, auf welchem die Datei gespeichert ist. Der Dateipfad ist eine eindeutige Bezeichnung einer Datei pro Computer. Die Suchanfrage enth√§lt Benutzereingaben, die auf interaktiven Webseiten erfasst werden. Aufgabe Wie lauten die vier Teile des folgenden URL? https://www.google.ch/search?q=Quellenangabe SSR Verf√ºgbarkeit von Links‚Äã Oft sind Links nicht lange g√ºltig. Wenn beispielsweise eine Website restrukturiert wird, stimmen die Links oft nicht mehr. Deshalb ist es in schriftlichen Arbeiten bei der Quellenangabe wichtig, dass das Datum des Zugriffs angegeben wird. So kann nachvollzogen werden, wann die verlinkte Website verf√ºgbar war. Aufgabe Die folgenden Quellenangaben stammen aus einem PDF zum korrekten Zitieren und Bibliographieren. Die Links funktionieren aber nicht mehr. Versuchen Sie, den richtigen Link zu finden und die Frage zu beantworten. Goethe-Universit√§t Frankfurt a. M.: Neurolinguistik (ge√§ndert am 6. November 2007) http://www.uni-frankfurt.de/fb/fb10/KogLi/Lehrstuehle/ehem__Lehrstuhl_Leuninger/Neurolinguistik/index.html (abgerufen am 03.03.2018). Wer ist heute die vorstehende Professor:in? SSR Baader, S.: Geometrie ‚Äì Vorlesungsscript. Mitschrift von Alex Aeberli und Raoul Bourquin, Wintersemester 07. [PDF], Skript zur Vorlesung Geometrie an der ETHZ im Wintersemester 2007, (2007) https://www.mitschriften.ethz.ch/main.php?page=3&amp;scrid=1&amp;pid=29&amp;eid=1 (abgerufen am 31.01.2018). Finden Sie das Dokument und halten Sie den Link fest. SSR ParlCH: ¬´Erkl√§r mir das Parlament¬ª. 18.02.2016 https://www.youtube.com/watchv=vtfEG0txhOU (abgerufen am 31.01.2018). Finden Sie das Video und halten Si den Link fest. SSR Web Archiv - Einmal im Internet, immer im Internet‚Äã Websites die einmal online gestellt wurden, sind oft auch Jahre nachdem sie abgeschaltet wurden, noch zug√§nglich. Ein Tool, welches dies erm√∂glicht, ist bspw. das Web Archiv Wayback Machine. Diese Website l√§dt regelm√§ssig die √ºber Suchmaschinen verf√ºgbaren Websiten herunter und archiviert diese. So k√∂nnen teilweise auch alte, heute nicht mehr verf√ºgbare Websiten ge√∂ffnet werden. Achtung Da die Websiten archiviert sind, dauert es sehr lange, bis eine Website geladen ist. Die Versionen der Seite srf.ch Aufgabe Seit wann ist unter srf.ch die heutige Website vom Schweizer Radio und Fernsehen zu finden? Wem hat die Webseite vor diesem Zeitpunkt geh√∂rt? Wie erkl√§ren Sie sich die unterschiedlichen Wechsel? SSR","keywords":""},{"title":"Docusaurus","type":0,"sectionRef":"#","url":"/knowledge/docusaurus/setup","content":"Docusaurus Docusaurus Voraussetzungen‚Äã VS Code Ein Texteditor f√ºr das Schreiben und Hinzuf√ºgen der Webseiteninhalte git Ein Versionsmanager (wird verwendet um die Seite zu ver√∂ffentlichen) node Eine Javascript-Laufzeitumgebung yarn Ein Paketmanager f√ºr die Installation von Bibliotheken Webseite erstellen‚Äã Damit wir uns nicht zu stark um das Aussehen/Mobile Ansicht/Darkmode etc. k√ºmmern m√ºssen, verwenden wir Docusaurus. Die Schritte zum Erstellen einer neuen Seite sind auf der Docusaurus-Seite erkl√§rt. Der Befehl npx create-docusaurus@latest my-website classic --typescript erzeugt einen neuen Ordner my-website. Diesen √∂ffnen wir nun in VS-Code. √úber Terminal &gt; New Terminal wird ein neues Eingabefenster (direkt in VS Code) erzeugt. Mit dem Befehl yarn run start wird die Webseite gestartet und in einem Browser ge√∂ffnet. (Falls nicht, kann sie unter http://localhost:3000 abgerufen werden). Das Grundger√ºst ist vorhanden, aber noch nicht nach unserer Vorstellung. In der Datei docusaurus.config.json k√∂nnen viele Grundeinstellungen festgelegt werden: Einfacheres Handling‚Äã # f√ºgt die M√∂glichkeit f√ºr SASS-Styled css hinzu yarn add docusaurus-plugin-sass sass # .css -&gt; .scss mv ./src/css/custom.css ./src/css/custom.scss docusaurus.config.js { /*...*/ plugins: ['docusaurus-plugin-sass'], /*...*/ } Github Actions‚Äã Erstelle einen neues Dokument .github/__workflows/documentation.yml","keywords":""},{"title":"WhatsApp-Verschl√ºsselung","type":0,"sectionRef":"#","url":"/Kryptologie/Alltag/whatsapp","content":"WhatsApp-Verschl√ºsselung Gem√§ss WhatsApp sind s√§mtliche WhatsApp-Nachrichten Ende-zu-Ende verschl√ºsselt.1 WhatsApp-Verschl√ºsselung Was meint WhatsApp mit ¬´Ende-zu-Ende-Verschl√ºsselung¬ª? Diskutieren Sie zu zweit, wie die WhatsApp-Verschl√ºsselung funktionieren k√∂nnte. Sicherheitsnummer WhatsApp bietet die M√∂glichkeit, eine Sicherheitsnummer anzuzeigen und zu √ºberpr√ºfen. Ende-zu-Ende-Verschl√ºsselung eines Chats verifizieren: √ñffnen Sie Ihren gemeinsamen Chat. Tippen Sie auf den Namen des Kontakts, um den Kontaktinfo-Bildschirm zu √∂ffnen. Tippen Sie auf Verschl√ºsselung, um den QR-Code und die 60-stellige Sicherheitsnummer anzuzeigen. Sie k√∂nnen den angezeigten QR-Code gegenseitig scannen, um nicht die 60-stellige Zahl kontrollieren zu m√ºssen. Probieren Sie es zu zweit aus und diskutieren Sie, wie diese Nummer zustande kommt und was sie bedeutet. Quelle: whatsapp.com ‚Ü©","keywords":""},{"title":"Caesar-Chiffre","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/Caesar","content":"Caesar-Chiffre Der r√∂mische Feldherr Gaius Julius Caesar hat seine milit√§rischen Nachrichten verschl√ºsselt. Der r√∂mische Schriftsteller Sueton hat Folgendes √ºberliefert: ‚Ä¶ si qua occultius perferenda erant, per notas scripsit, id est sic structo litterarum ordine, ut nullum verbum effici posset: quae si qui investigare et persequi velit, quartam elementorum litteram, id est D pro A et perinde reliquas commutet. √úbersetzt... ‚Ä¶ wenn etwas Geheimes zu √ºberbringen war, schrieb er in Zeichen, das heisst, er ordnete die Buchstaben so, dass kein Wort gelesen werden konnte: Um diese zu lesen, tauscht man den vierten Buchstaben, also D f√ºr A aus, und ebenso mit den restlichen. Caesar hat also jeden Buchstaben seiner Nachrichten durch den Buchstaben ersetzt, welcher im Alphabet drei Stellen weiter hinten steht. Der Buchstabe D, welcher f√ºr A eingesetzt wird, wird Schl√ºssel genannt. Er muss bekannt sein, um die Nachricht wieder entschl√ºsseln zu k√∂nnen. Schema der Caesar-Verschl√ºsselung@ Die Verschl√ºsselung erfolgt, indem man in der folgenden Tabelle einen Klartextbuchstaben im Klartextalphabet sucht und durch den Buchstaben des Geheimtextalphabets ersetzt, der genau unterhalb steht. Die Entschl√ºsselung erfolgt in umgekehrter Richtung: Caesar-Chiffre\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tD E F G H I J K L M N O P Q R S T U V W X Y Z A B C Merke Heute wird jede Verschl√ºsselung, die auf einer Verschiebung des Alphabets beruht, eine Casear-Verschl√ºsselung genannt. Die Nachricht MORGEN UM ZEHN wird verschl√ºsselt zu PRUJHQ XP CHKQ. ROT13‚Äã ROT13 ist eine Caesar-Verschl√ºsselung, bei welcher die Buchstaben um 13 Stellen ‚Äì also exakt um die H√§lfte des Alphabets ‚Äì verschoben werden. Der Buchstabe A wird folglich auf N abgebildet. Das Spezielle an dieser Verschl√ºsselung ist, dass man durch eine erneute Verschl√ºsselung wieder den Klartext erh√§lt. Oder anders formuliert: Es spielt keine Rolle, ob man ver- oder entschl√ºsselt. Sie k√∂nnen dies in der folgenden Tabelle einfach nachvollziehen: ROT-13\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tN O P Q R S T U V W X Y Z A B C D E F G H I J K L M Eigentlich braucht man bei ROT13 nur die halbe Tabelle: ROT13@ Die Nachricht KOMM ALLEINE wird verschl√ºsselt zu XBZZ NYYRVAR. Caesar-Chiffre ausprobieren‚Äã Caesar-Chiffre Klartext Schl√ºssel: D ABCDEFGHIJKLMNOPQRSTUVWXYZ Geheimtext","keywords":""},{"title":"Kryptologie","type":0,"sectionRef":"#","url":"/Kryptologie","content":"Kryptologie Der Begriff Kryptologie setzt sich zusammen aus dem altgriechischen Œ∫œÅœÖœÄœÑœåœÇ (also krypt√≥s), was verborgen bedeutet, und ŒªœåŒ≥ŒøœÇ (also l√≥gos), was Lehre, Kunde bedeutet. Kryptologie bezeichnet die Wissenschaft, die sich mit der Ver- und Entschl√ºsselung von Informationen (also mit Informationssicherheit) besch√§ftigt. Kryptologie, Kryptographie und Kryptoanalyse@ Kryptographie und Kryptoanalyse‚Äã Die Kryptologie kann grob in zwei Teilbereiche unterteilt werden: die Kryptographie (Œ≥œÅŒ¨œÜŒµŒπŒΩ, also gr√°phein, was schreiben bedeutet) und die Kryptoanalyse. W√§hrend sich die Kryptographie mit dem Finden von sicheren Verschl√ºsselungsverfahren besch√§ftigt, liegt der Fokus der Kryptoanalyse beim ¬´Brechen¬ª oder ¬´Knacken¬ª solcher Verfahren. Klartext, Geheimtext und Schl√ºssel‚Äã Symbol\tdeutscher Begriff\tenglischer Begriff\tBedeutungppp\tKlartext\tplaintext\tunverschl√ºsselte Nachricht ccc\tGeheimtext\tciphertext\tverschl√ºsselte Nachricht kkk\tSchl√ºssel\tkey\tInformation, welche ben√∂tigt wird, um den Klartext zu ver- bzw. den Geheimtext zu entschl√ºsseln Verschl√ºsselungsverfahren‚Äã Ein Verschl√ºsselungsverfahren ist ein Algorithmus, welcher einen Klartext unter Verwendung eines Schl√ºssels in einen Geheimtext √ºberf√ºhrt oder umgekehrt. Zusammenhang zwischen Klartext, Geheimtext und Schl√ºssel@ Schl√ºsselraum‚Äã Der Begriff Schl√ºsselraum bezeichnet die Anzahl m√∂glicher Schl√ºssel f√ºr ein bestimmtes Verschl√ºsselungsverfahren. Die Sicherheit eines Verschl√ºsselungsverfahrens h√§ngt stark von der Gr√∂sse des Schl√ºsselraums ab. Die Gr√∂sse des Schl√ºsselraums wird in bit (d.h. als bin√§rer Logarithmus) angegeben. Bei zwei m√∂glichen Schl√ºsseln (=21=2^1=21) spricht man von 1 bit, bei 1024 m√∂glichen Schl√ºsseln (=210=2^{10}=210) von 10 bit. Schl√ºsselr√§ume Geben Sie die Gr√∂sse des Schl√ºsselraumes f√ºr die folgenden Verschl√ºsselungsverfahren an: Skytale‚Äã Caesar‚Äã ROT13‚Äã Substitution‚Äã allgemeine monoalphabetische Substitution SSR","keywords":""},{"title":"Browserzertifikate","type":0,"sectionRef":"#","url":"/Kryptologie/Alltag/browser-zertifikate","content":"Browserzertifikate W√§hrend fr√ºher s√§mtliche Informationen im Internet unverschl√ºsselt √ºbertragen worden sind, werden die meisten Verbindungen heutzutage mit kryptographischen Mitteln gesch√ºtzt. Insbesondere nutzen momentan (Dezember 2022) gem√§ss W3Techs1 √ºber 80% aller Webseiten HTTPS. HTTPS ist eine Erweiterung des HyperText Transfer Protocols, der Buchstabe ¬´S¬ª steht f√ºr Secure. Damit wird der Datenverkehr in beiden Richtungen verschl√ºsselt: alle Daten, die vom Webserver zum Browser √ºbertragen werden (also der Inhalt der Seite wie z.B. Text, Bilder, Videos, heruntergeladene Dateien, ...) alle Daten, die vom Browser zu Webserver √ºbertragen werden (also ausgef√ºllte Formulare wie z.B. Benutzernamen und Passw√∂rter, aber auch alle Texte, die wir eingeben sowie s√§mtliche hochgeladenen Dateien, ...) Symmetrische und asymmetrische Verschl√ºsselung‚Äã Die Daten werden symmetrisch mit einem Sitzungsschl√ºssel (mit begrenzter G√ºltigkeitsdauer) verschl√ºsselt, wobei der Sitzungsschl√ºssel der asymmetrisch verschl√ºsselt √ºbertragen wird. Da die Browser nicht jeden einzelnen √∂ffentlichen Schl√ºssel der Webseiten (dies sind gem√§ss internet live stats hunderte Millionen2) kennen k√∂nnen, vertrauen sie ausgew√§hlten Zertifizierungsstellen. Der √∂ffentliche Schl√ºssel einer Webseite wird von einer Zertifizierungsstelle digital signiert. Das so entstandene Zertifikat wird beim Verbindungsaufbau √ºbertragen und kann vom Browser √ºberpr√ºft werden. Webseitenzertifikate Das Schloss vor der URL zeigt die Verwendung von HTTPS (und Webseitenzertifikaten) an. Beim Klicken auf das Schloss k√∂nnen ¬´Weitere Informationen¬ª zur Verbindung angezeigt werden (unter Firefox): Informationen zur Webseite Webseitenzertifikat Was finden Sie alles √ºber die Zertifikate der Webseite des Gymnasiums Biel-Seeland heraus? Kryptographische Details Im Screenshot oben sehen Sie die technische Angabe `TLS_AES_128_GCM_SHA256, 128-Bit Schl√ºssel, TLS 1.3`. Finden Sie heraus, was die einzelnen Teile aussagen? Zertifizierungsstellen Finden Sie die im Browser gespeicherten ¬´vertrauensw√ºrdigen Zertifizierungsstellen¬ª? Zertifikatswarnungen Besuchen Sie die Webseite BadSSL und testen Sie mit verschiedenen Browsern verschiedene Konfigurationen. So lernen Sie die m√∂gliche Zertifikatswarnungen kennen. Achtung vor falscher Sicherheit‚Äã Die Tatsache, dass bei einer bestimmten Webseite das Schloss angezeigt wird, heisst noch lange nicht, dass die Webseite sicher ist. Denn das Wort sicher hat mehrere Bedeutungen. Was genau sagt das Schloss also aus? Worauf k√∂nnen wir vertrauen? Was hingegen kann trotzdem noch schiefgehen? Was bedeutet sicher in diesem Zusammenhang? Die Verbindung ist vertraulich ‚Äì niemand unterwegs kann mitlesen. Wir k√∂nnen sicher sein, dass wir mit dem genannten Server (resp. mit der angegebenen Webseite) kommunizieren. Die √ºbertragenen Inhalte sind vor Manipulation gesch√ºtzt. Wo ist trotzdem Vorsicht geboten? Die URL (also die Webseitenadresse) muss ganz genau kontrolliert werden. Es n√ºtzt nichts, wenn die Verbindung verschl√ºsselt ist und der Server √ºberpr√ºft wurde, wenn wir mit dem falschen Server sprechen, weil wir zu wenig genau auf die URL achten. www.bekb.com.evil.com/login ist keine g√ºltige Webseite von BEKB, sondern eine Unterseite (Subdomain) von evil.com. www.vaIiant.ch ist nicht dasselbe wie www.valiant.ch ‚Äì auch wenn es fast identisch aussieht (achten Sie genau auf das ¬´L¬ª). In einer anderen Schriftart sieht man den Fehler besser: www.vaIiant.ch Absicherung mit Passwortmanager Die Plugins von Passwortmanagern erkennen diese kaum sichtbaren details, so dass bei solchen Seiten kein Vorschlag zum automatischen Ausf√ºllen angezeigt wird. Die Webseite kann z.B. Malware verbreiten resp. gehackt worden sein. D.h. der ¬´Inhalt¬ª wird nicht √ºberpr√ºft. Quelle: W3Techs ‚Ü© Quelle: internet live stats ‚Ü©","keywords":""},{"title":"Polybios-Chiffre","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/Polybios","content":"Polybios-Chiffre Die Polybios-Chiffre wurde vom griechischen Geschichtsschreiber Polybios (200 v.Chr. bis 120 v.Chr.) entwickelt. Bei der Polybios-Verschl√ºsselung wird zun√§chst ein Quadrat mit den Buchstaben des Alphabets gef√ºllt. Die Anordnung der Buchstaben kann grunds√§tzlich beliebig gew√§hlt werden. Polybios hat das griechische Alphabet mit 24 Buchstaben verwendet. √úbertragen auf das lateinische Alphabet sieht dies folgendermassen aus: @ Die beiden Buchstaben J und V finden keinen Platz in der Tabelle. J wird mit I zusammengefasst, V mit U. Die Zeilen und Spalten im Quadrat werden durchnummeriert. Nun kann ein Buchstabe verschl√ºsselt werden, indem seine Zeilen- und Spaltennummer aufgeschrieben wird. So wird der Klartext HALLO zum Geheimtext 23 11 31 31 34. Polybios ausprobieren‚Äã Polybios-Chiffre Klartext Geheimtext","keywords":""},{"title":"Monoalphabetische Substitution","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/substitution","content":"Monoalphabetische Substitution Allgemein wird ein Verschl√ºsselungsverfahren, bei welchem jedes Zeichen durch ein festgelegtes anderes Zeichen ersetzt wird, eine monoalphabetische Substitution genannt. Das Verfahren wird ¬´monoalphabetisch¬ª genannt, weil zum Verschl√ºsseln eines Textes nur ein Alphabet zum Einsatz kommt. Im Gegensatz dazu werden bei ¬´polyalphabetischen¬ª Verfahren f√ºr die Verschl√ºsselung eines einzigen Textes mehrere verschiedene Alphabete verwendet (siehe z.B. Vigen√®re). Monoalphabetische Substitution\tKlartextalphabet\tA B C D E F G H I J K L M N O P Q R S T U V W X Y Z Geheimtextalphabet\tM B T C H J F S A E Y O R D N Z W I U P G X Q K L V Es ist ersichtlich, dass eine Entschl√ºsselung nun viel aufw√§ndiger ist, da keine Alphabet-Verschiebung mehr stattfindet, sondern eine wilde Vertauschung (= Substitution) der Buchstaben. Die Nachricht EIN KLEINER RABE FLIEGT AM TAGE wird verschl√ºsselt zu HAD YOHADHI IMBH JOAHFP MR PMFH. info Die Tatsache, dass der Buchstabe B im obigen Beispiel ¬´nicht¬ª verschl√ºsselt wird (also auch im Geheimtext ein B ist), stellt √ºberhaupt kein Problem dar ‚Äì im Gegenteil, es w√ºrde die Anzahl M√∂glichkeiten einschr√§nken, wenn es verboten w√§re, dass einzelne Buchstaben auch unver√§ndert bleiben d√ºrfen. Bei dieser Substitution h√§ngt die Anzahl m√∂glicher Verschl√ºsselungen von der Gr√∂sse des zugrundeliegenden Zeichensatzes ab. Wenn nnn Zeichen verwendet werden, gibt es n!n!n! unterschiedliche Verschl√ºsselungen. (n!n!n! bedeutet &quot;n Fakult√§t&quot; und ist das Produkt aller nat√ºrlicher Zahlen bis zur angegebenen Zahl, Beispiel: 4!=4‚ãÖ3‚ãÖ2‚ãÖ1=244! = 4 \\cdot 3 \\cdot 2 \\cdot 1 = 244!=4‚ãÖ3‚ãÖ2‚ãÖ1=24). Substitutions-Chiffre ausprobieren‚Äã Substitutions-Chiffre Klartext Schl√ºssel Zuf√§llig Setzen Im Schl√ºssel fehlende Buchstaben:ABCDEFGHIJKLMNOPQRSTUVWXYZ Im Schl√ºssel doppelt vorhandene Buchstaben:ABCDEFGHIJKLMNOPQRSTUVWXYZ Geheimtext","keywords":""},{"title":"Skytale","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/Skytale","content":"Skytale Um ca. 500 v. Chr. nutzten die Spartaner eine Skytale (griechisch f√ºr &quot;Stock&quot; oder &quot;Stab&quot;), um wichtige milit√§rische Botschaften zu √ºbermitteln. Der Absender wickelte dabei einen Streifen aus Pergament oder Leder spiralf√∂rmig um die Skytale und schrieb die Nachricht l√§ngs des Stabes auf das aufgewickelte Band. Auf dem abgewickelten Streifen, der dem Empf√§nger √ºbermittelt wird, steht nun eine scheinbar sinnlose Buchstabenfolge. Der Empf√§nger kann die Botschaft mit einer Skytale vom selben Durchmesser aber wieder entziffern. Nachbildung einer Skytale@ Transposition‚Äã Die Skytale ist ein Beispiel einer Verschl√ºsselung durch Transposition. Das heisst, dass die Zeichen des Geheimtextes nicht ersetzt, sondern nur umgestellt (transponiert) werden. Skytale ausprobieren‚Äã Skytale Klartext Schl√ºssel Geheimtext","keywords":""},{"title":"Asymmetrische Verschl√ºsselung","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/asymm-encryption","content":"Asymmetrische Verschl√ºsselung Das Prinzip der asymmetrischen Verschl√ºsselung beruht also auf zwei verschiedenen Schl√ºsseln, dem sogenannten Schl√ºsselpaar (engl. key pair). Die beiden Schl√ºssel eines Schl√ºsselpaars nennt man √∂ffentlichen und privaten Schl√ºssel (engl. public und private key). Da f√ºr den Verschl√ºsselungsvorgang nicht derselbe Schl√ºssel verwendet wird wie f√ºr den Entschl√ºsselungsvorgang, spricht man von einem asymmetrischen Verfahren. Asymmetrische Ver- und Entschl√ºsselung mit verschiedenen Schl√ºsseln@ Generierung des Schl√ºsselpaares f√ºr die asymmetrische Verschl√ºsselung@ Schl√ºsselpaar‚Äã Jede Person besitzt ein eigenes Schl√ºsselpaar, so auch Bob. Die beiden Schl√ºssel, die dieses Schl√ºsselpaar bilden, sind mathematisch verwandt. Der private Schl√ºssel l√§sst sich jedoch nicht in sinnvoller Zeit aus dem √∂ffentlichen Schl√ºssel berechnen. Bobs √∂ffentlicher Schl√ºssel entspricht also dem B√ºgelschloss aus unserem ersten Beispiel. Bobs privater Schl√ºssel ist der Schl√ºssel, der zum B√ºgelschloss passt. Das Schloss kann (in ge√∂ffneter Form nat√ºrlich) bei einer vertrauensw√ºrdigen Stelle (Trent) deponiert werden, wo es von Alice abgeholt werden kann. Den Schl√ºssel beh√§lt Bob stets f√ºr sich. Jede Person besitzt ein Schl√ºsselpaar@ Verschl√ºsselung‚Äã In der folgenden Abbildung sieht man auf der linken Seite, dass Alice bei der Verschl√ºsselung den √∂ffentlichen Schl√ºssel von Bob (und nicht den eigenen) verwendet. Dieser √∂ffentliche Schl√ºssel enth√§lt keine geheime Information und ist f√ºr alle Leute zug√§nglich (z.B. via eine vertrauensw√ºrdige Stelle), somit k√∂nnen alle eine Nachricht f√ºr Bob verschl√ºsseln. Asymmetrische Verschl√ºsselung@ Entschl√ºsselung‚Äã In derselben Abbildung ist zu sehen, dass Bob bei der Entschl√ºsselung seinen privaten Schl√ºssel verwenden muss. Somit ist sichergestellt, dass nur Bob die Nachricht entschl√ºsseln kann. Achtung Um Verwechslungen zu vermeiden, spricht man bei der symmetrischen Verschl√ºsselung vom geheimen Schl√ºssel (engl. secret key), w√§hrend man bei asymmetrischen Verfahren vom privaten Schl√ºssel spricht und nicht vom geheimen Schl√ºssel, weil jede involvierte Person ein eigenes Schl√ºsselpaar und somit einen eigenen privaten Schl√ºssel besitzt. Asymmetrische Verschl√ºsselung √úberlegen Sie sich, wie die Verschl√ºsselung funktioniert, wenn ein Dokument an verschiedene Leute versendet wird. Machen Sie sich dazu eine Skizze. Welche Nachteile erkennen Sie? SSR","keywords":""},{"title":"Asymmetrie","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/asymmetrie","content":"Asymmetrie Wir haben in den beiden vorherigen Abschnitten gesehen, dass es Vorg√§nge gibt, die in die eine Richtung einfach durchzuf√ºhren sind, in die entgegengesetzte Richtung allerdings sehr aufw√§ndig oder gar unm√∂glich: einfacher Vorgang\taufw√§ndiger/schwieriger Vorgangoffenes B√ºgelschloss schliessen\tB√ºgelschloss ohne Schl√ºssel √∂ffnen Farben mischen\tFarben trennen Diese Beispiele zeigen deutlich, worauf die asymmetrische Verschl√ºsselung basiert: Asymmetrische Verschl√ºsselung Die asymmetrische Verschl√ºsselung basiert auf Aufgaben, die in eine Richtung einfach auszuf√ºhren sind, w√§hrend man eine geheime Information braucht, um den Vorgang r√ºckg√§ngig zu machen. Verf√ºgt jemand nicht √ºber diese geheime Information, ist die Umkehrung des Vorgangs nicht in sinnvoller Zeit zu bew√§ltigen. Ein mathematisches Problem dieser Art‚Äã Auch in der Mathematik gibt es Operationen, die einfach und schnell auszuf√ºhren sind. Die Umkehrung jedoch ist selbst f√ºr einen Computer aufw√§ndig und kann Jahre dauern. Ein Beispiel daf√ºr ist das Multiplizieren zweier (Prim-)Zahlen. Jeder Computer kann pro Sekunde mehrere Milliarden Multiplikationen ausf√ºhren. Ein Produkt zweier Primzahlen in die beiden Faktoren zu zerlegen, ist jedoch ungleich aufw√§ndiger ‚Äì insbesondere wenn die Zahlen mehrere hundert Stellen lang sind. Multiplizieren vs. Faktorisieren Berechnen Sie 41‚ãÖ8341 \\cdot 8341‚ãÖ83 auf Papier. √úberlegen Sie sich dabei, wie Sie vorgehen. Schaffen Sie es, die Zahl 339733973397 in ihre zwei Primfaktoren zu zerlegen? Und 111711171117? Wie k√∂nnte man dabei vorgehen? Aufwand f√ºr den Computer Wie schnell kann der Computer multiplizieren und faktorisieren? √úberpr√ºfen Sie mit dem folgenden Tool, wie schnell Ihr Computer beim Multiplizieren und Faktorisieren ist. Nehmen Sie f√ºr Primzahlen mit 6, 7 und 8 Stellen einige (&gt;3) Messungen vor. Halten Sie die Messergebnisse fest (kopieren Sie den Plot und f√ºgen diesen in der Antwort ein...) Was bedeutet es f√ºr eine kryptographische Anwendungen, wenn die beiden Primzahlen statt 8 Stellen mehrere mehrere hundert Stellen lang sind? Zeitanalyse Primfaktorzerlegung Primzahlen mit 678 Stellen Zwei Primzahlen zwische 0 und 0 w√§hlen","keywords":""},{"title":"H√§ufigkeitsanalyse","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/frequency-analysis","content":"H√§ufigkeitsanalyse Buchstabenh√§ufigkeit in der deutschen Sprache 1‚Äã Nicht alle Buchstaben kommen in der deutschen Sprache gleich h√§ufig vor. Nachfolgend findest du eine Auflistung der 10. h√§ufigsten Buchstaben der deutschen Sprache: 1.\t2.\t3.\t4.\t5.\t6.\t7.\t8.\t9.\t10.Buchstabe\tE\tN\tI\tS\tR\tA\tT\tD\tH\tU H√§ufigkeit\t17,40 %\t9,78 %\t7,55 %\t7,27 %\t7,00 %\t6,51 %\t6,15 %\t5,08 %\t4,76 %\t4,35 % al-Kindi 2‚Äã Im neunten Jahrhundert hat der arabische Gelehrte Ab≈´ Ya'q≈´b ibn IshƒÅq al-Kindƒ´ (oder kurz al-Kindi) durch eine Analyse des Korans entdeckt, dass die einzelnen Zeichen der arabischen Schrift in bestimmten H√§ufigkeiten auftreten. In seiner Abhandlung √ºber die Entzifferung kryptographischer Botschaften schrieb er Folgendes: @ Eine M√∂glichkeit, eine verschl√ºsselte Botschaft zu entziffern, vorausgesetzt, wir kennen ihre Sprache, besteht darin, einen anderen Klartext in derselben Sprache zu finden, der lang genug ist, um ein oder zwei Bl√§tter zu f√ºllen, und dann zu z√§hlen, wie oft jeder Buchstabe vorkommt. Wir nennen den h√§ufigsten Buchstaben den ¬´ersten¬ª, den zweith√§ufigsten den ¬´zweiten¬ª, den folgenden den ¬´dritten¬ª und so weiter, bis wir alle Buchstaben in der Klartextprobe durchgez√§hlt haben. Dann betrachten wir den Geheimtext, den wir entschl√ºsseln wollen, und ordnen auch seine Symbole. Wir finden das h√§ufigste Symbol und geben ihm die Gestalt des ¬´ersten¬ª Buchstabens der Klartextprobe, das zweith√§ufigste Symbol wird zum ¬´zweiten¬ª Buchstaben, das dritth√§ufigste zum ¬´dritten¬ª Buchstaben und so weiter, bis wir alle Symbole des Kryptogramms, das wir entschl√ºsseln wollen, auf diese Weise zugeordnet haben. Entschl√ºsselung durch H√§ufigkeitsanalyse‚Äã Durch die H√§ufigkeitsanalyse werden Geheimtexte, die durch eine monoalphabetische Substitution verschl√ºsselt worden sind, grunds√§tzlich entzifferbar. Das heisst, sie k√∂nnen ohne Kenntnis des Schl√ºssels decodiert werden, indem eine H√§ufigkeitsanalyse vorgenommen wird. F√ºr die Entzifferung einer Caesar-Chiffre gen√ºgt es, den h√§ufigsten Buchstaben zu suchen und anschliessend denjenigen Schl√ºssel zu w√§hlen, der E auf diesen h√§ufigsten Buchstaben abbildet. H√§ufigkeitsanalyse durchf√ºhren‚Äã H√§ufigkeitsanalyse Klartext Hallo Sortiere alphabetisch Alle Zeichen Platzhalter f√ºr vorkommende Buchstaben Aufgabe Entschl√ºsseln Sie mithilfe der H√§ufigkeitsanalyse folgende geheime Nachricht: CJQHLGDGYAW AKL VAW DWZJW VWK NWJTGJYWFWF. VAW CJQHLGDGYAW MEXSKKL VAW XGDYWFVWF ROWA LWADYWTAWLW: CJQHLGYJSHZAW MFV CJQHLGSFSDQKW. CJQHLGYJSHZAW TWRWAUZFWL VAW CMFKL VWK NWJKUZDMWKKWDFK, OSWZJWFV KAUZ VAW CJQHLGSFSDQKW VSEAL TWKUZSWXLAYL, SMK NWJKUZDMWKKWDLWF TGLKUZSXLWF AFXGJESLAGFWF RM YWOAFFWF, KHJAUZ, KAW RM CFSUCWF. Halten Sie Ihr Vorgehen genau fest. Quelle Wikipedia ‚Ü© Quelle Qikipedia ‚Ü©","keywords":""},{"title":"Schl√ºsselaustausch","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/key-exchange","content":"Schl√ºsselaustausch Alice und Bob m√∂chten sich geheime Unterlagen senden. Doch wie k√∂nnen sie den Schl√ºssel austauschen? Schl√ºsselaustausch@ Vielleicht hilft es, wenn wir uns in Erinnerung rufen, dass im Handel mehrere Schl√∂sser mit unterschiedlichen Schl√ºsseln zu kaufen sind: Schl√ºsselaustausch@ Schl√ºsselaustausch Finden Sie eine M√∂glichkeit, den Inhalt der Truhe sicher zu √ºbertragen? Versetzen Sie sich dabei in die Rollen der anderen Krypto-Charaktere! Hinweis: Variante 1 Variante 1: Eigene Schl√∂sser Verteilen‚Äã @ K√∂nnen Sie sich zusammenreimen, wie die geheimen Unterlagen versendet werden? Wo liegen allenfalls Probleme? SSR Hinweis: Variante 2 Variante 2: Eigene Schl√∂sser Verteilen‚Äã @ Wie k√∂nnen die Unterlagen sicher zugestellt werden? Wo liegen allenfalls Probleme? SSR Hinweis: Variante 3 Variante 3: Schl√∂sser beim vertrauensw√ºrdigen Trent beziehen‚Äã @ Wie k√∂nnen die Unterlagen sicher zugestellt werden? Wo liegen allenfalls Probleme? SSR","keywords":""},{"title":"Kombinierte Verfahren","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/kombiniert","content":"Kombinierte Verfahren Vergleich symmetrischer und asymmetrischer Verschl√ºsselung‚Äã Wir haben in der letzten Aufgabe gesehen, dass asymmetrische Verschl√ºsselung auch Nachteile hat. Wir wollen die Vor- und Nachteile einander gegen√ºberstellen. Symmetrische Verschl√ºsselung\tAsymmetrische Verschl√ºsselung‚úî sehr schnell\t‚úò ~ 1'000x langsamer ‚úî 1 Nachricht f√ºr alle\t‚úò 1 Nachricht pro Person ‚úò geheimen Schl√ºssel austauschen\t‚úî Public Key ist √∂ffentlich ‚Üí nur 1 gemeinsamer Schl√ºssel\t‚Üí 1 Schl√ºsselpaar pro Person Beide Verfahren kombinieren‚Äã In kryptographischen Verfahren, die heutzutage eingesetzt werden, ist das Ziel, die Vorteile beider Verfahren zu nutzen und die Nachteile zu eliminieren. Daher werden zur Verschl√ºsselung von Daten beide Verfahren eingesetzt: Symmetrische und asymmetrische Verschl√ºsselung kombiniert@ Symmetrische Verfahren zur Verschl√ºsselung der Daten‚Äã Da asymmetrische Verfahren ca. 1'000x langsamer sind als symmetrische Verfahren, werden zur Verschl√ºsselung der Daten symmetrische Verfahren eingesetzt. Denn kryptographische Verfahren werden nicht nur zur Verschl√ºsselung kurzer Nachrichten (wie z.B. Textnachrichten) eingesetzt, h√§ufig m√ºssen auch grosse Datenmengen (z.B. hochaufl√∂sende Bilder, Tondokumente, Videos, ...) verschl√ºsselt werden, folglich spielt die Geschwindigkeit eine zentrale Rolle. Zudem ist bei symmetrischer Verschl√ºsselung praktisch, dass die Daten f√ºr s√§mtliche Empf√§nger gleich verschl√ºsselt sind und somit nicht mehrmals verschl√ºsselt werden m√ºssen (Zeitbedarf) und in derselben Nachricht an alle Empf√§nger verschickt werden k√∂nnen, ohne dass die Nachricht unn√∂tig ein Mehrfaches ihrer urspr√ºnglichen L√§nge erreicht (Platzbedarf). Asymmetrische Verfahren zur sicheren Schl√ºssel√ºbertragung‚Äã Asymmetrische Verfahren sind langsamer, aber zur Verschl√ºsselung des symmetrischen Schl√ºssels perfekt geeignet, da dieser sehr kurz ist und im Vergleich zu den Daten Geschwindigkeit keine Rolle spielt. Zudem ist auch der verschl√ºsselte symmetrische Schl√ºssel sehr kurz, so dass die Nachricht nur unwesentlich l√§nger wird, wenn diese f√ºr mehrere Personen verfasst wird. Zus√§tzlicher Vorteil‚Äã Der symmetrische Schl√ºssel kann so vom Computer gew√§hlt werden. Dies hat zwei Vorteile: Der Schl√ºssel ist wirklich zuf√§llig und gleichverteilt im gesamten Schl√ºsselraum (ein Passwort, das von einer Person gew√§hlt wird, schafft dies nicht). Der Schl√ºssel kann f√ºr jede Nachricht neu gew√§hlt werden. Somit erh√§lt jede Nachricht einen eigenen Schl√ºssel. Man spricht daher von einem Sitzungsschl√ºssel (engl. session key) f√ºr die symmetrische Verschl√ºsselung. Die folgende √úbersicht stellt prinzipiell dasselbe dar wie die Abbildung oben, allerdings mit einem anderem Fokus. Symmetrische und asymmetrische Verschl√ºsselung kombiniert@ Auch symmetrische Verfahren sind sicher! Asymmetrische Verfahren sind also nicht besser als symmetrische! Sie erf√ºllen einen anderen Zweck und werden gleichzeitig mit symmetrischen Verfahren eingesetzt. Symmetrische Verfahren sind also nicht unsicher, einzig die Erstellung des Schl√ºssels und der Schl√ºsselaustausch sind ein Problem. Kombinierte Entschl√ºsselung Stellen Sie dar, wie die Umkehrung ‚Äì also die Entschl√ºsselung ‚Äì funktioniert, wenn symmetrische und asymmetrische Verfahren kombiniert verwendet werden. SSR","keywords":""},{"title":"‚≠êÔ∏è Antike Verschl√ºsselung mit Python","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/python-tools","content":"‚≠êÔ∏è Antike Verschl√ºsselung mit Python Skytale‚Äã to__skytale.py klartext = 'Skytale' schl√ºssel = 3 zeilen = [] # f√ºge f√ºr jede Zeile einen leeren Text ein for i in range(schl√ºssel): zeilen.append('') # verteile die Buchstaben auf die Zeilen nr = 0 for buchstabe in klartext: zeilen[nr] = zeilen[nr] + buchstabe nr = nr + 1 if nr == schl√ºssel: nr = 0 # alle Zeilen mit einer neuen Zeile verkn√ºpfen verschl√ºsselt = '\\n'.join(zeilen) print(verschl√ºsselt) from__skytale.py verschl√ºsselt = '''\\ Ste ka yl''' zeilen = verschl√ºsselt.splitlines() # die erste Zeile gibt vor, wie viele Spalten es gibt spalten = len(zeilen[0]) klartext = '' # f√ºr jede Spalte... for spalte in range(spalten): # wird in jeder Zeile... for zeile in zeilen: if len(zeile) &gt; spalte: # der Buchstabe in dieser Spalte dem Text hinzugef√ºgt klartext = klartext + zeile[spalte] print(klartext) Polybios‚Äã to__polybios.py QUADRAT = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'E', 'X', 'Y', 'Z', ' ' ] klartext = 'Hallo' klartext = klartext.upper().replace('J', 'I').replace('V', 'U') verschl√ºsselt = '' for buchstabe in klartext: index = QUADRAT.index(buchstabe) spalte = index % 5 # berechnet den ganzzahligen Rest bei einer Division durch 5 zeile = index // 5 # berechnet die ganzzahlige Division durch 5 verschl√ºsselt = verschl√ºsselt + f'{zeile + 1}{spalte + 1} ' print(verschl√ºsselt.strip()) # strip entfernt Leerzeichen an den R√§ndern Aufgabe Lesen Sie das Programm durch und versuchen Sie, jede Zeile zu verstehen. Flicken Sie den Code, so dass der verschl√ºsselte Text lesbar wird. from__polybios.py QUADRAT = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'E', 'X', 'Y', 'Z', ' ' ] verschl√ºsselt = '35 34 31 53 12 24 34 43' klartext = '' zahlen = verschl√ºsselt.split(' ') for zahl in zahlen: zeile = int(zahl[0]) spalte = int(zahl[1]) index = 0 klartext = klartext + QUADRAT[index] print(klartext) Caesar-Chiffre‚Äã to__caesar.py ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' SCHL√úSSEL = 'D' ROT = ALPHABET.index(SCHL√úSSEL) klartext = 'CAESAR' klartext = klartext.upper() verschl√ºsselt = '' for buchstabe in klartext: index = ALPHABET.index(buchstabe) + ROT index = index % 26 # ganzzahliger Rest bei Division durch 26 verschl√ºsselt = verschl√ºsselt + ALPHABET[index] print(verschl√ºsselt) Aufgabe √Ñndern Sie den Code so ab, dass der verschl√ºsselte Text wieder entschl√ºsselt werden kann. from__caesar.py ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' SCHL√úSSEL = 'D' ROT = ALPHABET.index(SCHL√úSSEL) verschl√ºsselt = 'JDLXV' klartext = '' verschl√ºsselt = klartext.upper() for buchstabe in verschl√ºsselt: index = 0 klartext = klartext + ALPHABET[index] print(klartext) ‚≠êÔ∏è Zusatz Sie haben eine geheime Nachricht abgefangen, kennen aber den Schl√ºssel nicht. Sie wissen aber, dass ALCZLJ ein sinnvolles Wort ergeben muss. Schreiben Sie ein Programm, das alle m√∂glichen Schl√ºssel durchprobiert und jeweils den entschl√ºsselten Text ausdruckt. Verwenden Sie die Ausgangslage aus dem obigen Programm. hack__caesar.py verschl√ºsselt = 'ALCZLJ' Substitutions-Chiffre‚Äã to__substitution.py ALPHABET = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') SCHL√úSSEL = 'I S X D L Y A V E B F G C W M Z N K O R H Q J P U T'.split(' ') klartext = 'HEUTE GEHE ICH IM WALD JOGGEN' klartext = klartext.upper() verschl√ºsselt = '' for buchstabe in klartext: if buchstabe in ALPHABET: index = ALPHABET.index(buchstabe) verschl√ºsselt = verschl√ºsselt + SCHL√úSSEL[index] else: verschl√ºsselt = verschl√ºsselt + buchstabe print(verschl√ºsselt) from__substitution.py ALPHABET = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') SCHL√úSSEL = 'I S X D L Y A V E B F G C W M Z N K O R H Q J P U T'.split(' ') verschl√ºsselt = 'EXV SEFL QMW CIAAGEWALW WIXV SELG' verschl√ºsselt = verschl√ºsselt.upper() klartext = '' for buchstabe in verschl√ºsselt: if buchstabe in SCHL√úSSEL: index = SCHL√úSSEL.index(buchstabe) klartext = klartext + ALPHABET[index] else: klartext = klartext + buchstabe print(klartext) schl√ºssel.py from random import shuffle schl√ºssel='A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split(' ') shuffle(schl√ºssel) print(' '.join(schl√ºssel)) ","keywords":""},{"title":"Krypto-Familie","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/krypto-family","content":"Krypto-Familie Alice@ Alice und Bob kommunizieren h√§ufig miteinander ‚Äì dies nat√ºrlich verschl√ºsselt. Bob@ Anstelle von ¬´Person A¬ª und ¬´Person B¬ª spricht man von Alice und Bob. Charlie@ Wird eine dritte Person ben√∂tigt, kommt Charlie ins Spiel. Eve@ Eve wird meist dann eingesetzt, wenn Verbindungen abgeh√∂rt (engl. eavesdropping) werden. Sie ist also eine passive Zuh√∂rerin. Mallory@ Mallory ist ein b√∂sartiger, aktiver Angreifer (engl. malicious). Trent@ Wird eine vertrauensw√ºrdige dritte Stelle verwendet, wird Trent (engl. f√ºr trusted entity) eingesetzt.","keywords":""},{"title":"Vign√®re-Chiffre","type":0,"sectionRef":"#","url":"/Kryptologie/Antike/Vignere","content":"Vign√®re-Chiffre Die Vigen√®re-Chiffre wurde vom Franzosen Blaise de Vigen√®re (1523-1596) erfunden und galt fast 300 Jahre lang als unknackbar. Es handelt sich um ein polyalphabetisches Verschl√ºsselungsverfahren, da mehrere Alphabete genutzt werden. Als Schl√ºssel dient ein Wort, das die Anzahl der verwendeten Substitutions-Alphabete bestimmt: F√ºr jeden Buchstaben des Schl√ºsselwortes wird die Caesar-Chiffre mit dem jeweiligen Buchstaben als Schl√ºssel verwendet. Die Buchstaben des Klartextes werden abwechslungsweise durch diese Caesar-Chiffren verschl√ºsselt. Vign√®re-Verschl√ºsselung@ Aufgabe Verschl√ºsseln Sie den Text RUDERN AUF DEM SEE mit der Vigen√®re-Chiffre. Verwenden Sie dazu den Schl√ºssel GBSL.","keywords":""},{"title":"Geheime Farbe","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/secret-color","content":"Geheime Farbe Alice und Bob arbeiten an einem neuen Kunstwerk, auf das die √ñffentlichkeit gespannt wartet. Die beiden m√∂chten daf√ºr eine ganz besondere Farbe verwenden. Diese Farbe soll aber unbedingt bis zur Vernissage geheim bleiben. Alice und Bob wohnen weit auseinander und k√∂nnen sich nicht treffen, um die geheime Farbe gemeinsam herzustellen, sie k√∂nnen sich lediglich Farbk√ºbel per Post zusenden. Alice und Bob‚Äã Sie haben eine Idee und gehen wie folgt vor: Private Farbe Schritt 1: Alice und Bob mischen sich je in einem Farbk√ºbel eine pers√∂nliche, geheime Farbe, die sie niemandem mitteilen (private Farbe genannt). √ñffentliche Farbe Schritt 2 Alice w√§hlt nun zus√§tzlich eine Farbe, die nicht geheim gehalten wird. Sie f√ºllt zwei grosse Farbk√ºbel mit dieser Farbe, einen beh√§lt sie f√ºr sich selbst, den anderen schickt sie per Post an Bob (√∂ffentliche Farbe genannt). Zwischenfarbe Schritt 3: Im n√§chsten Schritt mischen sich Alice und Bob je in einem leeren Farbk√ºbel eine neue Farbe: Sie nehmen dazu genau dieselbe Menge der eigenen privaten Farbe und der gemeinsamen Farbe. Diese neue Farbe schicken sie sich wieder gegenseitig zu. Zielfarbe Schritt 4: Im letzten Schritt erzeugen Sie die Zielfarbe f√ºrs Kunstwerk. Dazu nehmen sie zwei Einheiten der soeben erhaltenen Farbe und eine Einheit der privaten Farbe und erhalten die gemeinsame private Farbe, mit der sie die Teile des neuen Kunstwerks bemalen. Eve‚Äã Die neugierige Journalistin Eve m√∂chte unbedingt wissen, was Alice und Bob aushecken, um noch vor der Vernissage einen exklusiven Zeitungsbericht zu ver√∂ffentlichen. Daher versucht sie, an die gemeinsame private Farbe zu gelangen. Sie √ºberwacht die Post und f√ºllt sich von jeder transportierten Farbe ein wenig in eigene Beh√§lter ab. Ausprobieren‚Äã Geheime Farbe herausfinden Bestimmen Sie je eine Farbe f√ºr Alice und Bob und schauen Sie sich die Ergebnisse an. Wieso erhalten Alice und Bob schlussendlich dieselbe Farbe? Wieso kennt Eve die geheime Farbe nicht? √úberlegen Sie sich: wieso kann Eve aus den verschickten Farben die geheime Farbe nicht herstellen? Alice's Geheimfarbe √ñffentlich Eve üï∂ Bob's Geheimfarbe Alice+√ñffentlich √ñffentlich+Bob Alice+Mischung Mischung+Bob ‚≠êÔ∏è Digitale Farben ‚â† Echte Farben Im obigen Modell musste getrickst werden: In der digitalen Welt werden Farben durch die Erzeugung von Lichtwellen unterschiedlicher Wellenl√§nge erzeugt. Dabei wird bei der √úberlagerung aller Frequenzspektren weisses Licht erzeugt. Dies wird auch additives Farbmodell genannt. Im Gegensatz dazu werden Farben in der realen Welt je nach Oberfl√§che nur gewisse Wellenl√§nfen reflektiert und die anderen werden von der Oberfl√§che &quot;verschluckt&quot;. Werden mehrere Farben gemischt, f√ºhrt dies dazu, dass alle sichtbaren Wellenl√§ngen &quot;verschluckt&quot; werden und daher ein Braun/Schwarz entsteht. Dieses ist das subtraktive Farbmodell. digitales (links) und reales (rechts) Farbmodell@","keywords":""},{"title":"Asymmetrie umkehren","type":0,"sectionRef":"#","url":"/Kryptologie/Digitale-Signaturen/Asymmetrie-Unkehren","content":"Asymmetrie umkehren Asymmetrische Verschl√ºsselungs Box Privater Schl√ºssel (rechts drehend) √ñffentlicher Schl√ºssel (links drehend) aus dem Unterricht... Halten Sie kurz fest, wie die Boxen und ihre Schl√ºssel funktionieren. Aufgabe Bedeutung des Gedankenexperimentes a. Was bedeutet es, wenn jemand einen Text mit seinem eigenen privaten Schl√ºssel ¬´verschl√ºsselt¬ª, so dass der Geheimtext nur mit dem zugeh√∂rigen √∂ffentlichen Schl√ºssel ¬´entschl√ºsselt¬ª werden kann? b. Was sagt die Tatsache, dass man einen solchen Geheimtext mit einem fremden (nicht dem eigenen) √∂ffentlichen Schl√ºssel entschl√ºsseln kann, aus? SSR Digitale Signatur‚Äã Wir haben soeben das Prinzip der digitalen Signatur entdeckt. Digitale Signatur@ Digitale Signatur Wenn Bob die Nachricht mit dem √∂ffentlichen Schl√ºssel von Alice entschl√ºsseln kann, dann muss diese Nachricht vorher mit dem privaten Schl√ºssel von Alice verschl√ºsselt worden sein. Somit kann sie von niemandem anders stammen als von Alice. D.h. diese Nachricht ist quasi digital signiert. Aufgabe mehrere Leute √úberlegen Sie sich, wie ein signiertes Dokument von mehr als zwei Personen angeschaut und √ºberpr√ºft wird. Welche Schl√ºssel werden verwendet? SSR Nachteile‚Äã Die bisher kennengelernte Art der digitalen Signatur ist nicht optimal, denn es gibt mehrere Probleme: Wegen der ¬´Signatur¬ª ist der Klartext nicht mehr lesbar (er ist ja nun speziell ¬´verschl√ºsselt¬ª). Dies ist umst√§ndlich, denn wenn Sie ein Dokument auf Papier unterschreiben, bleibt dieses trotzdem lesbar. Asymmetrische Verfahren sind langsam, d.h. wenn wir ein grosses Dokument (z.B. ein Video) signieren, dauert dieser Vorgang unn√∂tig lange ‚Äì ebenso das √úberpr√ºfen der Signatur (also das Entschl√ºsseln).","keywords":""},{"title":"Integrit√§t","type":0,"sectionRef":"#","url":"/Kryptologie/Digitale-Signaturen/Integritaet","content":"Integrit√§t Lesbarkeit und Signatur‚Äã Das im letzten Kapitel beschriebene Verfahren hat den grossen Nachteil, dass ein Dokument erst lesbar ist, wenn es ¬´entschl√ºsselt¬ª ‚Äì oder anders ausgedr√ºckt: wenn die Signatur entfernt ‚Äì wurde. Das ist unpraktisch, schliesslich sind s√§mtliche deine von Hand unterschriebenen Dokumente trotzdem stets lesbar. Sobald das Dokument entschl√ºsselt (also lesbar) ist, ist aber auch die Signatur verschwunden ‚Äì und somit auch die √úberpr√ºfbarkeit, welche Person was unterschrieben hat. Wir suchen folglich eine L√∂sung, die das gleichzeitige Betrachten des Dokuments und der Signatur erm√∂glicht. Manipulationen erkennen‚Äã Ist der Klartext stets sichtbar, so m√ºssen wir sicherstellen, dass er nicht manipuliert werden kann. Schliesslich wollen wir nicht, dass ein Vertrag nach dem Signieren noch unentdeckt ver√§ndert werden kann. Hashwerte‚Äã Hashwerte kennen wir bisher nur zur sicheren Speicherung von Passw√∂rtern. Hashfunktionen k√∂nnen allerdings nicht nur Passw√∂rter in Hashwerte umwandeln, sondern irgendwelche Daten. Wir haben gesehen, dass Hashwerte eine Art digitale Fingerabdr√ºcke sind. Es ist extrem schwierig (resp. in vern√ºnftiger Zeit nicht m√∂glich), zu einem bestehenden Text einen anderen zu finden, der denselben Hashwert erzeugt. Hashwerte sind digitale Fingerabdr√ºcke@ Auch wenn verschiedene Personen den Hashwert desselben Textes berechnen, ergibt sich stets derselbe Hashwert ‚Äì aber nat√ºrlich nur, wenn dieselbe Hashfunktion verwendet wird. Ist ein Text auch nur ein wenig anders (wie im untenstehenden Beispiel gezeigt), so ergibt sich sofort ein v√∂llig anderer Hashwert, womit leicht zu erkennen ist, dass die Texte nicht √ºbereinstimmen. Hashwerte von verschiedenen Mitteilungen@","keywords":""},{"title":"Zusammenfassung","type":0,"sectionRef":"#","url":"/Kryptologie/Digitale-Signaturen/the-big-picture","content":"Zusammenfassung Das grosse Ganze‚Äã Verschl√ºsselte, signierte Nachrichten: Verkn√ºpfung aller Verfahren. Bemerke Charlie berechnet den Hashwert der Nachricht. Charlie verwendet seinen privaten Schl√ºssel um den Hashwert zu signieren. Den signierten Hashwert kann von jeder Empf√§nger:in mit Charlies √∂ffentlichem Schl√ºssel entschl√ºsselt werden. Jedoch kann der Hash von niemandem ver√§ndert werden, da niemand den privaten Schl√ºssel von Charlie besitzt. Die signierte Nachricht wird mit einem Sitzungsschl√ºssel symmetrisch verschl√ºsselt. Der Sitzungsschl√ºssel wird mit Alices √∂ffentlichem Schl√ºssel verschl√ºsselt. Alice kann nun den Sitzungsschl√ºssel mit ihrem privaten Schl√ºssel entschl√ºsseln mit dem Sitzungsschl√ºssel den Klartext entschl√ºsseln mit dem √∂ffentlichen Schl√ºssel von Charlie durch Entschl√ºsselung der Signatur die Echtheit best√§tigen mit der entschl√ºsselten Signatur (=der von Charlie berechneten Hashwert) und dem selbst berechneten Hashwert der erhaltenen Nachricht die Integrit√§t der Nachricht verifizieren, wenn die beiden Hashwerte √ºbereinstimmen.","keywords":""},{"title":"Zertifizierungsstellen","type":0,"sectionRef":"#","url":"/Kryptologie/Digitale-Signaturen/Zertifizierungsstellen","content":"Zertifizierungsstellen √úbertragung √∂ffentlicher Schl√ºssel‚Äã √ñffentliche Schl√ºssel enthalten keine geheime Information, k√∂nnen also problemlos √ºber einen offenen Kanal √ºbertragen werden. Oder? Angriff auf den √∂ffentlichen Schl√ºssel Aufgabe Angriff auf den √∂ffentlichen Schl√ºssel Alice schickt ihren √∂ffentlichen Schl√ºssel (also ihr √∂ffentlicher Verschliessmechanismus) per Post an Bob. √úberlegen Sie sich, was der b√∂sartige Mallory anstellen k√∂nnte, um Alice und Bob zu √ºberlisten. SSR Schutz gegen Man-in-the-Middle-Attacken‚Äã Wie k√∂nnen wir uns vor Man-in-the-Middle-Attacken sch√ºtzen? Kann uns Trent helfen? Die Rolle von Trent@ Aufgabe Zertifizierungsstellen Wie k√∂nnte Trent daf√ºr sorgen, dass die √∂ffentlichen Schl√ºssel besser √ºberpr√ºfbar sind? SSR Wieso kann sich Mallory nicht zwischen Trent und Bob einschleichen?‚Äã Da im Internet nicht offensichtlich ist, mit wem man kommuniziert, k√∂nnte sich Mallory als Alice ausgeben. Trent wird nur ben√∂tigt, um eine Absicherung zu erhalten, dass Alice's √∂ffentlicher Schl√ºssel auch wirklich ihr geh√∂rt. Bei der √úbermittlung des √∂ffentlichen Schl√ºssels wird HTTPS verwendet, so dass sich Mallory nicht dazwischenschleichen kann. Auch Alice und Bob k√∂nnten HTTPS verwenden, doch dann weiss Bob immer noch nicht, ob er nicht f√§lschlicherweise eine Verbindung mit Mallory statt Alice aufgebaut hat... Das Aufbauen einer HTTPS Verbindung verwendet √ºbrigens auch die Integrit√§tspr√ºfung. Durch eine signierte Nachricht wird die IP Adresse des Servers √ºberpr√ºft. Aufgrund der Signatur kann die Nachricht nicht von Mallory stammen, da er keinen Zugriff auf den Verbindungsserver hat und das f√§lschen der IP-Adresse wegen der Signatur nicht m√∂glich ist. Anschliessend wird gem√§ss dem Farbmischprinzip ein gemeinsamer Sitzungsschl√ºssel f√ºr die Verschl√ºsselung der Verbindung erzeugt. So ist es f√ºr Mallory unm√∂glich, sich zwischen Trent und Bob zu stellen - sofern Bob die richtige IP-Adresse zu Trent besitzt.","keywords":""},{"title":"Verfahren kombinieren","type":0,"sectionRef":"#","url":"/Kryptologie/Digitale-Signaturen/Verfahren-kombinieren","content":"Verfahren kombinieren F√ºr uns ist Wichtig: Die Dokumente sind stets lesbar und trotzdem vor Manipulationen gesch√ºtzt. Asymmetrische Verfahren sollen eingesetzt werden, aber nicht zum Verschl√ºsseln des ganzen Dokuments, weil dies langsam ist. Aus diesem Grund m√ºssen wir ‚Äì √§hnlich wie bei der asymmetrischen Verschl√ºsselung ‚Äì auch bei den digitalen Signaturen ¬´nachbessern¬ª, wenn es um den konkreten Einsatz im Alltag geht. Hashwerte‚Äã Hashwerte derselben Hashfunktion haben stets dieselbe L√§nge. Sie sind im Vergleich zum eingegebenen Text sehr kurz (wie der Fingerabdruck eines Menschen sehr klein ist im Vergleich zu all dem, was den Menschen mit diesem Fingerabdruck ausmacht). Anstelle des gesamten Textes signieren wir nur den Hashwert, was die beiden obengenannten Nachteile beseitigt. Digitale Signaturen richtig verwenden‚Äã Wir versuchen, mehrere Verfahren zu kombinieren um deren Vorteile zu nutzen. Einerseits berechnen wir den Hashwert eines Dokuments, andererseits ¬´verschl√ºsseln¬ª wir nur diesen Hashwert asymmetrisch. Somit reduziert sich der Einsatz von asymmetrischer Verschl√ºsselung wiederum auf ganz kurze Werte. Zudem bleibt das Dokument intakt und stets lesbar. Digitale Signatur: Hashwert und asymmetrische Verschl√ºsselung@ Digitale Signaturen √ºberpr√ºfen √úberlegen Sie sich, wie man eine solche digital signierte Nachricht √ºberpr√ºfen kann. Zeichnen Sie die ben√∂tigten Schritte auf. SSR","keywords":""},{"title":"Authentifizierung","type":0,"sectionRef":"#","url":"/Kryptologie/Hashfunktionen/Authentifizierung","content":"Authentifizierung Authentifizierung [engl. authentication] ist das √úberpr√ºfen einer Berechtigung. Die zu √ºberpr√ºfende Person authentisiert sich dabei. Es gibt drei verschiedene Wege, wie sich eine Person authentisieren kann: @ Wissen‚Äã Die Person weiss etwas, z.B. ein Passwort oder eine Pin @ Besitz‚Äã Die Person besitzt etwas, z.B. eine Kreditkarte oder einen Schl√ºssel. @ Merkmal‚Äã Die Person wird √ºber k√∂rperliches Merkmal identifiziert, z.B. einen Fingerabdruck oder die Iris. Jede dieser drei Methoden hat Vor- und Nachteile. Um die Nachteile auszugleichen kann eine sogenannte Zwei-Faktor-Authentifizierung verwendet werden, welche sich gleichzeitig auf zwei der drei Methoden abst√ºtzt. Wissen‚Äã Mit dieser Methode authentisiert sich die Person, indem sie eine bestimmte Information weiss, beispielsweise ein Passwort, eine Zahlenkombination f√ºr ein Fahrradschloss, ein pers√∂nliche Identifikationsnummer (PIN) oder die Antwort auf eine Sicherheitsfrage. Die Information muss vor der Authentifizierung vereinbart worden sein. Wenn die Information erraten oder abgefangen worden ist, kann sie problemlos ge√§ndert werden. Diese Authentifizierungsmethode hat folgende Schwachpunkte: Die Information kann vergessen werden. Sie kann erraten oder abgefangen werden. Besitz‚Äã Diese Methode √ºberpr√ºft, ob die Person einen bestimmten Gegenstand besitzt. Typische Gegenst√§nde sind: Schl√ºssel Chipkarten (z.B. Bankkarten) SIM-Karte Smartphone Solche Gegenst√§nde m√ºssen eindeutig identifizierbar sein, deshalb ist die Erstellung oder das Ersetzen mit Kosten verbunden. Diese Methode hat folgende Schwachpunkte: Der Gegenstand kann verloren gehen oder gestohlen werden. Er kann gef√§lscht werden. Merkmal‚Äã Die Person kann auch √ºber ein k√∂perliches oder biometrisches Merkmal identifiziert werden. Es werden viele unterschiedliche Merkmale verwendet: Handschrift Fingerabdruck Gesichtsform Tippverhalten Stimme Iris Retina Venenmuster Erbinformation (DNS) Die biometrische Authentifizierung ist sehr bequem, da keine Gegenst√§nde mitgef√ºhrt und keine Informationen gemerkt werden m√ºssen. Viele biometrische Merkmale sind jedoch √∂ffentlich zug√§nglich und einfach f√§lschbar. Dadurch sind Authentifizierungsmethoden wie Fingerabdruck- oder Gesichtserkennung sehr unsicher.","keywords":""},{"title":"Hashfunktionen","type":0,"sectionRef":"#","url":"/Kryptologie/Hashfunktionen/hash-funktionen","content":"Hashfunktionen Hashfunktion ¬´Eine Hashfunktion ist eine Abbildung, die eine grosse Eingabemenge auf eine kleinere Zielmenge abbildet.¬ª Da eine Eingabe beliebiger L√§nge auf eine Ausgabe mit fester L√§nge abgebildet, ist Injektivit√§t unm√∂glich. Die Eingabemenge ist folglich unendlich gross (Texte, Videos und Tonaufnahmen beliebiger L√§nge, Bilder beliebiger Gr√∂sse, ...). Die Ausgabemenge ist allerdings endlich, da die Hashwerte (also die Pr√ºfsummen) eine fixe L√§nge haben. Hashfunktion@ Hashfunktion‚Äã In der Abbildung oben sieht man, dass die Menge der Passw√∂rter nur eine Teilmenge aller theoretisch m√∂glichen Eingaben darstellt. Es ist nicht zu verhindern, dass Kollisionen auftreten. Kollisionsresistenz Um gen√ºgend Sicherheit zu bieten, soll eine gute kryptographische Hashfunktion folglich kollisionsresistent sein. Das heisst, es soll praktisch unm√∂glich sein, Kollisionen zu finden. Hashwert‚Äã Die Ausgabe der Hashfunktion ‚Äì also die Pr√ºfsumme ‚Äì wird Hashwert genannt. Man kann einen Hashwert mit einem Fingerabdruck vergleichen, weil er gewissermassen eindeutig zu einem Passwort passt wie ein Fingerabdruck zu einem Menschen. Ein Hashwert ist wie ein Fingerabdruck@ Aktuelle Beispiele‚Äã Es gibt verschiedene aktuelle Hashfunktionen. Nachfolgend ein Tool, welches SHA-2 Hashes (Secure Hash Algorithm Version 2) berechnet. SHA-2 Hash Input SHA-2 Hash Aufgabe Halten Sie den SHA-2 Hash ihres Namens und ihrer E-Mail Adresse fest. Wie viele Buchstaben √§ndern sich, wenn Sie einen einzigen Tippfehler machen? Finding Die letzten beiden Beispiele zeigen, dass bereits kleinste √Ñnderungen zu komplett anderen Hashwerten f√ºhren. Kryptographische Hashfunktion sind so konstruiert, dass bei einer √Ñnderung an einem Bit min. 50% der Hashwert-Bits √§ndern.","keywords":""},{"title":"Sichere Passw√∂rter","type":0,"sectionRef":"#","url":"/Kryptologie/Hashfunktionen/passwords","content":"Sichere Passw√∂rter @ Passwort Checker Wie sicher ist mein Passwort? * Die eingegebenen Passw√∂rter werden direkt auf Ihrem Ger√§t analysiert und werden weder gespeichert noch √ºbers Internet verschickt. Tipps f√ºr gute Passw√∂rter‚Äã W√§hlen Sie f√ºr jede Webseite ein individuelles Passwort Das Passwort ist mindestens 8 Zeichen lang Es kommen Buchstaben (gross und klein), Zahlen und Sonderzeichen vor Gute, merkbare Passw√∂rter‚Äã Es gibt Strategien, um gute Passw√∂rter zu erstellen, die man sich einfach merken kann. 1. Anfangsbuchstaben‚Äã Jeden Abend vor dem Schlafen trinke ich eine Tasse Kr√§utertee! JA4dStieTKt! 2. Vier zuf√§llige W√∂rter‚Äã W√§hlen Sie vier zuf√§llige W√∂rter. Verwenden Sie beispielsweise einen Webdienst dazu. √úberlegen Sie sich anschliessend eine Visualisierung, mit welcher Sie sich diese W√∂rter merken k√∂nnen. Weiter k√∂nnen Buchstaben durch Sonderzeichen und Zahlen ersetzt werden, z.B. jedes 2te l wird zu einer 1, oder alle s werden als $ geschrieben. Wahrscheinlich, Utopisch, Futurlos, Propeller Wahr$chein1ichUt0pi$chFuturl0$Pr0pe1ler 3. Passwortmanager üèÖ‚Äã Am sichersten ist es, zuf√§llige Passw√∂rter zu verwenden, welche Sie in einem Passwortmanager verwalten. So m√ºssen Sie sich nur ein (sicheres!) Passwort merken; dasjenige f√ºr den Passwortmanager. Im Manager k√∂nnen Sie f√ºr jeden Dienst automatisch ein sicheres Passwort erzeugen lassen. F√ºr g√§ngige Passwort-Manager gibt es auch Browser-Plugins, welche das Ausf√ºllen von Passw√∂rtern unterst√ºtzen. BitWarden (üèÖ Empfehlung) - gute Basis-Funktionen und einfaches Handling, zudem Open Source (Kerckhoffs Prinzip üòâ) KeePass - auch Open Source LastPass","keywords":""},{"title":"Passw√∂rter speichern","type":0,"sectionRef":"#","url":"/Kryptologie/Hashfunktionen/save-passwords","content":"Passw√∂rter speichern Passw√∂rter sind wichtig, wir sollten sie besch√ºtzen. Doch dies gilt nicht nur f√ºr unsere eigenen Passw√∂rter, auch Firmen sollten die Passw√∂rter ihrer Kunden sch√ºtzen. Passw√∂rter speichern‚Äã Wie w√ºrden Sie die Passw√∂rter Ihrer Kunden speichern, falls Sie einen Webshop erstellen w√ºrden? Nat√ºrlich nicht im Klartext, oder? Dass die Passw√∂rter ¬´verschl√ºsselt¬ª werden m√ºssen, scheint logisch. Also sollten die Passw√∂rter wohl auf dem Firmenserver verschl√ºsselt werden, damit sie nicht ausgelesen werden k√∂nnen ‚Äì weder von Hackern noch von neugierigen Mitarbeitenden. Doch gerade dies ist ein grosses Problem: Der Firmenserver soll die Kunden anhand ihres Passwortes authentifizieren k√∂nnen, die Mitarbeitenden d√ºrfen allerdings keinen Zugriff auf die Kundenpassw√∂rter haben. Alle bisherigen Verschl√ºsselungsverfahren arbeiten mit einem Schl√ºssel (oder mit mehreren). Wer den richtigen Schl√ºssel kennt, kann die Passw√∂rter entschl√ºsseln. Wird der Schl√ºssel auf den Firmenservern gespeichert, so haben zumindest gewisse Mitarbeitende Zugriff. Hier kommen wir momentan nicht weiter. Wir tasten uns von einer anderen Seite an die L√∂sung heran. Pr√ºfsumme‚Äã Wir k√∂nnen jedoch ‚Äì anstelle eines Passwortes ‚Äì eine Pr√ºfsumme speichern: Benutzername\tPasswort\tIterierte Quersumme\tAlternierende Quersummealice\t12345\t6\t3 bob\t123456 charlie\t12345678 donald\t123456789 eve\t1234567890 frederick\t11111111 grace\t123123 hanna\tpassword ian\tpicture1 Die Iterierte Quersumme ist die Quersumme, die entsteht, wenn man solange immer wieder die Quersumme ausrechnet, bis nur noch eine einzige Ziffer √ºbrig bleibt. F√ºr die Zahl 97 lautet die normale Quersumme 16, berechnet man davon wiederum die Quersumme, so entsteht die iterierte Quersumme: 7. Die Alternierende Quersumme entsteht durch abwechslungweises Addieren und Subtrahieren der einzelnen Ziffern (f√ºr 1234 lautet diese 1 - 2 + 3 - 4 = -2). Tabelle vervollst√§ndigen Vervollst√§ndigen Sie die oben stehende Tabelle. Anstelle der in den Passw√∂rtern enthaltenen Buchstaben k√∂nnen Sie die unten stehenden Zahlen einsetzen. Buchstaben\tA B C D E F G H I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z Zahlen\t1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Welche der beiden Funktionen w√ºrden Sie w√§hlen, um die Passw√∂rter zu speichern? Welche Probleme sehen Sie bei beiden Funktionen? Wunsch: Injektivi√§t Zu jeder Pr√ºfsumme geh√∂rt h√∂chstens ein Passwort. Oder anders formuliert: Kollisionen sollen vermieden werden. Das bedeutet, dass jedes Passwort eine andere Pr√ºfsumme erhalten soll. Injektivit√§t@ Bessere Pr√ºfsummen?!‚Äã Nachfolgend eine weitere Liste mit Vorschl√§gen f√ºr Pr√ºfsummen. Benutzername\tPasswort\t???\t???\t???alice\t1234567\t7654321\t3456789\t5040 bob\tqwerty\tytrewq\tsygtva\t17595000 charlie\tabc123\t321cba\tcde345\t36 donald\tmillion2\t2noillim\toknnkqp4\t63685440 eve\t000000\t000000\t222222\t0 frederick\t1234\t4321\t3456\t24 grace\tiloveyou\tuoyevoli\tknqygaqw\t1403325000 hanna\tpassword1\t1drowssap\trcuuyqtf3\t143475840 ian\tqqww1122\t2211wwqq\tssyy3344\t611524 Aufgabe Funktionen erkennen Erkennen Sie, wie die Pr√ºfsummen in den hintersten drei Spalten berechnet werden? Wunsch: Unumkehrbarkeit Aus der Pr√ºfsumme soll nicht auf das Passwort geschlossen werden k√∂nnen.","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/Kryptologie/Lernziele","content":"Lernziele Verschl√ºsselungsverfahren Sie verstehen das Prinzip symmetrischer Verschl√ºsselungsverfahren und verwenden das Wissen in Beispielen mit antiken Verfahren an. Sie knacken antike symmetrische Verfahren (H√§ufigkeitsanalysen, Brute Force, ...). Sie wissen, wie der ECB und CBC Modus funktionieren und k√∂nnen diese exemplarisch mit XOR als Verschl√ºsselungsalgorithums anwenden. Sie kennen das Prinzip von Kerckhoffs und k√∂nnen nachvollziehen, wieso es sinnvoll ist, die Funktionsweise von Algorithmen nicht geheimzuhalten (Security through Obscurity). Sie wissen, dass moderne symmetrische Verfahren mit Bitfolgen anstelle von Buchstaben arbeiten und mathematisch viel komplexer sind. Sie erkennen das Problem des Schl√ºsselaustauschs bei symmetrischen Verfahren. Sie kennen Man-in-the-Middle-Angriffe und verstehen, dass auch √∂ffentliche Schl√ºssel auf ihre Echtheit √ºberpr√ºft werden m√ºssen. Sie begreifen asymmetrische Verfahren mit ihren Schl√ºsselpaaren als Hilfsmittel f√ºr einen sicheren Austausch (z.B. Vorh√§ngeschloss/Schl√ºssel-Analogie oder Box mit einem Verschluss zum schliessen und einem zum √∂ffnen). Sie verstehen, dass Zertifikate zur Best√§tigung der Echtheit von √∂ffentlichen Schl√ºsseln durch eine vertrauensw√ºrdige Stelle mit Hilfe einer digitalen Signatur (z.B. bei HTTPS) verwendet werden. Hashfunktionen Sie wissen, dass Passw√∂rter nicht im Klartext gespeichert werden. Sie kennen die Zielsetzung und die Funktionsweise von Hashverfahren (Stichworte sicheres Speichern von Passw√∂rtern, Intregrit√§tspr√ºfung) Sie kennen Angriffsm√∂glichkeiten auf Passworthashes (Dictionnary, Brute Force). Sie k√∂nnen die St√§rke von Passw√∂rtern einsch√§tzen und wissen, dass die L√§nge die massgebende Gr√∂sse f√ºr ein sicheres Passwort ist. Digitale Signaturen Sie verstehen, dass das Prinzip der asymmetrischen Verschl√ºsselung auch f√ºr digitale Signaturen eingesetzt werden kann. Sie verstehen die Rolle von Zertifizierungsstellen und k√∂nnen nachvollziehen, was Webseitenzertifikate bedeuten. Angriffe Sie sind sich bewusst, dass f√ºr erfolgreiche Angriffe auf Systeme h√§ufig ein Fehlverhalten von Personen verantwortlich ist. Sie wissen, dass Personen daher ein beliebtes Angriffsziel sind (z.B. Social Engineering, Phishing). Sie wissen, dass Systeme Schwachstellen aufweisen und somit Angriffsfl√§chen bieten. Sie verstehen, dass regelm√§ssige Softwareupdates, aktuelle Antivirensoftware und eine aktive Firewall f√ºr die Systemsicherheit zentral sind. Sie verstehen die Wichtigkeit, dieselben Passw√∂rter nicht f√ºr mehrere Dienste/Systeme einzusetzen und kennen M√∂glichkeiten der Passwortverwaltung (z.B. Passwortmanager). Sie verstehen, dass das Passwort des E-Mail-Accounts besonders wichtig ist (z.B. wegen der Passwortr√ºcksetzung via E-Mail). Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"Notizen","type":0,"sectionRef":"#","url":"/Kryptologie/notes.nosync","content":"Notizen Cool: Feistel Cipher! üëâ https://www.youtube.com/watch?v=FGhj3CGxl8I","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/Kryptologie/Lernziele-reduced","content":"Lernziele Verschl√ºsselungsverfahren Sie verstehen das Prinzip symmetrischer Verschl√ºsselungsverfahren und verwenden das Wissen in Beispielen mit antiken Verfahren an. Sie knacken antike symmetrische Verfahren (H√§ufigkeitsanalysen, Brute Force, ...). Sie wissen, wie der ECB und CBC Modus funktionieren und k√∂nnen diese exemplarisch mit XOR als Verschl√ºsselungsalgorithums anwenden. Sie kennen das Prinzip von Kerckhoffs und k√∂nnen nachvollziehen, wieso es sinnvoll ist, die Funktionsweise von Algorithmen nicht geheimzuhalten (Security through Obscurity). Sie wissen, dass moderne symmetrische Verfahren mit Bitfolgen anstelle von Buchstaben arbeiten und mathematisch viel komplexer sind. Sie erkennen das Problem des Schl√ºsselaustauschs bei symmetrischen Verfahren. Sie kennen Man-in-the-Middle-Angriffe und verstehen, dass auch √∂ffentliche Schl√ºssel auf ihre Echtheit √ºberpr√ºft werden m√ºssen. Sie begreifen asymmetrische Verfahren mit ihren Schl√ºsselpaaren als Hilfsmittel f√ºr einen sicheren Austausch (z.B. Vorh√§ngeschloss/Schl√ºssel-Analogie). Hashfunktionen Sie wissen, dass Passw√∂rter nicht im Klartext gespeichert werden. Sie kennen die Zielsetzung und die Funktionsweise von Hashverfahren (Stichworte sicheres Speichern von Passw√∂rtern, Intregrit√§tspr√ºfung) Sie kennen Angriffsm√∂glichkeiten auf Passworthashes (Dictionnary, Brute Force). Sie k√∂nnen die St√§rke von Passw√∂rtern einsch√§tzen und wissen, dass die L√§nge die massgebende Gr√∂sse f√ºr ein sicheres Passwort ist. Angriffe Sie sind sich bewusst, dass f√ºr erfolgreiche Angriffe auf Systeme h√§ufig ein Fehlverhalten von Personen verantwortlich ist. Sie wissen, dass Personen daher ein beliebtes Angriffsziel sind (z.B. Social Engineering, Phishing). Sie wissen, dass Systeme Schwachstellen aufweisen und somit Angriffsfl√§chen bieten. Sie verstehen die Wichtigkeit, dieselben Passw√∂rter nicht f√ºr mehrere Dienste/Systeme einzusetzen und kennst M√∂glichkeiten der Passwortverwaltung (z.B. Passwortmanager). Sie verstehen, dass das Passwort des E-Mail-Accounts besonders wichtig ist (z.B. wegen der Passwortr√ºcksetzung via E-Mail). Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"Symmetrische Verschl√ºsselung","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch","content":"Symmetrische Verschl√ºsselung Bei s√§mtlichen VErschl√ºsselungsverfahren in diesem Kapitel handelt es sich um symmetrische Verfahren, d.h. zum Verschl√ºsseln und Entschl√ºsseln wird derselbe Schl√ºssel verwendet: @","keywords":""},{"title":"Umwandlung ins Bin√§rsystem","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/binaer","content":"Umwandlung ins Bin√§rsystem In diesem Kapitel dringen wir in unsere Zeit vor. Wir verwenden Computer, die mit bin√§ren Zahlen arbeiten. Somit muss der Klartext vor der Verschl√ºsselung in bin√§re Zahlen umgewandelt werden. Prozess der Verschl√ºsselung‚Äã Das Verfahren wird etwas umst√§ndlicher, da jeweils in die bin√§re Computersprache √ºbersetzt werden muss: Der Geheimtext wird in eine Folge von bin√§ren Zahlen codiert (Klartext ‚Üí bin√§rer Klartext) Verschl√ºsselung dieser Zahlenfolge (bin√§rer Klartext ‚Üí bin√§rer Geheimtext) ... (Versand, Abspeichern, ...) Decodierung des bin√§ren Geheimtextes (bin√§rer Geheimtext ‚Üí Geheimtext) Unterschied ¬´Codierung¬ª und ¬´Verschl√ºsselung¬ª Es ist wichtig, dass die Begriffe Codierung und Verschl√ºsselung unterschieden werden: Codierung Eine Codierung ist eine Umwandlung in eine andere Darstellungsform (z.B. Text ‚Üí Zahlen, Bild ‚Üí Text, Zahlen ‚Üí bin√§re Zahlen, ...). Eine Codierung hat das Ziel, eine Information in ein bestimmtes Datenformat umzuwandeln, sie bietet keine Sicherheit. Verschl√ºsselung Eine Verschl√ºsselung oder Chiffre hat das Ziel zu verhindern, dass Aussenstehende an eine bestimmte Information gelangen, indem Daten mithilfe eines Schl√ºssels so ver√§ndert werden, dass ohne Kenntnis des Schl√ºssels nicht mehr auf die urspr√ºngliche Form geschlossen werden kann. Ein grosser Vorteil‚Äã Die vorg√§ngige Codierung bedeutet zwar beim Erarbeiten einen Mehraufwand, bietet jedoch einen erheblichen Vorteil: Alles, was sich in bin√§rer Form darstellen l√§sst, kann ohne weitere Anpassung des Verfahrens verschl√ºsselt werden! Texte (unabh√§ngig von der Sprache resp. den verwendeten Schriftzeichen) Bilder Ton Videos Dies war in der Antike nicht n√∂tig, heute ist es allerdings unumg√§nglich. Codierung‚Äã Wie im Kapitel ¬´Codes und Daten¬ª besprochen, gibt es dazu eine Vielzahl von Codierungen. Beispielsweise k√∂nnte dazu die ASCII-Codierung oder die UTF-8 Codierung verwendet werden. F√ºr die folgenden Beispiele verwenden wir den etwas k√ºrzeren Pentacode.","keywords":""},{"title":"Blockchiffre","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/blockchiffre","content":"Blockchiffre Im vorherigen Beispiel war der Schl√ºssel gleich lang wie der Klartext. Da dies in der Realit√§t schwierig zu bewerkstelligen ist, wurden Blockchiffren erfunden. Sie heissen so, weil der Text nicht mehr als ganzes, sondern in Bl√∂cken verschl√ºsselt wird. Aktuelle Verschl√ºsselungsverfahren Aktuelle Verschl√ºsselungsverfahren sind so komplex, dass wir sie unm√∂glich in dieser kurzen Zeit verstehen k√∂nnen. Daher werden wir viele der nachfolgend erw√§hnten Verfahren nur anhand von Analogien und nicht auf mathematischer Ebene kennenlernen. Beim Thema Blockchiffren wollen wir aber ins technische eintauchen und uns anhand einer einfachen Verschl√ºsselung (XOR) anschauen, wie moderne Verschl√ºsselung funktioniert. Blockl√§nge‚Äã Klartext GEHEIMNACHRICHT Key PENTA Da der Klartext dreimal so lange ist wie der Schl√ºssel, muss der Text in drei Teile aufgeteilt werden, welche wir separat verschl√ºsseln. Die Blockl√§nge entspricht also der Schl√ºssell√§nge. Verschl√ºsselung in Bl√∂cken‚Äã Im folgenden Beispiel wird der oben bereits erw√§hnte Klartext mit dem Schl√ºssel bitweise mit XOR verschl√ºsselt: Block 1‚Äã ‚†Ä\tText\tPentacode Block 1\tGeheimtextp\tGEHEI\t00111 00101 01000 00101 01001 k\tPENTA\t10000 00101 01110 10100 00001 c 10111 00000 00110 10001 01000\tW FQH Block 2‚Äã ‚†Ä\tText\tPentacode Block 2\tGeheimtextp\tMNACH\t01101 00101 10011 10100 10010 k\tPENTA\t10000 00101 01110 10100 00001 c 11101 00000 11101 00000 10011\t. . S Block 3‚Äã ‚†Ä\tText\tPentacode Block 3\tGeheimtextp\tRICHT\t00101 00110 00110 00101 01110 k\tPENTA\t10000 00101 01110 10100 00001 c 10101 00011 01000 10001 01111\tUCHQO Aufgabe XOR-Blockchiffre Pentacode Klartext Pentacode Verschl√ºsseln Sie den folgenden Text mit der XOR-Blockchiffre: Text PAKET ZUGESTELLT Schl√ºssel BETA Codieren Sie zuerst den Text mit Pentacode Codieren Sie anschliessend den Schl√ºssel mit Pentacode. Verschl√ºsseln Sie den bin√§r dargestellten Text anschliessend mit dem bin√§r dargestellten Schl√ºssel mittels XOR-Blockchiffre. Decodieren Sie diesen wiederum mit Pentacode und √ºberpr√ºfen Sie die L√∂sung. Halten Sie Ihren L√∂sungsweg unten fest: L√∂sung‚Äã","keywords":""},{"title":"Kerckhoffs' Prinzip","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/kerckhoffs","content":"Kerckhoffs' Prinzip In der Kryptologie ist der wichtigste Punkt stets die Sicherheit. Dabei ist es wichtig, Sicherheit von Schein-Sicherheit zu unterscheiden. Das Prinzip von Kerckhoffs‚Äã Eines der wichtigsten Prinzipien in der Kryptologie stammt von August Kerckhoffs: ¬´Die Sicherheit eines Kryptosystems darf nicht von der Geheimhaltung des Algorithmus abh√§ngen. Die Sicherheit gr√ºndet sich nur auf die Geheimhaltung des Schl√ºssels.¬ª ‚Äì Auguste Kerckhoffs (1835 - 1903) Auguste Kerckhoffs@ Formulierung von Claude Shannon‚Äã Claude Shannon hat dasselbe kurz und pr√§gnant ausgedr√ºckt: ¬´The enemy knows the system!¬ª ‚Äì Claude Shannon (1916 - 2001) Claude Shannon@ Erkl√§rung von Bruce Schneier‚Äã Der renommierte Kryptologe Bruce Schneier erkl√§rt das Prinzip von Kerckhoffs' mit einer kurzen Geschichte 2: ¬´Man unterscheidet zwei Arten von Verschl√ºsselung: Verschl√ºsselung, die deine kleine Schwester daran hindert, deine Dateien zu lesen, und die Verschl√ºsselung, die bedeutende Regierungen daran hindert, sie zu lesen.¬ª ‚Äì Bruce Schneier ¬´Wenn ich einen Brief in einen Safe einschliesse, diesen irgendwo in New York verstecke und dir dann sage, du sollst den Brief lesen, hat dies nichts mit Sicherheit zu tun. Das ist Verschleierung. Angenommen, ich schliesse einen Brief in einen Safe ein, √ºbergebe dir den Safe mitsamt Bauplan, hundert weiteren, identischen Safes und deren geheimer Kombination, so dass du und die besten Codeknacker den Schliessmechanismus studieren k√∂nnen. Wenn du den Brief trotzdem nicht lesen kannst, dann spricht man von Sicherheit.¬ª ‚Äì Bruce Schneier Bruce Schneier@ Quelle: Applied Cryptography, Bruce Schneier, Vorwort ‚Ü©","keywords":""},{"title":"√úbungen","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/uebungen","content":"√úbungen L√∂sen Sie die √úbungen von Hand (daher nur mit dem Pentacode-Editor als Hilfsmittel). ECB Modus‚Äã Pentacode Klartext Pentacode 1. XOR Verschl√ºsselung Verschl√ºsseln Sie den Text BUCHSTABENSPIELE mit dem Schl√ºssel AKRONYM 2. XOR Entschl√ºsseln Entschl√ºsseln Sie den Text XWVJZWEKK,XWVJIK mit dem Schl√ºssel VVXKZ CBC Modus‚Äã Hinweis CBC-Modus Jeder Block hat genau so viele Bits wie der Schl√ºssel. (Hier werden also meist 2 Buchstaben (=10 bits) pro Antwort in einem Block verwendet.) c1 ist ein Zwischenresultat, damit wird weitergearbeitet... 3. CBC-Modus: Verschl√ºsseln CBC: Verschl√ºsseln@ Verschl√ºsseln Sie den Text WINTER mit dem Schl√ºssel NY und dem IV AZ. (Antworten als Penta-Bin√§rcode) Block 1 Nach XOR mit IV Nach XOR mit Schl√ºssel Block 2 Nach XOR mit IV Nach XOR mit Schl√ºssel Block 3 Nach XOR mit IV Nach XOR mit Schl√ºssel 4. CBC-Modus: Entschl√ºsseln CBC Entschl√ºsseln@ Entschl√ºsseln Sie den Text NNHDFBA mit dem Schl√ºssel BE und beliebigem IV. (Antworten als Penta-Bin√§rcode) Block 1 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 2 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 3 Nach XOR mit Schl√ºssel Nach XOR mit IV Block 4 Nach XOR mit Schl√ºssel Nach XOR mit IV ","keywords":""},{"title":"Black Box","type":0,"sectionRef":"#","url":"/Math/BlackBox","content":"Black Box 0 0 0 0 0 0 0","keywords":""},{"title":"Verkettung von Bl√∂cken","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/block-chaining","content":"Verkettung von Bl√∂cken Im letzten Kapitel wurde der Geheimtext zur Ver- bzw. Entschl√ºsselung in Bl√∂cke aufgeteilt, die exakt so lang sind wie der Schl√ºssel. Die Bl√∂cke werden anschliessend einzeln durch die XOR-Funktion mit dem Schl√ºssel ver- bzw. entschl√ºsselt. Allgemeine Blockchiffre Prinzipiell kann anstelle der XOR-Funktion jede beliebige mathematische Funktion (resp. Verkettung von Funktionen) zur Verschl√ºsselung verwendet werden (in den unten aufgef√ºhrten Grafiken daher mit dem allgemeinen Begriff block cipher encryption bezeichnet). Wir beschr√§nken uns hier allerdings auf die einfache und gut verst√§ndliche XOR-Verschl√ºsselung. Der Betriebsmodus ¬´Electronic Code Book¬ª (ECB)‚Äã Falls jeder Block mit dem immer gleichen Schl√ºssel verschl√ºsselt wird, spricht man vom ¬´Electronic Code Book¬ª (ECB) Betriebsmodus. Schematisch dargestellt sieht dieser wie folgt aus: @ In der Abbildung wird deutlich, dass ECB kein eigenes Verschl√ºsselungsverfahren ist, sondern nur ein Modus ist. Er definiert, wie die einzelnen Bl√∂cke verwendet werden. Die konkrete Verschl√ºsselungsfunktion ist in dieser Darstellung nicht genauer angegeben ‚Äì wir verwenden der Einfachheit halber hier die XOR-Funktion. Die Entschl√ºsselung funktioniert analog: Der Geheimtext wird wiederum in Bl√∂cke aufgeteilt, welche separat mit dem Schl√ºssel entschl√ºsselt werden. Die dabei entstandenen Klartext-Bl√∂cke ergeben aneinander gereiht den gesamten Klartext. @ Tool‚Äã XOR Blockchiffre Modus ECBCBC Klartext Schl√ºssel Geheimtext Aufgabe ECB-Modus Verschl√ºsseln Sie den Text EINE SEHR KLEINE SENSATION mit dem Schl√ºssel ZUSE. Schauen Sie sich den Klartext und den Geheimtext genau an. Gibt es Schwachstellen im ECB-Modus? Was ist verd√§chtig? Hinweis √úberlegen Sie sich, was passiert, wenn zwei Bl√∂cke identisch sind (z.B. weil eine bestimmte Passage des Textes erneut vorkommt). Welche Auswirkung hat dies auf den Geheimtext? Der Betriebsmodus ¬´Cipher Block Chaining¬ª (CBC)‚Äã Im CBC-Modus werden die Bl√∂cke nicht mehr getrennt voneinander verarbeitet. Wie in der folgenden Abbildung ersichtlich ist, dient jeder Geheimtext-Block (ausser der letzte) im nachfolgenden Schritt zus√§tzlich als Input. So werden gleiche Klartext-Bl√∂cke trotz identischem Schl√ºssel zu unterschiedlichen Geheimtextbl√∂cken verschl√ºsselt. Das Plus-Zeichen ich Kreis steht hier ebenfalls f√ºr die XOR-Operation. Diese ist gegeben, w√§hrend die Verschl√ºsselung im grossen Rechteck mit der Bezeichnung block cipher encryption frei gew√§hlt werden kann (also bspw. auch ein aktuell sicheres Verfahren). Es wird also in unseren Beispielen sowohl f√ºr die Verrechnung des Klartextblocks mit dem vorherigen Geheimtextblock wie auch f√ºr eigentliche Verschl√ºsselung die XOR-Operation verwendet. Da bei der Verarbeitung des ersten Blocks noch kein Geheimtext-Block zur Verf√ºgung steht, wird ein sogenannter ¬´Initialisierungsvektor¬ª (IV) verwendet. @ √Ñndert man 1 Bit im IV, f√ºhrt dies zu √Ñnderungen im gesamten Geheimtext. √Ñndert man 1 Bit im Klartext, so √§ndern sich auch s√§mtliche darauffolgenden Bl√∂cke im Geheimtext. Ein Nachteil des CBC-Modus ist allerdings, dass die Verschl√ºsselung der verschiedenen Bl√∂cke nicht gleichzeitig (also parallel) berechnet werden k√∂nnen, da das Resultat des vorherigen Blocks f√ºr die Verschl√ºsselung des aktuellen Blocks ben√∂tigt wird. D.h. ein bestimmter Klartext-Block kann erst verschl√ºsselt werden, wenn s√§mtliche vorherigen Bl√∂cke bereits verschl√ºsselt sind. Bei der Entschl√ºsselung sieht es anders aus. Da sofort s√§mtliche Geheimtextbl√∂cke vorliegen, kann die Entschl√ºsselung problemlos parallelisiert werden, wie Sie in der folgenden Abbildung nachvollziehen k√∂nnen: @ Bemerkenswert Auf den ersten Blick erstaunlich ist die Tatsache, dass die Entschl√ºsselung mit falschem IV nur dazu f√ºhrt, dass der erste Klartext-Block unleserlich ist, w√§hrend die restlichen Bl√∂cke korrekt entschl√ºsselt werden. Aufgabe CBC-Modus Verschl√ºsseln Sie nochmals denselben Text, diesmal allerdings im CBC-Modus: Klartext EINE SEHR KLEINE SENSATION Schl√ºssel ZUSE Achten Sie wiederum auf die Bl√∂cke, die im Klartext √ºbereinstimmen. Was passiert jetzt? W√§hlen Sie verschiedene Initialisierungsvektoren. Wie unterscheiden sich die Resultate? Aufgabe Initialisierungsvektor √úberlegen Sie sich zusammen mit Ihrer Pultnachbar:in, mit welcher einfachen Massnahme man darauf verzichten k√∂nnte, neben dem Schl√ºssel auch den Initialisierungsvektor mit der Kommunikationspartner:in abzusprechen. Aufgabe Angriff auf die XOR-Blockchiffre Setzen Sie sich in Dreiergruppen zusammen und diskutieren Sie folgende Fragen: Welche Faktoren beeinflussen die Sicherheit unserer XOR-Blockchiffre? Stellen Sie zu jedem Faktor eine Aussage auf, die aufzeigt, wie eine m√∂glichst hohe Sicherheit erreicht werden kann. Wie sicher ist die Verwendung von XOR (¬´block cipher encryption/decryption¬ª) im Vergleich zu Blockchiffren-Verfahren (ECB)? XOR-Blockchiffre Selbstverst√§ndlich ist XOR als Verschl√ºsselungsfunktion aus kryptologischer Sicht nicht ideal ‚Äì daf√ºr aber f√ºr uns gut verst√§ndlich, √ºberschaubar und einfach anzuwenden. In der Realit√§t ist es besonders wichtig, dass die Verschl√ºsselungsfunktion s√§mtliche Bits des aktuellen Blocks stark ¬´vermischt¬ª. Damit ist gemeint, dass eine winzige √Ñnderung an einer bestimmten Stelle im Klartextblock nicht nur zu einer kleinen √Ñnderung an derselben Stelle im Geheimtextblock f√ºhrt (wie dies bei XOR wegen der bitweisen Verarbeitung der Fall), sondern dass durch die kleine √Ñnderung viele Bits √ºberall im Block ver√§ndert werden. Aus diesem Grund arbeiten aktuelle Verschl√ºsselungsfunktionen von Blockchiffren in mehreren Runden.","keywords":""},{"title":"Pentacode","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/codierung","content":"Pentacode Der Pentacode ist keine offizielle Codierung. Sie wurde von Stefan Rothe und Tom Jampen f√ºr den Unterricht entwickelt, um erstens ein kurzes Alphabet ohne unn√∂tige Zeichen zu verwenden und zweitens einen m√∂glichst kurzen Bin√§rcode zu erhalten. Albhabet‚Äã Mit 5 Bits ([Penta bedeutet 5]) k√∂nnen 25=322^5 = 3225=32 Zeichen codiert werden. Neben dem Leerschlag hat es Platz f√ºr die Sonderzeichen ?, ., ,, - und @. Penta-Tabelle Buchstabe\tZahl\tBin√§rLeerschlag\t0\t00000 A\t1\t00001 B\t2\t00010 C\t3\t00011 D\t4\t00100 E\t5\t00101 F\t6\t00110 G\t7\t00111 H\t8\t01000 I\t9\t01001 J\t10\t01010 K\t11\t01011 L\t12\t01100 M\t13\t01101 N\t14\t01110 O\t15\t01111 Buchstabe\tZahl\tBin√§rP\t16\t10000 Q\t17\t10001 R\t18\t10010 S\t19\t10011 T\t20\t10100 U\t21\t10101 V\t22\t10110 W\t23\t10111 X\t24\t11000 Y\t25\t11001 Z\t26\t11010 ,\t27\t11011 -\t28\t11100 .\t29\t11101 ?\t30\t11110 @\t31\t11111 Editor‚Äã Pentacode Klartext Pentacode Schwarzweiss-Bild‚Äã Pixel-Editor +- 00000 00000 00000 00000 00000","keywords":""},{"title":"XOR-Verschl√ºsselung","type":0,"sectionRef":"#","url":"/Kryptologie/Symmetrisch/xor","content":"XOR-Verschl√ºsselung Da wir nun mit Bits arbeiten und nicht mehr mit Buchstaben, m√ºssen wir nach anderen M√∂glichkeiten zur Verschl√ºsselung suchen. Alphabetverschiebungen wie bei Caesar und Substitutionen sind nicht mehr geeignete Mittel, wenn nur die Zahlen 0 und 1 zur Verf√ºgung stehen. Nebst den bekannten Operationen, Addition, SUbtraktion, Multiplikation und Division, kann ein Computer auch noch weitere Operationen auf zwei Bin√§rzahlen anwenden. Eine solche Operation ist das XOR (Exklusives Oder, Exclusive OR): Exclusive or exclusive disjunction is a logical operation that is 1 if, and only if its arguments differ (one is 1, the other is 0).1 XOR kann auch zur Verschl√ºsselung verwendet werden. Dabei wird jeweils 1 Bit des Klartextes mit einem Bit des Schl√ºssels verrechnet. Das Ergebnis ist 1 Bit des Geheimtextes. Die Wahrheitstabelle sieht folgendermassen aus: Verschl√ºsselung‚Äã p\tk\tc = p XOR k0\t0\t0 0\t1\t1 1\t0\t1 1\t1\t0 p plain text (Klartext) k key (Schl√ºssel) c cipher (Verschl√ºsselt) Entschl√ºsselung‚Äã c\tk\tp = c XOR k0\t0\t0 1\t1\t0 1\t0\t1 0\t1\t1 Analog zu ROT13 gilt auch hier: Die Verschl√ºsselung ist identisch mit der Entschl√ºsselung, da Folgendes gilt: c¬†XOR¬†k=(p¬†XOR¬†k)¬†XOR¬†k=p\\ c \\text{ XOR } k = (p \\text{ XOR } k) \\text{ XOR } k = p¬†c¬†XOR¬†k=(p¬†XOR¬†k)¬†XOR¬†k=p Dies k√∂nnen Sie mit den Tabellen oben leicht √ºberpr√ºfen. Aufgabe XOR-Verschl√ºsselung Verschl√ºsseln Sie die Bitfolge mit dem angegebenen Schl√ºssel 10100 11101 10110 (Bitfolge des Klartexts) 00101 01010 11100 (Bitfolge des Schl√ºssels) Bitfolge des Geheimtexts‚Äã Aufgabe Textverschl√ºsselung mit XOR Sie erhalten von einer Kollegin folgende verschl√ºsselte Nachricht: 01010 00100 01010 11011 00000 Als Schl√ºssel haben Sie das Wort MACHT abgemacht. Codieren Sie den Schl√ºssel mit Pentacode Entschl√ºsseln Sie die bin√§re Nachricht (XOR) Klartext (entschl√ºsselte Bitfolge mit Pentacode zur√ºckverwandeln) Aufgabe Bildverschl√ºsselung mit XOR Zeichnen Sie ein 5x5-Pixel-Bild Pixel-Editor +- 00000 00000 00000 00000 00000 Verschl√ºsseln Sie die Bitfolge mit dem Schl√ºssel ABCDE. Pentacode Klartext Pentacode Wandeln Sie die resultierende Bitfolge wieder in ein Bild um (halten Sie das Bild fest). Wie viele weisse Felder hatte das Original bzw. das verschl√ºsselte Bild? Was geschieht, wenn Sie daraus mit Pentacode einen Text erstellen? SSR Quelle: Germundsson, Roger; Weisstein, Eric ‚Ü©","keywords":""},{"title":"Taschenrechner","type":0,"sectionRef":"#","url":"/Math/Taschenrechner","content":"Taschenrechner Erlaubte Taschenrechner TI-30 eco RS TI-30X IIS Winkel‚Äã Umrechnung mit Minuten/Sekunden‚Äã Diese Umrechnung ist gedacht f√ºr Winkeleinheiten (Dezimal zu Grad ¬∞, Minuten ', Sekunden '' und umgekehrt). DD steht f√ºr die Dezimaleinheit (Decimal Degree), DMS f√ºr Grad, Minuten, Sekunden (Degree, Minutes, Seconds). TI-30 eco RSTI-30X IIS DD‚ñ∫DMS‚Äã Beispiel: 2.66¬∞=2¬∞39‚Ä≤36‚Ä≤‚Ä≤2.66¬∞ = 2¬∞ 39' 36''2.66¬∞=2¬∞39‚Ä≤36‚Ä≤‚Ä≤ Eingabe: 2.66 &gt; 2nd &gt; DD‚ñ∫DMS DMS‚ñ∫DD‚Äã Beispiel: 2¬∞50‚Ä≤24‚Ä≤‚Ä≤=2.842¬∞ 50' 24'' = 2.842¬∞50‚Ä≤24‚Ä≤‚Ä≤=2.84 Eingabe: 2.5024 &gt; 2nd &gt; DMS‚ñ∫DD danger Minuten und Sekunden m√ºssen in obiger Schreibweise immer zwei Stellen aufweisen! 3¬∞8‚Ä≤9‚Ä≤‚Ä≤3¬∞ 8' 9''3¬∞8‚Ä≤9‚Ä≤‚Ä≤ muss also als 3.0809 &gt; 2nd &gt; DMS‚ñ∫DD eingegeben werden.","keywords":""},{"title":"IP-Adressen","type":0,"sectionRef":"#","url":"/Netzwerke-ef/IP-Adressen","content":"IP-Adressen Adressaufbau‚Äã IP-Adressen der Version 4 bestehen aus vier Zahlen, welche jeweils ein Byte gross sind. D.h. eine IP-Adresse umfasst 32 Bit. Die vier Zahlen werden in dezimaler Schreibweise, durch Punkte getrennt, geschrieben. Beispiel: 131.23.10.168 Somit kann jede der vier Zahlen in der IP-Adresse einen Wert zwischen 0 und 255 haben. Netzwerkteil und Hostteil der IP-Adresse‚Äã Eigentlich verstecken sich in einer IP-Adresse zwei Teile: Nertwerkteil Vorderer Teil der IP-Adresse. Er ist f√ºr alle Ger√§te im selben Netzwerk gleich und entspricht der Grundadresse von allen Ger√§ten, welche sich in diesem Netzwerk befinden. Hostteil Hinterer Teil der IP-Adresse. Er ist f√ºr jedes Ger√§t (auf englisch Host genannt) unterschiedlich. Es d√ºrfen keine zwei Ger√§te im selben Netz den selben Hostteil in ihrer IP-Adresse aufweisen. Netzmaske‚Äã Man sieht einer IP-Adresse nicht auf den ersten Blick an, wie weit der Netzwerkteil reicht und wo der Hostteil beginnt. Um das herauszufinden muss man die IP-Adresse zuerst in Ihrer bin√§ren Form (also 32 Bit) aufschreiben. Ausserdem braucht man eine weitere Information, die Netzmaske, auch Subnetzmaske genannt. Diese Netzmaske sieht zun√§chst wie eine IP-Adresse aus, d.h. sie besteht auch aus vier Zahlen von je einem Byte L√§nge. Auch sie wird dezimal geschrieben. Beispiel: 255.255.255.0 Ihre Besonderheit zeigt sich erst, wenn man die Zahlen in bin√§rer Form aufschreibt: 1111'1111.1111'1111.1111'1111.0000'0000 In der bin√§ren Darstellung sieht man, dass die Netzmaske immer mit auf 1 gesetzten Bits beginnt. An irgendeiner Stelle wechselt sie dann auf lauter 0. Merksatz: Links von dieser Stelle hat es in der Netzmaske ausschliesslich 1, rechts davon hat es nur 0. Wichtig: Die Stelle, wo der Wechsel von 1 zu 0 stattfindet kann mitten in einem Byte liegen. Er muss also nicht bei einem der Punkte in der dezimalen Schreibweise liegen. Schreibt man nun eine Netzmaske in ihrer bin√§ren Form auf und direkt darunter eine beliebige IP-Adresse, ebenfalls in bin√§ren Form, so markieren die 1 in der Netzmaske diejenigen Bits der IP-Adresse, welche den Netzwerteil bilden. Die 0 in der Netzmaske markieren dann den Hostteil. Beispiel: Netzmaske: 255.255.254.0 IP-Adresse: 13.162.25.4 Bin√§r: Netzmaske: 1111 1111.1111 1111.1111 1110.0000 0000 IP-Adresse: 0000 1101.1010 0010.0001 1001.0000 0100 # vvvv vvvv vvvv vvvv vvvv vvv Netzwerkteil: 0000 1101.1010 0010.0001 100 # v vvvv vvvv Hostteil: 1.0000 0100 Erg√§nzt man den Netzwerkteil mit lauter 0 zu einer vollen 32 Bit langen IP-Adresse, so erh√§lt man die Netzwerkadresse. Beispiel: Netzwerkteil: 0000'1101.1010'0010.0001'100 erg√§nzte Nullen: 0.0000.0000 resultierende Netzwerkadresse: 0000'1101.1010'0010.0001'1000.0000.0000 = 13.162.24.0 Die Netzwerkadresse wird gebraucht, wenn mehrere Netzwerke miteinander √ºber Router verbunden werden. Sie darf nicht als IP-Adresse f√ºr ein einzelnes Ger√§t verwendet werden! Suffixnotation f√ºr Netzmaske‚Äã Damit man eine IP-Adresse also richtig interpretieren kann, muss man auch die Netzmaske kennen. Dies ist aber umst√§ndlich. Weil die Netzmaske aber immer mit einem Block von lauter 1 beginnt, reicht es zu wissen, wieviele 1 dieser Block umfasst. Diese Anzahl kann man als Suffix bei einer IP-Adresse anh√§ngen. Beispiel: IP-Adresse: 13.162.25.4 Netzmaske: 255.255.254.0 Netzmaske bin√§r: 1111'1111.1111'1111.1111'1110.0000'0000 Anzahl 1: 23 IP-Adress mit Suffix: 13.162.25.4/23 Broadcastadresse‚Äã Auch bei den IP-Adressen gibt es Broadcastadressen (wie bei den MAC-Adressen). Sie werden gebraucht, wenn ein IP-Paket an alle Ger√§te innerhalb eines Netzwerkes gesendet werden sollen. Im Unterschied zur MAC-Adresse kann man aber auch ein IP-Paket an alle Ger√§te in einem anderen Netzwerk, als dem eigenen senden. Die Broadcastadresse findet man indem man in einer IP-Adresse alle Host-Bits auf 1 setzt. Beispiel: Bin√§r: Netzmaske: 1111'1111.1111'1111.1111'1110.0000'0000 IP-Adresse: 0000'1101.1010'0010.0001'1001.0000'0100 v vvvv vvvv Broadcastadresse: 0000'1101.1010'0010.0001'1001.1111'1111 = 13.162.25.255 Auch die Broadcastadresse darf nicht als Adresse f√ºr ein einzelnes Ger√§t verwendet werden! Neben den oben beschriebenen Broadcastadressen gibt es auch noch die Adresse 255.255.255.255. Diese kann als Broadcastadresse im eigenen lokalen Netzwerk gebraucht werden. Spezielle IP-Adressen‚Äã Die Adresse 127.0.0.1‚Äã Diese Adresse wird auch als Loopback-Adresse bezeichnet und kann genutzt werden, wenn ein Ger√§t ein IP-Paket an sich selber senden will. Die Adresse ist Teil des Netzwerkes mit der Adresse 127.0.0.0/8. Darin w√§ren eigentlich 224 Hostadressen verf√ºgbar. In der Regel wird aber nur 127.0.0.1 verwendet. Die Adresse 0.0.0.0‚Äã Diese IP-Adresse wird als Platzhalter verwendet. Je nach Ger√§t bedeutet sie &quot;ich habe noch gar keine g√ºltige IP-Adresse&quot;, oder sie steht f√ºr &quot;eine beliebige IP-Adresse&quot;, oder sie steht f√ºr &quot;das aktuelle Netzwerk&quot;. Multicast-Adressen‚Äã Der Adressebereich 224.0.0.0 bis 239.255.255.255 ist f√ºr das IP-Multicasting reserviert. Diese Adressen werden eingesetzt, um Pakete in einem LAN nicht nur an einen bestimmten Empf√§nger, sondern gleichzeitig an mehrere (aber nicht alle) Empf√§nger zu senden. Das wird beispielsweise f√ºr Streaming- und Gaming-Anwendungen gebraucht. Private Netzwerke‚Äã IP-Adresse im Internet m√ºssen weltweit eindeutig sein. Das heisst, es darf nicht sein, dass zwei Ger√§te die gleiche IP-Adresse haben. Wenn das der Fall w√§re k√∂nnten IP-Pakete nicht mehr richtig zugestellt werden. Solange man sich aber in einem privaten Netzwerk, z.B. einem Heimnetzwerk oder einem Firmennetzwerk, bewegt, w√ºrde es reichen, wenn die verwendeten IP-Adresse einfach in diesem Netzwerk eindeutig sind. In einem anderen privaten Netzwerk k√∂nnten die selben IP-Adressen verwendet werden, solange die Netzwerke voneinander isoliert sind. Zu diesem Zweck sind einige Adressbereiche f√ºr die Bildung von privaten Netzwerken reserviert: 10.0.0.0 bis 10.255.255.255 172.16.0.0 bis 172.31.255.255 192.168.0.0 bis 172.168.255.255 Alle anderen IP-Adressen sind √∂ffentliche Adressen. Network Address Translation (NAT)‚Äã Wie kann man nun private Netzwerke, welche potentiell die gleichen IP-Adressen verwenden trotzdem mit dem Internet verbinden? Dazu braucht man einen Router, der in der Lage ist die netzwerkinternen privaten IP-Adressen auf eine √∂ffentliche IP-Adresse abzubilden und umgekehrt. Man kann sich das so vorstellen, dass IP-Pakete, welche das private Netzwerk verlassen mit einer neuen √∂ffentlichen IP-Adresse versehen und durch das Internet geleitet werden. Umgekehrt erhalten Pakete aus dem Internet f√ºr den Weitertransport im privaten Netzwerk eine private IP-Adresse. Diese √úbersetzung von IP-Adressen wird Network Addresss Translation genannt und ist in allen Routern f√ºr Heimnetzwerke eingebaut.","keywords":""},{"title":"Vom LAN zum Internet","type":0,"sectionRef":"#","url":"/Netzwerke-ef/LAN","content":"Vom LAN zum Internet Verbindet man zwei oder mehrere Computer √ºber ein geeignetes Medium, so entsteht ein Computernetzwerk. In den Anf√§ngen war dieses Medium immer ein Kabel, heute k√∂nnen das auch Funkwellen sein. Je nach geografischer Ausdehnung des Netzwerkes spricht man von einem Local Area Network (LAN) oder einem Wide Area Network (WAN). Es gibt auch weitere Abstufungen, welche hier aber nicht n√§her betrachtet werden. Beispiele: Das Schulhausnetzwerk ist ein LAN Das Telefonnetzwerk ist ein WAN Topologien‚Äã Ein Kommunikationsmedium kann auf verschiedene Weisen genutzt werden. So kann man alle Computer √ºber ein und dasselbe Kabel verbinden, oder man kann zwischen allen Computern im Netzwerk ein separates Kabel legen. Beides hat Vor- und Nachteile. Je nach Art der Verbindung entsteht eine andere Topologie. Die gebr√§uchlichsten Topologien werden nachfolgend gezeigt. Bus‚Äã In der Bus-Topologie sind alle Computer √ºber ein und dasselbe Kabel verbunden. Die Computer teilen sich das Kabel also. Man spricht von einem shared Medium. Das hat zur Folge, dass immer nur ein Computer auf's Mal senden kann. Sonst w√ºrden sich die zur gleichen Zeit von verschiedenen Computern gesendeten Bits √ºberlagern und ausl√∂schen. Andererseits k√∂nnen alle Computer alle Nachrichten empfangen, auch diejenigen, welche gar nicht f√ºr Sie bestimmt sind. Bus Bus-Topologien mit Kabel sind heute veraltet. Es gibt aber ein allgegenw√§rtiges Pendant: Wireless-LANs (WLAN). Hier werden Funkwellen als Medium verwendet. Zwar gibt es verschiedene Funkkan√§le (Frequenzen), aber in einem Kanal kann zu einem bestimmten Zeitpunkt immer nur ein Sender auf Sendung sein. Andererseits k√∂nnen alle Stationen die gesendeten Nachrichten empfangen, auch wenn diese gar nicht an sie gerichtet sind. Stern‚Äã In kabelgebundnen Netzwerken sind heute meist Sterntopologien zu finden. Dabei ist jeder Computer √ºber ein eigenes Kabel mit einem zentralen Ger√§t, dem Switch, verbunden. Nachrichten von einem Computer werden vom Switch empfangen und auf Grund einer Adresse an den Zielcomputer weitergeleitet. Das hat den Vorteil, dass nur die beteiligten Computer und der Switch die Nachricht lesen k√∂nnen. Alle anderen Computer sehen die Nachricht nicht. Allerdings muss der Switch je nach Anzahl der angeschlossenen Computer sehr schnell sein, damit es zu keinen R√ºckstaus kommt. Star Ein Switch f√ºr den Anschluss von 24 Computern: Switch Das Internet, ein Verbund von LANs‚Äã Ein isoliertes LAN reicht aus, wenn die angeschlossenen Computer nur untereinander Nachrichten austauschen. Sobald aber Nachrichten zwischen zwei Computern in verschiedenen LANs fliessen sollen, braucht es ein Bindeglied zwischen den einzelnen LANs. Diese Bindeglieder sind die Router. Sie verbinden zwei oder mehrere LANs miteinander und vermitteln Nachrichten zwischen den angeschlossenen Netzwerken. Eine Nachricht muss, wenn n√∂tig, √ºber mehrere Router weitergereicht werden, bis Sie im richtigen Ziel-LAN und dort beim Zielcomputer abgeliefert wedrden kann. So entsteht schliesslich ein weltweiter Verbund von Netzwerken, das Internet. Internet Router sind Ger√§te und sehen praktisch gleich aus, wie Switches. Oft kommen auch kombinierte Ger√§te, welche z.B. einen WLAN-Access-Point (Antenne), einen Switch und einen Router im selbern Geh√§use vereinen. Typischer WLAN-Switch-Router f√ºr das Heimnetz: fritzbox-7490-big","keywords":""},{"title":"‚≠ê RSA Algorithmus","type":0,"sectionRef":"#","url":"/Kryptologie/Asymmetrisch/rsa","content":"‚≠ê RSA Algorithmus Der RSA Algorithmus ist der aktuell am weitesten verbreitete asymmetrische Verschl√ºsselungsalgorithmus und wird etwa f√ºr die SSL/TLS Verschl√ºsselung beim HTTPS-Protokoll verwendet. Der Algorithmus wurde 1977 von Ronald Rivest, Adi Shamir und Leonard Adlerman unter dem Namen RSA entwickelt und publiziert1. Funktionsweise‚Äã Die Funktionsweise basiert darauf, dass es leicht ist, c=me‚ÄÖmod‚ÄÖnc = m^{e}\\: mod\\: nc=memodn zu berechnen, aber praktisch unm√∂glich, ohne den privaten Schl√ºssel d die Umkehr¬≠funktion zu berechnen. n √∂ffentliche Zahl e √∂ffentlicher Schl√ºssel des Empf√§ngers d privater Schl√ºssel des Empf√§ngers m&lt;nm&lt;nm&lt;n Klartext c Geheimtext Verschl√ºsselung‚Äã Zur Verschl√ºsselung berechnet Bob den Geheimtext c: c=me‚ÄÖmod‚ÄÖnc=m^{e} \\: mod \\: nc=memodn Wobei mod der Ganzzahlige Rest bei der Division mit n darstellt. Beispiel: 13‚ÄÖmod‚ÄÖ4=113 \\: mod \\: 4=113mod4=1, da 134=3‚ÄÖRest‚ÄÖ1\\frac{13}{4} = 3\\: Rest\\: 1413‚Äã=3Rest1. Die Zahl nnn ist das Produkt von zwei ver¬≠schiedenen Primzahlen ppp und qqq, diese sind geheim. Wie k√∂nnen ppp und qqq geheim sein, wenn doch n=p‚ãÖqn = p\\cdot qn=p‚ãÖq √∂ffentlich ist? Dies beruht nur darauf, dass die Primfaktor¬≠zerlegung von nnn zu rechen¬≠aufwendig ist, da nnn sehr gross ist (z.B. 1024 Bit lang). F√ºr die Zahl e muss gelten ggt(e,œï(n))=1ggt(e, \\phi(n)) = 1ggt(e,œï(n))=1 Hierbei ist œï(n)=(p‚àí1)(q‚àí1)\\phi(n) = (p-1)(q-1)œï(n)=(p‚àí1)(q‚àí1) die Anzahl der zu n teiler¬≠fremden Zahlen, die kleiner als n sind. Entschl√ºsselung‚Äã Der Empf√§nger hat als privaten Schl√ºssel eine Zahl ddd mit d‚ãÖe‚ÄÖmod‚ÄÖœï(n)=1d\\cdot e\\: mod\\: \\phi(n) = 1d‚ãÖemodœï(n)=1 daher d‚ãÖe=k‚ãÖœï(n)+1d\\cdot e = k\\cdot \\phi(n) + 1d‚ãÖe=k‚ãÖœï(n)+1 f√ºr irgend ein k‚ààNok \\in \\N_{o}k‚ààNo‚Äã. Ist n=pqn = pqn=pq, so gilt nach einem Satz von Euler f√ºr alle Zahlen mmm mit m&lt;nm &lt; nm&lt;n und f√ºr alle nat√ºrlichen Zahlen kkk: mk‚ãÖœï(n)+1‚ÄÖmod‚ÄÖn=mmk\\cdot\\phi(n)+1\\: mod\\: n = mmk‚ãÖœï(n)+1modn=m Zur Ent¬≠schl√ºsselung berechnet der Empf√§nger also cd‚ÄÖmod‚ÄÖn=md‚ãÖe‚ÄÖmod‚ÄÖn=mk‚ãÖœï(n)+1‚ÄÖmod‚ÄÖn=m\\begin{aligned} c^{d}\\: mod\\: n &amp;= md\\cdot e\\: mod\\: n \\\\ &amp;= mk\\cdot \\phi(n) + 1\\: mod\\: n \\\\ &amp;= m \\end{aligned}cdmodn‚Äã=md‚ãÖemodn=mk‚ãÖœï(n)+1modn=m‚Äã und erh√§lt damit den Klartext mmm. ‚≠êÔ∏è RSA Schl√ºssell√§nge Die RSA Schl√ºssel haben standardm√§ssig 1024 oder 2048 bits, wobei Schl√ºssel mit 1024 bits mittelfristig als knackbar erachtet werden, so dass die Industrie heute oft mindestens 2048 bits voraussetzt. RSA in Python‚Äã Schl√ºsselerzeugung:‚Äã Als erstes w√§hlt man zwei Primzahlen ppp und qqq und berechnet daraus n=p‚ãÖqn = p \\cdot qn=p‚ãÖq und œÜ(n)=œÜ(p)‚ãÖœÜ(q)=(p‚àí1)‚ãÖ(q‚àí1)\\varphi(n) = \\varphi(p) \\cdot \\varphi(q) = (p-1) \\cdot (q-1)œÜ(n)=œÜ(p)‚ãÖœÜ(q)=(p‚àí1)‚ãÖ(q‚àí1) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) print(n, phi) Nun muss man ein Zahlenpaar eee und ddd finden, die bez√ºglich œÜ(n)\\varphi(n)œÜ(n) multiplikativ invers zueiunander sind. Das bedeutet, dass gilt: d‚ãÖemod œï(n)=1d \\cdot e \\mod \\phi(n) = 1d‚ãÖemodœï(n)=1 Das Zahlenpaar findet man mit dem sogenannten erweiterten euklidschen Algorithmus: p = 11 q = 13 n = p * q phi = (p-1) * (q-1) ### PRE def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 Erster Versuch: 3 hat kein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 3 d = euclidExtended(e, phi) Zweiter Versuch: 5 hat auch kein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 5 d = euclidExtended(e, phi) Dritter Versuch: 7 hat ein multiplikatives inverses bez√ºglich œÜ(n)\\varphi(n)œÜ(n). (Nebenbei: Der Grund, warum es mit 3 und 5 nicht geklappt hat: Die Zahlen m√ºssen zu œÜ(n)\\varphi(n)œÜ(n) teilerfremd sein, aber 120 ist durch 3 und 5 teilbar) p = 11 q = 13 n = p * q phi = (p-1) * (q-1) def euclidExtended(e, N): x1, x2, x3 = 1, 0, N y1, y2, y3 = 0, 1, e while True: if y3 == 0: print('Existiert nicht!') return None if y3 == 1: return y2 % N q = x3//y3 t1, t2, t3 = x1-q*y1, x2-q*y2, x3-q*y3 x1, x2, x3 = y1, y2, y3 y1, y2, y3 = t1, t2, t3 ### PRE e = 7 d = euclidExtended(e, phi) print(d)# =&gt; 103 Kurze √úberpr√ºfung: Ist das Produkt von eee und ddd modulo œÜ(n)\\varphi(n)œÜ(n) tats√§chlich 1? phi = 120 d = 103 e = 7 ### PRE print(e * d) # =&gt; 721 print((e * d) % phi) # =&gt; 1 Verschl√ºsselung‚Äã Der √∂ffentliche Schl√ºssel besteht nun aus den Zahlen eee und nnn. Diesen darf jeder wissen. Der private Schl√ºssel besteht aus den Zahlen ddd und nnn. Dieser muss geheimgehalten werden. Mit dem RSA-Verfahren lassen sich nun Zahlen von 0 bis (n-1) verschl√ºsseln. Um eine Nachricht mmm zu verschl√ºsseln, muss man folgendes berechnen: c=memod nc = m^e \\mod nc=memodn Resultat ist eine verschl√ºsselte Nachricht ccc e = 7 n = 143 ### PRE m = 141 c = m**e % n print(c) # =&gt; 15 Entschl√ºsseln‚Äã Um die verschl√ºsselte Nachricht ccc zu entschl√ºsseln, muss man folgendes berechnen: m=cemod nm = c^e \\mod nm=cemodn d = 103 n = 143 c = 15 ### PRE print(c**d % n) # =&gt; 141 Praktische Anwendung: Text mit RSA verschl√ºsseln:‚Äã Um einen Text mit RSA zu verschl√ºsseln hat man nun zahlreiche M√∂glichkeiten. Hier ist nur ein Beispiel: Zun√§chst wandeln wir jeden Buchstaben der Nachricht 'HALLO' in eine Zahl um: alphabet = 'abcdefghijklmnopqrstuvwxyz' for buchstabe in 'hallo': print(alphabet.find(buchstabe), end=',') Mit der Python-Funktion bin machen wir daraus Bin√§rzahlen in form eines strings, allerdings brauchen wir die zwei ersten Zeichen 0b, die Python vor jede Bin√§rzahl schreibt nicht und zwacken diese ab. Ausserdem f√ºllen wir die Zahl mit zfill immer mit Nullen auf 5 Stellen auf. Warum 5 Stellen? Weil man f√ºr 26 Buchstaben mindestens 5 Bit (= 32 M√∂glichkeiten) braucht: print(bin(7)) # das 0b brauchen wir nicht print(bin(7)[2:].zfill(5)) # abzwacken und mit 0 f√ºllen for number in [7, 0, 11, 11, 14]: print(bin(number)[2:].zfill(5), end=' ') Aus diesen 5-Stelligen Bin√§rzahlen machen wir 7-Stellige Bin√§rzahlen, indem wir die Bits einfach der Reihe nach lesen. Falls es nicht aufgeht, h√§ngen wir einfach noch Nullen dran. Warum 7 Bit? Weil f√ºr dieses Beispiel n=p‚ãÖq=11‚ãÖ13=143n = p \\cdot q = 11 \\cdot 13 = 143n=p‚ãÖq=11‚ãÖ13=143 ist, worin 127 (gr√∂sste Zahl mit 7 bit) gerade Platz hat. Das Resultat sind 4 Zahlen: for number in ['0011100', '0000101', '1010110', '1110000']: print(int(number, 2), end=', ') Diese vier Zahlen werden nun einzeln RSA-Verschl√ºsselt: e = 7 n = 143 for number in [28, 5, 86, 112]: print(number**e % n, end=', ') Am anderen Ende k√∂nnen die Zahlen wieder einzeln entschl√ºsselt werden: d = 103 n = 143 for number in [63, 47, 70, 18]: print(number**d % n, end=', ') Die Zahlen werden wieder bin√§r umgewandelt, diesmal auf 7 Stellen mit Nullen gef√ºllt: for number in [28, 5, 86, 112]: print(bin(number)[2:].zfill(7), end=' ') Aufgeteilt in 5-Stellige Bin√§rzahlen erhalten wir die urspr√ºnglichen Zahlen und daraus die urspr√ºnglichen Buchstaben: for number in ['00111', '00000', '01011', '01011', '01110']: print(int(number, 2), end=',') alphabet = 'abcdefghijklmnopqrstuvwxyz' for number in [7, 0, 11, 11, 14]: print(alphabet[number], end=' ') Sicherheit‚Äã Warum ist dies sicher? Dieses Beispiel w√§re nat√ºrlich nicht sicher, weil die Primzahlen viel zu klein sind, aber bei grossen Primzahlen ppp und qqq w√ºrde es viel zu lange dauern, diese Teiler nur aus nnn zu bestimmen. Um dies zu verdeutlichen hier eine naive Funktion factors, die die Teiler einer Zahl zur√ºckgibt, falls sie exisiteren. In der Zelle darunter wird diese Funktion benutzt, um Primzahlen zu finden indem einfach eine Zahl nach der anderen durchprobiert wird. Wird eine Primzahl gefunden, verdoppeln wir unseren Kandidaten und suchen von dort aus weiter. Am Anfang geht das ganze recht schnell, aber schon bald dauert es ewig lange, um die n√§chste Primzahl zu finden. Einerseits, weil es immer weniger Primzahlen gibt, aber andererseits wird die factors-Funktion immer langsamer. from browser import timer i = 1 def factors(n): for i in range(2, n): if n % i == 0: return i, n // i def check_next(): global i if factors(i) is None: print(i, end=', ') i = i * 2 i = i + 1 LIMIT = 200 for q in range(LIMIT): print(q) timer.set_timeout(check_next, 0.1) Quelle: techtarget.com ‚Ü©","keywords":""},{"title":"Netzwerkzugangsschicht","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Netzzugangsschicht","content":"Netzwerkzugangsschicht Innerhalb eines LAN tauschen die angeschlossenen Ger√§te Nachrichten in Form von Frames aus. Handelt es sich um ein kabelgebundenes LAN, wird auch von einem Ethernet-Frame gesprochen. Ethernet ist der Name der am h√§ufigsten verwendeten Netzwerktechnologie √ºber Kabel. Das folgende Bild zeigt den Aufbau eines Ethernet-Frames: ethernet_MAC_frame Quelle: https://www.dasheimnetzwerk.de/Lexikon/Uebertragungsmedien/Ethernet/Eintrag_Ethernet_Konzept.html Die einzelnen Bereiche des Frames haben folgende Bedeutung: Pr√§ambel und Start Frame Delimitter (SFD) Enth√§lt keine Information, sondern nur abwechselnde auf 0 und 1 gesetzte Bits. Dadurch k√∂nnen sich die Empf√§nger auf die √úbertragungsgeschwindigkeit des Senders einstellen. Ziel-MAC-Adresse Die lokale Adresse des Ger√§tes, an welches der Frame gerichtet ist. Quell-MAC-Adresse Die lokale Adresse des Ger√§tes, von welchem der Frame gesendet worden ist. Ether-Type Gibt an welches Protokoll in den Nutzdaten verwendet wird (also zum Beispiel IP). Nutzdaten Die eigentliche Nachricht. Im Falle des TCP/IP-Protokollstapels ein IP-Paket. Frame Pr√ºfsumme (Frame Check Sequence, FCS) Wird vom Sender berechnet und erlaubt dem Empf√§nger zu √ºberpr√ºfen, ob der Frame korrekt √ºbertragen und empfangen worden ist. In einem WLAN werden ebenfalls Frames verwendet. Darin sind grunds√§tzlich die gleichen Informationen, wie in einem Ethernet-Frame enthalten. Weitere, WLAN-spezifische Informationen kommen hinzu. MAC-Adressen‚Äã Innerhalb eines LANs werden MAC-Adressen zur Adressierung von einzelnen angeschlossenen Ger√§ten verwendet. MAC-Adressen sind 6 Bytes lang und werden normalerweise in hexadezimaler Form geschrieben. Beispiele: A8-6D-AA-C6-66-00 00:50:56:C0:00:08 Als Trennzeichen zwischen den einzelnen Bytes findet man sowohl -, wie auch :. Jeder Netzwerkadapter (die Elektronik, welche es zum Anschluss am Netzwerk braucht) auf der Welt hat eine eigene eindeutige MAC-Adresse. Das heisst, eine bestimmte MAC-Adresse kommt weltweit nur einmal vor. Die MAC-Adresse ist im Netzwerkadapter vom Hersteller fest eingestellt. Broadcast-MAC-Adresse‚Äã Normalerweise sendet ein Ger√§t einen Frame immer an einen bestimmten Empf√§nger. Nur dieser soll den Frame verarbeiten. Es gibt aber F√§lle, wo ein Ger√§t einen Frame an alle im LAN angeschlossenen Empf√§nger sen den will. Ein solcher Vorgang wird Broadcast genannt. Dazu muss im Frame die Broadcast-MAC-Adresse als Zieladresse gesetzt werden. Diese lautet: FF-FF-FF-FF-FF-FF Das Adress-Resolution-Protocol (ARP)‚Äã Jeder Frame muss mit der richtigen Empf√§nger-MAC-Adresse angeschrieben sein. Empf√§nger ist immer ein Ger√§t, welches im gleichen lokalen Netzwerk liegt. Entweder handelt es sich um das eigentliche Ziel des IP-Pakets (z.B. ein Webserver im gleichen Netzwerk) oder um den Standardgateway (auch als Router bezeichnet), der dann das IP-Paket in ein anderes Netzwerk weiterleiten wird. In beiden F√§llen weiss das sendende Ger√§t vorerst nur die IP-Adresse des Empf√§ngers. F√ºr das sendende Ger√§t stellt sich also die Frage, wie die MAC-Adresse des Ger√§tes, an welches der Frame gesendet werden muss, herausgefunden werden kann. Dazu dient das Address-Resolution-Protocol (ARP). Das Prinzip ist einfach: Wenn man sein Bio-Buch verloren hat und es gerne wieder haben m√∂chte, so ruft man in in die Runde &quot;Wer hat mein Bio-Buch gesehen?&quot;. Man sendet also eine Nachricht an alle Personen in der Runde, was nichts anderes, als ein Broadcast ist. Diejenige Person, welche das Bio-Buch gesehen hat, meldet sich dann und sagt &quot;Ich habe das Buch gesehen. Es ist dort und dort.&quot; Genau so funktioniert das ARP-Protokoll. Der Sender sendet zuerst einen Frame an alle mit der Frage, wer eine bestimmte IP-Adresse hat und welche MAC-Adresse dazu geh√∂rt. Der betroffene Empf√§nger meldet sich dann und gibt sein MAC-Adresse bekannt.","keywords":""},{"title":"2. Protokolle","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Protokolle","content":"2. Protokolle Grundlagen‚Äã Ein Protokoll definiert, wie zwei Einheiten miteinander kommunizieren. Nur wenn beide Einheiten sich an das vereinbarte Protokoll halten, kann ein sinnvoller Informationsaustausch stattfinden. Dies gilt unabh√§ngig davon, ob es sich bei den beteiligten Einheiten um einzelne Menschen, ganze Staaten, oder Maschinen handelt. An Stelle von Einheiten spricht man oft auch von den Parteien, welche miteinander kommunizieren. Ein Protokoll besteht aus einer Menge von m√∂glichen Nachrichten und aus einem Satz von Regeln, welche die m√∂glichen Abfolgen der Nachrichten festlegen. Beispiel aus dem Alltag, Begr√ºssung zwischen zwei Menschen: A: &quot;Guten Tag.&quot; B: &quot;Guten Tag.&quot; A: &quot;Wie geht es Ihnen?&quot; B: &quot;Danke gut.&quot; Solche Abl√§ufe werden oft in Sequenzdiagrammen dargestellt: Die vom Protokoll vorgegebene Abfolge muss eingehalten werden. H√§lt sich eine Partei nicht daran, so entsteht Verwirrung: Genau so wichtig, wie die Abfolge, ist ein korrekter Inhalt der Nachrichten: W√§hrend zwei Menschen im obigen Dialog noch knapp einen Sinn erkennen k√∂nnen, ist das f√ºr Maschinen anders. Diese sind darauf angewiesen, dass die Nachrichtinhalte bis auf's letzte Bit korrekt sind. Nachrichten von Netzwerkprotokollen m√ºssen deshalb eindeutig und unmissverst√§ndlich definiert sein. Nachrichtenformat‚Äã Eine Nachricht ist zun√§chst einfach ein Abfolge von Bytes. √úblicherweise werden diese Bytes in drei Teile aufgeteilt: Header Der Header enth√§lt Informationen, welche f√ºr das Protokoll von Bedeutung sind, z.B. Absenderadresse und Zieladresse einer Nachricht. Payload Die Payload umfasst den Teil einer Nachricht, welcher f√ºr das Protokoll zu welchem die Nachricht geh√∂rt, nicht relevant ist. Die Payload bietet die M√∂glichkeit, Informationen zu transportieren, welche dann auf einer h√∂heren Ebene von Bedeutung sind. Trailer Der Trailer ist wiederum Teil des Protokolls, zu welchem die Nachricht geh√∂rt. Er enth√§lt zum Beispiel Informationen, zur √úberpr√ºfung, ob die Nachricht vollst√§ndig und korrekt √ºbertragen wurde (z.B. Quersummen √ºber alle Bytes der Nachricht). Man kann sich das wie ein Brief vorstellen: Brief In manchen Nachrichten k√∂nnen Payload und Trailer auch fehlen. Das h√§ngt ganz vom Protokoll ab. Inerhalb des Headers und des Trailers bilden mehrere aufeinander folgende Bytes sogenannte Informationselemente. Zum Beispiel besteht eine IP-Adresse aus vier aufeinander folgenden Bytes. Nachrichtenabfolge‚Äã Um die Regeln f√ºr die Nachrichtenabfolge zu definieren wird oft eine Zustandsmachine, auch endlicher Automat genannt, verwendet. Dies ist ein Modell f√ºr das Verhalten der kommunizierenden Parteien. Eine Partei befindet sich immer in einem bestimmten Zustand. In diesem ist sie bereit nur ganz bestimmte Nachrichten zu empfangen. Alle anderen Nachrichten ignoriert sie. Wenn eine g√ºltige Nachricht empfangen wird, so wechselt die Partei in einen anderen Zustand und kann gleichzeitig eine Nachricht zur√ºcksenden. Ein solcher Zustandswechsel wird als Transition bezeichnet. Am Anfang befindet sich die Partei in einem Startzustand . Man kann solche Zustandsmaschinen durch Zustandsdiagramme darstellen. Beispiel f√ºr die Kommunikation zwischen Menschen, Zustandsdiagramm f√ºr Partei A: Startzustand Der schwarze Punkt Endzustand Der weisse Punkt . In diesem ist keine weitere Kommunikation m√∂glich. Die Zustandsmaschine m√ºsste dazu neu gestartet werden. Zwischenzust√§nde Die K√§stchen entsprechen Transitionen Die Pfeile sind die m√∂glichen Transitionen, wobei jeweils steht, durch welche empfangene Nachricht die Transition ausgel√∂st wird und, nach dem /, welche Nachricht allenfalls als Antwort gesendet wird. Vollst√§ndigkeit Das Diagramm ist nicht vollst√§ndig. Die mit ... markierten Zwischenzust√§nde sollen dies andeuten.","keywords":""},{"title":"1. Webserver und HTTP","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Server","content":"1. Webserver und HTTP Ziele Sie k√∂nnen mit Python einen Webserver erstellen Sie k√∂nnen die dar√ºber erreichbaren Webseiten (minimal) gestalten Sie haben ein Tool zur Analyse des Netzwerkverkehrs auf Ihrem Notebook installiert Sie k√∂nnen mit diesem Tool den HTTP-Verkehr zwischen Browser und Server analysieren Sie k√∂nnen am Beispiel von HTTP die Funktionsweise von Protokollen, insb. von TCP erkl√§ren Sie k√∂nnen erkl√§ren, wo die Sicherheitsl√ºcken in HTTP liegen und was man dagegen tut","keywords":""},{"title":"Routing","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Routing","content":"Routing Eine der wichtigsten Aufgaben der Internetschicht ist, das Vermitteln von Paketen duch die verbundenen Netzwerke hindurch und zwar vom Augangsort bis zum Ziel. Jedes Ger√§t, egal ob Computer oder Router, muss dies tun, wenn es ein Paket senden will. Man spricht vom Routing. Der Ablauf, den das Ger√§t dabei im wesentlichen befolgt, umfasst folgende Schritte: Um diese Schritte durchzuf√ºhren, braucht jedes Ger√§t Informationen, welche in der Routingtabelle des Ger√§tes zu finden sind. Routingtabellen‚Äã Alle Routingtabellen sind im Grunde genommen gleich aufgebaut:\\ Jede Zeile darin entspricht einer Route √ºber welche ein Paket weitergeleitet werden kann. Eine Zeile muss dehalb folgende Informationen enthalten: Routenziel, welches √ºber diese Route erreicht werden kann Falls das Routenziel nicht im eigenen Netzwerk liegt, die IP-Adresse des Gateways √ºber welchen man aus dem eigenen Netzwerk herauskommt Identifikation des Netzwerkadapters (Schnittstelle) am eigenen Ger√§t, √ºber welchen das IP-Paket entweder direkt an das Routenziel (wenn dieses im eigenen Netzwerk liegt), oder an den Gateway gesendet werden kann Weil es m√∂glich ist mehrere Routen zum selben Ziel zu haben, wird jede Route noch mit einer Metrik versehen, anhand welcher dann entschieden wird, welches die optimale (z.B. schnellste) Route zum Ziel ist. F√ºr das Ziel einer Route hat man mehrere M√∂glichkeiten: Das Routenziel ist eine Host-Adresse, also ein ganz bestimmtes Ger√§t irgendwo im Internet (eigenes LAN, oder auch ein fremdes LAN). Das Routenziel ist eine Netzwerk-Adresse. Eine solche Route kann gebraucht werden, damit man nicht f√ºr alle Ger√§te in einem bestimmten Netzwerk eine eigene Route mit Host-Adresse einrichten muss. Die Standardroute (Default-Route), markiert durch die IP-Adresse 0.0.0.0. Diese Route wird verwendet, wenn f√ºr ein bestimmtes Ziel keine passendere Route gefunden wird. Wichtig:Um beim Routenziel zu wissen, ob es sich um eine Netzwerk- oder Host-Adresse handelt, muss man auch die Netzmaske kennen. Im ersten Fall ist das eine herk√∂mmliche Netzmaske mit einer Reihe 0 am Ende. Im zweiten Fall ist das die Netzmaske 255.255.255.255 (also lauter 1 und keine 0). Beispiele‚Äã Routing-Tabelle eines Raspberry-Pi (Linux ): # sudo apt install net-tools route -n Routingtabelle Raspberry PI Routing-Tabelle eines Windows-Notebooks: # Powershell route PRINT Routingtabelle Windows ","keywords":""},{"title":"2. HTML","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Server/html","content":"2. HTML HTML Logo Webseiten sind Textdateien, deren Inhalt in der Markup Sprache HTML geschrieben ist. Sie haben im Snippet ein Beispiel in der Datei hello.html. HTML Hypertext Markup Language HTML ist keine Programmiersprache - sie definiert lediglich in einem f√ºr den Computer eindeutigen Art und Weise die Struktur eines Dokuments. √Ñhnlich wie Markdown werden hier Textstellen mit sog. Tags markiert. Dadurch kann man festlegen, ob eine bestimmter Text als √úberschrift, als eigener Absatz, in einer Tabelle, etc. dargestellt werden soll. Einige Tags sind Paare aus einem √∂ffnenden und einem schliessenden Tag, andere stehen f√ºr sich alleine. Tag\tMarkdown\tBeschreibung&lt;h1&gt;√ú 1&lt;/h1&gt;\t# √ú 1\t√úberschrift 1. Ordnung &lt;h2&gt;√ú 2&lt;(h2&gt;\t## √ú 2\t√úberschrift 2. Ordnung &lt;h3&gt;√ú 3&lt;(h3&gt;\t### √ú 3\t√úberschrift 3. Ordnung &lt;p /&gt;\tLeerzeile\tAbsatz &lt;br /&gt;\tDoppelte Leerzeile\tZeilenumbruch &lt;b&gt;fett&lt;/b&gt;\t**fett**\tFettschrift &lt;i&gt;kursiv&lt;/i&gt;\t*kursiv*\tKursivschrift &lt;a href=&quot;URL&quot;&gt;Linktext&lt;/a&gt;\t[Linktext](URL)\tLink &lt;img src=&quot;URL&quot; /&gt;\t![](URL)\tBild Eine gute Einf√ºhrung und Referenz in HTML finden Sie unter üëâ https://www.w3schools.com/html/default.asp. Playground Hier k√∂nnen Sie einzelne Tags ausprobieren (achtung, wird nicht gespeichert): Live Editor &lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den &lt;b&gt;SimlpeWebServer&lt;/b&gt; get√§tigt.&lt;/p&gt; &lt;h2&gt;Todos vor den Ferien&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;EF Informatik&lt;/li&gt; &lt;li&gt;Nach Hause&lt;/li&gt; &lt;li&gt;Fertig...&lt;/li&gt; &lt;/ul&gt; &lt;img src=&quot;https://www.gbsl.ch/wp-content/uploads/2020/07/Header-GBSL-1170x450.jpg&quot; width=&quot;400&quot;/&gt; &lt;/body&gt; &lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den &lt;b&gt;SimlpeWebServer&lt;/b&gt; get√§tigt.&lt;/p&gt; &lt;h2&gt;Todos vor den Ferien&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;EF Informatik&lt;/li&gt; &lt;li&gt;Nach Hause&lt;/li&gt; &lt;li&gt;Fertig...&lt;/li&gt; &lt;/ul&gt; &lt;img src=&quot;https://www.gbsl.ch/wp-content/uploads/2020/07/Header-GBSL-1170x450.jpg&quot; width=&quot;400&quot;/&gt; &lt;/body&gt; Ergebnisse Loading... Aufgabe Erstellen Sie eine zweite Webseite in Ihrem Server, mit einem kleinen Steckbrief von Ihnen. (Hilfestellung: üëâ https://www.w3schools.com/html/default.asp). Verlinken Sie Ihre eigene Seite in der schon bestehenden Seite hello.html, indem Sie dort einen Link auf Ihre eigene Seite einf√ºgen. Wie man das macht sehen Sie hier üëâ https://www.w3schools.com/html/html_links.asp. Testen Sie Ihre Webseite im Browser. Machen Sie einen Screenshot von Ihrer Seite und laden Sie diese als Antwort hoch.","keywords":""},{"title":"3. Webseiten verf√ºgbar machen","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Server/share","content":"3. Webseiten verf√ºgbar machen Webserver@ Damit Sie auf die Webseiten Ihrer Kolleginnen und Kollegen zugreifen k√∂nnen m√ºssen zwei Bedingungen erf√ºllt sein: Das WLAN muss zulassen, dass die mit ihm verbundenen Computer untereinander Nachrichten austauschen k√∂nnen. Das ist im BYOD-WLAN aus Sicherheitsgr√ºnden nicht der Fall. Sie m√ºssen die IP-Adresse des Computers kennen, auf welchem der Webserver l√§uft. Aufgaben Um die erste Bedingung zu erf√ºllen, m√ºssen Sie Ihr Notebook mit dem WLAN EFIN verbinden. √ñffnen Sie nun auf Ihrem Notebook eine Powershell (Windows) oder ein Terminal (Mac). ipconfig ifconfig Suchen Sie in der Antwort nach der IP-Adresse f√ºr den WLAN-Adapter auf Ihrem Notebook und schreiben Sie diese Adresse an die Tafel. Geben Sie nun in Ihrem Browser als URL die IP-Adresse eines Notebooks im Netzwerk EFIN ein, gefolgt von der Port-Adresse 8000 ein. Z.B.http://192.168.0.12:8000Was sehen Sie? Versuchen Sie nun in Ihrem Browser auf die eigentliche Webseite Ihrer Kollegin / Ihres Kollegen zuzugreifen. Wie lautet die korrekte URL?","keywords":""},{"title":"Schichtenmodell","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Schichtenmodell","content":"Schichtenmodell Um eine Nachricht √ºber das Internet zu √ºbertragen m√ºssen die beteiligten Netzwerke eine ganze Reihe von Aufgaben erf√ºlllen: Es braucht ein √úbertragungsmedium. Dies k√∂nnen Kupferkabel, Glasfasern, oder Funkwellen sein. Die einzelnen Bits einer Nachricht m√ºssen in Signale umgewandelt werden, welche √ºber das gew√§hlte Medium, √ºbertagen werden k√∂nnen. Bei einem Kupferkabel k√∂nnen dies z.B. verschiedenen Spannungsniveaus sein, welche dann eine 1 oder eine 0 bedeuten. Da bei der √úbertragung von Signalen √ºber ein Medium immer Fehler auftreten k√∂nnen, welche dazu f√ºhren, dass ein Empf√§nger statt der gesendeten 1 eine 0 empf√§ngt (oder umgekehrt), muss eine Fehlererkennung und -korrektur vorgesehen werden. Das kann man z.B. tun, indem man mit jeder Nachricht Zusatzinformationen, wie Pr√ºfsummen, oder Parit√§tsbits, sendet, mit welcher der Empf√§nger dann √ºberpr√ºfen kann, ob die empfangene Nachricht korrekt ist. Wenn an einem Medium mehrere Sende- und Empfangsstationen angeschlossen sind (z.B. in einem WLAN), braucht es eine M√∂glichkeit, die Nachrichten an eine bestimmte Station zu senden. Dazu werden Adresssen verwendet. Werden schliesslich verschiedene lokale Netzwerke (kabelbasiert LANs und funkbasierte WLANs) zu einem grossen Netzwerk, wie dem Internet zusammengeschlossen, so m√ºssen Nachrichten durch dieses √ºbergeordnete Netzwerk vermittelt (man sagt geroutet) werden. Dazu braucht es eine von den darunterligenden Netzwerken unabh√§ngige Adressierungsart f√ºr die Nachrichten. In einem Netzwerk von Netzwerken, wie dem Internet k√∂nnen auch ganze Nachrichten verloren gehen oder fehlgeleitet werden. Damit trotzdem eine sichere Kommunikationsverbindung zwischen zwei Endpunkten gew√§hrleistet werden kann, m√ºssen Nachrichten innerhalb einer Verbindung durchnnummeriert werden. Im Verlustfall kann dann eine Wiederholung einer Nachricht angefordert werden. Nachrichten m√ºssen an den Endpunkten unterschiedlichen Diensten zugewiesen werden k√∂nnen. Dazu braucht es wieder eine Unterscheidungsm√∂glichkeit in Form einer dritten Addressierungsebene. Schliesslich m√ºssen die Nachrichten von den beteiligten Anwendungen an den Endpunkten verstanden und interpretiert werden k√∂nnen. Dazu braucht es anwendungsspezifische Protokolle, wie HTTP. Wie immer, wenn etwas kompliziert wird, kommt die altbew√§hrte Strategie Teile und herrsche zur Anwendung. Im Falle der Kommunikation bedeutet dies, dass die obigen Aufgaben auf verschiedene Schichten aufgeteilt werden. Jede Schicht enth√§lt eigene Protokolle, welche f√ºr die Erledigung der Aufgaben zust√§ndig sind. So entsteht ein Stapel von Protokollen, oder ein Schichtenmodell. Das TCP-IP-Schichtenmodell‚Äã Das TCP-IP-Schichtenmodell umfasst vier Schichten: Anwendungs¬≠schicht Web, E-Mail Daten Transport¬≠schicht √úber¬≠tragungs¬≠steuerungs¬≠protokoll ¬≠(TCP) TCP+Port Daten Vermittlungs¬≠schicht Internet¬≠protokoll ¬≠(IP) IP-Adresse TCP+Port Daten Physikalische Schicht WLAN, Ethernet MAC-Adresse IP-Adresse TCP+Port Daten TCP-IP-Stack Netzzugangsschicht Sie sorgt daf√ºr, dass Daten zwischen zwei durch ein Medium (z.B. Kabel oder Funk) direkt verbunden Ger√§ten zuverl√§ssig √ºbetragen werden k√∂nnen. Dazu geh√∂rt: Definition des physikalischen Mediums (Ethernet: Kabel, Stecker, Spannungen, etc.; 802.11: Funkfrequenzen, Kan√§le, etc.). Aufbereitung und √úbertragung der Bits und Signale √ºber das Medium. Bilden von Frames (Gruppe von Bytes). Jede Nachricht auf dieser Schicht wird als ein Frame √ºbertragen. Feststellen von √úbertragungsfehler in Frames. Regeln des Zugangs zum Medium, wenn gleichzeitig mehrere am Medium angeschlossene Ger√§te eine Nachricht senden wollen. Definieren eines Adressierungsschemas f√ºr die Adressierung von Frames (Mac-Adressen). Protocol f√ºr die √úbersetzung von Adressen der Internetschicht auf Adressen der Netzzugangsschicht (Address Resolution Protocol, ARP). Typische Ger√§te auf dieser Schicht sind Netzwerkadapter, WLAN-Adapter, Switches und WLAN-Acess-Points. Internet-Schicht Sie erm√∂glicht, dass mehrere lokale Netzwerke miteineinander zu einem grossen, √ºbergeordneten Netzwerk, dem Internet, verbunden werden k√∂nnen und das Nachrichten durch dieses grosse Netzwerk hindurch geleitet werden k√∂nnen. Dazu geh√∂rt: Bilden von Paketen. Definieren eins von den darunterliegenden Netzwerken unabh√§ngigen Adressierungsschemas (IP-Adressen). Finden eines Wegs f√ºr Nachrichten von A nach B durch die darunterliegenden Netzwerke. Weiterleiten von Paketen entsprechend dem korrekten Weg von A nach B. Weiterleiten beudetet hier das √úbergeben des Pakets an die darunterliegende Netzwerkzugangsschicht. Typische Ger√§te auf dieser Schicht sind Router. Transportschicht Sie erm√∂glicht den End-zu-End-Transport von Nachrichten zwischen zwei Endpunkten. Als Endpunkte sind hier Anwendungen, wie Browser und Webserver-Programm gemeint. Die Transportschicht erlaubt auch den Aufbau von logische Verbindungen zwischen solchen Endpunkten, innerhalb von welchen dann eine sichere √úbertragung von Nachrichten stattfindet. Dazu geh√∂rt: Bilden von Segmenten. So heissen die Nachrichten, welche √ºber eine logische Verbindung √ºbetragen werden. Definieren eines Adressierungsschemas, um logische Verbindungen auseinanderhalten zu k√∂nnen (Ports). Bei grossen Nachrichtem die Aufteilung in kleinere Teile, welche dann in ein Paket der Internetschicht passen. Dieser Vorgang heisst Segmetierung. Daher der Name Segment. Beim Empfang der Segmente die √úberwachung, dass alle Segmente l√ºckenlos empfangen und in der richtigen Reihenfolge wieder zusammengesetzt werden. Auf dieser Schicht gibt es keine typischen Ger√§te ausser den Computer selber. Anwendungsschicht Sie enth√§lt nun spezialisierte Protokolle f√ºr bestimmte Anwendungen. Dazu geh√∂ren: Das Hypertext Transfer Protocol (HTTP) f√ºr das World-Wide-Web. Das Domain Name System (DNS) als Dienst zur Aufl√∂sung von Domain-Namen, wie www.google.com zu einer IP-Adresse. Das Dynamic Host Configuration Protocol (DHCP), √ºber welches eine Ger√§t beim Aufstarten eine freie IP-Adresse abrufen kann, die es dann brauchen darf. Das Internet Message Access Protocol (IMAP), √ºber welches ein Mail-Client (z.B. outlook) auf einen Mail-Server zugreifen kann. Die Transport Layer Security (TLS), welche zur Ver- und Entschl√ºsselung der Nachrichten gebraucht wird. Dieses Protocol ist insofern speziell, als es jeweils zwischen das Anwendungsprotokoll und das TCP-Protokoll der Transportschicht geschaltet wird. So ergibt z.B. HTTP + TLS = HTTPS. Auf dieser Schicht gibt es keine typischen Ger√§te ausser den Computer selber. Kapselung‚Äã Wenn eine Anwendung, z.B. der Browser, Daten √ºber das Netzwerk versenden will, so nutzt sie dazu ein passendes Protokoll der Anwendungsschicht. Die Daten werden in eine Nachricht des betreffenden Protokolls verpackt, was darauf hinaus l√§uft, dass den eigentlichen Daten weitere Informationen vorangestellt werden. Diese zus√§tzlichen Informationen werden als Header bezeichnet. Die Anwendungsschicht muss nun zur √úbertragung auf die darunterliegende Transportschicht zur√ºckgreifen. Hier werden der Nachricht aus der Anwendungsschicht weitere Informationen vorangestellt. Das geht immer so weiter, bis man auf der untersten Schicht, der Netzzugangsschicht angelangt ist. Das von der Internetschicht zur √úbertragung anvertraute IP-Packet wird nochmals mit einem Header versehen. Hinzu kommen nun auch noch Informationen am Schluss, welche auf der Empf√§ngerseite gebraucht werden, um festzustellen, ob es bei der √úbertragung einen Fehler gegeben hat. Dies ist der Trailer. Jetzt ist alles vorbereitet, um die Nachricht effektiv √ºber die Leitung oder die Funkwellen zu lassen. D.h. erst jetzt werden die Bits, eines um das andere, √ºbertragen. Encapsulation","keywords":""},{"title":"1. Webserver mit Python","type":0,"sectionRef":"#","url":"/Netzwerke-ef/Server/webserver","content":"1. Webserver mit Python @ Server, Client, Nachrichten, Prokolle - Die Grundlagen‚Äã Ein Webserver ist ein Computer, der darauf wartet, dass √ºber das Netzwerk Anfragen f√ºr Webseiten eintreffen, welche auf dem Webserver gespeichert sind. Der Webserver sendet dann die angefragten Seiten als Antwort zur√ºck an den Computer, von welchem die Anfrage stammt. Server Ein Computer, welcher auf Anfragen wartet und diese beantwortet. Client Ein Computer, welcher Anfragen an einen Server sendet. Request Eine Nachricht, welche vom Client an den Server gesendet wird. Response Die Antwort auf einen Request, welche vom Server an den Client gesendet wird. Man spricht bei Request und Response auch von Nachrichten, welche zwischen Client und Server ausgetauscht werden. Sowohl auf dem Client, wie auf dem Server braucht es Programme, welche die ausgetauschten Nachrichten verarbeiten k√∂nnen. Im Fall vom Web sind das der Browser auf der Clientseite und das Webserver-Programm auf der Serverseite. Webseiten sind Dateien, deren Inhalt in der Sprache HTML (Hypertext Markup Language) geschrieben ist. HTML dient dabei dazu die Darstellung der Webseite festzulegen (√úberschriften, Abschnitte Tabellen, Links auf andere Seiten, etc.). Damit sich Client und Server gegenseitig verstehen, m√ºssen die Nachrichten in einer genau festgelegten Reihenfolge und mit genau definiertem Inhalt ausgetauscht werden. Diese Vorschriften nennt man ein Protokolle (siehe auch üëâ 2. Protokolle). Im Falle des Webs heisst das Protokoll HTTP (Hypertext Transfer Protocol). HTTP Hypertext Transfer Protocol Das folgende Sequenzdiagramm verdeutlicht diese Zusammenh√§nge. Es zeigt die Reihenfolge der ausgetauschten Nachrichten f√ºr die Abfrage einer Webseite aus dem Browser heraus. Beachten Sie, dass der Browser nur ein Programm ist, welches auf dem Client-Computer l√§uft. Das entsprechende Programm auf der Serverseite ist nicht separat dargestellt. Statt dessen ist die Datei dargestellt, welche auf dem Server gespeichert ist und deren Inhalt zum Client zur√ºckgesendet wird. Webserver mit Python‚Äã Python stellt eine Library zur Verf√ºgung, mit welcher man ein einfaches Webserver-Programm erstellen kann. Ein solches ist in folgendem Snippet enthalten. Dieses Programm empf√§ngt Requests f√ºr HTML-Dateien und sendet den Inhalt dieser Dateien zur√ºck. Im Moment ist die Seite hello.html die einzige Seite, welche vom Webserver zur√ºckgeschickt werden kann. Da auf einem Server gleichzeitig verschiedene Dienste angeboten werden k√∂nnen (z.B. k√∂nnte auch noch ein E-Mail-Server laufen), muss man f√ºr jeden Dienst eine Port-Adresse festlegen, unter welcher der Dienst auf ankommende Anfragen horcht. F√ºr unseren einfachen Webserver wird im Snippet der Port mit der Nummer 8000 festgelegt. IP-Adresse Die IP-Adresse ist eine eindeutige Adresse, welche jedem Computer (somit auch jedem Server) im Internet zugewiesen wird. Localhost Lokale IP-Adresse, welche auf dem eigenen Computer verweist. Sie ist immer 127.0.0.1. Port Ein Port ist eine Nummer, welche den Dienst auf einem Computer identifiziert. Dadurch kann ein Computer mehrere Dienste gleichzeitig anbieten. URL / URI Universal Resource Locator / Universal Resource Identifier Um von einem Browser aus die Seite hello.html anzeigen zu lassen, muss man im Browser folgende URL (Universal Resource Locator) eingeben: http://Server-IP-Adresse:8000/Pfad/hello.html Hello Wenn Sie dies sehen, so haben Sie eine erfolgreiche Abfrage auf den SimlpeWebServerget√§tigt. Die IP-Adresse des Servers k√∂nnte zum Beispiel 10.0.123.4 sein. Der Pfad entspricht der Ordnerreihenfolge, ausgehend vom Workspace in VSC, in dem die Datei hello.html gespeichert ist, z.B. 2258084. Python Webserver Ordner EF-Informatik/docs/Netzwerke/webserver Speichern Sie folgende Snippets in Ihrem Repository unter dem Ordner docs/Netzwerke/webserver ab. Snippets SimpleWebServer.py loading... See full example on GitHub hello.html loading... See full example on GitHub √ñffnen Sie auf Ihrem Notebook einen Browser und versuchen Sie die Seite hello.html anzuzeigen. Dazu m√ºssen Sie in Ihrem Browser die richtige URL eingeben. Weil Ihr Browser auf dem selben Computer l√§uft, wie der Webserver, k√∂nnen Sie statt der IP-Adresse Ihres Computers auch localhost oder die lokale IP-Adresse 127.0.0.1 schreiben. Beim Pfad m√ºssen Sie darauf achten, in welchen Ordner die Datei hello.html gespeichert ist. Wenn Sie erfolgreich waren, machen Sie einen Screenshot von Ihrem Browser, in welchem man die URL und die Seite sieht und laden Sie diesen als Antwort hoch (die URL soll erkennbar sein). Nun ist dies wohl eine recht umst√§ndliche URL. Jenachdem aus welchem Ordner heraus das Python-Skript gestartet wurde, √§ndert sich die URL. Um diese m√∂glichst kurz zu halten, kann man das Skript direkt im Ordner docs/Netzwerke/webserver ausf√ºhren. Dazu m√ºssen Sie in VSC links in der Ordner√ºbersicht auf den Ordner webserver rechtsklicken und dort Open in Integrated Terminal ausw√§hlen. Nun √∂ffnet sich ein Terminalfenster, welches sich im Ordner docs/Netzwerke/webserver befindet. In diesem Fenster k√∂nnen Sie nun das Python-Skript mit dem Befehl python3 simple-server.py starten. Die URL wird nun wie folgt aussehen: http://localhost:8000/hello.html.","keywords":""},{"title":"Wie funktioniert das Internet?","type":0,"sectionRef":"#","url":"/Netzwerke-of/Begriffe/internet","content":"Wie funktioniert das Internet? Die Urspr√ºnge des heutigen Internets reichen zur√ºck ins Jahr 1969, als am 29. Oktober das Arpanet startete. Das Arpanet hatte zum Ziel, die Rechenleistung der wenigen Grossrechnern an Universit√§ten orts√ºbergreifend zusammenzuschliessen. Dieses Ziel wurde weitgehend verfehlt und stattdessen etablierte sich ab dem Jahr 1971 die E-Mail - und hat sich bis heute als wichtiger Informationskanal gehalten. Erst 1989 wurde am CERN in Genf die Grundlagen des World Wide Webs entwickelt, so dass Internetdokumente untereinander verlinkt werden konnten. Bis 1993 konnten wurden Internetdokumente jedoch nicht in einem Browser graphisch dargestellt, sondern auf der Kommandozeile ausgegeben. Eine der √§ltesten Websites, die seit 1986 unver√§ndert als Fossil im Internet herumgeistert, ist http://itcorp.com/. In einer Kommandozeile dargestellt sah die Seite in etwa so aus: &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;ITcorp.com&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;CENTER&gt; &lt;H1&gt;Interrupt Technology Corporation&lt;/H1&gt; &lt;/CENTER&gt; &lt;P&gt; This is the home page of Interrupt Technology Corporation. If you are looking for another company that calls itself &quot;ITcorp&quot;, you'll have to try typing the company's full name into a search engine. &lt;H2&gt;What Do We Do?&lt;/H2&gt; &lt;P&gt; We are a small, privately held software consulting firm specializing in file systems, storage systems, and computer measurement. We also provide expert-witness services in those areas. If you have a need for our services, you may contact itcorp at itcorp.com (replacing the &quot;at&quot; with an @ sign). &lt;H2&gt;Why Is This Web Page So Plain?&lt;/H2&gt; &lt;P&gt; We do not actively seek outside business. This Web page exists primarily to satisfy the needs of those who expect every domain to have a Web presence. &lt;/BODY&gt; &lt;/HTML&gt; Erst 1993 wurde der erste graphische Browser Mosaic ver√∂ffentlicht und machte das Internet f√ºr die breite Bev√∂lkerung nutzbar.","keywords":""},{"title":"IP-Adresse","type":0,"sectionRef":"#","url":"/Netzwerke-of/Begriffe/ip-adresse","content":"IP-Adresse Adressen‚Äã S√§mtliche Ger√§te in einem Netzwerk m√ºssen eine Adresse erhalten, damit Datenpakete an die richtigen Stellen weitergeleitet werden k√∂nnen. Im Internet Protocol (IP) werden IP-Adressen verwendet. Es gibt zwei Versionen des Internet Protokolls: IPv4 und IPv6. IPv4-Adressen‚Äã Eine IPv4-Adresse ist eine Folge von vier Bytes. Sie besteht also aus 32 Bit, wie im folgenden Beispiel: 11000000 10101000 11001000 00000001 Um IP-Adressen besser lesen und austauschen zu k√∂nnen, werden die vier Bytes normalerweise als Dezimalzahlen geschrieben und durch Punkte abgetrennt, also beispielsweise: 192.168.200.1 Es gibt 232=4‚Ä≤294‚Ä≤967‚Ä≤2962^{32} = 4'294'967'296232=4‚Ä≤294‚Ä≤967‚Ä≤296 verschiedene IP-Adressen. Auf den ersten Blick scheint die Anzahl sehr gross zu sein. Durch die Vielzahl an internetf√§higen Ger√§ten weltweit sind ein Grossteil der Adressen inzwischen vergeben. In Zukunft wird es daher ein erweitertes System (IPv6) mit noch viel mehr Adressen geben. IPv6-Adressen‚Äã Eine IPv6-Adresse besteht aus 16 Bytes, also aus 128 Bit. Damit gibt es 21282^{128}2128 verschiedene Adressen. Somit k√∂nnte jedes Atom im Universum (ca. 108410^{84}1084 bis 108910^{89}1089 ) eine eindeutige IPv6-Adresse erhalten, oder aber auf jedem Quadratmeter der Erdoberfl√§che k√∂nnte man 6.5‚ãÖ1023=655‚Ä≤570‚Ä≤793‚Ä≤348‚Ä≤866‚Ä≤943‚Ä≤898‚Ä≤5996.5\\cdot10^{23} = 655'570'793'348'866'943'898'5996.5‚ãÖ1023=655‚Ä≤570‚Ä≤793‚Ä≤348‚Ä≤866‚Ä≤943‚Ä≤898‚Ä≤599 mit dem Internet verbundene Ger√§te stapeln ü§™. IPv6-Adressen werden als Hexadezimalzahl dargestellt. Dabei werden immer vier hexadezimale Ziffern (vier Byte) zusammengefasst. Als Trennzeichen wird der Doppelpunkt : verwendet: 2001:0db8:85a3:08d3::0370:7344 ‚≠ê Adressierung von IP-Teilnetzwerken‚Äã Hosts und Router, die ein lokales Netzwerk bilden, erhalten im IP-Adressiersystem einheitliche IP-Adressen. Alle IP-Adressen des oberen Netzwerkes haben eine IP-Adresse der Gestalt 192.168.200.xxx, alle IP-Adressen des unteren Netzwerkes eine IP-Adresse der Gestalt 192.168.100.xxx. Zudem ist der Router in ein weiteres Netzwerk mit IP-Adressen der Gestalt 212.135.18.xxx eingebunden. Diese Form der einheitlichen Adressierung erlaubt es, die Zugeh√∂rigkeit zu Teilnetzen schnell zu entscheiden. Ein Netzteilnehmer muss hierzu nur die Netzwerkmaske des entsprechenden Teilnetzes (wie z.B. 192.168.200.xxx) kennen.","keywords":""},{"title":"MAC-Adresse","type":0,"sectionRef":"#","url":"/Netzwerke-of/Begriffe/mac-adresse","content":"MAC-Adresse Die physikalische Adresse, auch Hardware-Adresse eines Computers ‚Äì genauer gesagt: seiner Netzwerkschnittstelle ‚Äì nennt man MAC-Adresse (MAC steht f√ºr Media Access Control und hat entsprechen nichts mit Apple zu tun). Sie besteht aus 48 Bit oder 6 Bytes, so dass sie √ºblicherweise als Hexadezimalzahl mit 6√ó2 Stellen angegeben wird, beispielsweise: 48:2C:6A:1E:59:3D. Jede MAC-Adresse muss weltweit eindeutig sein, damit die Zustellung von Paketen, und somit auch die Transportsicherheit, garantiert werden kann. Die MAC-Adresse wird bei der Herstellung der Netzwerkkarte fix vergeben und kann nicht mehr ver√§ndert werden. Router-Einstellungen‚Äã Der Router ist der Eintrittspunkt zum WWW. Er besitzt zwei Netzwerkkarten (und somit auch zwei MAC-Adressen) - eine f√ºr die Verbindung mit Ihrem Ger√§t, die andere f√ºr die Verbindung mit dem ISP (Internet Service Provider). Da die MAC-Adressen nicht ge√§ndert werden k√∂nnen, kann der Datenverkehr auch auf Basis der MAC-Adresse gefiltert werden. Bezahlen Sie etwa Ihre Internet-Rechnung nicht, sperrt Ihr Anbieter die Kommunikation mit Ihrem Router - √ºber die MAC Adresse. Dasselbe Prinzip kann aber auch auf die Andere Seite angewandt werden. Wenn Sie pl√∂tzlich feststellen, dass sich Ihr Nachbar Ihr WLAN-Passwort erhascht hat, k√∂nnen Sie bei den Router-Einstellungen seine MAC-Adresse ausfindig machen und diese ggf. sperren. Router Einstellungen: MAC-Adressen sperren MAC-Adresse herausfinden Finden Sie die MAC-Adresse Ihres ger√§tes. Googeln Sie z.b. nach *Wie finde ich meine MAC adresse?&quot;","keywords":""},{"title":"Ports","type":0,"sectionRef":"#","url":"/Netzwerke-of/Begriffe/ports","content":"Ports Wozu ben√∂tigt man Ports?‚Äã Ein Computer, der sich in einem Netzwerk befindet, hat meist etliche Verbindungen gleichzeitig zu vielen anderen Computern ge√∂ffnet. Sogar zwei Computer untereinander verwenden h√§ufig mehrere Verbindungen gleichzeitig: So k√∂nnte ein Benutzer auf seinem Computer im Browser eine Webseite besuchen, w√§hrend das Betriebssystem gerade den Update-Server kontaktiert ‚Äì beides ben√∂tigt eine DNS-Abfrage, d.h. Verbindungen zum DNS-Server. Auf der Vermittlungsschicht kontaktiert derselbe Client mit seiner IP-Adresse f√ºr beide Verbindungen die IP-Adresse desselben (DNS-)Servers. Eine Stufe h√∂her ‚Äì auf der Transportschicht ‚Äì m√ºssen die Verbindungen unterschieden werden k√∂nnen. Schliesslich sollen die beiden Antworten ja nicht vertauscht werden. Daher verwendet man Ports ‚Äì eine 16-bit Zahl (sprich: Werte von 0 - 65'535). Well-known Ports‚Äã Auf der Serverseite werden in der Regel stets dieselben Ports eingesetzt ‚Äì schliesslich muss ein Client wissen, auf welchem Port er den gew√ºnschten Dienst erreichen kann. Einige bekannte Ports sind: Portnummer\tDienst25\tSimple Mail Transfer Protocol (SMTP) 53\tDomain Name System (DNS) 80\tHyperText Transfer Protocol (HTTP) 143\tInternet Message Access Protocol (IMAP) 465\tSimple Mail Transfer Protocol Secure (SMTPS) 443\tHyperText Transfer Protocol Secure (HTTPS) 993\tInternet Message Access Protocol Secure (IMAPS)","keywords":""},{"title":"√úbungen UTF-8","type":0,"sectionRef":"#","url":"/Netzwerke-of/Codierung/Uebungen","content":"√úbungen UTF-8 1. Wie viele Zeichen? Wie viele Zeichen sind in folgender bit-Squenz codiert? 1110'0010 1001'1101 1000'0000 0100'0110 1101'0011 1011'1111 1111'0110 1001'1010 1010'1010 1000'1111 0001'0010 2. UTF-8 Decodieren Folgende bit-Sequenzen sind UTF-8 Codiert. Welche Dezimalzahlen sind codiert? 1100'0010 1001'1001 1110'0001 1000'0000 1000'1111 3. UTF-8 Codieren Codieren Sie folgende bit-Sequenz zu UTF-8: 1100'1001'0101'1001'0110 Codieren Sie die Zahl 260 zu UTF-8:","keywords":""},{"title":"Begriff","type":0,"sectionRef":"#","url":"/Netzwerke-of/Codierung/Begriff","content":"Begriff Information Unter einer Information versteht man ¬´das Wissen, das ein Sender einem Empf√§nger √ºber einen Informationskanal √ºbermittelt¬ª.[1] Daten Daten sind Zeichen oder Symbole, die Informationen darstellen. Daten k√∂nnen gesendet, empfangen und verarbeitet werden. Code Ein Code ist eine ¬´Sprache¬ª, die festlegt, wie Informationen vom Sender in Daten √ºbersetzt und vom Empf√§nger wieder interpretiert werden. @ Code‚Äã Die Informations√ºbertragung kann nur funktionieren, wenn Sender und Empf√§nger den gleichen Code verwenden. Bei zwischenmenschlicher Kommunikation ist der Code normalerweise nicht explizit festgelegt. Dann muss der Empf√§nger den Code erraten, was zu Missverst√§ndnissen f√ºhren kann. Ein Code ist eine Vorschrift, welche Daten von einer Darstellung in eine andere umwandelt. Dabei darf keine Information verloren gehen, eine R√ºckumwandlung muss m√∂glich sein. Beispiel eines Codes: Umwandlung von Braillezeichen in Buchstaben und umgekehrt. Das Ziel dieser Umwandlung ist es, eine f√ºr einen bestimmten Zweck optimierte Darstellung Informationen zu erreichen. So ist die Brailleschrift daf√ºr optimiert, per Tastsinn gelesen werden zu k√∂nnen. Beispiele f√ºr Codes‚Äã Brailleschrift‚Äã ASCII‚Äã Genetischer Code‚Äã QR-Code‚Äã ISBN‚Äã what3words.com‚Äã","keywords":""},{"title":"Notizen","type":0,"sectionRef":"#","url":"/Netzwerke-of/notes.nosync","content":"Notizen 24er‚Äã Fehler: &quot;www&quot; bei DNS-Hierarchie wird oft zusammengefasst (f√ºr alle Seiten mit www) Fehler: DNS-Schritt und Routing wird oft vermischt/im gleichen Prozessschritt verortet 25er‚Äã Loading...","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/Netzwerke-of/Pruefung","content":"Lernziele Dauer 60 Minuten Benotung Die Note z√§hlt ganz Hilfsmittel Keine Pr√ºfungsstoff Sie kennen das Prinzip sowie die Vorteile eines Schichten-Modells und k√∂nnen dies in eigenen Worten erkl√§ren Sie kennen die vier Schichten des TCP/IP-Schichtenmodells und deren Reihenfolge Sie wissen was die Funktion von Protokollen ist und k√∂nnen zwei Netzwerkprotokolle aufz√§hlen Sie wissen was ein Protokoll ist und k√∂nnen auf jeder Schicht (ausser der physikalischen Schicht) die konzeptuelle Funktionsweise folgender Protokolle beschreiben: HTTP/HTTPS, TCP/UDP, IP. Sie kennen die Unterschiede zwischen HTTP und HTTPS sowie zwischen TCP und UDP. Sie k√∂nnen in je einem Satz erkl√§ren, was die Aufgabe jeder einzelnen TCP/IP-Schicht ist Sie k√∂nnen die Begriffe Server, Client, Host, Rechnernetz und Internet kurz erkl√§ren Sie kennen die Funktionsweise eines Routers und wissen was der Standardgateway ist Sie kennen die Funktionsweise von DNS und k√∂nnen am Computer Hostnamen in IP-Adressen umwandeln (und umgekehrt) Sie k√∂nnen Domain-Namen in ihrer Hierarchischen Struktur zerlegen und Einordnen Sie k√∂nnen f√ºr ein kleines Netzwerk die statischen Routing-Tabellen inkl. der Standardrouten eintragen Sie k√∂nnen das Konzept des dynamischen Routings in eigenen Worten erkl√§ren Sie kennen die Angriffsmethode WLAN-Sniffing und k√∂nnen deren Funktionsweise beschreiben Sie wissen, wie Sie sich vor WLAN-Sniffing sch√ºtzen k√∂nnen Sie wissen Bescheid √ºber die praktischen √úbungen im Unterricht (bspw. ping und tracert) und k√∂nnen Vorgehen und Ergebnisse wiedergeben Sie k√∂nnen anhand eines Beispiels erkl√§ren, wie NAT (Network Address Translation) funktioniert und dadurch private und √∂ffentliche Netzwerke verbunden werden Sie k√∂nnen die Funktionsweise des TTL-Headers bei Nachrichten im Internet beschreiben und deren Notwendigkeit begr√ºnden Unterrichtsinhalte An der Pr√ºfung k√∂nnen auch Inhalte/Diskussionen/Experimente zu den obigen Themen aufgegriffen werden, welche nur im Unterricht behandelt/diskutiert wurden.","keywords":""},{"title":"Schichtenmodell","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/0a-Schichtenmodell","content":"Schichtenmodell Viele komplexe Vorg√§nge und Konstruktionen k√∂nnen mit Hilfe eines sogenannten Schichtenmodells in einfachere Einzelteile aufgespalten werden. Wir wollen die Vorteile des Schichtenmodell an Hand eines Beispiels versuchen zu verstehen: Beispiel &quot;Schule&quot;‚Äã Die Schule Madretsch feiert 100-j√§hriges Jubil√§um und braucht f√ºr ihr Fest zus√§tzliche Schulpulte. Wir m√∂chten helfen und einige Pulte schicken. Pulte zum Verschicken Wie funktioniert dies? Wer ist alles involviert? Details 1Details 2Details 3Details 4 @ Den Sch√ºler:innen ist egal, wie die Pulte in die Schule kommen. Sie freuen sich einfach √ºber die zus√§tzlichen Schulpulte. Vorteile des Schichtenmodells‚Äã Aufbau auf bestehendem‚Äã Ohne Probleme liesse sich das obenstehende Beispiel verwenden, um andere Inhalte zu transportieren. So k√∂nnten statt Pulten auch St√ºhle ‚Äì oder z.B. auch Esswaren transportiert werden. So funktioniert auch unser Postsystem: Bis auf wenige Ausnahmen transportiert die Post alles. Die √úbertragung von E-Mails und die einer Webseite unterscheidet sich nur in der obersten Schicht. Beide bauen auf den 3 identischen unteren Schichten auf Aufbau auf bestehendem Was k√∂nnte noch √úbertragen werden, wobei die unteren Schichten verwendet werden? Austauschbare Schichten‚Äã Die Schichten k√∂nnen ausgetauscht werden, solange sie ihre Aufgabe erf√ºllen und die Schnittstelle zwischen der dar√ºber- und der darunterliegenden Schicht erf√ºllt wird. Die Post kann auch mit dem Flugzeug oder dem Zug transportiert werden. Statt der Post kann man einen privaten Transportservice engagieren. Statt des Hauswartes k√∂nnen auch Sch√ºler:innen die Pulte auseinanderschrauben und wieder zusammensetzen. Schichten austauschen Suchen Sie in anderen Bereichen des Alltags Schichtenmodelle und finden Sie dort Austauschbare Schichten. SSR Andere Schichtenmondelle‚Äã Informatik‚Äã @ Andere Wissenschaften‚Äã Naturwissenschaften als Schichtenmodell @@ Verschiedene Naturwissenschaften bauen aufeinander auf und bilden so eine Art Schichtenmodell, um die ungeheure Komplexit√§t der Natur in den Griff zu bekommen. Somit kann man sich z.B. auf sehr verschiedenen Abstraktionsebenen mit dem Organismus ¬´Schwan¬ª auseinandersetzen (K√∂rperbau? Verhalten? DNA?) und kann die jeweils anderen Ebenen gr√∂sstenteils ausblenden.","keywords":""},{"title":"Zahlensysteme","type":0,"sectionRef":"#","url":"/Netzwerke-of/Codierung/Zahlensysteme","content":"Zahlensysteme Zahlensysteme Aktuelle Computer kennen im wesentlichen zwei Zust√§nde: Strom- oder Nicht-Strom. Da es nichts dazwischen gibt, werden diese Zust√§nde auch &quot;bin√§r&quot; genannt. Dies kann mit Zahlen wie folgt dargestellt werden: 0 --&gt; kein Strom 1 --&gt; Strom Da wir Menschen uns besser im Zehnersystem zurechtfinden, wo es 10 eindeutige Zeichen gibt, brauchen wir eine M√∂glichkeit, zwischen diesen System hin- und herzurechnen. Jedes dieser sog. Stellenwertsysteme ist gleich aufgebaut. Schauen wir uns das Zehnersystem an, bemerkt man, dass jede stelle mit einer 10er Potenz multipliziert wird. Zehnersystem‚Äã 328=300+20+8=3‚àó100+2‚àó10+8‚àó1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100\\ \\begin{aligned} 328 &amp;= 300 + 20 + 8 \\\\ &amp;= 3 * 100 + 2 * 10 + 8 * 1 \\\\ &amp;= 3 \\cdot 10^2 + 2 \\cdot 10^1 + 8 \\cdot 10^0 \\\\ \\end{aligned}¬†328‚Äã=300+20+8=3‚àó100+2‚àó10+8‚àó1=3‚ãÖ102+2‚ãÖ101+8‚ãÖ100‚Äã Bin√§rsystem (Dualsystem oder auch Zweiersystem)‚Äã Nun gibt es nur zwei eindeutige Zeichen, 0 und 1, und jede Stelle wird mit einer Zweierpotenz multipliziert. In der folgenden Tabelle sind die ersten 12 Dezimalzahlen auch als Bin√§rzahl angegeben. Bin√§r\tDezimal020_202‚Äã\t0 121_212‚Äã\t1 10210_2102‚Äã\t2 11211_2112‚Äã\t3 1002100_21002‚Äã\t4 1012101_21012‚Äã\t5 1102110_21102‚Äã\t6 1112111_21112‚Äã\t7 100021000_210002‚Äã\t8 100121001_210012‚Äã\t9 101021010_210102‚Äã\t10 101121011_210112‚Äã\t11 110021100_211002‚Äã\t12 Umrechnung Bin√§r -&gt; Dezimal‚Äã Die Umrechnung vom Bin√§rsystem ins Dezimalsystem erfolgt durch Ausmultiplizieren mit den entsprechenden Zweierpotenzen. Beispiel: 1011 10112=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110\\begin{aligned} 1011_2 &amp;= 1 \\cdot 2^3 + 0 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 \\\\ &amp;= 1 \\cdot 8 + 0 \\cdot 4 + 1 \\cdot 2 + 1 \\cdot 1 \\\\ &amp;= 11_{10} \\end{aligned}10112‚Äã‚Äã=1‚ãÖ23+0‚ãÖ22+1‚ãÖ21+1‚ãÖ20=1‚ãÖ8+0‚ãÖ4+1‚ãÖ2+1‚ãÖ1=1110‚Äã‚Äã Umwandlung Dezimalsystem -&gt; Bin√§rsystem‚Äã F√ºr die Umrechnung vom Dezimalsystem zum Bin√§rsystem ist die Tabelle der Zweierpotenzen essenziell: 282^828\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020256\t128\t64\t32\t16\t8\t4\t2\t1 Beispiel: 143 Die erste Zweierpotenz, die kleiner ist als 143 ist, ist 27=1282^7 = 12827=128 -&gt; die Bin√§rzahl hat also 8 Stellen. Nun wird f√ºr jede Stelle √ºberpr√ºft, ob die entsprechende Zweierpotenz zur Zwischensumme dazuaddiert werden kann, oder ob man dadurch bereits eine zu grusse Zahl erh√§lt. 2er-Potenz\t272^727\t262^626\t252^525\t242^424\t232^323\t222^222\t212^121\t202^020\tZwischensummeRechnungsschritte\t128\t64\t32\t16\t8\t4\t2\t1 1. 128 &lt;143\\lt 143&lt;143\t1 128 2. 128 + 64 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0 128 3. 128 + 32 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0 128 4. 128 + 16 &lt;Ã∏143\\not \\lt 143ÓÄ†&lt;143\t1\t0\t0\t0 128 5. 128 + 8 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1 136 6. 136 + 4 &lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1 140 7. 140 + 2&lt;143\\lt 143&lt;143\t1\t0\t0\t0\t1\t1\t1 142 8. 142 + 1=143= 143=143\t1\t0\t0\t0\t1\t1\t1\t1\t143 Bin ‚Üí Dez Wandeln Sie vom vom Bin√§r- ins Dezimalsystem um. Dez ‚Üí Bin Wandeln Sie vom Dezimal- ins Bin√§rsystem um.","keywords":""},{"title":"TCP/IP-Schichtenmodell","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/0b-TCP-IP-Schichtenmodell","content":"TCP/IP-Schichtenmodell Genauso wie die Pakete im Beispiel √ºbermittelt werden, geschieht dies auch am Computer ‚Äì hier sprechen wir von Datenpaketen. Die oberen Schichten verwenden Dienste der unteren Schichten. Jede Schicht verpackt die Daten neu, wenn sie von der dar√ºberliegenden Schicht √ºbergeben werden und entpackt sie wieder beim Empfangen bevor sie wieder an die dar√ºberliegende Schicht √ºbergeben werden Jede Schicht hat einen bestimmten Auftrag. Anwendungs¬≠schicht Web, E-Mail Daten Transport¬≠schicht √úber¬≠tragungs¬≠steuerungs¬≠protokoll ¬≠(TCP) TCP+Port Daten Vermittlungs¬≠schicht Internet¬≠protokoll ¬≠(IP) IP-Adresse TCP+Port Daten Physikalische Schicht WLAN, Ethernet MAC-Adresse IP-Adresse TCP+Port Daten Die Analogie‚Äã Wenn wir im obigen Beispiel die Schichten ansehen, dann ist jede Schicht f√ºr einen bestimmten Schritt zust√§ndig. @","keywords":""},{"title":"Routing im Alltag","type":0,"sectionRef":"#","url":"/Netzwerke-of/Routing/routing-alltag","content":"Routing im Alltag Vorgehensweise Lesen Sie sich selbst√§ndig durch dieses Kapitel durch, wobei Sie die Aufgaben l√∂sen und die Ergebnisse notieren vor jedem ¬´gewonnene Erkenntnisse¬ª √ºberlegen Sie kurz, was eine gewonnene Erkenntnis sein k√∂nnte ‚Äì und zwar bevor Sie das K√§stchen aufklappen lesen Sie die ¬´gewonnenen Erkenntnisse¬ª durch und √ºberlegen Sie sich, was damit genau gemeint ist falls Sie eine Frage haben oder eine Erkenntnis notiert haben, die nicht aufgelistet wird, dann halten Sie diese fest, damit wir am Schluss dar√ºber sprechen k√∂nnen Wir befinden uns auf der Vermittlungs-Schicht: Hier werden IP-Pakete vom Start- zum Zielger√§t √ºbertragen. Bei ihrem Weg durch das Internet m√ºssen die Pakete geleitet werden ‚Äì man spricht von Routing. Verkehrsbetriebe Biel‚Äã Durch das Verkehrsnetz der Verkehrsbetriebe Biel wird der √∂ffentliche Verkehr in der Stadt Biel sichergestellt. @ Sie m√∂chten mit dem √ñV vom Gymnasium (L√§ndtestrasse 12, Biel/Bienne) zum Sportplatz Mettmoos fahren. Mit dem Netzplan Welche M√∂glichkeiten sehen Sie auf dem Liniennetz? üíª mit Google Maps Welchen Transportoptionen schl√§gt Ihnen üëâ Google Maps vor, wenn Sie die Route L√§ndtestrasse 12 ‚Üí Sportplatz Mettmoos suchen? Welche Optionen werden vorgeschlagen? Welches ist gem√§ss Google die beste Route? √Ñndert sich die Route, wenn sie m√∂glichst kurze Fusswege enthalten soll? (Einstellbar unter Routenoptionen) √Ñndert sich der Reisevorschlag, wenn Sie sp√§t in der Nacht eine Verbindung suchen? Gewonnene Erkenntnisse Es gibt mehrere Wege, welche ans Ziel f√ºhren. Der optimale Weg ist abh√§ngig von den Rahmenbedingungen und kann sich √§ndern. Gefundene Analogien‚Äã WLAN\tzu Fuss bis zur n√§chsten Haltestelle Sichtbare WLANs\tHaltestellen, die zu Fuss erreichbar sind: Bahnhof &amp; Badhausstrasse Rechnernetz (LAN)\tmit Bus (f√ºr weiter entfernte Ziele: Tram, Zug, ...) Router\tUmsteigen an gewissen Haltestellen Routing f√ºr Touristen‚Äã Datenpakete sind ‚Äì anders als wir als Passagiere vom √ñV ‚Äì nicht intelligent. Sie wissen nicht, wie sie umsteigen m√ºssen. Dies muss f√ºr sie √ºbernommen werden. Ein Datenpaket im √ñV vom Gymer zum Sportplatz Mettmoos m√ºsste an jeder Haltestelle wissen: ob man Aussteigen oder Umsteigen muss in welchen Bus man als n√§chstes einsteigen muss ob man am Ziel angekommen ist. an jeder Strassenkreuzung (wenn zu Fuss unterwegs) wissen: welche Abzweigung es nehmen soll ob es am Ziel angekommen ist. Routing-Tabelle Erstellen Sie f√ºr das Ziel &quot;Sportplatz Mettmoos&quot; Umsteige-Anleitungen f√ºr Datenpakete gem√§ss obigem Punkt 1. f√ºr die folgenden Haltestellen: Seehofweg Bahnhof Biel M√ºhlestrasse/Moulin Schulen Linde Bahnhof Mett Beispiel-Anleitung: Ort Ziel AktionSeehofweg\tMettmoos Bus Nr. 9 Seehofweg\tGymer Zu Fuss weiter Halten Sie Ihre Anleitung auf Papier fest und f√ºgen Sie ein Foto unten ein. Andere Ziele Die Anleitungen m√ºssten nat√ºrlich auch Anweisungen haben f√ºr andere Ziele. Wie w√ºrden die Umsteigungsanweisungen f√ºr die 5 obenstehenden Haltestellen f√ºr das Ziel &quot;Bern&quot; lauten? Wie f√ºr das Ziel &quot;Z√ºrich&quot;? Muss jede Haltestelle wirklich Anweisungen f√ºr jedes andere Ziel haben? Gewonnene Erkenntnisse Es k√∂nnen Anweisungen &quot;delegiert&quot; werden: Es muss nur der Bahnhof Biel wissen, in welchen Zug man einsteigen muss um nach Bern oder Z√ºrich zu fahren. Die anderen Haltestellen leiten alle Anfragen ausserhalb des Biel-Netzes an den Bahnhof Biel weiter. Ausfall Schienennetz‚Äã Wegen Umbauarbeiten f√§llt die Linie Nr. 9 ab &quot;Br√ºhlplatz&quot; aus. Welche M√∂glichkeiten haben Sie, wenn Sie beim Seehofweg eingestiegen sind, um doch an den Sportplatz zu gelangen? Gewonnene Erkenntnisse Es gibt verschiedene Wege zum Ziel - auch nicht optimale Wege, die normalerweise nicht benutzt werden. Diese Optionen erm√∂glichen aber eine gewisse Ausfallsicherheit. Im Beispiel oben k√∂nnen Sie entweder beim Bahnhof Biel oder beim Br√ºhlplatz auf eine andere Verbindung umsteigen. Grosse Gruppe‚Äã Grose Gruppen 4 Parallelklassen ‚Äì also ca. 100 Personen haben beim Sportplatz Mettmoos abgemacht. Wie kommen sie am schnellsten dahin, wenn wir damit rechnen, dass wegen Corona und dem Feierabendverkehr maximal 25 Personen pro Bus Platz finden? Gewonnene Erkenntnisse Bei Engp√§ssen k√∂nnen verschiedene Wege gleichzeitig benutzt werden. (Load-Balancing)","keywords":""},{"title":"Domain-Name-System","type":0,"sectionRef":"#","url":"/Netzwerke-of/DNS","content":"Domain-Name-System Ziele Was ist ein Domain-Name? Sie k√∂nnen zu einem gegebenen Domain-Namen die zugeh√∂rige IP-Adresse ermitteln. Sie k√∂nnen herausfinden, wem ein Domain-Name geh√∂rt und ob ein bestimmter Domain-Name noch frei ist. Sie k√∂nnen Web-Links auf ihre Unbedenklichkeit √ºberpr√ºfen. Telefonb√ºcher‚Äã @ IP-Adressen sind wie Telefonnummern, man kann sie sich nur schwer merken. F√ºr Telefonnummern gibt es deshalb Verzeichnisse, in welchen man die Nummer einer bestimmten Person nachschauen kann (entweder das gute alte Telefonbuch oder, moderner, tel.search.ch). Man muss nur den Namen der Person und vielleicht noch die Wohnadresse kennen. Domain Name‚Äã Auch f√ºr das Internet gibt es solche Verzeichnisse. Wenn man den Namen einer bestimmten Webseite kennt, kann man im Verzeichnis die IP-Adresse des Servers nachschauen, der diese Seite im Internet anbietet. Solche Namen sind zum Beispiel www.instagram.com www.gbsl.ch ofi.gbsl.website Diese Namen werden als Domain-Names bezeichnet und das Verzeichnis, wo sie drinstehen, heisst Domain-Name-System, kurz DNS. Kernidee‚Äã Namen kann man sich viel besser merken als Zahlen. Deshalb sind Webseiten im Internet mit einem Domain-Namen versehen. Im Verzeichnis der Domain-Namen, dem Domain-Name-System, kann man nachschauen, welches die IP-Adresse des Servers ist, der diese Seite anbietet. Funktionsweise‚Äã Es gibt auf der Welt bald 2 Milliarden1 Webseiten, verteilt auf ca. 200 Millionen Server. Jeder Server beherbergt also durchschnittlich 10 Webseiten. F√ºr jeden dieser Server braucht es eine √∂ffentliche IP-Adresse, damit der Server im Internet erreichbar ist. Wenn man die IP-Adresse des Servers kennt, k√∂nnte man theoretisch versuchen im Browser statt des Domain-Namens einer Web-Site direkt die IP-Adresse des Servers einzugeben, also statt www.instgram.com die IP-Adresse 157.240.17.174. IP-Adressen direkt eingeben Obiges Beispiel, die IP-Adresse von Instagram direkt in den Browser einzutippen, funktioniert in der Praxis mit modernen Webseiten, die https als Protokoll verwenden, nicht. Bei https wird von Ihrem Browser mittels Zertifikat sichergestellt, dass die Adresse auf den korrekten Domain Namen lautet. Dadurch wird verhindert, dass Sie auf eine falsche Seite umgeleitet werden, und dann unwissentlich bspw. eine Geldtransaktion vornehmen. Das f√ºhrt aber dazu, dass das Zertifikat bei IP-Adressen nicht g√ºltig ist. Eine zu Demonstrationszwecken ver√∂ffentlichte Seite ohne https ist login.gbsl.website. Diese ist auch direkt √ºber den entsprechenden Server 188.34.157.212 zu finden. Wie schon in der Einleitung erw√§hnt, wird das niemand tun, weil man sich diese IP-Adresse nicht merken kann und sie mit der Zeit auch √§ndern k√∂nnte (z.B. wenn die Web-Site auf einen anderen Server gez√ºgelt wird). Ganz abgesehen davon, dass es auch nicht ausreichen w√ºrde, nur die IP-Adresse anzugeben, weil ja eben mehrere Web-Sites an einer bestimmten Adresse ¬´zuhause¬ª sein k√∂nnen - der Port m√ºsste ebenfalls bekannt sein. Ports Ein Port spezifiziert, welche Applikation auf einem Server die Anfrage behandeln soll. Auf dem Server 188.34.157.212 sind mehrere Web-Sites, und mit dem richtigen Port kann ausgew√§hlt werden, welche man m√∂chte: Port 80 * 188.34.157.212:80 login.gbsl.website Port 8080 188.34.157.212:8080 hacksql.gbsl.website Nun wird deutlich, dass es schwierig w√ºrde, sich auch noch alle Ports zu merken... * Port 80 ist der Standard-Port f√ºr Web-Sites mit dem http Protokoll und kann deshalb auch weggelassen werden Die Frage ist nun aber: Wie kann man 2 Milliarden Domain-Namen in einem Verzeichnis verwalten? W√ºrde man dies in Form eines Buches versuchen, so erg√§be das ein Buch mit ca. 4 Millionen Seiten (500 Adresseintr√§ge pro Seite). Hinzu kommt, dass diese Adressen laufend angepasst werden m√ºssten. Neue Adressen kommen hinzu, andere √§ndern oder verschwinden. Ganz zu schweigen von der schieren Unm√∂glichkeit, in einem solchen Buch eine gesuchte Adresse zu finden. In elektronischer Form ist dieses Problem nicht so gross. 2 Milliarden Adressen ergeben eine Datenmenge von ca. 2 Terrabyte, wenn man grossz√ºgig 1 KB (1000 Zeichen) pro Adresse annimmt. Eine Harddisk mit so viel Platz kriegt man f√ºr einige zehn Franken. Allerdings bleibt das Problem mit den dauernden √Ñnderungen. Eine zentrale Stelle, welche dieses Verzeichnis f√ºhren m√ºsste, w√§re wohl schnell √ºberfordert. Zudem best√ºnde auch ein grosses Risiko, dass ein Ausfall dieser zentralen Stelle das ganze Internet lahmlegen k√∂nnte. Schliesslich m√ºsste ein solches Verzeichnis auch auf einem sehr, sehr leistungsf√§higen Server betrieben werden, denn bei ca. 5 Milliarden Internetnutzern weltweit, die dauernd irgendwelche IP-Adressen brauchen, ist mit einer enormen Flut von Anfragen zu rechnen. Aus diesen Gr√ºnden haben die Erfinder des Domain-Name-Systems einen anderen Weg eingeschlagen: Das Verzeichnis ist erstens hierarchisch gegliedert und zweitens auf viele DNS-Server weltweit verteilt, wobei jeder Server nur die Adressen in seiner Zone kennt und f√ºr alle anderen Adressen auf weitere DNS-Server verweist. Untenstehendes Bild zeigt diese Hierarchie. Auf der obersten Ebene befinden sich die sogenannten Top-Level-Domains (TLD), z.B. ch, de, org oder com. Diese sind unter einer namenlosen Root-Domain zusammengefasst (Punkt im obersten K√§stchen auf dem Bild). Unterhalb einer TLD k√∂nnen dann beliebig viele Subdomains angeh√§ngt werden. Liest man nun von unten beginnend, die Namen der Subdomains auf einem Pfad bis zur Root-Domain, so entsteht ein vollst√§ndiger Domain-Name, z.B. en.wikipedia.org. @ Im Bild sind drei DNS-Server mit ihrer jeweiligen Zone (grau) eingezeichnet. Jeder DNS-Server verwaltet den Teil der Adressinformationen, der zu seiner Zone geh√∂rt. Die IP-Adresse zum Domain-Namen en.wikipedia.org, also 91.198.174.192, kennt dabei nur der unterste DNS-Server, denn er ist f√ºr die Zone, in welche dieser Domain-Name schliesslich geh√∂rt, zust√§ndig. Wird einer der √ºbergeordneten DNS-Server nach dieser IP-Adresse gefragt, so verweist er als Antwort nur auf den n√§chsttieferen DNS-Server, mit dem Hinweis, man solle dort weiterfragen. Das geht dann so weiter, bis der Frager beim untersten DNS-Server angelangt ist und die IP-Adresse als Antwort erh√§lt. Man kann diese Situation mit jemandem vergleichen, der sich in einer fremden Stadt √ºber mehrere Stationen zu seinem Hotel durchfragt. Selbsttest F√ºllen Sie das folgende Forms-Quizz aus. DNS-Hierarchie Zeichnen Sie eine Hierarchie (Baum), in welcher folgende Domain-Namen vorkommen (so wie auf der Abbildung im Arbeitsblatt): www.gbsl.ch learningview.org tel.search.ch erzbe-my.sharepoint.com outlook.office.com www.office.com Halten Sie Ihre L√∂sung auf einem Blatt Papier fest und f√ºgen Sie ein Foto davon unten ein: Wer verwaltet Domain-Namen?‚Äã Die hierarchische Gliederung des Domain-Name-Systems erlaubt es, die Verwaltung zu dezentralisieren. So gibt es f√ºr jede Top-Level-Domain eine Organisation, welche die Namen der darunter angesiedelten Subdomains verwaltet. F√ºr die TLD der Schweiz (ch) und Liechtenstein (li) ist die Stiftung SWITCH zust√§ndig. info Die SWITCH betreibt unter dem Link https://www.nic.ch/de/ einen Dienst zur √úberpr√ºfung, ob eine bestimmte Subdomain noch verf√ºgbar ist. Das Registrieren einer Subdomain delegiert die SWITCH an sogenannte Registrare, also an Unternehmen die Domain-Namen anbieten und verkaufen. Bekannte (und g√ºnstige) Registrare sind: Swizzonic.ch Gandi.net hostech J√§hrlich muss f√ºr eine .ch Domain zwischen 5 und 20 Franken gerechnet werden. Es gibt Web-Sites, √ºber welche man herausfinden kann, von wem ein bestimmter Domain-Name registriert wurde (Registrar) und wem dieser Name geh√∂rt (Registrant). Drei davon sind: https://www.hostpoint.ch/domains/whois.html (TLDs ch, li, ‚Ä¶) https://www.whois.com/whois/ (TLDs com, org, edu, website, ‚Ä¶) http://whois.nic.swiss/ (TLD swiss) GBSL Welcher Registrar hat die Domain gbsl.website gbsl.ch vergeben? IP Adressen herausfinden‚Äã Wenn Sie im Browser auf Ihrem Computer den Link https://www.instagram.com eingeben, so muss Ihr Computer herausfinden, welche IP-Adresse zum Domain-Name www.instagram.com geh√∂rt, damit er den Instagram-Server schliesslich kontaktieren kann. Den zust√§ndigen DNS-Server kann Ihr Computer, aber nur √ºber dessen eigene IP-Adresse erreichen. Wenn Ihr Computer das zum ersten Mal macht, so kennt er diese Adresse noch nicht. Deshalb wendet er sich an einen der 13 DNS-Server auf der obersten Ebene, den sogenannten Root-Servern, deren IP-Adressen jedem Computer bekannt sind üëâ https://root-servers.org/. Diese leiten Ihren Computer dann an die tiefer gelegenen DNS-Server weiter, bis schliesslich der richtige DNS-Server gefunden ist. Das passiert automatisch, ohne, dass Sie davon etwas merken. Man kann solche Anfragen aber auch von Hand machen. Dazu k√∂nnen Sie die Seite https://tools.keycdn.com/dig verwenden. Aufgabe 1 Wie findet man die IP-Adresse, welche zu einem Domain-Name geh√∂rt? (Googeln Sie nach einer Website, welche einen Dienst anbietet, der dies tut.) The Hacky Way √úbers Terminal Sie k√∂nnen auch in der Windows-Eingabeaufforderung oder auf dem Mac-Terminal einen Domain-Name zu einer IP-Adresse aufl√∂sen. Dazu brauchen Sie den Befehl nslookup. Beispiel: nslookup de.wikipedia.org Probieren Sie es aus, wenn Sie Lust auf mehr Hacker-Feeling haben. Finden Sie die IP-Adresse von login.gbsl.website heraus. Stimmt sie mit obiger IP-Adresse √ºberein? Und bei hacksql.gbsl.website? √úberlegen Sie sich, woher diese Unterschiede kommen k√∂nnten. Suchen Sie auch nach weiteren IP-Adressen, bspw. von www.instagram.com. Aufgabe 2 Untenstehende Abbildung zeigt eine verd√§chtige aussehende E-Mail. Sie enth√§lt einen Button, unter welchem angeblich Details eines Fotos angeschaut werden k√∂nnen. @ Der Button ist mit einem Link verbunden, welcher vom E-Mail-Programm am unteren Rand angezeigt wird, sobald man mit der Maus √ºber den Button f√§hrt (‚ö† nicht klicken!). Darin ist ein Domain-Namen enthalten, der links Unten im Browser angezeigt wird. Im obigen E-Mail ist das satellite-equipment.ru, ein Domain-Namen aus Russland. Finden Sie heraus, welche IP-Adresse hinter diesem Domain-Namen steht wem diese Domain geh√∂rt und in welchem Land die Besitzer:in zuhause ist? Hinweis Verwenden Sie üëâ https://tools.keycdn.com/dig und üëâ https://www.whois.com/whois/ danger Warnung: Auch hier gilt wieder: Nie auf solche Buttons klicken, denn in diesem Fall ist das Risiko hoch, dass Ihr Computer mit einem Virus infiziert wird. Aufgabe 3 Diese Aufgabe hat nicht direkt mit dem Domain-Name-System zu tun. Da hinter der E-Mail aus Aufgabe 2 aber mit Sicherheit jemand mit b√∂swilliger Absicht steckt, k√∂nnen wir noch √ºberpr√ºfen, ob der Link bereits als gef√§hrlich registriert ist. Solche √úberpr√ºfungen bietet z.B. die Seite https://sitecheck.sucuri.net/ an. √úberpr√ºfen Sie damit den Domain-Namen aus Aufgabe 2. Achtung: Geben Sie diese URL auschliesslich in das f√ºr die √úberpr√ºfung vorgesehene Feld ein! Aufgabe 4 Sie m√∂chten Ihr eigenes Unternehmen gr√ºnden, oder Sie m√∂chten eine Kampagne f√ºr ein Ihnen wichtiges Anliegen f√ºhren. In beiden F√§llen hilft einen Auftritt im Web, um m√∂glichst erfolgreich zu sein. Eine grosse Rolle spielt dabei, ob Sie einen einpr√§gsamen und packenden Domain-Name finden. Dieser muss selbstverst√§ndlich noch verf√ºgbar sein. √úberlegen Sie sich einen solchen Domain-Name und √ºberpr√ºfen Sie mit den oben beschriebenen Whois-Diensten, ob dieser Name noch frei ist. Aufgabe 5 Ein Gedankenspiel: Die Berner Kantonalbank (BEKB) bietet ihren Kunden Internet-Banking an. Diese ist erreichbar √ºber die Web-Site der BEKB, www.bekb.ch. Angenommen einem Angreifer gelingt es, Ihrem Computer eine beliebige, aber falsche IP-Adresse f√ºr den Domain-Name www.bekb.ch unterzuschieben, welche M√∂glichkeiten ergeben sich dem Angreifer dadurch? Hack-Angriff DNS-Hijacking‚Äã Ausschnitt: Start bis 2:51 Minuten. &amp;gt; Schlusspunkt‚Äã Sie haben nun das Domain-Name-System kennengelernt. Es ist eines der wichtigsten Teile des Internet. Sie haben gesehen, wie man zu einem Domain-Name die zugeh√∂rige IP-Adresse erh√§lt. Sie haben auch eine Idee von den Konsequenzen erhalten, wenn das Domain-Name-System nicht so funktioniert, wie erwartet, beispielsweise wegen einer Attacke durch Hacker (DNS-Hijacking). Solche Attacken k√∂nnen in unserer vernetzten Welt einen enormen wirtschaftlichen Schaden verursachen. Quelle: internetlivestats ‚Ü©","keywords":""},{"title":"Schicht 3: Transportschicht","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/Transportschicht","content":"Schicht 3: Transportschicht Die Transportschicht stellt sicher, dass der Transport korrekt abl√§uft. Die zu transportierenden Dinge oder Daten m√ºssen zerlegt werden, damit sie in Pakete passen. Die Pakete m√ºssen nummeriert werden, damit die Dinge/Daten am Zielort wieder richtig zusammengesetzt werden k√∂nnen. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª zerlegt der Hauswart die einzelnen Pulte. Er muss die Einzelteile der Pulte beschriften, damit sie in der Madretsch-Schule wieder richtig zusammengebaut werden k√∂nnen. Er verpackt die Einzelteile in Pakete und beschriftet diese mit der Post-Adresse. Schliesslich schickt er dem Hauswart der Madretsch-Schule einen Brief (Lieferschein), in welchem auflistet, wie viele Pakete und Pulte verschickt werden. Der Hauswart der Madretsch-Schule kontrolliert anhand des Lieferscheins, ob alle Pakete angekommen sind. Dann setzt er die Pulte aus den Einzelteilen gem√§ss Beschriftung wieder zusammen. M√∂glicherweise fehlt eine Schraube. In dem Fall schickt er dem GBSL-Hauswart einen Brief und bittet ihn, diese Schraube nachzuschicken. @ Internet‚Äã Die zwei wichtigsten Protokolle der Transportschicht sind TCP und UDP. Hier werden die Daten der Anwendungsschicht in TCP- oder UDP-Pakete verpackt. Dabei muss nat√ºrlich notiert werden, worum es sich bei den Daten der Anwendungsschicht handelt (HTTP, SMTP, ...). Das Protokoll der Anwendungsschicht wird in Form einer Nummer, Port genannt, im TCP- oder UDP-Paket gespeichert (siehe Begriff Ports). TCP Das Transmission Control Protocol garantiert die vollst√§ndige √úbermittlung von Daten. Damit dies klappt, m√ºssen sich die beiden Kommunikationsparteien zuerst verbinden, so dass die Absender:in einen allf√§lligen Datenverlust mitbekommt und das Paket nochmals schicken kann. Deswegen wird dieses Protokoll auch verbindungsorientiert genannt. In den allermeisten F√§llen verwenden wir bei unserer t√§glichen Arbeit im Internet das TCP-Protokoll. Es garantiert, dass keine Pakete verlorengehen oder fehlerhaft ankommen ‚Äì resp. falls Pakete nicht ankommen, dass diese nochmals angefordert werden. Dies ist in der Regel (z.B. beim √úbertragen von Webseiten oder E-Mails) sinnvoll und erw√ºnscht ‚Äì schliesslich m√∂chten wir nicht, dass einige Passagen auf Webseiten oder in E-Mails fehlen. UDP Das User Datagram Protocol hingegen braucht keine anf√§ngliche Verbindung der Kommunikationsparteien, da es eher einer Einweg-Kommunikation gleicht. Es wird deshalb auch verbindungslose Kommunikation genannt. Bei UDP findet keine Kontrolle statt, ob s√§mtliche Pakete (fehlerfrei) ankommen. Da die Empf√§nger:in keine Empfangsbest√§tigung schicken muss, werden bei diesem Protokoll weniger Daten √ºbertragen, was zu einer h√∂heren √úbertragungsgeschwindigkeit bei gleichzeitig tieferer Latenz f√ºhrt. Dies ist insbesondere dann hilfreich, wenn wir Audio- oder Videostreams konsumieren. Wir m√∂chten nicht lange auf ein verlorenes Paket warten, sondern nehmen eher ein kurzes Stocken in Kauf und sind froh, dass das Abspielen anschliessend direkt weitergeht. Weitere Informationen‚Äã","keywords":""},{"title":"Schicht 4: Anwendungsschicht","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/Anwendungsschicht","content":"Schicht 4: Anwendungsschicht Auf der Anwendungsschicht geht es um Dinge, die den Benutzer des Systems interessieren. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª sind dies Pulte, welche von einem Schulhaus ins andere transportiert werden sollen. Wie genau Verpackung und Transport organisiert sind, wird auf dieser Ebene ausgeblendet. Hier geht es nur um den eigentlich Inhalt ‚Äì also darum, welche und wie viele Pulte verschickt werden sollen. @ Internet‚Äã Typische Anwendungen im Internet sind Webseiten, Web-Apps oder E-Mail. HTTP: Das Hypertext Transfer Protocol ist f√ºr die √úbertragung von Webseiten zust√§ndig. Genauer gesagt werden mit HTTP die Daten √ºbertragen, aus welchen Webseiten zusammengesetzt sind, also HTML-Dateien, Bilder, usw. SMTP: Das Simple Mail Transfer Protocol wird eingesetzt, um E-Mails zu versenden. Das Protokoll regelt den Transport der E-Mail von dem/r Absender*in bis zum E-Mail-Server auf Empf√§ngerseite. IMAP: Das Internet Message Access Protocol wird zum Abrufen und Organisieren des eigenen Postfachs verwendet ‚Äì sprich, um mit dem E-Mail-Server zu kommunizieren, der die eigene E-Mail-Box gespeichert hat. info Sie sehen, dass zum Senden und Empfangen von E-Mails zwei verschiedene Protokolle zum Einsatz kommen, was auf den ersten Blick erstaunen mag. Nat√ºrlich kommen die E-Mails beim Versenden √ºber SMTP auch ohne IMAP an ‚Äì aber nicht bei dem/der Empf√§nger:in, sondern nur in dessen/deren Postfach. Um dieses abzurufen ist das zweite Protokoll (IMAP) n√∂tig. Weitere Informationen‚Äã","keywords":""},{"title":"Schicht 2: Vermittlungsschicht","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/Vermittlungsschicht","content":"Schicht 2: Vermittlungsschicht In der Vermittlungsschicht brauchen wir eine Adresse, an die die (Daten-)Pakete gesendet werden k√∂nnen. Es handelt sich um eine logische Adresse aus dem Netzwerk, in dem sich das Ger√§t gerade befindet. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª ist aus den beiden oberen Schichten alles f√ºr den Transport vorbereitet. Der Hauswart bringt aber die Pulte nicht selbst ins andere Schulhaus ‚Äì er muss sich gar nicht um die Zustellung k√ºmmern. Die Vermittlungsschicht wird hier von der Post √ºbernommen. Anhand der Adresse auf den Paketen weiss die Post, wohin die einzelnen Pakete verschickt werden m√ºssen. √úblicherweise k√∂nnen die Pakete nicht direkt, sondern via ein Paketzentrum zugestellt werden. Welche Route die Pakete nehmen ‚Äì also via welches Paketzentrum die Pakete verschickt werden ‚Äì darum k√ºmmert sich die Post. Die Pakete werden so in S√§cke verpackt, dass sie mit anderen Paketen zusammen im richtigen Paketzentrum landen. Dort werden sie neu sortiert und f√ºr den Weitertransport vorbereitet. Die Post hat keine Ahnung, welche Ware in wie viele Pakete aufgeteilt transportiert wird, sie weiss nur von wo nach wo welches Paket transportiert werden muss. @ Internet‚Äã Das wichtigste Protokoll der Vermittlungsschicht ist das Internet Protokoll (IP). Damit Computer in einem Netzwerk Daten austauschen k√∂nnen, brauchen sie eine Adresse (analog zur Postadresse in unserem Beispiel oben). Die Adressen der Vermittlungsschicht werden IP-Adressen (siehe Begriff IP-Adressen) genannt. Jedes vernetzte Ger√§t besitzt eine IP-Adresse, damit es mit anderen Ger√§ten kommunizieren kann. Weitere Informationen‚Äã","keywords":""},{"title":"Schicht 1: Physikalische Schicht (Netzzugangsschicht)","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/Physikalische-Schicht","content":"Schicht 1: Physikalische Schicht (Netzzugangsschicht) Auf der physikalischen Schicht geht es um das konkrete Transportmittel (Velokurier, Lastwagen, ... resp. WLAN, LAN, Mobilfunk, ...). Auch hier werden Adressen ben√∂tigt, es sind weltweit eindeutige Adressen, die fix an das Ger√§t gekn√ºpft sind. Beispiel ¬´Schule¬ª‚Äã Im Beispiel ¬´Schule¬ª m√ºssen die S√§cke, die die vielen Pakete enthalten, nun endlich transportiert werden. Dies √ºbernehmen Speditionsangestellte, die die S√§cke mit Hilfe von Lastwagen an den n√§chsten Zielort (z.B. in ein Paketzentrum oder an die Lieferadresse) bringen. Die Spedition k√ºmmert sich nur um den aktuellen Transportabschnitt. @ Internet‚Äã Die physikalische Schicht besteht aus der Hardware, also den Kabeln und Ger√§ten (mit ihren physikalischen Adressen). Die physikalische Adresse wird MAC-Adresse genannt (siehe Begriff MAC-Adressen). Wieso braucht es zwei Adressen, logische Adressen (Vermittlungsschicht) und physikalische dieser Schicht? Innerhalb eines lokalen Netzwerks werden die physikalischen Adressen verwendet. Da es aber keine M√∂glichkeit gibt, alle physikalischen Adressen auf der Welt zu kennen und zu wissen, wie man diese Ger√§te erreichen kann, braucht es logische Adressen, die zu einem bestimmten Netzwerk geh√∂ren. Nur so ist es m√∂glich, mit dem gleichen Ger√§t am Morgen zu Hause und sp√§ter an der Schule online zu sein. Weitere Informationen‚Äã","keywords":""},{"title":"Routing im Internet","type":0,"sectionRef":"#","url":"/Netzwerke-of/Routing/routing-internet","content":"Routing im Internet Wie Pakete eine Postadresse haben, brauchen auch Datenpakete eine Adresse, damit sie korrekt zugestellt werden k√∂nnen. Diese Adressen nennt man IP-Adressen, wobei IP f√ºr Internet Protocol steht. Adressierung‚Äã Normalerweise erh√§lt jedes Ger√§t beim Beitritt zu einem Rechnernetz eine IP-Adresse zugewiesen. Die Adresse geh√∂rt zum entsprechenden Netz und erlaubt die Kommunikation mit allen Ger√§ten die sich ebenfalls im selben Netz befinden. Deshalb erh√§lt Ihr Ger√§t hier am GBSL eine andere Adresse als bei Ihnen zu Hause. Aufbau‚Äã Eine IP-Adresse (genauer, IPv4 Adresse) setzt sich aus 4 Zahlen zu je 8 Bit zusammen. Diese 4 Zahlen werden im Dezimalsystem notiert und mit Punkten verbunden. 194.124.132.216 Es gibt also insgesamt 232=4‚Ä≤294‚Ä≤967‚Ä≤2962^{32} = 4'294'967'296232=4‚Ä≤294‚Ä≤967‚Ä≤296 verschiedene IP-Adressen. Auf den ersten Blick scheint die Anzahl sehr gross zu sein. Durch die Vielzahl an internetf√§higen Ger√§ten weltweit sind ein Grossteil der Adressen inzwischen vergeben. Deshalb gibt es eine neuere IP-Version 6, die aber den alten Standard noch nicht ersetzt hat. Mehr dazu hier: IPv6. Meine IP‚Äã Jedes Ger√§t das mit dem Internet verbunden ist, braucht eine IP-Adresse. IP-Adresse finden Finden und notieren Sie die IP-Adresse Ihres Computers Ihres Smartphones Vergleichen Sie die beiden IP-Adressen. Was stellen Sie fest? Wie finde ich die IP-Adresse? Sie wissen nicht, wie man die IP-Adresse des eigenen Ger√§ts findet? Es gibt zahlreiche Anleitungen: Googeln Sie z.B. IP-Adresse finden Android oder IP-Adresse finden Windows 11 oder etwas √Ñhnliches, das auf Ihr Ger√§t resp. Ihr Betriebssystem abgestimmt ist. üè† IP-Adresse finden Finden und notieren Sie die IP-Adresse Ihres Computers Ihres Smartphones bei Ihnen zu Hause! Ping‚Äã Beim Ping-Befehl handelt es sich um ein Netzwerkdiagnose-Tool, womit man die Daten√ºbertragung zu einem anderen Ger√§t √ºberpr√ºfen kann. Dabei sendet man ein Signal an ein entferntes Ger√§t. Dieses Ger√§t sollte dann ein Signal zur√ºcksenden. In der Kommandozeile ping 194.124.132.216 Ping ausf√ºhren F√ºhren Sie einen Ping mit folgenden IP-Adressen aus: 194.124.132.216 8.8.8.8 185.237.144.226 194.150.245.142 Was bedeutet die Ausgabe? Wieso gibt es Unterschiede? Routing f√ºr Datenpakete‚Äã Routing-Algorithmen sorgen daf√ºr, dass Datenpakete ihren Weg durch das Internet finden. Dabei kann es sein, dass mehrere Pakete mit dem selben Ziel unterschiedliche Routen nehmen. Netzwerkrouting@ Router im Schichtenmodell‚Äã Der Router ist das Paketverteilzentrum und verbindet mehrere Netzwerke miteinander. Er besitzt also mindestens zwei Netzwerkkarten und somit auch mindestens zwei IP-Adressen um sich mit den einzelnen Netzwerken zu verbinden. Sie m√ºssen die IP-Pakete auspacken, damit diese gem√§ss der IP-Adresse weitergeleitet werden k√∂nnen. Dabei bedienen sich Router spezieller Tabellen, welche angeben, wohin ein Paket mit einer bestimmten IP-Adresse hingeleitet werden soll. @ note Damit ein Router ein IP-Paket weiterleiten kann, braucht er folgende, im Paket enthaltene Informationen: IP-Adresse Sender IP-Adresse Empf√§nger Routen verfolgen‚Äã Der Befehl traceroute (macOS) resp. tracert (Windows) kann diese Route nachverfolgt werden. Dabei werden die Zwischenstationen ‚Äì also dort wo das Paket entpackt und gem√§ss Ziel-IP-Adresse weitergeleitet wird ‚Äì angezeigt. traceroute √ñffnen Sie eine Eingabeaufforderung (cmd) und geben Sie nacheinander die folgenden drei Befehl ein: In der Kommandozeile (cmd) tracert office.com tracert www.google.ch tracert www.gbsl.ch √ñffnen Sie eine Eingabeaufforderung (terminal) und geben Sie nacheinander die folgenden drei Befehl ein: In der Kommandozeile (terminal) traceroute office.com traceroute www.google.ch traceroute www.gbsl.ch Beobachten Sie den Output. Erkennen Sie Gemeinsamkeiten oder irgendeine spezielle Zwischenstation? Standardgateway‚Äã F√ºr die Kommunikation mit Ger√§ten ausserhalb des eigenen Netzwerks m√ºssen die Internetpakete zum n√§chsten Verteilzentrum geschickt werden. In der Analogie zum √ñffentlichen Verkehr ist dies die n√§chstgelegene Haltestelle, die Sie zum Hauptbahnhof bringt: wollen Sie an einen Ort ausserhalb ihrer Stadt, so gehen Sie zum Hauptbahnhof, wo Sie in die richtige Richtung weitergeleitet werden. Dieser Weg zum Hauptbahnhof wird bei Netzwerkf√§higen Ger√§ten Standardgateway genannt. Standardgateway ihres Laptops‚Äã In der Kommandozeile (cmd) eingeben ipconfig In der Koommandozeile (terminal) eingeben netstat -nr info Zu Hause haben Sie als Standardgateway die IP-Adresse Ihres Routers/Modems eingetragen ‚Äì also dem Ger√§t, das Sie von Ihrem Internet-Anbieter erhalten, um Zugang zum Internet zu erhalten. Aufgabe Gehen Sie auf die Webseite üëâ https://whatsmyip.org/. Was wird angezeigt? SSR ‚≠êÔ∏è MAC-Adresse‚Äã Die physikalische Adresse, auch Hardware-Adresse eines Computers (oder genauer gesagt die Adresse seiner Netzwerkschnittstelle) ‚Äì nennt man MAC-Adresse (MAC steht f√ºr Media Access Control und hat entsprechen nichts mit Apple zu tun). Sie besteht aus 48 Bit oder 6 Bytes, so dass sie √ºblicherweise als Hexadezimalzahl (mit 161616 eindeutigen Zeichen) mit 6√ó2 Stellen angegeben wird, beispielsweise: 48:2C:6A:1E:59:3D. Jede MAC-Adresse muss weltweit eindeutig sein, damit die Zustellung von Paketen, und somit auch die Transportsicherheit, garantiert werden kann. Die MAC-Adresse wird bei der Herstellung der Netzwerkkarte fix vergeben und kann nicht mehr ver√§ndert werden. info Ihre Pers√∂nlichkeit √§ndern Sie bei einem Umzug nicht, Ihre Wohnadresse aber schon. Gleiches gilt f√ºr die MAC-Adresse und IP-Adresse eines Ger√§ts: Die MAC-Adresse bleibt gleich, die im Netzwerk sichtbare IP-Adresse √§ndert jedoch. Wozu braucht es die MAC-Adresse?‚Äã Die MAC-Adresse erlaubt die direkte Kommunikation zwischen zwei Ger√§ten im selben Netzwerk, ohne dabei den Router zu beauftragen, ihre Pakete weiterzuleiten. Da diese direkte Kommunikation effizienter ist, merkt sich bspw. der WLAN-Accesspoint* bei Ihnen zuhause, welche IP-Adresse zu welcher MAC-Adresse geh√∂rt. So kann ein Paket direkt zu Ihrem Ger√§t geschickt werden, ohne jedes Mal den richtigen Empf√§nger im Netzwerk ausfindig zu machen. * oft sind WLAN-Accesspoint und Router im selben Ger√§t kombiniert. Doch im Innern sind es zwei Ger√§te, ein Router und ein WLAN-Accesspoint. ¬´Highspeed-Routen¬ª‚Äã Schweiz‚Äã Auf der untenstehenden Karte erkennt man die schnellsten Leitungen von Switch. Diese Organisation verbindet die Universit√§ten und Forschungsinstitute miteinander und mit dem Ausland. SWITCH-LAN@ Andere Provider besitzen ebenfalls schnelle Leitungen zwischen den St√§dten und ins Ausland. z.B. wurden bestehenden Gas-Leitungen mit schnellen Glasfaser-Kabeln versehen. GASCOM@ Interkontinental‚Äã Bei der Verbindung von Kontinenten hatte man schon vor dem Internet-Zeitalter Unterseekabel verlegt. @ Heute laufen zahlreiche ¬´Highspeed-Routen¬ª √ºber den Grund der Meere. Unterseekabel Wie kommt ein Datenpaket von Biel in die USA? nach Madagaskar? https://www.submarinecablemap.com/","keywords":""},{"title":"Schichten und Adressen","type":0,"sectionRef":"#","url":"/Netzwerke-of/Schichtenmodell/Schichten-und-Adressen","content":"Schichten und Adressen Was bedeuten die Adressen auf den verschiedenen Schichten? Damit wir uns besser vorstellen k√∂nnen, was die einzelnen Adressen bedeuten, arbeiten wir mit folgender Analogie: Wir m√∂chten in einem bestimmten Gesch√§ft innerhalb eines Einkaufszentrums einkaufen gehen. Zuerst m√ºssen wir √ºberhaupt zum Einkaufszentrum gelangen. Daf√ºr sind die ersten beiden Schichten zust√§ndig: physikalische Schicht Vermittlungsschicht Zugang zum Einkaufzentrum: die ersten beiden Schichten@ Dass es √ºberhaupt Strassen gibt, die die Grundst√ºcke miteinander verbinden, verdanken wir der physikalischen Schicht. Auf dieser Schicht gibt es im Netzwerkmodell die MAC-Adressen. In unserer Analogie w√ºrde dies wohl den Grundst√ºcksnummer entsprechen, die im Grundbuch eingetragen sind ‚Äì allerdings sind diese Nummern (und Grundb√ºcher) weltweit nicht eindeutig, daher hinkt dieser Vergleich ein wenig. Auf der Vermittlungsschicht werden die IP-Adressen verwendet, um einen Host zu kontaktieren. In unserer Analogie w√ºrde dies der Postadresse (also Strassenname und Hausnummer) entsprechen. Es braucht also Strassen und Postadressen, damit wir das Einkaufszentrum finden. Sind wir jedoch bereits im Einkaufszentrum drin, m√ºssen wir noch das richtige Gesch√§ft aufst√∂bern. Nun dringen wir zu den n√§chsten zwei Schichten vor: Transportschicht Anwendungsschicht Ein bestimmtes Gesch√§ft im Einkaufszentrum: die beiden oberen Schichten@ Analog muss auch ein Computer wissen, an welches Programm er eine eingehende Anfrage weitergeben muss: Will der Client eine Webseite abrufen oder vielleicht eine DNS-Abfrage starten? F√ºr beides kann auf dem gleichen Server eine Software auf Anfragen warten. Die Programme, die solche Anfragen beantworten lauschen auf einem bestimmten Port und warten, bis sich ein Client meldet (Schicht 3: Transportschicht). Genau gleich warten die Angestellten in jedem Gesch√§ft des Einkaufszentrums auf Kunden. Auch die R√§ume, in denen die Gesch√§fte untergebracht sind sind nummeriert, √§hnlich wie die Ports im Netzwerkmodell. Die Port-Nummern entsprechen also den Raumnummern. Das einzige, was diese Angestellten dem Kunden anbieten k√∂nnen, ist die Dienstleistung, auf welche sich dieses Gesch√§ft spezialisiert hat. Dass der Ablauf f√ºr einen Dienstleistungsbezug in jedem Gesch√§ft anders abl√§uft, ist klar ‚Äì schliesslich muss sich im Coiffeurgesch√§ft auf einen Stuhl setzen und bekommt einen Mantel und den Hals gebunden, w√§hrend man in der B√§ckerei die gew√ºnschten Brote bestellt. Dies entspricht den Protokollen auf der Anwendungsschicht (DNS, HTTP, ...).","keywords":""},{"title":"‚≠êÔ∏è DNS Attacken","type":0,"sectionRef":"#","url":"/Netzwerke-of/Sicherheit/DNS-Attacken","content":"‚≠êÔ∏è DNS Attacken 1 Cache Poisioning Was ist DNS-Hijacking und wie funktioniert es? Beschreiben Sie auch die drei verschiedenen Varianten. Bemerkt eine Benutzer:in etwas vom Angriff? Wie kann man dagegen sch√ºtzen? ‚≠êÔ∏è ARP and DNS Spoofing‚Äã ARP und DNS Spoofing Wie verl√§uft eine ARP/DNS-Spoofing Attacke? Quelle üëâ https://youtu.be/lggWxsHYK2o ‚Ü©","keywords":""},{"title":"WIFI Sniffing Demo","type":0,"sectionRef":"#","url":"/Netzwerke-of/Sicherheit/setup-wireshark.nosync","content":"WIFI Sniffing Demo Wireshark im Monitor Mode (Achtung, aktive WLAN-Verbindungen m√ºssen deaktiviert werden, damit der Monitor Mode auf MacOSX funktionert) M√∂glichst nahe ans WLAN-Signal, insbesondere bei billigem Hotspot... Etwas Geduld... Capturing Filter, damit Package-Loss reduziert werden kann Monitor Mode Wireshark WIFI-Karte muss auf denselben Channel wie der Router eingestellt sein‚Äã bspw. WIFI auf Channel 7 setzen export PATH=&quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources:$PATH&quot; zum Pfad hinzuf√ºgen, so dass der Befehl airport verf√ºgbar wird. sudo airport -z # disassociate from any network sudo airport en0 -c7 # no space after -c ! Source GET oder POST requests port 80 and ((tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420) or (tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504F5354)) ip source starts with 192.168 src net 192.168 ","keywords":""},{"title":"Node-RED","type":0,"sectionRef":"#","url":"/NodeRED","content":"Node-RED Node-RED ist eine frei zug√§ngliche Open Source Software (üëâ Sourcecode) mit dem Fokus, Daten (u.a. von Sensoren) und Services miteinander zu verbinden. Das Projekt wurde 2013 von IBM gestartet und seit 2016 wird es von der OpenJS Foundation weiterentwickelt. Node-RED bietet dabei ein √ºbersichtliches, grafisches Benutzerinterface, mit welchem sich Datenstr√∂me auf einfache Art und Weise miteinander verkn√ºpfen lassen. Node Ein K√§stchen mit einer Funktion Verbindung Verbindet zwei Nodes miteinander Flow Alle Nodes die (auch indirekt) miteinander verbunden sind Jede Node kann ein, zwei oder drei Funktionalit√§ten zur Verf√ºgung stellen: Input Sobald eine Nachricht √ºber die Verbindung eintrifft, wird die Node ausgef√ºhrt Verarbeitung Der Inhalt der empfangenen Nachricht verarbeiten, anzeigen, speichern, ... Output Eine neue Nachricht kann an alle verbundenen Nodes weitergegeben werden. Im Zeitalter des Internet of Things (IoT), wo jedes &quot;Thing&quot; mit Sensoren ausgestattet und mit dem Internet verbunden ist, kann, sind so","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/NodeRED/install","content":"Installation Eine Node-RED Instanz mit einem kostenlosen Server von Render erzeugen Achtung Setzen Sie den Benutzernamen auf admin und w√§hlen Sie ein sicheres Passwort (Sie brauchen es jedesmal, wenn Sie auf Node-RED zugreifen wollen.) Nachdem Sie auf Apply geklickt haben, dauert es ungef√§hr 5 Minuten, bis die Seite online gestellt ist. Auf Ihrem Dashboard sehen Sie den aktuellen Fortschritt: Sobald der Status auf Deploy succeeded bzw. Available steht, ist das Aufsetzen der Website fertig. Unter dem Web Service node-red kann die URL, unter welcher Ihr pers√∂nlicher Node-RED Dienst verf√ºgbar ist, nachgeschaut werden: Hat alles geklappt, k√∂nnen Sie sich mit den selbst gew√§hlten Login-Daten aus dem ersten Schritt einloggen: Hinweis: Nach dem ersten Deploy succeeded dauert es beim ersten Zugriff auf die Webseite bis zu 2 Minuten, bis die Webseite angezeigt wird. Den Grund daf√ºr erfahren Sie weiter unten. Installation √úberpr√ºfen‚Äã Erster Flow erzeugen Erstellen Sie Ihren ersten Flow und √úberpr√ºfen Sie, das alles genau so funktioniert wie im Video: Immer Online‚Äã Um Rechenzeit und somit auch Kosten zu sparen, werden inaktive Server in einen Ruhezustand versetzt. Ein Server gilt als inaktiv, wenn er l√§nger als 15 Minuten keine Webseite mehr anzeigen musste. Um einen inaktiven Server zu aktivieren, dauert es bis zu 2 Minuten (dies ist der Grund, weshalb Sie im letzten Installationsschritt so lange auf das erste Anzeigen warten mussten). Damit unsere Flows st√§ndig aktiv bleiben, erzeugen wir einen Flow, welcher alle 5 Minuten die Startseite aufruft und somit verhindert, dass Node-RED in den Ruhezustand versetzt wird. KeepAlive umsetzen Erzeugen Sie den KeepAlive Flow und markieren Sie diese Aufgabe als erledigt.","keywords":""},{"title":"Useless Machines","type":0,"sectionRef":"#","url":"/notes/useless-machines","content":"Useless Machines Thingiverse ATTiny85 MicroUSB Digispak (Klon) 3D-Modell mit OpenSCAD L√∂ten: Patafix brauchen","keywords":""},{"title":"VueJS","type":0,"sectionRef":"#","url":"/notes/vuejs","content":"VueJS EF 2020 ForsterEF 2021 ForsterEF 2023 Forster","keywords":""},{"title":"Erstellen eines Podcast","type":0,"sectionRef":"#","url":"/OFI-Projekt/podcast","content":"Erstellen eines Podcast https://podcast-agentur-hamburg.de/aufbau-einer-podcast-episode/ Nach der Recherche sollten Sie soweit sein, dass Sie ein Script f√ºr Ihren Podcast erstellen k√∂nnen. Dabei geht es in einem ersten Schritt darum, eine Gliederung in einzelne Abschnitte festzulegen. Es sollte sich ein logischer und f√ºr die H√∂rerinnen und H√∂rer packender, nachvollziehbarer Ablauf ergeben. Im Artikel &quot;Der Aufbau einer Podcast-Episode&quot; lesen Sie wie ein professioneller Podcast gegliedert werden kann. Lesen Sie den Artikel und erstellen Sie anschliessend in einem Word-Dokument Ihre eigene Gliederung. Schreiben Sie bei jedem Abschnitt stichwortartig auf, was Sie dort behandeln werden. Teilen Sie das Dokument in Ihrem Team. Ihre Stichworte sollen mindestens so detailliert sein, dass Sie w√§hrend der Aufnahme frei sprechen k√∂nnen. Alternativ k√∂nnen Sie auch einen vollst√§ndigen Text erstellen, denn Sie dann in der Aufnahme lesen. Aber Achtung: Denken Sie daran, dass abgelesene Text oft eint√∂nig klingen und wenn Sie einen Text erstellen, welcher kopierte Bausteine aus einer anderen Quelle enth√§lt, m√ºssen Sie diese f√ºr den H√∂rer erkennbar und korrekt zitieren. Audiodateien Zusammenschneiden‚Äã Audacity Um einen Podcast zu erstellen, k√∂nnen Sie im einfachsten Fall Ihre Stimme mit dem Handy aufnehmen und fertig. Sie k√∂nnen aber auch Ihren Text mit Musik oder Ger√§uschen untermalen. Dabei k√∂nnen Sie eigene Aufnahmen oder Material aus dem Internet verwenden. Bei letzterem m√ºssen Sie allerdings darauf achten, dass Sie keine Urheberrechte verletzten. F√ºr das Zusammenmischen von verschiedenem Tonmaterial eignet sich die Software Audacity sehr gut. Unter den folgenden Links finden Sie Information zu Audacity und m√∂glichen Quellen von freier Musik. ACHTUNG: Virenverseuchte Versionen im Umlauf Wenn man in Google nach Audacity sucht, wird man auf die Seite [audacity.de] gelockt. Diese Seite bietet eine VIRENVERSEUCHTE Version von Audicity an. !! NICHT HERUNTERLADEN !! Laden Sie Audacity nur mit dem nachfolgenden Link herunter. Download Audacity.org Free Music Archive .M4A-Dateien Das Dateiformat .M4A enth√§lt auch Audiodateien, die mit Audacity allerdings nur mit einer zus√§tzlichen Bibliothek, ffmpeg, eingelesen werden kann. WindowsmacOS Laden Sie ffmpeg hier https://lame.buanzo.org/ffmpeg64audacity.php herunter und installieren Sie es (nicht den Link im Video verwenden!).","keywords":""},{"title":"Zeichencodierung","type":0,"sectionRef":"#","url":"/Netzwerke-of/Codierung/Zeichencodierung","content":"Zeichencodierung Zeichencodierung Datenpakete bestehen aus verschiedenen Zahlen und Zeichen. Wie lassen sich diese in Einsen und Nullen √ºbersetzen? Auf dem Computer ist jedem Zeichen eine eindeutige Zahl zugeordnet - eine sog. Zeichencodierung. Eine g√§ngige Zeichencodierung ist etwa ASCII, 128 Zeichen, wobei f√ºr ein Zeichen genau 7 bit, also 7 Stellen mit 0 oder 1, notwendig sind. In diesen 128 m√∂glichen Zeichen sind 33 Steuerzeichen und 95 normale Zeichen enthalten. Steuerzeichen sind spezielle Zeichen wie bspw. das Zeichen \\n f√ºr einen Zeilenumbruch oder \\t f√ºr einen Tabulator. Die ASCII-Codierung enth√§lt noch keine Umlaute, weshalb mit Latin 1, 256 Zeichen der Informationsgehalt um ein Bit erh√∂ht wurde, so dass insgesamt 256 Zeichen codiert werden k√∂nnen - die ersten 128 Zeichen sind dabei identische mit ASCII. Latin 1 Tabelle‚Äã Ausschnitt Zeichen\tDezimal\tBin√§r\\n\t10\t00001010 ‚éµ\t32\t00100000 !\t33\t00100001 &amp;\t38\t00100110 .\t46\t00101110 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 =\t61\t00111101 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 Zeichen\tDezimal\tBin√§rD\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 V\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 Zeichen\tDezimal\tBin√§rd\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 √§\t228\t11100100 √∂\t246\t11110110 √º\t252\t11111100 Latin 1 Tabelle \u0001\t\u0002\t\u0003\t\u0004\t\u0005\t\u0006\t\u0007\t\b \u000e\t\u000f\t\u0010 \u0011\t\u0012\t\u0013\t\u0014\t\u0015\t\u0016\t\u0017\t\u0018\t\u0019\t\u001a\t\u001b\t\u001c\t\u001d\t\u001e\t\u001f !\t&quot;\t#\t$\t%\t&amp;\t'\t(\t)\t*\t+\t,\t-\t.\t/\t0 1\t2\t3\t4\t5\t6\t7\t8\t9\t:\t;\t&lt;\t=\t&gt;\t?\t@ A\tB\tC\tD\tE\tF\tG\tH\tI\tJ\tK\tL\tM\tN\tO\tP Q\tR\tS\tT\tU\tV\tW\tX\tY\tZ\t[\t\\\t]\t^\t_\t` a\tb\tc\td\te\tf\tg\th\ti\tj\tk\tl\tm\tn\to\tp q\tr\ts\tt\tu\tv\tw\tx\ty\tz\t{\t|\t}\t~\t\t¬Ä ¬Å\t¬Ç\t¬É\t¬Ñ\t¬Ö\t¬Ü\t¬á\t¬à\t¬â\t¬ä\t¬ã\t¬å\t¬ç\t¬é\t¬è\t¬ê ¬ë\t¬í\t¬ì\t¬î\t¬ï\t¬ñ\t¬ó\t¬ò\t¬ô\t¬ö\t¬õ\t¬ú\t¬ù\t¬û\t¬ü ¬°\t¬¢\t¬£\t¬§\t¬•\t¬¶\t¬ß\t¬®\t¬©\t¬™\t¬´\t¬¨\t¬≠\t¬Æ\t¬Ø\t¬∞ ¬±\t¬≤\t¬≥\t¬¥\t¬µ\t¬∂\t¬∑\t¬∏\t¬π\t¬∫\t¬ª\t¬º\t¬Ω\t¬æ\t¬ø\t√Ä √Å\t√Ç\t√É\t√Ñ\t√Ö\t√Ü\t√á\t√à\t√â\t√ä\t√ã\t√å\t√ç\t√é\t√è\t√ê √ë\t√í\t√ì\t√î\t√ï\t√ñ\t√ó\t√ò\t√ô\t√ö\t√õ\t√ú\t√ù\t√û\t√ü\t√† √°\t√¢\t√£\t√§\t√•\t√¶\t√ß\t√®\t√©\t√™\t√´\t√¨\t√≠\t√Æ\t√Ø\t√∞ √±\t√≤\t√≥\t√¥\t√µ\t√∂\t√∑\t√∏\t√π\t√∫\t√ª\t√º\t√Ω\t√æ\t√ø\tƒÄ Zeichen\tDezimal\tBin√§r\t0\t00000000 1\t00000001 2\t00000010 3\t00000011 4\t00000100 5\t00000101 6\t00000110 7\t00000111 8\t00001000 \\t\t9\t00001001 \\n\t10\t00001010 11\t00001011 12\t00001100 13\t00001101 14\t00001110 15\t00001111 16\t00010000 17\t00010001 18\t00010010 19\t00010011 20\t00010100 21\t00010101 22\t00010110 23\t00010111 24\t00011000 25\t00011001 26\t00011010 27\t00011011 28\t00011100 \u001d\t29\t00011101 30\t00011110 31\t00011111 ‚éµ\t32\t00100000 !\t33\t00100001 &quot;\t34\t00100010 #\t35\t00100011 $\t36\t00100100 %\t37\t00100101 &amp;\t38\t00100110 '\t39\t00100111 (\t40\t00101000 )\t41\t00101001 *\t42\t00101010 +\t43\t00101011 ,\t44\t00101100 -\t45\t00101101 .\t46\t00101110 /\t47\t00101111 0\t48\t00110000 1\t49\t00110001 2\t50\t00110010 3\t51\t00110011 4\t52\t00110100 5\t53\t00110101 6\t54\t00110110 7\t55\t00110111 8\t56\t00111000 9\t57\t00111001 :\t58\t00111010 ;\t59\t00111011 &lt;\t60\t00111100 =\t61\t00111101 &gt;\t62\t00111110 ?\t63\t00111111 @\t64\t01000000 A\t65\t01000001 B\t66\t01000010 C\t67\t01000011 D\t68\t01000100 E\t69\t01000101 F\t70\t01000110 G\t71\t01000111 H\t72\t01001000 I\t73\t01001001 J\t74\t01001010 K\t75\t01001011 L\t76\t01001100 M\t77\t01001101 N\t78\t01001110 O\t79\t01001111 P\t80\t01010000 Q\t81\t01010001 R\t82\t01010010 S\t83\t01010011 T\t84\t01010100 U\t85\t01010101 Zeichen\tDezimal\tBin√§rV\t86\t01010110 W\t87\t01010111 X\t88\t01011000 Y\t89\t01011001 Z\t90\t01011010 [\t91\t01011011 \\\t92\t01011100 ]\t93\t01011101 ^\t94\t01011110 _\t95\t01011111 `\t96\t01100000 a\t97\t01100001 b\t98\t01100010 c\t99\t01100011 d\t100\t01100100 e\t101\t01100101 f\t102\t01100110 g\t103\t01100111 h\t104\t01101000 i\t105\t01101001 j\t106\t01101010 k\t107\t01101011 l\t108\t01101100 m\t109\t01101101 n\t110\t01101110 o\t111\t01101111 p\t112\t01110000 q\t113\t01110001 r\t114\t01110010 s\t115\t01110011 t\t116\t01110100 u\t117\t01110101 v\t118\t01110110 w\t119\t01110111 x\t120\t01111000 y\t121\t01111001 z\t122\t01111010 {\t123\t01111011 |\t124\t01111100 }\t125\t01111101 ~\t126\t01111110 \t127\t01111111 ¬Ä\t128\t10000000 ¬Å\t129\t10000001 ¬Ç\t130\t10000010 ¬É\t131\t10000011 ¬Ñ\t132\t10000100 ¬Ö\t133\t10000101 ¬Ü\t134\t10000110 ¬á\t135\t10000111 ¬à\t136\t10001000 ¬â\t137\t10001001 ¬ä\t138\t10001010 ¬ã\t139\t10001011 ¬å\t140\t10001100 141\t10001101 142\t10001110 143\t10001111 144\t10010000 ¬ë\t145\t10010001 ¬í\t146\t10010010 ¬ì\t147\t10010011 ¬î\t148\t10010100 ¬ï\t149\t10010101 ¬ñ\t150\t10010110 ¬ó\t151\t10010111 ¬ò\t152\t10011000 ¬ô\t153\t10011001 ¬ö\t154\t10011010 ¬õ\t155\t10011011 ¬ú\t156\t10011100 157\t10011101 158\t10011110 ¬ü\t159\t10011111 160\t10100000 ¬°\t161\t10100001 ¬¢\t162\t10100010 ¬£\t163\t10100011 ¬§\t164\t10100100 ¬•\t165\t10100101 ¬¶\t166\t10100110 ¬ß\t167\t10100111 ¬®\t168\t10101000 ¬©\t169\t10101001 ¬™\t170\t10101010 Zeichen\tDezimal\tBin√§r¬´\t171\t10101011 ¬¨\t172\t10101100 173\t10101101 ¬Æ\t174\t10101110 ¬Ø\t175\t10101111 ¬∞\t176\t10110000 ¬±\t177\t10110001 ¬≤\t178\t10110010 ¬≥\t179\t10110011 ¬¥\t180\t10110100 ¬µ\t181\t10110101 ¬∂\t182\t10110110 ¬∑\t183\t10110111 ¬∏\t184\t10111000 ¬π\t185\t10111001 ¬∫\t186\t10111010 ¬ª\t187\t10111011 ¬º\t188\t10111100 ¬Ω\t189\t10111101 ¬æ\t190\t10111110 ¬ø\t191\t10111111 √Ä\t192\t11000000 √Å\t193\t11000001 √Ç\t194\t11000010 √É\t195\t11000011 √Ñ\t196\t11000100 √Ö\t197\t11000101 √Ü\t198\t11000110 √á\t199\t11000111 √à\t200\t11001000 √â\t201\t11001001 √ä\t202\t11001010 √ã\t203\t11001011 √å\t204\t11001100 √ç\t205\t11001101 √é\t206\t11001110 √è\t207\t11001111 √ê\t208\t11010000 √ë\t209\t11010001 √í\t210\t11010010 √ì\t211\t11010011 √î\t212\t11010100 √ï\t213\t11010101 √ñ\t214\t11010110 √ó\t215\t11010111 √ò\t216\t11011000 √ô\t217\t11011001 √ö\t218\t11011010 √õ\t219\t11011011 √ú\t220\t11011100 √ù\t221\t11011101 √û\t222\t11011110 √ü\t223\t11011111 √†\t224\t11100000 √°\t225\t11100001 √¢\t226\t11100010 √£\t227\t11100011 √§\t228\t11100100 √•\t229\t11100101 √¶\t230\t11100110 √ß\t231\t11100111 √®\t232\t11101000 √©\t233\t11101001 √™\t234\t11101010 √´\t235\t11101011 √¨\t236\t11101100 √≠\t237\t11101101 √Æ\t238\t11101110 √Ø\t239\t11101111 √∞\t240\t11110000 √±\t241\t11110001 √≤\t242\t11110010 √≥\t243\t11110011 √¥\t244\t11110100 √µ\t245\t11110101 √∂\t246\t11110110 √∑\t247\t11110111 √∏\t248\t11111000 √π\t249\t11111001 √∫\t250\t11111010 √ª\t251\t11111011 √º\t252\t11111100 √Ω\t253\t11111101 √æ\t254\t11111110 √ø\t255\t11111111 Text -&gt; Bin√§r‚Äã Jedes Zeichen auf der Tastatur hat eine feste Zahl zugeordnet. In Python l√§sst sich ein Zeichen leicht in die entsprechende Zahl √ºbersetzen: zeichen = 'g' zahl = ord(zeichen) print(zeichen, '-&gt;', zahl) Dargestellt wird eine Zahl im Dezimalsystem, daher mit der Basis 10. Um ins Bin√§re Zahlensystem mit der Basis 2 zu wechseln, kann die Funktion bin verwendet werden: bin_zahl = bin(108) print(bin_zahl) # Python-Zusatzinformationen √ºber den Datentyp weglassen: bin_zahl = bin_zahl[2:] # start beim dritten Zeichen print(bin_zahl) # auf 1 byte = 8 bit erg√§nzen bin_zahl = bin_zahl.zfill(8) print(bin_zahl) Aufgabe Wandeln Sie Ihren Namen in Bin√§r-Code um, indem Sie zuerst jeden buchstaben in eine Zahl umwandeln dann die Zahl ins bin√§re √ºbersetzen und schliesslich die bin√§re Zeichenkette mit print ausgeben bin--name.py name = 'Reto' for buchstabe in name: print(buchstabe) Bin√§r -&gt; Text‚Äã Versuchen Sie nachzuvollziehen, was der folgende Code macht. Erinnerung: int wandelt einen Text in eine Zahl um, chr steht f√ºr &quot;Character&quot; und gibt f√ºr eine Zahl das entsprechend codierte Zeichen zur√ºck. code = '01000111' # in Zahl umwandeln zahl = int(code) print('Versuch 1', zahl) # geht nicht, wieso? zahl = int(code, 2) print('Versuch 2', zahl) # in Zeichen umwandeln print('Zeichen', chr(zahl)) Aufgabe Wandeln Sie die bin√§re Folge wieder um in Text. Was kommt dabei raus? name.py binaer = ['01000111','01000010','01010011','01001100'] for code in binaer: print(code) ‚≠êÔ∏è Zusatz 1 K√∂nnen Sie das √ºbersetzte Wort auch auf einer einzigen Zeile ausgeben? ‚≠êÔ∏è Zusatz 2 Die folgende Funktion wandelt eine Text-Kette aus Bin√§r-Zahlen in eine Liste mit Bin√§r-Zahlen von 8bit l√§nge um. Verwenden Sie diese Funktion, um eine beliebige Zeichenkette in Text umzuwandeln. def to_8bit(bin_text): return [bin_text[i:i + 8] for i in range(0, len(bin_text), 8)] binaer = to_8bit('01000111010000100101001101001100') print(binaer) L√∂sung binaer = ['01000111','01000010','01010011','01001100'] for code in binaer: zahl = int(code, 2) print(chr(zahl)) Bin√§rer Decodierer‚Äã Quelle: Twitter Aufgabe Der bin√§re Code befindet sich auf der linken Seite. Wozu braucht es die zweite, rechte Spur? Unicode / UTF-8 1‚Äã Unicode‚Äã Unicode ist ein internationaler Standard f√ºr Schriftzeichen und Symbole. Das Unicode-Konsortium erstellt einen Katalog von allen sinnvollen Schriftzeichen, welcher st√§ndig erweitert wird. In der Version 12.1, welche im Mai 2019 ver√∂ffentlicht wurde, umfasst Unicode 137‚Ä≤929137'929137‚Ä≤929 Zeichen. Hier sind ein paar Zeichen aufgef√ºhrt, um zu illustrieren wie umfangreich Unicode ist: Lateinischer Grossbuchstaben A U+0041 Hiragana-Buchstabe Ya U+3084 Cherokee-Buchstabe S U+13CD Spielkarte Neun der Herzen U+1F0B9 Entsetztes Gesicht mit explodierendem Kopf U+1F92F Affe U+1F412 Power-Symbol U+23FB √Ñgyptische Hieroplyphe Nl012 U+1322C Quelle: UT - Unicode Table Jedem Unicode-Zeichen hat eine eindeutige Unicode-Nummer, welche h√§ufig als hexadezimale Zahl geschrieben wird. UTF-8‚Äã UTF-8 ist ein Code, der Unicode-Zeichen in Bitmuster √ºbersetzt. Ein Unicode-Zeichen wird mit ein bis vier Byte (daher 8-32 bit) dargestellt. Die folgende Tabelle zeigt, wie die Codierung funktioniert: Unicode-Bereich\tBitmuster\tAnzahl Bit0 bis 127\t0xxxxxxx\t7 128 bis 2047\t110xxxxx 10xxxxxx\t11 2048 bis 65535\t1110xxxx 10xxxxxx 10xxxxxx\t16 ab 65536\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\t21 Unicode-Zeichen mit einer Nummer zwischen 0 und 127 werden mit einem Byte dargestellt, welches mit 0 beginnt. Somit ist UTF-8 in diesem Bereich identisch mit ASCII (und Latin 1). F√ºr die anderen Zeichen wird mehr als ein Byte verwendet. Dabei beginnt jedes Byte mit einer oder mehreren 1, gefolgt von einer 0. Die Anzahl 1 im ersten Byte definieren, wie viele Bytes f√ºr das Zeichen verwendet werden. Die folgenden Bytes werden mit 10 markiert. Die x werden mit der Bin√§rdarstellung der Unicode-Nummer aufgef√ºllt. Zeichen\tNummer\tBitmusterA\t65\t01000001 √§\t228\t11000011 10100100 Schwarze Sonne mit Strahlen ‚òÄ\t9728\t11100010 10011000 10000000 Affe üêí\t128018\t11110000 10011111 10010000 10010010 Der Vorteil dieser Codierung ist, dass am Beginn eines Bytes erkannt wird, ob es sich um den Anfang die Fortsetzung eines Zeichens handelt. Beginn\tBedeutung0‚Ä¶\tASCII-Zeichen 10‚Ä¶\tFortsetzung eines Zeichens mit mehreren Bytes 110‚Ä¶\tBeginn eines Zeichens mit zwei Bytes 1110‚Ä¶\tBeginn eines Zeichens mit drei Bytes 11110‚Ä¶\tBeginn eines Zeichens mit vier Bytes Dies wird deutlich, wenn man dies als Bin√§rbaum darstellt: UTF-8 Pr√§fix Mehrstufige Codierung 2‚Äã Oft werden Informationen mehrstufig codiert. So wird beispielsweise die Information ¬´Ich bin m√ºde.¬ª als Emoji dargestellt. Das Handy ordnet dem Emoji die entsprechende Unicode-Nummer zu. Diese wird mit UTF-8 in eine Bitfolge √ºbersetzt, welche √ºber das Mobilfunknetz √ºbermittelt wird. Das Handy des Empf√§ngers √ºbersetzt die Bitfolge wieder zur√ºck in eine Unicode-Nummer und das entsprechende Emoji. Die Interpretation des Emojis muss vom Empf√§nger selbst vorgenommen werden. Unicode zu UTF-8 Quelle rothe.io ‚Ü© Quelle rothe.io ‚Ü©","keywords":""},{"title":"Projekt: Partnerpraktikum","type":0,"sectionRef":"#","url":"/OFI-Projekt/projekt","content":"Projekt: Partnerpraktikum Im Partnerpraktikum suchen Sie sich in Zweiergruppen selbst√§ndig ein Thema aus, welches Sie interessiert. Abgabe per OneDrive bis am 22.06.2022 um 20:00 Uhr Abgabe: Bis am 22.06.2022 um 20:00 Uhr Es wird ein .zip-Ordner mit dem Namen name_vorname.zip (bzw. f√ºr Gruppen name1_vorname1_name2_vorname2.zip) per untenstehndem Hochladen-Knopf auf OneDrive abgegeben. Darin enthalten sind: Was\tFormat\tDateinameSelbstkritische Reflexion (eine pro Gruppe)\t.pdf\treflexion.pdf Podcast / Videobeitrag\t.mp3 / .mp4\tpodcast.mp3 / videobeitrag.mp4 Skript (Gliederung) des Podcasts / Videobeitrags\t.pdf\tskript.pdf Projektmaterial (Programmcode, Projektdateien)\tOrdner\tmaterial/ (ev. Tagebucheintr√§ge *)\t.pdf\ttagebuch_vorname.pdf * Wer das Tagebuch nicht auf der Website erfasst hat, kann dieses auch als PDF abgeben. Die auf der Website erfassten Tageb√ºcher werden zum Abgabezeitpunkt eingesammelt. Projekt hochladen Ablauf‚Äã Gruppengr√∂sse: max. 2 Personen Suchen Sie sich ein Thema, in welches Sie sich innerhalb von 5 Doppellektionen einarbeiten k√∂nnen. Ihr Projekt darf auch einen praktischen Teil beinhalten (muss aber nicht). Das Endprodukt ihres Projekts ist ein Podcast oder wenn Visualisierungen zwingend sind ein Videobeitrag von 4-7 Minuten. Zudem wird eine schriftliche Reflexion zum Arbeitsprozess und dem Projekt verfasst, der in die Beurteilung einfliesst. Beurteilung‚Äã Selbstkritische Reflexion‚Äã In der schriftlichen Selbstreflexion blicken Sie auf Ihr Praktikumsprojekt zur√ºck. Sie gehen dabei auf die folgenden Punkte ein und beleuchten diese differenziert und durchaus selbstkritisch: Arbeitsprozess Zeiteinteilung Nutzen der Unterrichtszeit Nutzen von Hilfestellungen Konzentrationsphasen ev. Arbeiten und Koordination im Team Lernerfolg Wie viel konnte ich neu dazulernen? Bin ich zufrieden damit? Wo h√§tten Sie sich mehr erw√ºnscht? Inwiefern wurden Ihre Erwartungen an die Lernerfahrung erf√ºllt? Podcast Wie zufrieden sind Sie mit dem Podcast/Videobeitrag? Wo best√ºnde noch Verbesserungspotential? Selbstbeurteilung Wie beurteilen Sie Ihre Leistung? Was w√ºrden Sie anders machen, was w√ºrden Sie besser machen? Sind Sie zufrieden mit dem Endprodukt? Wo liegen die St√§rken, wo die schw√§chen Ihres Projekts? Was gefiel Ihnen gut? Was gefiel Ihnen weniger gut? Welche Aspekte erscheinen Ihnen besonders relevant/erw√§hnenswert? Die selbstkritische Reflexion sollte im Minimum 500 W√∂rter lang sein. Verf√ºgbare Hardware an der Schule Die Schule bietet begrenzte Hardware-St√ºckzahlen, um sich z.B. im Rahmen eines Hardware-Projekts mit den M√∂glichkeiten der folgenden Ger√§te* auseinanderzusetzen. Micro:Bit Platine Maqueen Roboter (Gesteuert √ºber Micro:Bit) 3D Drucker EV3 Roboter (k√∂nnen nur an der Schule gebraucht werden) Arduinos inkl. mehrerer Sensoren, WLAN-Kompatibel Raspberry PI 3 (ohne WIFI) LoRaWan Modul (LILYGO¬Æ TTGO Meshtastic T-Beam V1.1 ESP32 LoRa 433/868/915/923Mhz Wireless Module WiFi GPS NEO-6M With OLED Display for Arduino) * Erfordert die R√ºcksprache mit Herrn Hofer, um die Verf√ºgbarkeiten zu organisieren 1. Themenwahl und Ideensuche‚Äã Informieren Sie sich √ºber Themen, die Sie spannend finden. Tauschen Sie sich anschliessend mit den Klassenkamerad:innen aus und finden Sie eine Projektpartner:in, welche Ihre Interessen teilt. Entscheiden Sie sich f√ºr ein Thema und schreiben Sie einen Projektantrag in folgender Vorlage: Vorlage Herunterladen F√ºllen Sie den Projektantrag aus und laden Sie den Antrag bis am Mittwoch, 11.05.2022 um 22:00 Uhr hoch: Projektantrag Hochladen Arbeitstagebuch Woche 1 2. Umsetzung des Projekts starten‚Äã Projektantrag gem√§ss R√ºckmeldung anpassen und mit der Umsetzung starten. Arbeitstagebuch Woche 2 3. Woche‚Äã Selbst√§ndiges Arbeiten an den Projekten. Holen Sie sich bei Fragen oder Unklarheiten fr√ºhzeitig Hilfe bei Herrn Hofer. Arbeitstagebuch Woche 3 4. Woche‚Äã Selbst√§ndiges Arbeiten an den Projekten. Holen Sie sich bei Fragen oder Unklarheiten fr√ºhzeitig Hilfe bei Herrn Hofer. Arbeitstagebuch Woche 4 5. Letzte Woche(n)‚Äã Vorbereitung und Aufnehmen der Podcasts Arbeitstagebuch Woche 5 (Arbeitstagebuch Woche 6) Ideensammlung‚Äã M√∂gliche Ideen - Sie d√ºrfen aber auch einen eigenen Projektvorschlag ausarbeiten. Algorithmen‚Äã Programmieren von zuf√§lligen Labyrinthen‚Äã Wie funktionieren Bitcoins?‚Äã Sie setzen sich mit dem Thema Blockchain und Bitcoins auseinander. Big Data / Data Mining‚Äã Was ist Big Data und wie beeinflusst es unser Leben?‚Äã Sie lesen zum Beispiel das Buch von Hannah Fry1 und beleuchten den kritisch den Einfluss der permanenten Datensammlung auf unsere Gesellschaft. @ Herunterladen Simulation‚Äã Mit Simulationen l√§sst sich die Wirklichkeit modellhaft abbilden und darin k√∂nnen Theorien √ºberpr√ºft und getestet werden. Insightmaker‚Äã Sie arbeiten sich in ein Simulationsprogramm, bspw. ins kostenlose Insightmaker, ein und modellieren damit ein Ph√§nomen wie etwa eine R√§uber-Beute-Beziehung, eine Monte-Carlos Simulation oder das Game of Life. Die beiden Seiten https://oinf.ch/kurs/simulationen und https://craft.dos/bwNrfufaSrdE3V geben einen guten √úberblick und Hilfestellungen f√ºr das Vorgehen und entsprechende Simulationen. Sensoren‚Äã Feuchtigkeits- und Temperaturanzeige‚Äã Sie schliessen einen Feuchtigkeitssensor sowie einen Temperatursensor an einen Arduino an. √úber die Arduino IDE werden die Sensorwerte eingelesen und auf einem Ausgabeger√§t angezeigt. Machine Learning‚Äã Artificial Intelligence, Machine Learning, Deep Learning - was bedeuten diese Begriffe?‚Äã Sie recherchieren √ºber die Bedeutung der Modew√∂rter AI, ML und DL und setzen diese in einen Kontext. https://www.mygreatlearning.com/blog/what-is-artificial-intelligence/ Wie funktionieren Suchvorschl√§ge auf Google?‚Äã Sie lesen sich ins Buch von Tommaso Teofili, Deep Learning for Search_20191 ein und berichten √ºber die Funktionsweise von Suchalgorithmen. A practical approach that shows you the state of the art in using neural networks, AI, and deep learning in the development of search engines. Herunterladen Die Buchausschnitte sind urheberrechtlich gesch√ºtzt und d√ºrfen ausschliesslich f√ºr den schulischen Gebrauch verwendet werden. Die Weitergabe ist verboten. ‚Ü©","keywords":""},{"title":"WIFI Sniffing","type":0,"sectionRef":"#","url":"/Netzwerke-of/Sicherheit/WIFI-Sniffing","content":"WIFI Sniffing Eine g√§ngige Attacke um an Login-Daten zu gelangen, ist das sogenannte WIFI-Sniffing. Hier werden zwei Dinge ausgenutzt: Die SSID (Service Set IDentifier, also der Name eines WLAN's) eines Netzwerks kann frei gew√§hlt werden. Es ist auch m√∂glich, dass mehrere WLAN-Netzwerke denselben Namen haben. F√ºr einen Endbenutzer ist es praktisch nicht m√∂glich die unterschiedlichen Netzwerke voneinander zu unterscheiden. Die verschickten Datenpakete werden √ºber die Luft √ºbertragen - die verschickten Pakete k√∂nnen nicht nur vom WLAN-Accesspoint empfangen werden, sondern auch von anderen, speziell konfigurierte WLAN-Antennen. HTTP Protokoll 1‚Äã Das Hypertext Transfer Protocol (HTTP, englisch f√ºr Hypertext-√úbertragungsprotokoll) ist ein Protokoll zur √úbertragung von Daten auf der Anwendungsschicht √ºber ein Rechnernetz. Es wird haupts√§chlich eingesetzt, um Webseiten aus dem World Wide Web (WWW) in einen Webbrowser zu laden. Die Kommunikationseinheiten in HTTP zwischen Client und Server werden als Nachrichten bezeichnet, von denen es zwei unterschiedliche Arten gibt: die Anfrage (englisch Request) vom Client an den Server und die Antwort (englisch Response) als Reaktion darauf vom Server zum Client. Jede Nachricht besteht dabei aus zwei Teilen, dem Nachrichtenkopf (englisch Message Header, kurz: Header oder auch HTTP-Header genannt) und dem Nachrichtenrumpf (englisch Message Body, kurz: Body). Der Nachrichtenkopf enth√§lt Informationen √ºber den Nachrichtenrumpf wie etwa verwendete Codierungen oder den Inhaltstyp, damit dieser vom Empf√§nger korrekt interpretiert werden kann. Der Nachrichtenrumpf enth√§lt schliesslich die Nutzdaten. Wenn in einem Web Browser der Link zur URL http://www.example.net/infotext.html angeklickt wird, so wird an den Server mit dem Hostnamen www.example.net die Anfrage gerichtet, die Ressource /infotext.html zur√ºckzusenden. Der Name www.example.net wird dabei nat√ºrlich zuerst √ºber das DNS-Protokoll in eine IP-Adresse √ºbersetzt. Zur √úbertragung wird √ºber TCP eine HTTP-GET-Anforderung an den Server gesendet. Anfragemethoden Es gibt verschiedene HTTP Anfragemethoden, die bekannteste ist die GET Anfrage, welche eine Ressource anfordert. Sobald zus√§tzliche Daten an den Server √ºbertragen werden m√ºssen, z.B. um sich anzumelden, wird eine POST Anfrage verschickt, in welcher Formulardaten wie z.B. Benutzername und Passwort enthalten sind. HTTPS 2‚Äã Ohne Verschl√ºsselung sind Daten, die √ºber das Internet √ºbertragen werden, f√ºr jeden, der Zugang zum entsprechenden Netz hat, als Klartext lesbar. Das Hypertext Transfer Protocol Secure (HTTPS, englisch f√ºr ‚Äûsicheres Hypertext-√úbertragungsprotokoll‚Äú) ist ein Syntaktisch identisches Protokoll wie HTTP, nur dass die Daten zus√§tzlich Verschl√ºsselt werden. Mit der zunehmenden Verbreitung von offenen (d. h. unverschl√ºsselten) WLANs nimmt die Bedeutung von HTTPS zu, weil damit die Inhalte unabh√§ngig vom Netz verschl√ºsselt werden k√∂nnen. WIFI-Sniffing: Angriff‚Äã Ein Angreifer erzeugt ein √∂ffentliches WLAN-Netzwerk mit derselben SSID wie ein anderes bekanntes Netzwerk, oder setzt sich in ein Restaurant mit einem offenen WLAN. Verbindet sich jemand mit diesem Netzwerk, kann der Angreifer den Netzwerkverkehr √ºberwachen, indem alle verschickten Pakete decodiert werden (WIFI Sniffing). Das Decodieren funktioniert allerdings nur dann, wenn es sich um ein √∂ffentliches WLAN ohne Passwort handelt. Viele Computer und Smartphones sind so konfiguriert, dass sie automatisch eine Verbindung mit offenen WLANs aufbauen, um der Benutzerschaft maximalen Komfort zu bieten. Besucht ein Benutzer:innen dieses WLANs nun eine Website, kann der Angreifer die Anfrage mitlesen und so bspw. Benutzerstatistiken erheben. Gef√§hrlicher wird es, wenn auf einer Website, die mit dem HTTP Protokoll aufgerufen wird, Passw√∂rter eingegeben werden. Dann k√∂nnen die √ºbermittelten Passw√∂rter n√§mlich mitgelesen werden. Wieso funktioniert die Decodierung der Pakete bei Passwortgesch√ºtzte WIFIs nicht? Passwortgesch√ºtzte WIFIs verschl√ºsseln den Inhalt der √ºbertragenen Datenpakete zwischen Ihrem Ger√§t und dem Accesspoint. Die Decodierung kann nur vom Accesspoint vorgenommen werden. Schutz Wie k√∂nnen Sie sich vor WIFI Sniffing sch√ºtzen? ‚≠êÔ∏è Bin√§rdaten als Hexadezimalzahlen Bin√§rdaten als Hexadezimal Zahl‚Äã Bin√§rdaten sind f√ºr Menschen relativ umst√§ndlich zu merken und einzuordnen, da so viele Stellen notwendig sind. Abhilfe schafft das Hexadezimalsystem, welches statt Zwei (bin√§r) oder Zehn (dezimal) Sechzehn eindeutige Zeichen besitzt: 0 1 2 3 4 5 6 7 8 9 A B C D E F Sehr praktisch: mit einem Hexadezimalzeichen k√∂nnen alle Zust√§nde beschrieben werden, f√ºr die sonst 4 bits notwendig sind. Dezimal\tHexadezimal\tBin√§r0\t0\t0000 1\t1\t0001 2\t2\t0010 3\t3\t0011 4\t4\t0100 5\t5\t0101 6\t6\t0110 7\t7\t0111 8\t8\t1000 9\t9\t1001 10\tA\t1010 11\tB\t1011 12\tC\t1100 13\tD\t1101 14\tE\t1110 15\tF\t1111 Konvention 1 Byte = 2 Hexadezimalzahlen‚Äã So lassen sich Bin√§rzahlen, aufgeteilt in Bytes (=8 bits) durch zwei Hexadezimal Zahlen beschreiben: 1210=~0000 11002=~0C161910=~0001 00112=~13164210=~0010 10102=~2A1618910=~1011 11012=~BD16\\ \\begin{aligned} 12_{10} \\quad\\tilde{=}\\quad 0000 \\; 1100_{2} \\quad &amp; \\tilde{=}\\quad 0C_{16} \\\\ 19_{10} \\quad\\tilde{=}\\quad 0001 \\; 0011_{2} \\quad &amp; \\tilde{=}\\quad 13_{16} \\\\ 42_{10} \\quad\\tilde{=}\\quad 0010 \\; 1010_{2} \\quad &amp; \\tilde{=}\\quad 2A_{16} \\\\ 189_{10} \\quad\\tilde{=}\\quad 1011 \\; 1101_{2} \\quad &amp; \\tilde{=}\\quad BD_{16} \\end{aligned}¬†1210‚Äã=~000011002‚Äã1910‚Äã=~000100112‚Äã4210‚Äã=~001010102‚Äã18910‚Äã=~101111012‚Äã‚Äã=~0C16‚Äã=~1316‚Äã=~2A16‚Äã=~BD16‚Äã‚Äã Quelle: Wikipedia: HTTP ‚Ü© Quelle: Wikipedia: HTTPS ‚Ü©","keywords":""},{"title":" Pygame Zero","type":0,"sectionRef":"#","url":"/pgzero","content":" Pygame Zero @ üîó Offizielle Dokumentation üîó Coding Games With Pygame Zero &amp; Python üîó Beispiele aus dem Wireframe Magazine","keywords":""},{"title":"Beispiele","type":0,"sectionRef":"#","url":"/pgzero/A-examples","content":"Beispiele","keywords":""},{"title":"Zeichenprogramm","type":0,"sectionRef":"#","url":"/pgzero/A-examples/paint","content":"Zeichenprogramm Beschreibung‚Äã Ein Zeichenprogramm Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Paint&quot; WIDTH = 800 HEIGHT = 800 farbwahl = Actor(&quot;button_red&quot;) farbwahl.farbe = 255, 0, 0 farbwahl.top = 10 farbwahl.left = 10 loeschen = Actor(&quot;button_grey&quot;) loeschen.top = 70 loeschen.left = 10 def on_mouse_down(pos): if farbwahl.collidepoint(pos): if farbwahl.image == &quot;button_red&quot;: farbwahl.image = &quot;button_blue&quot; farbwahl.farbe = 0, 0, 255 elif farbwahl.image == &quot;button_blue&quot;: farbwahl.image = &quot;button_green&quot; farbwahl.farbe = 0, 255, 0 elif farbwahl.image == &quot;button_green&quot;: farbwahl.image = &quot;button_yellow&quot; farbwahl.farbe = 255, 255, 0 elif farbwahl.image == &quot;button_yellow&quot;: farbwahl.image = &quot;button_red&quot; farbwahl.farbe = 255, 0, 0 if loeschen.collidepoint(pos): screen.clear() def on_mouse_move(pos, buttons): if buttons: screen.draw.filled_circle(pos, 2, farbwahl.farbe) def draw(): farbwahl.draw() loeschen.draw() pgzrun.go() ","keywords":""},{"title":"Push to Hole","type":0,"sectionRef":"#","url":"/pgzero/A-examples/push-to-hole","content":"Push to Hole Beschreibung‚Äã Ein Ball muss mit der Maus in ein Loch geschoben werden. Das Loch √§ndert alle paar Sekunden seine Position. Grafiken‚Äã Programm‚Äã import pgzrun import random WIDTH = 800 HEIGHT = 800 green = 60, 180, 60 ball = Actor(&quot;ball_blau&quot;) ball.radius = ball.width / 2 ball.score = 0 loch = Actor(&quot;hole&quot;) def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def setze_ball(): ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def setze_loch(): loch.x = random.randint(0, WIDTH) loch.y = random.randint(0, HEIGHT) dauer = random.randint(3, 7) kollision_rand(loch) clock.schedule_unique(setze_loch, dauer) def on_mouse_move(pos): d = ball.distance_to(pos) if d &lt; ball.radius: stoss_laenge = ball.radius - d ball.x = ball.x + (ball.x - pos[0]) * stoss_laenge ball.y = ball.y + (ball.y - pos[1]) * stoss_laenge kollision_rand(ball) def update(): if ball.distance_to(loch) &lt; 10: ball.score = ball.score + 1 setze_ball() setze_loch() def draw(): screen.fill(green) loch.draw() ball.draw() screen.draw.text(&quot;Score: &quot; + str(ball.score), (10, 10), fontsize=60) setze_ball() setze_loch() pgzrun.go() ","keywords":""},{"title":"Pong","type":0,"sectionRef":"#","url":"/pgzero/A-examples/pong","content":"Pong Beschreibung‚Äã Klassisches Pong-Spiel Grafiken‚Äã Programm‚Äã import pgzrun TITLE = &quot;Pong&quot; WIDTH = 1200 HEIGHT = 800 PLAYER_SPEED = 5 spieler_links = Actor(&quot;schlaeger_blau&quot;) spieler_links.score = 0 spieler_links.y = HEIGHT / 2 spieler_links.left = 5 spieler_rechts = Actor(&quot;schlaeger_rot&quot;) spieler_rechts.score = 0 spieler_rechts.y = HEIGHT / 2 spieler_rechts.right = WIDTH - 6 ball = Actor(&quot;ball_blau_klein&quot;) ball.x = WIDTH / 2 ball.y = HEIGHT / 2 ball.vx = 5 ball.vy = 3 def bewege_spieler(spieler, up_key, down_key): if up_key: spieler.y = spieler.y - PLAYER_SPEED if down_key: spieler.y = spieler.y + PLAYER_SPEED if spieler.bottom &gt;= HEIGHT: spieler.bottom = HEIGHT - 1 if spieler.top &lt; 0: spieler.top = 0 def bewege_ball(): # Ball bewegen ball.x = ball.x + ball.vx ball.y = ball.y + ball.vy if ball.top &lt; 0: ball.top = 0 ball.vy = -ball.vy if ball.bottom &gt;= HEIGHT - 1: ball.bottom = HEIGHT - 1 ball.vy = -ball.vy # Abprallen am rechten Schl√§ger if ball.right &gt; spieler_rechts.left and ball.bottom &gt; spieler_rechts.top and ball.top &lt; spieler_rechts.bottom: ball.right = spieler_rechts.left ball.vx = -ball.vx # Abprallen am linken Schl√§ger if ball.left &lt; spieler_links.right and ball.bottom &gt; spieler_links.top and ball.top &lt; spieler_links.bottom: ball.left = spieler_links.right ball.vx = -ball.vx # Punkt f√ºr linken Spieler if ball.right &gt;= WIDTH: spieler_links.score = spieler_links.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 # Punkt f√ºr rechten Spieler if ball.left &lt; 0: spieler_rechts.score = spieler_rechts.score + 1 ball.x = WIDTH / 2 ball.y = HEIGHT / 2 def update(): # linken Schl√§ger bewegen bewege_spieler(spieler_links, keyboard.q, keyboard.a) # rechten Schl√§ger bewegen bewege_spieler(spieler_rechts, keyboard.o, keyboard.l) bewege_ball() def zeichne_punktestand(): screen.draw.text(str(spieler_links.score), centerx=WIDTH / 2 - 80, top=20, fontsize=100) screen.draw.text(str(spieler_rechts.score), centerx=WIDTH / 2 + 80, top=20, fontsize=100) def draw(): screen.clear() spieler_links.draw() spieler_rechts.draw() ball.draw() zeichne_punktestand() pgzrun.go() ","keywords":""},{"title":"Animation","type":0,"sectionRef":"#","url":"/pgzero/animation","content":"Animation def draw(): wird von Pygame Zero aufgerufen. Hier wird gezeichnet. def update(): wird von Pygame Zero aufgerufen. Hier wird der n√§chste Animationsschritt berechnet. Start von Pygame Zero‚Äã Im Pygame Zero-Modus des Mu Editors wird Pygame Zero automatisch gestartet, sobald das eigene Skript fertig abgearbeitet worden ist. In einem anderen Editor muss Pygame Zero durch einen Befehl am Ende des eigenen Skripts gestartet werden. Dazu muss das Modul pgzrun importiert werden: import pgzrun # Eigene Befehle ... pgzrun.go() Funktionsweise von Pygame Zero ohne Animation‚Äã Das Hauptprogramm von Pygame Zero wird erst gestartet, nachdem das ganze Skript abgearbeitet worden ist. Daf√ºr sorgt der spezielle Modus des Mu-Editors. Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen WIDTH und HEIGHT verwendet. Anschliessend ruft Pygame Zero das Unterprogramm draw() auf, welches im eignen Skript definiert worden ist. import pgzrun WEISS = (255, 255, 255) SCHWARZ = (0, 0, 0) def draw(): screen.fill(WEISS) screen.draw.text(&quot;Hallo Welt&quot;, top=10, left=10, color=SCHWARZ) pgzrun.go() Funktionsweise von Pygame Zero mit Animation‚Äã Falls im eigenen Skript ein Unterprogramm mit dem Namem update definiert wird, geht Pygame Zero davon aus, dass es sich um eine Animation handelt. Die Funktionsweise von Pygame Zero √§ndert sich entsprechend: Pygame Zero erstellt zun√§chst ein Fenster. Dazu werden die aktuellen Angaben in den Variablen TITLE, WIDTH und HEIGHT verwendet. Anschliessend startet Pygame Zero den sogenannten Game Loop. Dabei wird erst das Unterprogramm update aufgerufen und anschliessend draw. Dies wird so lange wiederholt, bis das Programm abgebrochen wird. import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def update(): nemo.x = nemo.x + 1 def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Aufrufe planen","type":0,"sectionRef":"#","url":"/pgzero/clock","content":"Aufrufe planen Um eine Aktion erst nach einer bestimmten Zeit auszul√∂sen, k√∂nnen mit dem clock-Objekt zuk√ºnftige Aufrufe von Unterprogrammen geplant werden. clock.schedule_unique(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Alle anderen geplanten Aufrufe des gleichen Unterprogramms werden abgebrochen. clock.schedule(u, s) plant den einmaligen Aufruf des Unterprogramms u in s Sekunden. Nachdem diese Zeit verstrichen ist, wird das Unterprogramm u aufgerufen. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.schedule_interval(u, s) plant den regelm√§ssigen Aufruf des Unterprogramms u alle s Sekunden. Andere geplante Aufrufe des gleichen Unterprogramms werden nicht beeinflusst. clock.unschedule(u) bricht alle geplanten Aufrufe des Unterprogramms u ab. Beispiel‚Äã Im folgenden Beispiel √§ndert das Aussehen des Fisches 1.5 Sekunden, nachdem die [Space]-Taste gedr√ºckt wurde. F√ºr die gew√ºnschte Aktion wird das Unterprogramm aendere_nemo definiert. Der Name des Unterprogramms kann frei gew√§hlt werden. Mit der Anweisung clock.schedule() wird der Aufruf geplant. Dabei werden in Klammern das aufzurufende Unterprogramm und die Verz√∂gerung in Sekunden angegeben: import pgzrun nemo = Actor(&quot;fisch_rot_rechts&quot;) def aendere_nemo(): nemo.image = &quot;fisch_rot_links&quot; def update(): if keyboard.space: clock.schedule(aendere_nemo, 1.5) def draw(): screen.clear() nemo.draw() pgzrun.go() ","keywords":""},{"title":"Asteroids","type":0,"sectionRef":"#","url":"/pgzero/A-examples/asteroids","content":"Asteroids Grafiken‚Äã Quellen: Asteroid: OhjiroChan, OpenGameArt, Lizenz: CC0 Spaceship: Rawdanitsu, OpenGameArt, Lizenz: CC0 Laser and Thrust: Rawdanitsu, OpenGameArt, Lizenz: CC0 Programm‚Äã import math import pgzrun import random TITLE = &quot;Asteroids&quot; WIDTH = 1600 HEIGHT = 1200 ACCELERATION = 0.2 ROTATION = 3 SHOT_SPEED = 5 SHOT_COOLDOWN = 0.2 SHOT_DAMAGE = 10 SHOT_MAX_AGE = 3 background = Actor(&quot;weltraum&quot;) ship = Actor(&quot;raumschiff&quot;) thrust = Actor(&quot;raumschiff2&quot;) thrust.on = False asteroids = [] shots = [] def add_asteroid(parent=None): if parent: category = parent.category - 1 else: category = 3 asteroid = Actor(&quot;asteroid-&quot; + str(category)) if parent: asteroid.x = parent.x asteroid.y = parent.y else: asteroid.x = random.randint(0, WIDTH) asteroid.y = random.randint(0, HEIGHT) asteroid.vx = 0 asteroid.vy = 0 asteroid.category = category asteroid.stability = 30 * category acc = random.randint(1, 2) dir = random.randint(0, 360) accelerate(asteroid, acc, dir) asteroids.append(asteroid) def enable_shooting(): ship.can_shoot = True def add_shot(): shot = Actor(&quot;laser&quot;) shot.x = ship.x shot.y = ship.y shot.vx = 0 shot.vy = 0 shot.age = 0 shot.angle = ship.angle accelerate(shot, SHOT_SPEED, shot.angle) ship.can_shoot = False clock.schedule_unique(enable_shooting, SHOT_COOLDOWN) shots.append(shot) def accelerate(actor, acc, dir): a = math.radians(dir) actor.vx = actor.vx + math.cos(a) * acc actor.vy = actor.vy - math.sin(a) * acc def move(actor): actor.x = actor.x + actor.vx actor.y = actor.y + actor.vy if actor.x &gt; WIDTH: actor.x = 0 if actor.x &lt; 0: actor.x = WIDTH if actor.y &gt; HEIGHT: actor.y = 0 if actor.y &lt; 0: actor.y = HEIGHT def reset_game(): ship.x = WIDTH / 2 ship.y = HEIGHT / 2 ship.vx = 0 ship.vy = 0 ship.angle = 0 ship.speed = 0 ship.alive = True ship.can_shoot = True asteroids.clear() for i in range(1, 3): add_asteroid() def update_asteroid(asteroid): move(asteroid) i = asteroid.collidelist(shots) if i != -1: del shots[i] asteroid.stability = asteroid.stability - SHOT_DAMAGE if asteroid.stability &lt;= 0: asteroids.remove(asteroid) if asteroid.category &gt; 1: add_asteroid(asteroid) add_asteroid(asteroid) def update_shot(shot, dt): move(shot) shot.age = shot.age + dt if shot.age &gt; SHOT_MAX_AGE: shots.remove(shot) def update(dt): thrust.on = keyboard.up if keyboard.up: accelerate(ship, ACCELERATION, ship.angle) if keyboard.left: ship.angle = ship.angle + ROTATION if keyboard.right: ship.angle = ship.angle - ROTATION if keyboard.space and ship.can_shoot: add_shot() if keyboard.space and not ship.alive: reset_game() move(ship) if ship.collidelist(asteroids) != -1: ship.alive = False ship.can_shoot = False for asteroid in asteroids: update_asteroid(asteroid) for shot in shots: update_shot(shot, dt) def draw(): background.draw() for asteroid in asteroids: asteroid.draw() for shot in shots: shot.draw() if ship.alive: if thrust.on: thrust.x = ship.x thrust.y = ship.y thrust.angle = ship.angle thrust.draw() ship.draw() else: screen.draw.text(&quot;GAME OVER&quot;, center=(WIDTH / 2, HEIGHT / 2), fontsize=100) screen.draw.text( &quot;Press SPACE to start&quot;, center=(WIDTH / 2, HEIGHT / 2 + 60), fontsize=30 ) reset_game() pgzrun.go() ","keywords":""},{"title":"How-To","type":0,"sectionRef":"#","url":"/pgzero/howto","content":"How-To","keywords":""},{"title":"Tippspiel","type":0,"sectionRef":"#","url":"/pgzero/A-examples/typing","content":"Tippspiel Beschreibung‚Äã Spiel, bei welchem man W√∂rter richtig abtippen muss, bevor die Zeit abl√§uft. Programm‚Äã import pgzrun import random TITLE = &quot;Typing Game&quot; WIDTH = 640 HEIGHT = 360 BG_COLOUR = (255, 255, 255) BLACK = (0, 0, 0) KEYMAP = { keys.A: &quot;a&quot;, keys.B: &quot;b&quot;, keys.C: &quot;c&quot;, keys.D: &quot;d&quot;, keys.E: &quot;e&quot;, keys.F: &quot;f&quot;, keys.G: &quot;g&quot;, keys.H: &quot;h&quot;, keys.I: &quot;i&quot;, keys.J: &quot;j&quot;, keys.K: &quot;k&quot;, keys.L: &quot;l&quot;, keys.M: &quot;m&quot;, keys.N: &quot;n&quot;, keys.O: &quot;o&quot;, keys.P: &quot;p&quot;, keys.Q: &quot;q&quot;, keys.R: &quot;r&quot;, keys.S: &quot;s&quot;, keys.T: &quot;t&quot;, keys.U: &quot;u&quot;, keys.V: &quot;v&quot;, keys.W: &quot;w&quot;, keys.X: &quot;x&quot;, keys.Y: &quot;y&quot;, keys.Z: &quot;z&quot;, keys.QUOTE: &quot;√§&quot;, keys.SEMICOLON: &quot;√∂&quot;, keys.LEFTBRACKET: &quot;√º&quot;, keys.SPACE: &quot; &quot; } words = [] file = open(&quot;wordlist.txt&quot;, &quot;r&quot;, -1, &quot;utf-8&quot;) for line in file: # Newline am Zeilenende abschneiden line = line.rstrip(&quot;\\n&quot;) # Wort zur Liste hinzuf√ºgen words.append(line) file.close() game = Actor(&quot;alien&quot;) game.level = 0 game.text = &quot;&quot; game.time = 5 MAX_TIME = 10 def update(dt): game.time = game.time - dt def draw(): screen.fill(BG_COLOUR) if game.time &lt; 0: screen.draw.text( &quot;GAME OVER&quot;, centerx=WIDTH / 2, centery=HEIGHT / 2, fontsize=60, color=BLACK ) return screen.draw.text(words[game.level], left=20, top=80, fontsize=60, color=BLACK) screen.draw.text(game.text, left=20, top=160, fontsize=60, color=(255, 0, 0)) width = WIDTH * game.time / MAX_TIME screen.draw.filled_rect(Rect((0, 10), (width, 50)), BLACK) def on_key_down(key): print(key) if game.time &lt; 0: return if key in KEYMAP: char = KEYMAP[key] if keyboard.lshift or keyboard.rshift: char = char.upper() game.text = game.text + char if key == keys.BACKSPACE: game.text = game.text[:-1] if game.text == words[game.level]: game.level = game.level + 1 game.time = game.time + 0.3 * len(game.text) game.text = &quot;&quot; pgzrun.go() ","keywords":""},{"title":"Aktor","type":0,"sectionRef":"#","url":"/pgzero/actor","content":"Aktor Grundlegendes‚Äã nemo = Actor(bild) erstellt einen neuen Aktor. bild ist der Name einer Bilddatei. nemo.draw() zeichnet den Aktor nemo in das Fenster. Position‚Äã Positionierung in Pygame Zero nemo.bottom ist die y-Koordinate des unteren Rands von nemo. nemo.left ist die x-Koordinate des linken Rands von nemo. nemo.right ist die x-Koordinate des rechten Rands von nemo. nemo.top ist die y-Koordinate des oberen Rands von nemo. nemo.x ist die x-Koordinate des Ankers von nemo. nemo.y ist die y-Koordinate des Ankers von nemo. nemo.angle ist die Rotation von nemo in Grad im Gegenuhrzeigersinn. Kollision‚Äã nemo.collidepoint(x, y) √ºberpr√ºft, ob nemo mit dem Punkt mit den Koordinaten x, y kollidiert. nemo.collidepoint(pos) √ºberpr√ºft, ob nemo mit dem Punkt mit den Punkt pos kollidiert. So kann beispielsweise √ºberpr√ºft werden, ob ein Aktor mit der Maus angeklickt wird: def on_mouse_down(pos): if nemo.collidepoint(pos): print(&quot;Nemo mit Maus ber√ºhrt.&quot;) nemo.colliderect(dory) √ºberpr√ºft, ob nemo mit dory kollidiert. nemo.collidelist(liste) √ºberpr√ºft, ob nemo mit einem Aktor in der Liste liste kollidiert. In dem Fall wird der Index des kollidierenden Aktors in der Liste zur√ºckgeliefert. Wenn kein Aktor der Liste mit nemo kollidiert, wird -1 zur√ºckgeliefert. Messung‚Äã nemo.distance_to(dory) misst die Distanz zwischen nemo und dory. nemo.angle_to(dory) misst den Winkel von nemo aus in Richtung dory.","keywords":""},{"title":"Jump & Run","type":0,"sectionRef":"#","url":"/pgzero/howto/jump","content":"Jump &amp; Run import pgzrun WIDTH = 800 HEIGHT = 600 alien = Actor(&quot;alien&quot;) alien.x = WIDTH / 2 alien.vy = 0 schwerkraft = 0.1 boden = 550 sprung = -5 hintergrundfarbe = 0, 0, 0 def update(): alien.vy = alien.vy + schwerkraft alien.y = alien.y + alien.vy if alien.bottom &gt; boden: alien.vy = 0 alien.bottom = boden if keyboard.space and alien.vy == 0: alien.vy = sprung def draw(): screen.fill(hintergrundfarbe) alien.draw() pgzrun.go() ","keywords":""},{"title":"Zeichnen","type":0,"sectionRef":"#","url":"/pgzero/draw","content":"Zeichnen Kreise‚Äã screen.draw.circle((x, y), r, farbe) zeichnet eine Kreislinie mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. screen.draw.filled_circle((x, y), r, farbe) zeichnet einen ausgef√ºllten Kreis mit dem Mittelpunkt (x, y) und dem Radius r in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Rechtecke‚Äã Rect(x, y, w, h) erstellt ein Rechteck-Objekt. Dabei sind x und y die Koordinaten der linken oberen Ecke, w ist die Breite und h die H√∂he des Rechtecks. screen.draw.rect(rect, farbe) zeichnet ein Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. screen.draw.filled_rect(rect, farbe) zeichnet ein ausgef√ºlltes Rechteck in der angegebenen Farbe. Dabei ist rect ein Rechteck-Objekt, farbe muss ein RGB-Tupel sein. Linien‚Äã screen.draw.line((x1, y1), (x2, y2), farbe) zeichnet eine Linie vom Punkt (x1, y1) zum Punkt (x2, y2) in der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Text‚Äã screen.draw.text(text, left=x, top=y, fontsize=, fontname=, color=) zeichnet den Text text an der angegebenen Position. Mit fontsize= kann die Schriftgr√∂sse festgelegt werden. Die horizontale Ausrichtung des Texts wird durch left=, centerx= oder right= angegeben, die vertikale Ausrichtung durch top=, centery= oder bottom=: Mit fontname= wird der Name einer Schriftart-Datei angegeben, welche im Unterverzeichnis fonts vorhanden sein muss. Mit color=(r, g, b) wird die Farbe angegeben. F√ºr die Angabe der horizontalen und vertikalen Koordinate muss je einer der obenstehenden Namen verwendet werden. Die folgende Anweisung zeichnet beispielsweise den Text ¬´Hallo Welt¬ª so, dass sich der Punkt (100, 100) unten und horizontal in der Mitte des Texts befindet: screen.draw.text(&quot;Hallo Welt&quot;, centerx=100, bottom=100, color=(255, 0, 0)) ","keywords":""},{"title":"Tastatur","type":0,"sectionRef":"#","url":"/pgzero/keyboard","content":"Tastatur Es gibt zwei M√∂glichkeiten, auf Tastatureingaben zu reagieren. Es wird der aktuelle Zustand einer bestimmten Taste ermittelt. Das ist beispielsweise der Fall, wenn sich die Spielfigur bewegen soll, falls eine bestimmte Taste gedr√ºckt ist. Es wird auf das Dr√ºcken oder Loslassen einer Taste reagiert. In diesem Fall wird von einem Ereignis gesprochen. Dies wird beispielsweise verwendet, wenn eine Spielfigur springen soll, wenn eine Taste gedr√ºckt wird.","keywords":""},{"title":"Tastatursteuerung","type":0,"sectionRef":"#","url":"/pgzero/howto/keyboard-control","content":"Tastatursteuerung Beschreibung‚Äã Einfaches Beispiel, wie eine Figur mit der Tastatur gesteuert wird. Programm‚Äã import pgzrun WIDTH = 800 HEIGHT = 600 hintergrund = 0, 150, 220 nemo = Actor(&quot;fisch_rot_rechts&quot;) nemo.x = WIDTH / 2 nemo.y = HEIGHT / 2 def kollision_rand(objekt): if objekt.left &lt; 0: objekt.left = 0 if objekt.right &gt;= WIDTH: objekt.right = WIDTH - 1 if objekt.top &lt; 0: objekt.top = 0 if objekt.bottom &gt;= HEIGHT: objekt.bottom = HEIGHT - 1 def update(): if keyboard.left: nemo.x = nemo.x - 3 nemo.image = &quot;fisch_rot_links&quot; if keyboard.right: nemo.x = nemo.x + 3 nemo.image = &quot;fisch_rot_rechts&quot; if keyboard.up: nemo.y = nemo.y - 3 if keyboard.down: nemo.y = nemo.y + 3 kollision_rand(nemo) def draw(): screen.fill(hintergrund) nemo.draw() pgzrun.go() ","keywords":""},{"title":"Geschoss","type":0,"sectionRef":"#","url":"/pgzero/howto/bullet","content":"Geschoss Schuss ausl√∂sen‚Äã Ein Geschoss ist ein Aktor, der sich nicht von Anfang an bewegt. Der Aktor muss sich somit merken, ob er schon ¬´existiert¬ª. Dies kann erreicht werden, indem eine Variable geschoss.aktiv definiert wird: geschoss = Actor(&quot;laser&quot;) geschoss.aktiv = False Der Schuss wird nur gezeichnet, wenn er aktiv ist: def draw(): if geschoss.aktiv: geschoss.draw() Wenn der Schuss ausgel√∂st wird, wird er ¬´aktiviert¬ª. Der Schuss wird an die Stelle gesetzt, wo sich das Objekt befindet, welches den Schuss abgibt: def schiesse(): geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.vx = 2 geschoss.vy = 0 geschoss.aktiv = True Schussrichtung‚Äã Damit sich der Schuss in die richtige Richtung bewegt, m√ºssen die horizontale und vertikale Geschwindigkeit des Geschosses vxv_xvx‚Äã und vyv_yvy‚Äã ausgerechnet werden. Bekannt sind die gew√ºnschte Geschwindigkeit vvv und der Winkel aaa: Im rechtwinkligen Dreieck k√∂nnen nun vxv_xvx‚Äã und vyv_yvy‚Äã mit den trigonometrischen Formeln berechnet werden: vx=v‚ãÖsin‚Å°(a)vy=v‚ãÖcos‚Å°(a)\\ v_x = v \\cdot \\sin(a)\\qquad v_y = v \\cdot \\cos(a)¬†vx‚Äã=v‚ãÖsin(a)vy‚Äã=v‚ãÖcos(a) Um die trigonometrischen Funktionen in Python verwenden zu k√∂nnen, muss das Modul math importiert werden: import math Ausserdem muss der Richtungswinkel des Raumschiffs von Grad nach Radiant umgerechnet werden: a = math.radians(raumschiff.angle) Nun k√∂nnen die trigonometrischen Formeln umgesetzt werden. Es muss beachtet werden, dass in Pygame Zero im Gegensatz zur Mathematik die y-Achse nach unten zeigt. Deshalb wird der Wert von vyv_yvy‚Äã negiert. geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) Vollst√§ndiges Beispiel‚Äã import pgzrun import math WIDTH = 1600 HEIGHT = 1200 hintergrund = Actor(&quot;weltraum&quot;) raumschiff = Actor(&quot;raumschiff&quot;) raumschiff.x = WIDTH / 2 raumschiff.y = HEIGHT / 2 geschoss = Actor(&quot;laser&quot;) geschoss.vx = 0 geschoss.vy = 0 geschoss.aktiv = False def draw(): hintergrund.draw() raumschiff.draw() if geschoss.aktiv: geschoss.draw() def schiesse(): geschoss.aktiv = True geschoss.x = raumschiff.x geschoss.y = raumschiff.y geschoss.angle = raumschiff.angle a = math.radians(raumschiff.angle) v = 3 geschoss.vx = v * math.cos(a) geschoss.vy = -v * math.sin(a) def on_key_down(key): if key == keys.SPACE: schiesse() def update(): geschoss.x = geschoss.x + geschoss.vx geschoss.y = geschoss.y + geschoss.vy if keyboard.a: raumschiff.angle = raumschiff.angle + 2 if keyboard.d: raumschiff.angle = raumschiff.angle - 2 pgzrun.go() ","keywords":""},{"title":"Tastaturereignisse","type":0,"sectionRef":"#","url":"/pgzero/keyboard/event","content":"Tastaturereignisse def on_key_down(taste): wird aufgerufen, wenn eine Taste gedr√ºckt wird. def on_key_up(taste): wird aufgerufen, wenn eine Taste losgelassen wird. Die Variable taste kann folgende Werte annehmen: Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeys.A\t[Y]\tkeys.Y [B]\tkeys.B\t[Z]\tkeys.Z\t[0]\tkeys.K_0 [C]\tkeys.C\t[√§]\tkeys.QUOTE\t[1]\tkeys.K_1 [D]\tkeys.D\t[√∂]\tkeys.SEMICOLON\t[2]\tkeys.K_2 [E]\tkeys.E\t[√º]\tkeys.LEFTBRACKET\t[3]\tkeys.K_3 [F]\tkeys.F\t[,]\tkeys.COMMA\t[4]\tkeys.K_4 [G]\tkeys.G\t[.]\tkeys.PERIOD\t[5]\tkeys.K_5 [H]\tkeys.H\t[Space]\tkeys.SPACE\t[6]\tkeys.K_6 [I]\tkeys.I\t[Tab]\tkeys.TAB\t[7]\tkeys.K_7 [J]\tkeys.J\t[Backspace]\tkeys.BACKSPACE\t[8]\tkeys.K_8 [K]\tkeys.K\t[Enter]\tkeys.RETURN\t[9]\tkeys.K_9 [L]\tkeys.L\t[Esc]\tkeys.ESCAPE\t[F1]\tkeys.F1 [M]\tkeys.M\t[CapsLock]\tkeys.CAPSLOCK\t[F2]\tkeys.F2 [N]\tkeys.N\tLinke [Shift]\tkeys.LSHIFT\t[F3]\tkeys.F3 [O]\tkeys.O\tRechte [Shift]\tkeys.RSHIFT\t[F4]\tkeys.F4 [P]\tkeys.P\tLinke [Ctrl]\tkeys.LCTRL\t[F5]\tkeys.F5 [Q]\tkeys.Q\tRechte [Ctrl]\tkeys.RCTRL\t[F6]\tkeys.F6 [R]\tkeys.R\tLinke [Alt]\tkeys.LALT\t[F7]\tkeys.F7 [S]\tkeys.S\tRechte [Alt Gr]\tkeys.RALT\t[F8]\tkeys.F8 [T]\tkeys.T\t[Up]\tkeys.UP\t[F9]\tkeys.F9 [U]\tkeys.U\t[Left]\tkeys.LEFT\t[F10]\tkeys.F10 [V]\tkeys.V\t[Down]\tkeys.DOWN\t[F11]\tkeys.F11 [W]\tkeys.W\t[Right]\tkeys.RIGHT\t[F12]\tkeys.F12 [X]\tkeys.X ","keywords":""},{"title":"Tastaturzustand","type":0,"sectionRef":"#","url":"/pgzero/keyboard/state","content":"Tastaturzustand Das Objekt keyboard repr√§sentiert die Tastatur. F√ºr jede Taste gibt eine entsprechende Variable des keyboard-Objekts an, ob diese gerade gedr√ºckt ist. Normale Tasten‚Äã Taste\tVariable\tTaste\tVariable\tTaste\tVariable[A]\tkeyboard.a\t[Y]\tkeyboard.y\t[0]\tkeyboard.k_0 [B]\tkeyboard.b\t[Z]\tkeyboard.z\t[1]\tkeyboard.k_1 [C]\tkeyboard.c\t[√§]\tkeyboard.quote\t[2]\tkeyboard.k_2 [D]\tkeyboard.d\t[√∂]\tkeyboard.semicolon\t[3]\tkeyboard.k_3 [E]\tkeyboard.e\t[√º]\tkeyboard.leftbracket\t[4]\tkeyboard.k_4 [F]\tkeyboard.f [5]\tkeyboard.k_5 [G]\tkeyboard.g\t[,]\tkeyboard.comma\t[6]\tkeyboard.k_6 [H]\tkeyboard.h\t[.]\tkeyboard.period\t[7]\tkeyboard.k_7 [I]\tkeyboard.i\t[Space]\tkeyboard.space\t[8]\tkeyboard.k_8 [J]\tkeyboard.j\t[Tab]\tkeyboard.tab\t[9]\tkeyboard.k_9 [K]\tkeyboard.k\t[Backspace]\tkeyboard.backspace\t[F1]\tkeyboard.f1 [L]\tkeyboard.l\t[Enter]\tkeyboard.return\t[F2]\tkeyboard.f2 [M]\tkeyboard.m\t[Esc]\tkeyboard.escape\t[F3]\tkeyboard.f3 [N]\tkeyboard.n\t[CapsLock]\tkeyboard.capslock\t[F4]\tkeyboard.f4 [O]\tkeyboard.o\tLinke [Shift]\tkeyboard.lshift\t[F5]\tkeyboard.f5 [P]\tkeyboard.p\tRechte [Shift]\tkeyboard.rshift\t[F6]\tkeyboard.f6 [Q]\tkeyboard.q\tLinke [Ctrl]\tkeyboard.lctrl\t[F7]\tkeyboard.f7 [R]\tkeyboard.r\tRechte [Ctrl]\tkeyboard.rctrl\t[F8]\tkeyboard.f8 [S]\tkeyboard.s\tLinke [Alt]\tkeyboard.lalt\t[F9]\tkeyboard.f9 [T]\tkeyboard.t\tRechte [Alt Gr]\tkeyboard.ralt\t[F10]\tkeyboard.f10 [U]\tkeyboard.u\t[Up]\tkeyboard.up\t[F11]\tkeyboard.f11 [V]\tkeyboard.v\t[Left]\tkeyboard.left\t[F12]\tkeyboard.f12 [W]\tkeyboard.w\t[Down]\tkeyboard.down [X]\tkeyboard.x\t[Right]\tkeyboard.right Ziffernblock‚Äã Taste\tVariable\tTaste\tVariable[0]\tkeyboard.kp0\t[9]\tkeyboard.kp9 [1]\tkeyboard.kp1\t[.] / [Del]\tkeyboard.kp_period [2] / [Down]\tkeyboard.kp2\t[Enter]\tkeyboard.kp_enter [3]\tkeyboard.kp3\t[+]\tkeyboard.kp_plus [4] / [Left]\tkeyboard.kp4\t[-]\tkeyboard.kp_minus [5]\tkeyboard.kp5\t[*]\tkeyboard.kp_multiply [6] / [Right]\tkeyboard.kp6\t[/]\tkeyboard.kp_divide [7]\tkeyboard.kp7\t[Num]\tkeyboard.numlock [8] / [Up]\tkeyboard.kp8 import pgzrun def update(): if keyboard.a: print(&quot;A wird gedr√ºckt&quot;) if keyboard.w: print(&quot;W wird gedr√ºckt&quot;) if keyboard.s: print(&quot;S wird gedr√ºckt&quot;) if keyboard.d: print(&quot;D wird gedr√ºckt&quot;) pgzrun.go() ","keywords":""},{"title":"Maus","type":0,"sectionRef":"#","url":"/pgzero/mouse","content":"Maus def on_mouse_down(pos): wird aufgerufen, wenn eine Maustaste gedr√ºckt wird. def on_mouse_up(pos): wird aufgerufen, wenn eine Maustaste losgelassen wird. def on_mouse_move(pos): wird aufgerufen, wenn die Maus bewegt wird.","keywords":""},{"title":"Parallax-Scrolling","type":0,"sectionRef":"#","url":"/pgzero/howto/parallax","content":"Parallax-Scrolling Bilder‚Äã Bildquelle: Craftpix.net, OpenGameArt, Lizenz: OGA Code‚Äã import pgzrun WIDTH = 800 HEIGHT = 450 ebenen = [] for i in range(7): name = &quot;hintergrund&quot; + str(i) ebene = Actor(name) ebene.geschwindigkeit = 0.2 * i ebenen.append(ebene) def update(): for ebene in ebenen: ebene.x = ebene.x - ebene.geschwindigkeit if ebene.right &lt; 0: ebene.x = ebene.x + ebene.width def draw(): screen.clear() for ebene in ebenen: ebene.draw() ebene.x = ebene.x + ebene.width ebene.draw() ebene.x = ebene.x - ebene.width pgzrun.go() ","keywords":""},{"title":"Fenster","type":0,"sectionRef":"#","url":"/pgzero/window","content":"Fenster Fenster definieren‚Äã TITLE legt den Fenstertitel fest. WIDTH legt die Breite des Fensters in Pixel fest. HEIGHT legt die H√∂he des Fensters in Pixel fest. import pgzrun TITLE = 'Mein Spiel' WIDTH = 800 HEIGHT = 600 pgzrun.go() Fenster verwenden‚Äã Diese Anweisungen d√ºrfen nur in einem Unterprogramm verwendet werden. screen.width liefert die Breite des aktuellen Fensters in Pixel zur√ºck. screen.height liefert die H√∂he des aktuellen Fensters in Pixel zur√ºck. screen.clear() f√ºllt das Fenster mit der Farbe Schwarz. screen.fill(farbe) f√ºllt das Fenster mit der angegebenen Farbe. farbe muss ein RGB-Tupel sein. Fenster schliessen‚Äã quit() schliesst das Fenster.","keywords":""},{"title":"Musik und Soundeffekte","type":0,"sectionRef":"#","url":"/pgzero/sound","content":"Musik und Soundeffekte Soundeffekte‚Äã Soundeffekte m√ºssen im Format WAV oder OGG im Unterordner sound abgespeichert werden. sounds.name.play() spielt den Soundeffekt mit dem Name name ab. Um beispielsweise den Soundeffekt extraleben.wav abzuspielen, schreibt man: sounds.extraleben.play() Musik‚Äã Musikdateien m√ºssen im Format MP3 oder OGG im Unterordner music abgelegt werden. Um die Datei hintergrundmusik.mp3 abzuspielen, schreibt man: music.play(&quot;hintergrundmusik&quot;) music.play(name) spielt die Musikdatei mit dem Namen name ab. Das Abspielen wird endlos wiederholt. music.play_once(name) spielt die Musikdatei mit dem Namen name ab. Die Musikdatei wird nur einmal abgespielt. music.queue(name) f√ºgt die Musikdatei mit dem Namen name in die Abspielliste ein. music.stop() stoppt das Abspielen der Musik. music.pause() pausiert das Abspielen der Musik. music.unpause() nimmt das Abspielen der Musik nach einer Pause wieder auf. music.is_playing() √ºberpr√ºft, ob zur Zeit Musik abgespielt wird.","keywords":""},{"title":"Faltanleitung","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Faltanleitung","content":"Faltanleitung Eine Faltanleitung ist ein Beispiel f√ºr einen Algorithmus. Das japanische Wort Origami bezeichnet die Kunst des Papierfaltens. Schritt‚Äã In einer Faltanleitung kommen nur wenige Arten von Schritten vor: Falten: Durch eine gestrichelte Linie wird angedeutet, wo gefaltet werden soll. Der Pfeil gibt an, in welche Richtung gefaltet wird. Falz machen: Durch Hin- und Zur√ºckfalten wird ein Falz erzeugt. Dies wird durch einen Pfeil angedeutet, der hin und zur√ºck zeigt. Drehen: Durch einen Pfeil zwischen zwei Abbildungen wird angezeigt, dass das Papier entsprechend umgedreht werden soll. Beispiele‚Äã Schachtel‚Äã Eine einfache Faltanleitung f√ºr eine Schachtel. Origami Box@ Kranich‚Äã Der Kranich ist das klassische Motiv im japanischen Origami. Origami Kranich@","keywords":""},{"title":"Flussdiagramm","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Flussdiagramm","content":"Flussdiagramm Ein Flussdiagramm (engl. flow chart) oder Programmablaufplan ist eine grafische Darstellungsform eines Algorithmus. Es besteht aus Elementen, welche einzelne Schritte des Algorithmus darstellen. Pfeile, welche die Elemente verbinden, geben die Reihenfolge an, in welcher die Schritte ausgef√ºhrt werden m√ºssen. Das Flussdiagramm unten links beschreibt, wie Spaghetti gekocht werden. Das Flussdiagramm unten rechts beschreibt, wie Spaghetti Napoletana gekocht werden. Dabei wird der Spaghetti-Algorithmus mit einem Aufruf (rot) wiederverwendet. Flussdiagramm@","keywords":""},{"title":"Notenblatt","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Notenblatt","content":"Notenblatt Ein Notenblatt ist ein Algorithmus, welches den Prozess ¬´Musikst√ºck spielen¬ª beschreibt. Notenbl√§tter sind in einer symbolischen Sprache, der Notenschrift, verfasst. Schritt‚Äã Ein einzelner Schritt in der Notenschrift ist eine Note oder eine Pause. Im folgenden beschreiben die ersten drei √ºbereinanderliegenden Noten ¬´Spiele einen Akkord bestehend aus einem kleinen d, einem eingestrichenen fis' und einem zweigestrichenen e'' von einem Achtel L√§nge¬ª. Erste Zeile eines Notenblatts Wiederholung‚Äã In der Notenschrift wird durch Wiederholungszeichen (rot) angezeigt, dass die dazwischenliegenden Takte wiederholt werden sollen: Wiederholungszeichen Eine andere Variante ist die Anweisung D.S. (Dal Segno, ¬´vom Zeichen¬ª). Gemeint ist, dass das St√ºck von einem bezeichneten Punkt an (meist mit dem Zeichen ‚ïë:) wiederholt wird. Bedingte Ausf√ºhrung‚Äã Einer oder mehrere Schritte werden manchmal nur unter bestimmten Bedingungen ausgef√ºhrt. Auf einem Notenblatt wird mit sogenannten Voltenklammern (rot) gekennzeichnet, dass ein Takt nur im ersten oder zweiten Durchgang gespielt werden soll. In der folgenden Zeile wird also der dritte Takt nur im ersten und der vierte Takt nur im zweiten Durchgang gespielt: Voltenklammern So t√∂nt der erste Durchgang: So t√∂nt der zweite Durchgang: Parameter‚Äã Durch die Noten alleine sind die L√§nge und die H√∂he nur relativ festgelegt. Erst durch die Tempoangabe ‚ô©=180 wird festgelegt, dass pro Minute 180 Viertelnoten gespielt werden sollen. Mit Violin- und Bassschl√ºssel wird festgelegt, auf welcher Notenlinie das g' bzw. das f liegt und somit in welcher H√∂he die Noten gespielt werden sollen. Tempoangabe und Notenschl√ºssel Tempoangabe und Notenschl√ºssel sind Parameter eines Notenblatts, deren √Ñnderung die Bedeutung aller Noten und somit das gespielte St√ºck √§ndert. Beispiel‚Äã Auf der Website musescore.com sind Notenbl√§tter f√ºr viele Musikst√ºcke verf√ºgbar und k√∂nnen dort auch gleich abgespielt werden. Hier sind Ausschnitte aus folgenden St√ºcken verwendet worden: Super Mario Bros: Main Theme Jingle Bells","keywords":""},{"title":"Algorithmus","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Algorithmus","content":"Algorithmus Definition‚Äã ¬´Ein Algorithmus beschreibt die Methode, mit der eine Aufgabe gel√∂st wird. Ein Algorithmus besteht aus einer Folge von Schritten, deren korrekte Abarbeitung die gestellte Aufgabe l√∂st. Die Abarbeitung oder den Vorgang selbst bezeichnet man als Proze√ü.¬ª Les Goldschlager/Andrew Lister: Informatik, 1984 Die folgende Tabelle zeigt ein paar Beispiele von Prozessen mit zugeh√∂rigem Algorithmus: Prozess\tAlgorithmus\tTypischer SchrittKranich falten\tFaltanleitung\tPapier entlang einer Linie falten Zimtsterne backen\tRezept\tEier schaumig schlagen Musikst√ºck spielen\tNotenblatt\tEin c' spielen Spezielle Sprachen‚Äã Algorithmen werden oft in einer Fachsprache oder in einer symbolischen Sprache verfasst. Damit lassen sich die einzelnen Schritte eines Algorithmus oft klarer und k√ºrzer ausdr√ºcken als in der Alltagssprache. Beispiele f√ºr solche Sprachen sind: Die Notenschrift ist eine symbolische Sprache, in welcher die zu spielende Musik kompakt festgehalten werden kann. Rezepte sind normalerweise in einer Fachsprache verfasst, welche Fachbegriffe wie ¬´Schnee¬ª, ¬´schlagen¬ª oder ¬´Glasieren¬ª und Mengenangaben wie ¬´TL¬ª oder ¬´Prise¬ª enth√§lt. Bauanleitungen, z.B. IKEA-Anleitungen zum Zusammenbau von M√∂beln sind in einer nonverbalen Zeichensprache verfasst. Schritt‚Äã Wie die einzelnen Schritte eines Algorithmus lauten, h√§ngt stark vom Gebiet ab, f√ºr welches der Algorithmus verwendet wird. Die Einzelschritte beim Spielen eines Musikst√ºcks unterscheiden sich stark von den Schritten beim Kochen. Eine wichtige Eigenschaft von Algorithmen ist die Ausf√ºhrbarkeit. Sie bedeutet, dass jeder einzelne Schritt eines Algorithmus klar definiert sein muss und ausgef√ºhrt werden kann. Da eine klare Definition in Alltagssprache oft umfangreich ist, kommt hier die Fachsprache oder die symbolische Sprache zum Zug. Struktur‚Äã Ein Algorithmus definiert, in welcher Reihenfolge die einzelnen Schritte nacheinander abgearbeitet werden. Die Beschreibung dieser Reihenfolge ist die Struktur des Algorithmus. W√§hrend die Einzelschritte je nach Anwendungsgebiet unterschiedlich sind, sind die Strukturen (beim Programmieren spricht man von Kontrollstrukturen) von Algorithmen universell. Folgende Strukturen k√∂nnen unterschieden werden: Sequenz üë£: eine Folge von Schritten/Anweisungen, die nacheinander abgearbeitet werden. Wiederholung üîÅ: Einer oder mehrere Schritte werden eine bestimmte Anzahl mal wiederholt. Bedingte Ausf√ºhrung ‚ëÇ: Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. Unterprogramm üè∑: Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, kann der Name angegeben werden. Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Endlichkeit‚Äã Die Endlichkeit ist eine weitere wichtige Eingenschaft von Algorithmen. Sie bedeutet, dass ein Algorithmus immer nach endlich vielen Einzelschritten beendet wird. Ausserdem darf ein Algorithmus nur endlich viel Platz beanspruchen (z.B. Speicherplatz im Computer). ‚≠êÔ∏è Al-Chwarizmi‚Äã Abu Dscha øfar Muhammad ibn Musa al-ChwƒÅrizmƒ´ war ein Mathematiker und Universalgelehrter. Er stammte zwar aus dem iranischen Choresmien, verbrachte jedoch den gr√∂√üten Teil seines Lebens in Bagdad und war dort im ¬´Haus der Weisheit¬ª, einer Art Akademie, t√§tig. Al-Chwarizmi gilt als einer der bedeutendsten Mathematiker, da er sich mit Algebra als elementarer Untersuchungsform besch√§ftigte.1 In der lateinischen √úbersetzung eines Werkes von Al-Chwarizmi wurde sein Name als ¬´algorismus¬ª geschrieben. Davon leitet sich der heutige Begriff ¬´Algorithmus¬ª ab.2 Abbildung von Al-Chwarizmi auf einer sowjetischen Briefmarke@ Quelle: Wikipedia: al-Chwarizmi ‚Ü© Quelle: Wiktionary: Algorithmus ‚Ü©","keywords":""},{"title":"Struktogramme","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Struktogramme","content":"Struktogramme Struktogramme sind eine M√∂glichkeit, Programme und Algorithmen grafisch darzustellen. Diese Dartstellungsform wurde 1973 von Isaac Nassi und Ben Shneiderman vorgeschlagen und heisst deshalb auch Nassi-Shneiderman-Diagramm.1 Sequenz üë£‚Äã In einem Struktogramm wird jeder Befehl in einen rechteckigen Kasten geschrieben. Befehle m√ºssen nicht in einer Programmiersprache geschrieben werden, Parameter werden unterstrichen. from turtle import * forward(100) left(90) forward(50) 100 Schritte vorw√§rts 90¬∞ nach links 50 Schritte vorw√§rts Wiederholung üîÅ‚Äã Eine Wiederholung wird wie folgt dargestellt. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Bemerke Beim Struktogramm wird der wiederholte Teil durch die Einr√ºckung ersichtlich. Auch in Python werden wiederholte Sequenzen (Zeilen 4-5) visuell mit einem Tabulator einger√ºckt. Der Doppelpunkt am Zeilenende zeigt an, dass eine einger√ºckte Sequenz (beim Programmieren spricht man von einem Codeblock) folgt. Unterprogramm üè∑‚Äã Eine Sequenz kann mit einem Namen versehen werden. Anstatt immer die ganze Sequenz aufzuschreiben, gen√ºgt es den Namen aufzuschreiben. from turtle import * def zick_zack(): left(60) forward(30) right(120) forward(30) left(60) forward(100) zick_zack() zick_zack() zick_zack: 60¬∞ nach links 30 Schritte vorw√§rts 120¬∞ nach rechts 30 Schritte vorw√§rts 60¬∞ nach links 100 Schritte vorw√§rts zick_zack zick_zack Bemerke Um ein Unterprogramm aufzurufen, wird beim Struktogramm der Kasten mit doppelten Seitenstrichen markiert, bei Python werden runde Klammern am Ende des Namens angegeben. Den Namen f√ºr Unterprogramm kann beliebig gew√§hlt werden, sofern er nicht mit einer Zahl beginnt und keine Sonderzeichen enth√§lt. Leerschl√§ge und Bindestriche sind nicht erlaubt - stattdessen werden Unterstriche _ verwendet: Statt zick zack wird der Name zick_zack verwendet. Parameter ‚äï ‚äñ‚Äã Ein Unterprogramm kann mit Parametern aufgerufen werden. Parameter werden jeweils unterstrichen, so dass klar ist, welche Werte sich √§ndern k√∂nnen. Variablen‚Äã Bei Programmen wird zwischen Parametern und Variablen unterschieden. Genau wie Paramter k√∂nnen diese das Ergebnis eines Algorithmus √§ndern. Sie werden in einem Struktogramm speziell als markiert, damit klar ist, dass eigentlich der in der Variable gespeicherte Wert gemeint ist. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. Quelle: rothe.io ‚Ü©","keywords":""},{"title":"RoboZZle","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Uebungen/robozzle","content":"RoboZZle Aufgabe 1 Puzzle 1 Aufgabe 2 Puzzle 2 Aufgabe 3 Puzzle 3 Aufgabe 4 Puzzle 4 Aufgabe 5 Puzzle 5 Aufgabe 6. Puzzle 6 Aufgabe 7. Puzzle 7 Aufgabe 8. Puzzle 8 Aufgabe 9. Puzzle 9 ‚≠êÔ∏è Aufgabe 10. Puzzle 10","keywords":""},{"title":"Struktos","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/struktos.nosync","content":"Struktos for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts","keywords":""},{"title":"Bauanleitung","type":0,"sectionRef":"#","url":"/Programmieren-1/Algorithmen/Bauanleitung","content":"Bauanleitung Eine Bauanleitung ist ein Algorithmus, welche das Zusammenbauen von Einzelteilen zu einem fertigen M√∂bel beschreibt und ist oft in einer Bildschrift verfasst. Schritt‚Äã Die Reihenfolge der einzelnen (Vorbereitungs-) Schritte sind durch eine Nummerierung gegeben. Wiederholung‚Äã Muss ein Schritt wiederholt ausgef√ºhrt werden, z.B. das Eindrehen von Schrauben an jedem Bein eines Banks, so wird dies nur einmal im Detail beschrieben. Bedingte Ausf√ºhrung‚Äã Fehlt ein St√ºck oder ist die Anleitung unklar, so soll der Kundendienst kontaktiert werden (oben rechts...). Ikea Bauanleitung@","keywords":""},{"title":"Links f√ºr P1","type":0,"sectionRef":"#","url":"/Programmieren-1/links.nosync","content":"Links f√ºr P1 X-Mas PY‚Äã üëâ https://www.youtube.com/watch?v=mjhoQonjVDk üëâ https://www.youtube.com/watch?v=M_4yXiyoAM0 üëâ https://www.youtube.com/watch?v=MMz58z3UsX0 üëâ https://www.youtube.com/watch?v=1rpuroDqiDU üëâ https://www.youtube.com/watch?v=6zaA0HkzT-4 üëâ https://www.youtube.com/watch?v=EnPrSYbA8z4 üìö Preview üëâ https://www.youtube.com/watch?v=mjhoQonjVDk üëâ https://www.youtube.com/watch?v=M_4yXiyoAM0 üëâ https://www.youtube.com/watch?v=MMz58z3UsX0 üëâ https://www.youtube.com/watch?v=1rpuroDqiDU üëâ https://www.youtube.com/watch?v=6zaA0HkzT-4 üëâ https://www.youtube.com/watch?v=EnPrSYbA8z4","keywords":""},{"title":"Lernziele","type":0,"sectionRef":"#","url":"/Programmieren-1/Lernziele","content":"Lernziele Pr√ºfungsablauf‚Äã Die Pr√ºfung besteht aus zwei Teilen: schriftlicher Teil auf Papier - keine Hilfsmittel erlaubt. praktischer Teil auf dem Laptop - open book, jegliche Hilfsmittel inkl. Google sind erlaubt, wobei die direkte Kommunikation mit anderen Personen oder der Austausch von Informationen untereinander nicht erlaubt ist. Relevant f√ºr die Pr√ºfung sind die Kapitel Algorithmen: Theorie + Beispiele inkl. RoboZZle Turtlegrafik Abschnitte 1 bis und mit 7, inkl. √úbungen Gr√ºfnisch Lernziele Algorithmen Sie k√∂nnen erkl√§ren, was ein Algorithmus ist. Sie erkennen und beschreiben die Strukturen eines Algorithmus (Einzelschritte, Wiederholungen, bedingte Ausf√ºhrung, Parameter) Sie √ºbersetzen einen Algorithmus zwischen zwei Darstellungsformen (Alltagssprache, Struktogramm, Python-Programm) Lernziele Programme Sie k√∂nnen ein einfaches Python-Programm lesen und verstehen. Sie k√∂nnen die Ausgabe eines einfachen Turle-Programms zeichnen. Sie k√∂nnen ein einfaches Python-Programm √§ndern oder erweitern. Sie k√∂nnen typische Fehler in Python-Programmen erkennen und korrigieren. Sie k√∂nnen in einem Programm Befehlsnamen, Variablen, Parameter und Codebl√∂cke identifizieren. Lernziele Programmstuktur Wie wissen, dass ein Python-Programm grunds√§tzlich sequentiell (d.h. zeilenweise) ausgef√ºhrt wird. Sie k√∂nnen Befehle aus anderen Bibliotheken importieren (import). Sie verwenden for-Schleifen, um Befehlssequenzen zu wiederholen. Sie k√∂nnen eigene Unterprogramme / Befehle definieren (def). Sie k√∂nnen Unterprogramme mit einem oder mehreren Parametern definieren und aufrufen. Sie wissen, was Kommentare (#) sind und k√∂nnen Programme kommentieren. Sie wissen was eine Variable ist und k√∂nnen diese verwenden. Sie k√∂nnen Struktogramme lesen und verstehen Sie k√∂nnen Struktogramme in ein Programm √ºbersetzen, bzw. ein Programm in ein Struktogramm √ºberf√ºhren Lernziele Turtlegrafik Sie k√∂nnen die Turtle mit forward, backward, left, right und goto bewegen. Sie k√∂nnen mit pencolor die Farbe √§ndern. Sie k√∂nnen mit fillcolor, begin_fill und end_fill ausgef√ºllte Figuren zeichnen. Sie k√∂nnen mit shape und speed das Aussehen und die Geschwindigkeit der Turtle √§ndern. Sie k√∂nnen mit pensize, penup und pendown, dot, hideturtle den Zeichenstift kontrollieren. Lernziele Benutzerinteraktion Sie k√∂nnen die Programmbenutzer:in mit input nach einer Eingabe fragen. Sie wissen, dass Python zwischen Text (str), ganzen Zahlen (int) und Dezimalzahlen (float) unterscheidet und k√∂nnen Text in Zahlen/Dezimalzahlen umwandeln. Sie k√∂nnen Platzhalter in formatierten Texten f'' einf√ºgen. Sie k√∂nnen Texte klein- oder grossschreiben (lower(), upper()) sowie Wortteile ersetzen (replace).","keywords":""},{"title":"PyGame Tutorials","type":0,"sectionRef":"#","url":"/Programmieren-1/PyGame/tutorials","content":"PyGame Tutorials Pygame installieren Um mit PyGame zu arbeiten, muss in einem ersten Schritt Python auf dem Laptop installiert werden. Im Anschluss kann dann die PyGame Bibliothek installiert werden. üëâ Python 3 installieren üëâ VS Code installieren Powershell oder cmd √∂ffnen python --version # sollte die installierte Python Version anzeigen pip3 install pygame # installiert pygame (fix f√ºr python 3.11: --pre) Aufgabe Selbst√§ndiges Einarbeiten in PyGame und ein kleines Spiel entwickeln. üëâ PyGame Tutorial, z.B. Weitere gute Links, Tutorials etc. k√∂nnen hier festgehalten werden:","keywords":""},{"title":"Python Befehle","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/Befehle","content":"Python Befehle Alert‚Äã Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') Break‚Äã Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus.","keywords":""},{"title":"Schl√ºsselw√∂rter in Python","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/keywords","content":"Schl√ºsselw√∂rter in Python Schl√ºsselw√∂rter‚Äã Python kennt 35 Schl√ºsselw√∂rter, sie sind im folgenden aufgelistet. False\tawait\telse\timport\tpass None\tbreak\texcept\tin\traise True\tclass\tfinally\tis\treturn and\tcontinue\tfor\tlambda\ttry as\tdef\tfrom\tnonlocal\twhile assert\tdel\tglobal\tnot\twith async\telif\tif\tor\tyield Achtung Diese Schl√ºsselw√∂rter sollten nicht als Namen f√ºr eine Variable oder f√ºr ein Unterprogramm verwendet werden. Spezielle Zeichen in Python:‚Äã Feldtrenner (delimiter)‚Äã (\t)\t[\t]\t{\t} ,\t:\t.\t;\t@\t=\t-&gt; +=\t-=\t*=\t/=\t//=\t%=\t@= &amp;=\t`\t=`\t^=\t&gt;&gt;=\t&lt;&lt;=\t**= Zeichen mit spezieller Bedeutung‚Äã ' Markiert einen Texte &quot; Markiert einen Texte # Kommentar \\ Spezielles Steuerzeichen, bspw. um eine neue Zeile zu machen: \\n print('Zeile 1\\nZeile 2') Operatoren‚Äã +\t-\t*\t**\t/\t//\t% &lt;&lt;\t&gt;&gt;\t&amp;\t`\t`\t^\t~\t@ &lt;\t&gt;\t&lt;=\t&gt;=\t==\t!=\t:=\t","keywords":""},{"title":"H√§ufige Fehler","type":0,"sectionRef":"#","url":"/Programmieren-1/common-mistakes","content":"H√§ufige Fehler Hier werden die zehn h√§ufigsten Fehler in Python zusammengefasst. 1. Rechtschreibung von Namen‚Äã Namen m√ºssen korrekt geschrieben werden. Ein sehr h√§ufige Fehlerursache ist, dass Namen falsch geschrieben werden: Die Gross- und Kleinschreibung von Namen ist relevant. Die Namen WERT, Wert und wert beziehen sich auf unterschiedliche Variablen. Vordefinierte Namen verwenden meist die amerikanische Schreibweise. So lautet ein Turtlebfehl setcolor, nicht setcolour. 2. Gleichheit und Zuweisung‚Äã Eine Zuweisung ¬´speichert¬ª einen Wert in einer Variable: alter = 14 Ein Vergleich √ºberpr√ºft, ob zwei Werte exakt gleich sind: alter == 14 note Ein Vergleich wird normalerweise in einer Kontrollstruktur verwendet. Dabei ist wichtig zu beachten, dass auch der Datentyp gleich sein muss - &quot;14&quot; ist nicht dasselbe wie 14! alter = input('Wie alt bist du?') # das Resultat ist ein Text alter = int(alter) # alter zu einer Ganzzahl umwandeln if alter == 14: print('Yay, du bist 14 j√§hrig ü•≥') 3. Z√§hlen beginnt bei Null‚Äã Das Z√§hlen beginne immer bei Null. Beispiele: Das folgende Programm gibt die Zahlen 0 bis 9 aus: for i in range(10): print(i) Das erste Zeichen einer Zeichenkette erh√§lt man durch Abfrage mittels eckiger Klammern und dem Index 0: text = 'Hallo GBSL' print(text[0]) Das erste Element einer Liste erh√§lt man durch Abfrage mittels eckiger Klammern und dem Index 0: liste = ['√Ñpfel', 'Birnen', 'Bananen'] print(liste[0]) 4. Code-Blocks und Einr√ºcken‚Äã In Python werden Code-Zeilen, die im gleichen Schritt abgearbeitet werden sollen, als Codeblock zusammengefasst und gleich weit einger√ºckt. Beispiele: Alle Codezeilen, die gemeinsam wiederholt werden sollen, sind gleich weit einger√ºckt: print('--- Start ---') for i in range(2): print('ü•≥') # \\ print('ü•≥ü•≥') # |- diese 3 Zeilen werden gleich oft print('ü•≥ü•≥ü•≥') # / wiederholt print('--- Ende ---') ","keywords":""},{"title":"Random Walk","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/random-walk","content":"Random Walk Die Random-Walk-Theorie wurde zun√§chst von der franz√∂sischen Mathematikerin Louise Bachelier entworfen, die glaubte, dass Aktienkursentwicklungen wie die Schritte eines Betrunkenen seien: unberechenbar. 1 @ Betrachten wir den vermeintlich zuf√§lligen Weg einer Ameise, die jeweils nach einer unbekannten Anzahl Schritten die Richtung wechselt. Wir schauen uns die ersten 20 Richtungswechsel an und √ºberlegen uns, ob die Ameise von einer runden Tischplatte mit 100 cm Radius herunterfallen w√ºrde. Ameise.py Simulieren Sie den zuf√§lligen Weg einer Ameise, die 20 mal die Richtung wechselt. Folgende Annahmen werden getroffen: die Ameise macht mindestens 4, aber maximal 20 Schritte in dieselbe Richtung die Ameise dreht sich jeweils zwischen 0 und 360 Grad ameise.py from turtle import * from random import randint # Tischplatte zeichnen pencolor('red') penup() goto(0, -100) pendown() circle(100) pencolor('black') # Random walk Hinweis Mit randint(start, ende) k√∂nnen Sie einen zuf√§lligen Wert im Bereich zwischen start und ende erzeugen. from random import randint print('Zufallszahl [0, 2]', randint(0, 2)) print('Zufallszahl [10, 20]', randint(10, 20)) print('Zufallszahl [-20, 5]', randint(-20, 5)) Zusatz 1: Simulieren Sie 30 Ameisen - wie viele fallen vom Tisch? Zusatz 2: Mit distance(0, 0) kann die Distanz zum Ursprung ausgegeben werden - zeigen Sie jeweils die Distanz zum Ursprung mit an. SSR Quelle: Gloassar ‚Ü©","keywords":""},{"title":"Gr√ºfnisch","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/gruefnisch-beavis","content":"Gr√ºfnisch Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden alle Vokale wie folgt ersetzt:1 a anafa e enefe i inifi o onofo u unufu √§ √§n√§f√§ √∂ √∂n√∂f√∂ √º √ºn√ºf√º Beispiele‚Äã Hallo Hanafallonofo Gymnasium Biel Seeland Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Ziel: Python spricht Gr√ºfnisch Das Ziel ist, einen vorgegebenen Text auf Gr√ºfnisch zu √ºbersetzen. In Python lassen sich Texte ver√§ndern, zusammenf√ºgen und trennen. Texte verkn√ºpfen‚Äã Texte k√∂nnen verkn√ºpft werden - entweder mit + oder indem eine spezielle Syntax f√ºr die Verkn√ºpfung von Textteilen verwendet wird. Definition 'hallo ' + 'bello'‚Äã Mit + lassen sich zwei gleichwertige Datentypen (daher, entweder zwei Zahlen, oder zwei Texte, nicht jedoch Texte und Zahlen, verkn√ºpfen) print('Hallo ' + 'Biber') Definition f'', f'Hallo, Nr. {7}'‚Äã Ein formatierter Text wird in Python mit f' (statt nur ') gestartet. Anschliessend k√∂nnen geschweifte Klammern verwendet werden, welche durch deren Inhalt ersetzt werden. Hier Spielt es keine Rolle, ob Texte oder Zahlen verwendet werden. name = 'Maria' print(f'Hallo {name}, ich bin {15} j√§hrig.') Gross- und Kleinschreibung‚Äã Definition .upper(): Grossbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' gross = text.upper() print(gross) Definition .lower(): Kleinbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' klein = text.lower() print(klein) Text ersetzen‚Äã Definition .replace(alt, neu)‚Äã Mit replace(alt, neu) werden alle alten Textst√ºcke durch die neuen ersetzt. Der Text wird dabei nicht direkt ver√§ndert, sondern nur der R√ºckgabewert (=das Resultat) ist ver√§ndert. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' # Alle &quot;.&quot; durch &quot;!!!&quot; ersetzen text = text.replace('.', '!!!') print(text) Gross- &amp; Kleinschreibung Python nimmts genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle, nicht jedoch der Ort des alten Wortes! Im folgenden Beispiel wird etwa nur das kleingeschriebene ich ersetzt, jedoch auch wenn es inmitten eines Textes auftritt. Das grossgeschrieben Ich zu Beginn des Satzes wird ignoriert... text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'ICH') print(text) L√∂sungen: (1) auch den Gross- und kleingeschriebenes ersetzen, oder (2) zuerst alles klein schreiben und dann ersetzen. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen text = text.replace('Ich', 'XXX') # Alle 'Ich' durch XXX ersetzen print(text) text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.lower() # text kleinschreiben text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen print(text) Vervielfachen‚Äã Um Textteile zu vervielfachen, k√∂nnen diese mit einem Faktor 'multipliziert' werden. print('‚ù§Ô∏è ' * 5) oder auch komplizierter: for i in range(5): print('‚ù§Ô∏è ' * (i + 1)) Beispiel‚Äã Gr√ºfnisch Wie lautet der Satz hallo, es ist winter auf Gr√ºnfisch? (Von Hand, ohne Programm √ºbersetzen) Deutsch ‚Üí Gr√ºfnisch Erstellen Sie ein Programm, welches einen Satz auf Gr√ºfnisch √ºbersetzt und ausgibt. Funktioniert Ihr Text auch, wenn Sie den Satz mit Grossbuchstaben, bspw. Informatikunterricht √ºbersetzen? Passen Sie ihn entsprechen an. Um die Ausgabe etwas spannender zu machen, k√∂nnen wir die Ausgabe auch von Beavis ausgeben lassen. √Ñndern Sie Ihr Programm so, dass Beavis Gr√ºfnisch spricht... from cowsay import beavis beavis('Hanafallonofo Pythonofon') gruefnisch.py text = 'hallo, es ist winter!' print('Original', text) Weitere Figuren Anstelle von cow() k√∂nnen auch andere Figuren verwendet werden. Diese muss dann aber auch aus der Bibliothek cowsay importiert werden. beavis cheese daemon cow dragon ghostbusters kitty meow milk stegosaurus stimpy turkey turtle tux Zusatz ‚≠êÔ∏è: Passen Sie Ihr Programm so an, dass auch die Zusatzregel bei Gr√ºfnisch umgesetzt wird. Wie k√∂nnte dies gelingen? Ausnahme beim Ersetzen: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). Beispiel: &quot;Bauen&quot; hat den Diphtong au und wird also gr√ºfnisch &quot;Banafauenefen&quot; ausgesprochen. SSR SSR SSR Gr√ºfnisch ‚Üí Deutsch K√∂nnen Sie auch ein Programm schreiben, welches vom Gr√ºfnisch ins Berndeutsch √ºbersetzt? von_gr√ºfnisch.py text = 'Hanafallonofo Pythonofon' SSR Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Gr√ºfnisch","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/gruefnisch-gtts","content":"Gr√ºfnisch Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden alle Vokale wie folgt ersetzt:1 a anafa e enefe i inifi o onofo u unufu √§ √§n√§f√§ √∂ √∂n√∂f√∂ √º √ºn√ºf√º Beispiele‚Äã Hallo Hanafallonofo Gymnasium Biel Seeland Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Ziel: Python spricht Gr√ºfnisch Das Ziel ist, einen vorgegebenen Text auf Grf√ºnisch zu √ºbersetzen und sp√§ter auch vorlesen zu lassen. Texte in Python‚Äã Gross- und Kleinschreibung‚Äã Definition .upper(): Grossbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' gross = text.upper() print(gross) Definition .lower(): Kleinbuchstaben‚Äã text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' klein = text.lower() print(klein) Text ersetzen‚Äã .replace(alt, neu) Mit replace(alt, neu) k√∂nnen Text-Teile in einem Text (string) ersetzt werden. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' # Alle . durch !!! ersetzen text = text.replace('.', '!!!') print(text) text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' # Alle 'ich' durch XXX ersetzen text = text.replace('ich', 'XXX') print(text) Merke Python nimmt es genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle! Im obigen Beispiel wird das Ich am Satzanfang also nicht ersetzt. L√∂sungen: (1) Gross- und kleingeschriebenes ersetzen, oder (2) zuerst alles klein schreiben und dann ersetzen. text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen text = text.replace('Ich', 'XXX') # Alle 'Ich' durch XXX ersetzen print(text) text = 'Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.' text = text.lower() # text kleinschreiben text = text.replace('ich', 'XXX') # Alle 'ich' durch XXX ersetzen print(text) Vervielfachen‚Äã Um Textteile zu vervielfachen, k√∂nnen diese mit einem Faktor 'multipliziert' werden. print('‚ù§Ô∏è ' * 5) oder auch komplizierter: for i in range(5): print('‚ù§Ô∏è ' * (i + 1)) Aufgabe‚Äã Gr√ºfnisch Wie lautet der Satz hallo, es ist winter auf Gr√ºnfisch? (Von Hand, ohne Programm √ºbersetzen) Programmieren Sie, dass der Text automatisch ins Gr√ºfnisch √ºbersetzt wird. Funktioniert Ihr Text auch, wenn Sie den Satz mit Grossbuchstaben, bspw. Informatikunterricht √ºbersetzen? Passen Sie ihn entsprechen an. Auf üëâ https://jupyter.gbsl.website k√∂nnen Python-Programme auch einen Sprachdienst aufrufen, um den √ºbersetzten Text in gesprochene Sprache umzuwandeln. Dazu muss ein neues Python 3 Notebook ge√∂ffnet werden. Der folgende Code √ºbernimmt dies f√ºr uns: from gtts import gTTS # Google Text To Speach Bibliothek from playsound import playsound # playsound Bibliothek um mp3 abzuspielen text = 'Hallo GBSL!' # Text zu Sprache umwandeln mp3 = gTTS(text, lang='de', slow=False) # Ausgabe als mp3 abspeichern mp3.save('out.mp3') # mp3 Datei abspielen playsound('out.mp3') Verwenden Sie Ihr untenstehendes Programm, um damit gesprochenen Text auszugeben. ‚≠ê Passen Sie Ihr Programm so an, dass auch die Zusatzregel bei Gr√ºfnisch umgesetzt wird. Wie k√∂nnte dies gelingen? Ausnahme beim Ersetzen: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). Beispiel: &quot;Bauen&quot; hat den Diphtong au und wird also gr√ºfnisch &quot;Banafauenefen&quot; ausgesprochen. gruefnisch.py text = 'hallo, es ist winter!' print('Original', text) Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"3D Turtle","type":0,"sectionRef":"#","url":"/Programmieren-1/snippets/turtle_3d","content":"3D Turtle Star‚Äã from turtle3d import * speed(0) for i in range(20): for i in range(5): forward(20) left(2 * 360 / 5) level_up() print(gcode()) Surface‚Äã from turtle3d import * speed(0) for i in range(3): for i in range(4): forward(20) left(90) i = 0.3 while i &lt; 20 - 0.6: forward(0.3) left(90) if i == 0.3: forward(0.3) forward(19.4) right(90) forward(0.3) right(90) forward(19.4) left(90) i += 0.6 if i &lt; 19.7: forward(0.3) left(90) forward(19.4) right(90) penup() goto(0,0) level_up() print(gcode()) from turtle3d import * speed(0) for i in range(20): for j in range(4): forward(8) left(90) penup() goto(0, -20) pendown() setheading(0) for j in range(6): forward(8) left(360 / 5) level_up() penup() goto(0,0) pendown() setheading(0) print(gcode()) Rotierende Pyramide‚Äã from turtle3d import * from turtle import * from math import sqrt SIZE = 50 speed(0) def neck(size, n): for i in range(n): forward(size) left(360 / n) offset = sqrt(2) * 0.3 for j in range(0, 150): dt = SIZE / 150 size = SIZE - j * dt reps = 3 if size &lt; 0.3: break for i in range(0, reps): sz = size - 0.6 * i if sz &lt; 0.3: i -= 1 break neck(sz, 4) left(45) forward(offset) right(45) penup() left(45) level_up() forward(size / sqrt(2) - (i + 1) * offset) left(0.5) backward(size / sqrt(2) - dt * sqrt(2) / 2) right(45) pendown() print(gcode()) ","keywords":""},{"title":"Sprachelemente","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/Sprachelemente","content":"Sprachelemente Import-Befehl‚Äã Um vordefinierte Python-Befehle aus einer Bibliothek (ein sog. Python Modul) zu verwenden, m√ºssen diese importiert werden. Dies geschieht mit dem Import-Befehl: from turtle import * ‚≠êÔ∏è Einzelne Befehle importieren Es ist auch m√∂glich, nur einzelne Befehle (Unterprogramme) aus einer Bibliothek zu importieren. from math import floor, ceil print('Zahl:', 13.1) print('Abgerundet:', floor(13.1)) print('Aufgerundet:', ceil(13.1)) Dies hat den Vorteil, dass eine andere Betrachter:in eine bessere √úbersicht erh√§lt, von wo welcher Befehl importiert wurde. Bei uns ist dies allerdings vernachl√§ssigbar. Unterprogramm aufrufen‚Äã Alle Befehle (=Unterprogramme) in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. from turtle import * forward(30) penup() goto(20, 30) pendwon() forward(30) Wiederholungen: for-Schleife‚Äã Mit einer Schleife k√∂nnen Befehle eine bestimmte Anzahl Mal wiederholt werden. from turtle import * for i in range(4): forward(100) left(90) 4 mal wiederholen: 100 Schritte vorw√§rts 90¬∞ nach links Grundrechenoperationen‚Äã Die Grundrechenoperationen werden in Python wie folgt geschrieben: Operation\tmathematisch\tPythonAddition\ta+ba + ba+b\ta + b Subtraktion\ta‚àíba - ba‚àíb\ta - b Multiplikation\ta‚ãÖba \\cdot ba‚ãÖb\ta * b Division\ta√∑ba √∑ ba√∑b\ta / b Potenz\taba^bab\ta ** b Beispiele‚Äã print('2 + 13 =', 2 + 13) print('17 - 9 =', 7 - 9) print('312 ‚ãÖ 7 =', 312 * 7) print('231 √∑ 3 =', 231 / 3) print('2^8 =', 2 ** 8) ","keywords":""},{"title":"Test 25h","type":0,"sectionRef":"#","url":"/Programmieren-1/Testumgebung/25h-test/Probe","content":"Test 25h SSR","keywords":""},{"title":"Textverarbeitung","type":0,"sectionRef":"#","url":"/Programmieren-1/Python/strings","content":"Textverarbeitung In Python lassen sich Texte ver√§ndern. Gross- und Kleinschreibung‚Äã Definition upper()‚Äã text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; gross = text.upper() print(gross) Definition lower()‚Äã text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; klein = text.lower() print(klein) Text ersetzen‚Äã Definition replace()‚Äã Mit replace(alt, neu) k√∂nnen Text-Teile in einem Text ersetzt werden. text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; # Alle . durch !!! ersetzen text = text.replace(&quot;.&quot;, &quot;!!!&quot;) print(text) Gross- &amp; Kleinschreibung Python nimmts genau beim ersetzen - die Gross- &amp; Kleinschreibung spielt eine Rolle! Im folgenden Beispiel wird etwa nur das kleingeschriebene ich ersetzt, jedoch auch wenn es inmitten eines Textes auftritt. text = &quot;Hallo ich bin Alfred. Ich schreibe an einem wichtigen Buch.&quot; text = text.replace(&quot;ich&quot;, &quot;ICH&quot;) print(text) Gr√ºfnisch‚Äã Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden die Vokale a, e, i, o, u, √§, √∂ und √º durch anafa, enefe, inifi, onofo, unufu, √§n√§f√§, √∂n√∂f√∂ und √ºn√ºf√º ersetzt (z. B.: ‚ÄûHanafallonofo‚Äú = ‚ÄûHallo‚Äú). Ausnahme: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). 1 Beispiel‚Äã Gymnasium Biel Seeland heisst auf Gr√ºfnisch Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Deutsch ‚Üí Gr√ºfnisch Erstellen Sie ein Programm, welches die Benutzer:in nach einem deutschen Satz fragt diesen Satz zu Gr√ºfnisch umwandelt den gr√ºfnischen Satz ausgibt Zeichnen Sie in einem ersten Schritt zusammen mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. zu__gr√ºfnisch.py from cowsay import cow Zusatz ‚≠êÔ∏è: Verwenden Sie anstelle von print() den Befehl cow() - was passiert? Hinweis Ersetzen Sie jeden Vokal nacheinander, wobei Sie das Resultat immer wieder in derselben Variable speichern: 'a' ‚Üí 'anafa' 'e' ‚Üí 'enefe' 'i' ‚Üí 'inifi' 'o' ‚Üí 'onofo' 'u' ‚Üí 'unufu' '√§' ‚Üí '√§n√§f√§' '√∂' ‚Üí '√∂n√∂f√∂' '√º' ‚Üí '√ºn√ºf√º' Weitere Figuren Anstelle von cow() k√∂nnen auch andere Figuren verwendet werden. Diese muss dann aber auch aus der Bibliothek cowsay importiert werden. beavis cheese daemon cow dragon ghostbusters kitty meow milk stegosaurus stimpy turkey turtle tux SSR SSR SSR Gr√ºfnisch ‚Üí Deutsch K√∂nnen Sie auch ein Programm schreiben, welches vom Gr√ºfnisch ins Berndeutsch √ºbersetzt? von_gr√ºfnisch.py SSR Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Test 26e","type":0,"sectionRef":"#","url":"/Programmieren-1/Testumgebung/26eP-test/ProbeE","content":"Test 26e Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":"Nachholprobe 26e","type":0,"sectionRef":"#","url":"/Programmieren-1/Testumgebung/26eP-test/ProbeE-Nachholer","content":"Nachholprobe 26e Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":"Grid","type":0,"sectionRef":"#","url":"/Programmieren-1/snippets/Grid","content":"Grid Canvas Grid in Brython Smiley‚Äã smiley.py from grid import Grid Grid.setup(500, 500) # canvas screen size grid = Grid(10, 10) grid[2][3] = 'blue' grid[2][6] = 'blue' for i in range(2): grid[5][3 + 3 * i] = 'blue' for i in range(3, 7): grid[6][i] = 'blue' for i in range(10): for j in range(10): grid[i][0] = 'blue' grid[i][9] = 'blue' grid[0][i] = 'blue' grid[9][i] = 'blue' Schachbrett‚Äã smiley.py from grid import Grid grid = Grid(8, 8) for i in range(8): for j in range(8): if (i + j) % 2 == 0: grid[i][j] = 'black' else: grid[i][j] = 'white' Animiert‚Äã anim.py from grid import Grid from game import gameloop, sleep, stop Grid.setup(500, 500) grid = Grid(10, 10) x = 0 y = 0 direction = [1, 0] @gameloop def run(dt): global x, y, direction grid[x][y] = '' if direction[0] &gt; 0 and x == grid.size[0] - 1: direction = [0, 1] elif direction[0] &lt; 0 and x == 0: direction = [0, -1] elif direction[1] &gt; 0 and y == grid.size[1] - 1: direction = [-1, 0] elif direction[1] &lt; 0 and y == 0: direction = [1, 0] x = x + direction[0] y = y + direction[1] grid[x][y] = 'black' sleep(200) run() ","keywords":""},{"title":"Test 26P","type":0,"sectionRef":"#","url":"/Programmieren-1/Testumgebung/26eP-test/ProbeP","content":"Test 26P Erlaubte Hilfsmittel Unterrichtsmaterial Eigene Skripts Webseiten, Google Verbotene Hilfsmittel ‚ö†Ô∏è Fremde Hilfe ‚ö†Ô∏è Chats / Kommunikation jeglicher Art SSR","keywords":""},{"title":"Mini-Projekte","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/art","content":"Mini-Projekte Projekt1.py Projekt2.py Projekt3.py SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Nosync - Unterprogramme","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/examples.nosync","content":"Nosync - Unterprogramme Weitere Beispiele... from turtle import * speed(5) penup() goto(50, -30) pendown() fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() penup() goto(-100, 30) pendown() fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() penup() goto(-25, 150) pendown() fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() penup() goto(-150, -120) pendown() fillcolor('black') begin_fill() for i in range(4): forward(30) left(90) end_fill() penup() goto(-15, -120) pendown() begin_fill() for i in range(4): forward(30) left(90) end_fill() penup() goto(135, -120) pendown() begin_fill() for i in range(4): forward(30) left(90) end_fill() Ratespiel‚Äã from random import randint from browser import alert geheim = randint(0, 100) for i in range(10): zahl = int(input(f'{i + 1}/10 Versuchen: Gib eine ganze Zahl zwischen 0 und 100 ein.')) if zahl == geheim: alert(f'Gewonnen!!! Die gesuchte Zahl {geheim} wurde in {i + 1} Versuchen gefunden :)') break elif zahl &lt; geheim: alert(f'{zahl} ist zu klein') else: alert(f'{zahl} ist zu gross') if zahl != geheim: alert(f'verloren :(, die gesuchte Zahl war {geheim}') ","keywords":""},{"title":"Conways Game of Life","type":0,"sectionRef":"#","url":"/Programmieren-1/snippets/Conway","content":"Conways Game of Life from grid import Grid from game import gameloop, sleep Grid.setup(500, 500) SIZE = (20, 20) grid = Grid(SIZE[0], SIZE[1]) # blinker grid[1][2] = 'black' grid[2][2] = 'black' grid[3][2] = 'black' # glider grid[4][14] = 'black' grid[5][14] = 'black' grid[6][14] = 'black' grid[6][13] = 'black' grid[5][12] = 'black' def neighbours(grid, x, y): nb = [] dim_x = len(grid[0]) dim_y = len(grid) for i in range(-1, 2): for j in range(-1, 2): if not (i == 0 and j == 0): ny = (y + i) % dim_y nx = (x + j) % dim_x nb.append(grid[ny][nx]) return nb def live_neighbours(grid, x, y): s = 0 for cell in neighbours(grid, x, y): if cell == 'black': s += 1 return s @gameloop def evolution(dt): current = grid.tolist() for x in range(grid.size[1]): for y in range(grid.size[0]): alive = live_neighbours(current, x, y) if current[y][x] == 'black' and 2 &lt;= alive &lt;= 3: grid[y][x] = 'black' elif current[y][x] != 'black' and alive == 3: grid[y][x] = 'black' else: grid[y][x] = '' sleep(50) evolution() Einige Figuren‚Äã from grid import Grid from game import gameloop, sleep grid = Grid.from_bin_text(''' xx x xx xx x xxx xx x xxx xx xx xx x x xx xxx xxx xx x x x x x x x x x x x x x x x x x xxx xxx xx xxx xxx x x x x x x x x x x x x x x x x xxx xxx x x x xxx x x xxx xxx xxxxxxxx xxx x xxxx x xxx xxxxxxxx x x xxx ''') def neighbours(grid, x, y): nb = [] dim_x = len(grid[0]) dim_y = len(grid) for i in range(-1, 2): for j in range(-1, 2): if not (i == 0 and j == 0): ny = (y + i) % dim_y nx = (x + j) % dim_x nb.append(grid[ny][nx]) return nb def live_neighbours(grid, x, y): s = 0 for cell in neighbours(grid, x, y): if cell == 'black': s += 1 return s @gameloop def evolution(dt): current = grid.tolist() for x in range(grid.size[1]): for y in range(grid.size[0]): alive = live_neighbours(current, x, y) if current[y][x] == 'black' and 2 &lt;= alive &lt;= 3: grid[y][x] = 'black' elif current[y][x] != 'black' and alive == 3: grid[y][x] = 'black' else: grid[y][x] = '' sleep(50) evolution() Spaceships‚Äã from grid import Grid from game import gameloop, sleep grid = Grid.from_bin_text(''' x x xxx x x xxx x x xxx x x xxx ''') def neighbours(grid, x, y): nb = [] dim_x = len(grid[0]) dim_y = len(grid) for i in range(-1, 2): for j in range(-1, 2): if not (i == 0 and j == 0): ny = (y + i) % dim_y nx = (x + j) % dim_x nb.append(grid[ny][nx]) return nb def live_neighbours(grid, x, y): s = 0 for cell in neighbours(grid, x, y): if cell == 'black': s += 1 return s @gameloop def evolution(dt): current = grid.tolist() for x in range(grid.size[1]): for y in range(grid.size[0]): alive = live_neighbours(current, x, y) if current[y][x] == 'black' and 2 &lt;= alive &lt;= 3: grid[y][x] = 'black' elif current[y][x] != 'black' and alive == 3: grid[y][x] = 'black' else: grid[y][x] = '' sleep(50) evolution() Horizintale Bewegungen‚Äã from grid import Grid from game import gameloop, sleep grid = Grid.from_bin_text(''' xxxx x x x x x xxx xxxxx xxx xx xx xxxx xxxxxx xxxx xx xx ''') def neighbours(grid, x, y): nb = [] dim_x = len(grid[0]) dim_y = len(grid) for i in range(-1, 2): for j in range(-1, 2): if not (i == 0 and j == 0): ny = (y + i) % dim_y nx = (x + j) % dim_x nb.append(grid[ny][nx]) return nb def live_neighbours(grid, x, y): s = 0 for cell in neighbours(grid, x, y): if cell == 'black': s += 1 return s @gameloop def evolution(dt): current = grid.tolist() for x in range(grid.size[1]): for y in range(grid.size[0]): alive = live_neighbours(current, x, y) if current[y][x] == 'black' and 2 &lt;= alive &lt;= 3: grid[y][x] = 'black' elif current[y][x] != 'black' and alive == 3: grid[y][x] = 'black' else: grid[y][x] = '' sleep(50) evolution() ","keywords":""},{"title":"Python Programme","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/python-scripts","content":"Python Programme Beliebige Python Programme Programm 1‚Äã Programm1.py Programm 2‚Äã Programm2.py Programm 3‚Äã Programm3.py Programm 4‚Äã Programm4.py Programm 5‚Äã Programm5.py Programm 6‚Äã Programm6.py Programm 7‚Äã Programm7.py Programm 8‚Äã Programm8.py Programm 9‚Äã Programm9.py Programm 10‚Äã Programm10.py Programm 11‚Äã Programm11.py Programm 12‚Äã Programm12.py Programm 13‚Äã Programm13.py Programm 14‚Äã Programm14.py Programm 15‚Äã Programm15.py ","keywords":""},{"title":"‚≠ê Rekursion","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/koch","content":"‚≠ê Rekursion Ein Unterprogramm kann sich selber aufrufen. Das ergibt im Normalfall eine unendliche Wiederholung, so dass das Programm abst√ºrzt. Wird das Unterprogramm jedoch jedesmal mit einem ver√§nderten Parameter aufgerufen, so kann eine Abbruchbedingung erstellt werden, welche angibt, ob das Unterprogramm erneut aufgerufen werden soll oder nicht. Beispiel‚Äã Im folgenden Programm wird ein einfacher bin√§rer Baum gezeichnet: from turtle import * left(90) def baum(gr√∂sse): forward(gr√∂sse) left(45) forward(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) forward(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(40) Diesen Baum k√∂nnen wir nun so umbauen, dass jeder Ast auch wieder ein bin√§rer Baum ist: from turtle import * left(90) def baum(gr√∂sse): if gr√∂sse &lt; 5: forward(gr√∂sse) else: forward(gr√∂sse) left(45) baum(gr√∂sse / 2) backward(gr√∂sse / 2) right(90) baum(gr√∂sse / 2) backward(gr√∂sse / 2) left(45) baum(100) Bemerken Sie, dass eine Abbruchbedingung eingef√ºgt wurde - falls die gr√∂sse kleiner als 5 ist, wird nur eine Strecke gezeichnet, andernfalls ein ganzer Baum. Koch Kurve‚Äã Aufgabe Eine Koch-Kurve ist wie folgt aufgebaut: wobei ein einzelnes Element wie folgt aussieht: koch.py from turtle import * ‚≠êÔ∏è Zusatz: Zeichnen Sie ein Sechseck bestehend aus 6 Koch-Kurven. ‚≠êÔ∏è Pythagorasbaum‚Äã Versuchen Sie, einen rekursiven Pythagoras-Baum zu zeichnen. Ein Pythagorasbaum Pythagorasbaum pythagoras.py from turtle import * Weitere Inspirationen f√ºr Fraktale üëâ https://natureofcode.com/book/chapter-8-fractals/","keywords":""},{"title":"4. Fehler","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/errors","content":"4. Fehler Sie haben bereits festgestellt, dass Python sehr pingelig ist was Tippfehler und die pr√§zise Verwendung von Klammern, Anf√ºhrungszeichen, Doppelpunkten und Leerzeichen angeht. Jede Sprache hat seine eigenen Regeln, wie W√∂rter und S√§tze strukturiert sein m√ºssen. Diese Regeln sind allgemein bekannt als die Syntax einer Sprache. Bei Programmiersprachen wird mit der Syntax festgelegt, welche W√∂rter, in welcher Reihenfolge und in welchem Kontext erlaubt sind. Syntax Fehler (syntax errors)‚Äã Syntax Fehler sind kleine Fehler in einem Programm. Da das Programm nicht von einem Mensch, sondern von einem Computer &quot;gelesen&quot; und interpretiert wird, reicht ein Tippfehler, ein fehlendes Komma oder eine fehlende Klammer, dass das Programm nicht mehr verstanden werden kann. Die Python Sprache setzt sich aus folgenden Elementen zusammen: Schl√ºsselw√∂rter (Statements): W√∂rter oder Zeichen, die ohne Anf√ºhrungszeichen und ohne Klammern geschrieben werden. z.B. import, from oder for, aber auch : oder *. Sie m√ºssen in einer vordefinierten Reihenfolge vorliegen, damit diese von Python verstanden werden. (‚Ü© alle Schl√ºsselw√∂rter) Befehle (Unterprogramme, Funktionen): vordefinierte Befehle, die mit einer runden Klammer aufgerufen werden. z.B. print('hello') Variablen: Namen, die einen Wert enthalten H√§ufigste Ursachen Fehler bei Schl√ºsselw√∂rtern vergessene oder falsch eingesetzte Feldtrenner (z.B. :) Falsche Anordnung von Schl√ºsselw√∂rtern/Feldtrennern Beispiele‚Äã frm turtle import * forward(100) from turtle import * goto(100 50) from turtle import * for i in range(4) forward(25) right(90) Fehler finden Untersuchen Sie obenstehende Programmschnipsel. Was sagen Ihnen die Fehlermeldungen? Auf welcher Zeile steht die Art des Fehlers? Wo finden Sie Hinweise auf den Fehler? Flicken Sie sie... error1.py frm turtle import * forward(100) error2.py from turtle import * goto(100 50) Hinweis Was macht der Befehl goto? Schauen Sie die Funktionsweise unter Turtle Befehle#goto(x, y) nach error3.py from turtle import * for i in range(4) forward(25) right(90) SSR Namens Fehler (NameError)‚Äã Liegt ein Fehler vor, der nicht bei Schl√ºsselw√∂rtern (oder deren Anordnung) vorliegt, so handelt es sich oft um einen Namens-Fehler (NameError). Es wird also versucht, ein Unterprogramm zu √∂ffnen, das aber unter diesem Namen nicht gefunden werden kann. H√§ufigste Ursachen Die h√§ufigste Ursachen von NameErrors sind Vertipper im Namen des Befehls nicht importierte Befehle (z.B. from turtle import * fehlt) Beispiele‚Äã from turtle import * forwrd(100) Der angegebene Befehl forwrd kann nicht gefunden werden, da er weder in einer importierten Bibliothek, noch im aktuellen Programm gefunden werden kann. Der gleiche Fehler tritt auf, wenn der Befehl zwar richtig geschrieben wird, das Importieren aber vergessen geht: forward(100) Fehler finden Finden und l√∂sen Sie die entstandenen Fehler error.py from math import ceil, floor print('15.3 gerundet =', round(15.3)) print('15.8 gerundet =', round(15.8)) print('15.3 aufgerundet =', ceyl(15.3)) print('15.8 abgerundet =', flor(15.8)) Hinweis Suchen Sie die fehlerhaften Befehle in Kombination mit Python auf Google, bspw. python ceyl. SSR Einr√ºckungsfehler (IndentationError)‚Äã Python erwartet nach jedem Doppelpunkt :, dass ein einger√ºckter Codeblock kommt. Falls kein einger√ºckter Codeblock gefunden wird, entsteht ein IndentationError. Wird jedoch f√§lschlicherweise eine Zeile einger√ºckt, so wird ebenfalls dieser Fehler angezeigt. H√§ufigste Ursachen Die n√§chste Zeile nach einem Doppelunkt : ist nicht einger√ºckt Eine Zeile ist f√§lschlicherweise einger√ºckt ein Leerschlag zu wenig einger√ºckt Beispiel‚Äã Nicht einger√ºckt for i in range(5): print('Hallo') Korrektur for i in range(5): print('Hallo') Falsch einger√ºckt print('Hallo') print('wie') print('gehts?') Korrektur print('Hallo') print('wie') print('gehts?') Fehler finden Finden und l√∂sen Sie die entstandenen Fehler, so dass die Ausgabe Hallo zum 0 Hallo zum 1 Ende lautet. errors.py for i in range(2): print('Hallo zum', i) print('Ende') SSR Logikfehler‚Äã Aus der Sicht von Python funktioniert alles, top! üëç Sobald aber das Programm ausgef√ºhrt wird, macht es nicht das, was Sie sich gew√ºnscht haben - Logik-Fehler üí©... Diese Fehler sind im allgemeinen am schwierigsten zu finden. Ein h√§ufiger Fehler ist aber, dass man bei einem Befehl die runden Klammern am Ende vergisst - f√ºr Python kein Problem, da es den Befehl kennt, jedoch nicht dazu aufgefordert wird, diesen auszuf√ºhren. H√§ufigste Ursachen Checkliste f√ºr Logikfehler sind bei Befehlen die runden Klammern () am Ende angegeben? Beispiel‚Äã from turtle import * penup() goto(-10, 10) pendown for i in range(4): forward(20) left(90) Auf Zeile 4 fehlen die runden Klammern - pendown wird nicht ausgef√ºhrt! Fehler beheben: Den Befehl mit pendown() aufrufen. Fehler finden Finden und beheben Sie alle Fehler, so dass folgende Ausgabe entsteht: errors.py from turtle import * fillcolor(&quot;Rot&quot;) penup() goto(-125 125) begin_fill() for i in range(4) forward(250) left(90) end_fill() forward(150) links(90) forward(50) fillcolor(&quot;white&quot;) begin_fill() for i in range(4): forward(50) right(90) forward(50) left(90) forward(50) left(90) end_fill SSR","keywords":""},{"title":"5. Unterprogramme üè∑","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/functions","content":"5. Unterprogramme üè∑ Einf√ºhrung‚Äã In einer Bildkomposition kommen Figuren wie Dreiecke und Quadrate mehrmals vor. Die Turtle weiss aber nicht, was ein Dreieck oder ein Quadrat ist. Da in der Bildkomposition die Dreiecke und Quadrate nicht systematisch angeordnet sind, ist die Verwendung von Wiederholungen hier nicht naheliegend. from turtle import * fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(120) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() 26 Zeilen Code?? Geht das nicht auch einfacher? Es geht einfacher! Es lassen sich n√§mlich neue Befehle festlegen, die z.B. ein Dreieck oder ein Quadrat zeichnen. from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('red') dreieck() left(120) fillcolor('green') dreieck() left(120) fillcolor('blue') dreieck() dreieck Starte Auff√ºllen 3 mal wiederholen 50 Schritte vorw√§rts 120¬∞ nach links Ende Auff√ºllen rote F√ºllfarbe dreieck zeichnen 120¬∞ nach links gr√ºne F√ºllfarbe dreieck zeichnen 120¬∞ nach links blaue F√ºllfarbe dreieck zeichnen Aufgabe 1 Im folgenden ist zweimal derselbe Algorithmus programmiert - links ohne Unterprogramme, rechts mit Unterprogrammen. √Ñndern Sie beide Programme so ab, dass die Dreiecke doppelt so gross gezeichnet werden! sequentiell.py from turtle import * fillcolor('yellow') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('orange') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('red') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('purple') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('blue') begin_fill() for i in range(3): forward(50) left(120) end_fill() left(60) fillcolor('green') begin_fill() for i in range(3): forward(50) left(120) end_fill() functions.py from turtle import * def dreieck(): begin_fill() for i in range(3): forward(50) left(120) end_fill() fillcolor('yellow') dreieck() left(60) fillcolor('orange') dreieck() left(60) fillcolor('red') dreieck() left(60) fillcolor('purple') dreieck() left(60) fillcolor('blue') dreieck() left(60) fillcolor('green') dreieck() left(60) Wie viele Zeilen mussten Sie im linken bzw. im rechten Programm √§ndern? Welche Vorteile sehen Sie bei der Verwendung von Unterprogrammen? SSR Eigene Befehle definieren‚Äã Bei Python werden Befehle auch Funktionen genannt. Definition def name():‚Äã Mit def name(): wird ein neues Unterprogramm (ein neuer Befehl) definiert. Als Name sollte immer etwas gew√§hlt werden, das die T√§tigkeit dieser Sequenz widerspiegelt. Alle Anweisungen, die zum neuen Befehl geh√∂ren, m√ºssen einger√ºckt sein! Beispiel: def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) Befehlsaufruf Die Definition alleine f√ºhrt das Programm noch nicht aus. Dazu muss der Befehl erst noch aufgerufen werden: from turtle import * def zick_zack(): # &lt;-- Doppelpunkt nicht vergessen! left(45) forward(50) right(90) forward(50) left(45) ### PRE zick_zack() Aufgabe 2: Struktogramm ‚Üí Python Erzeugen Sie ein Programm gem√§ss folgendem Struktogramm: stufe 95¬∞ links 20 Schritte vorw√§rts 95¬∞ rechts 30 Schritte vorw√§rts 100 Schritte vorw√§rts stufe zeichnen stufe zeichnen stufe zeichnen befehl1.py from turtle import * √Ñndern Sie obiges Programm so, dass der Winkel einer Stufe neu 110¬∞ betr√§gt. Zeichnen Sie eine Treppe mit 30 Stufen. Denken Sie dabei auch an das letzte Kapitel (Stichwort: Wiederholungen!) SSR Aufgabe 3 ‚Äì Sechsecke sechseck.py from turtle import * Zeichnen Sie ein Sechseck Verschieben Sie die Sequenz, die das Sechseck zeichnet, in einen neuen Befehl namens sechseck(). Denken Sie daran, der neue Befehl muss aufgerufen werden, damit er ausgef√ºhrt wird. Verwenden Sie den neuen Befehl, um die folgende Figur zu zeichnen, welche aus 10 Sechsecken besteht: Tipp Nach jedem Sechseck muss 36¬∞ gedreht werden. SSR Aufgabe 4 ‚Äì H√§user F√ºr diese Aufgabe k√∂nnen Sie als Ausgangslage Ihr Programm aus Kapitel 1, Aufgabe 6 &quot;Haus von Nikolaus&quot; verwenden. stadt.py from turtle import * Definieren Sie einen Befehl haus(), der ein Haus des Nikolaus zeichnet: Achten Sie darauf, dass die Turtle am Ende eines H√§uschens jeweils unten rechts ist und nach rechts schaut. Zeichnen Sie nun 4 H√§user nacheinander in unterschiedlichen Farben. SSR Aufgabe 5 ‚Äì Blume Sie werden in dieser Aufgabe unter der Verwendung mehrerer Unterprogramme eine komplexe Aufgabe schrittweise l√∂sen. blume.py from turtle import * Definieren Sie Unterprogramm bogen(), mit dem die Turtle einen Bogen zeichnet und sich dabei insgesamt um 90¬∞ nach rechts dreht. F√ºgen Sie einen weiteren Befehl blumenblatt() hinzu, welches zwei B√∂gen zeichnet. Die Turtle sollte am Ende aber wieder in Startrichtung stehen. Erg√§nzen Sie blumenblatt() so, dass ein rot gef√ºlltes Blatt gezeichnet wird. Setzen Sie mit pencolor die Stiftfarbe ebenfalls auf rot, damit die Umrandungslinie die gleiche Farbe hat. Erweitern Sie das Programm mit dem Befehl blume(), so dass eine f√ºnfbl√§ttrige Blume gezeichnet wird. ‚≠êÔ∏è Zusatz: Blume mit Stiel. Erg√§nzen Sie die Blume mit einem Stiel. SSR","keywords":""},{"title":"2. Zeichnungsfl√§che","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/screen","content":"2. Zeichnungsfl√§che Die Zeichenfl√§che kann konfiguriert werden, z.B. mit einer Hintergrundfarbe, oder aber auch die Dimensionen des Hintergrunds. Standarm√§ssig ist keine Hintergrundfarbe gesetzt (=durchsichtig) und die Dimensionen die Koordinaten des Bildschirms sind 500x500 Pixel. Das zugrundeliegende Koordinatensystem hat den Ursprung immer in der Mitte des Bildschirms. from turtle import * # wenn die Bildschirm-Dimensionen ver√§ndert werden sollen, muss dies # zwingend als erster Befehl gemacht werden. # Die Gr√∂sse kann anschliessend nicht mehr ver√§ndert werden. turtle.set_defaults(canvwidth=200, canvheight=100) # Die Hintergrundfarbe kann auch ge√§ndert werden. Screen().bgcolor('orange') forward(100) note Wird mit Screen().bgcolor('yellow') eine Hintergrundfarbe festgelegt, kann das umgebende Rechteck der Figur (englisch Bounding Box) nicht mehr bestimmt werden und es wird immer die ganze Bildfl√§che heruntergeladen.","keywords":""},{"title":"10. Repetitionsfragen","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/repetition","content":"10. Repetitionsfragen Algorithmus‚Äã Was ist ein Algorithmus? Welche 5. Strukturelemente enth√§lt ein Algorithmus? Erstellen Sie einen Algorithmus f√ºr das Zusammenfalten eines T-Shirts. SSR Code Lesen‚Äã In welchem Code-Teil wird das Viereck mit der Stiftdicke 5 gezeichnet. Welche Seitenl√§nge hat das Dreieck mit Stiftdicke 7? Bei welchen Koordinaten wird das F√ºnfeck mit Stiftdicke 3 gezeichnet? F√ºgen Sie ein Quadrat mit der Seitenl√§nge 20 bei der Koordinate (20, 10) und der Stiftdicke 3 hinzu. Unterstreichen Sie in den Zeilen 1-12 alle Parameter Markieren Sie in den Zeilen 1-12 alle Befehlsnamen Turtle Ausgabe from turtle import * def move(x, y): penup() goto(x, y) pendown() pensize(2) for i in range(3): forward(18) left(120) move(-20, 30) pensize(5) for i in range(4): forward(27) left(90) move(30, 10) for i in range(5): forward(13) left(72) move(80, 80) pensize(3) for i in range(4): forward(77) left(90) move(-40, -20) for i in range(5): forward(23) left(72) move(-80, 80) pensize(7) for i in range(3): forward(44) left(120) SSR Code Ausf√ºhren‚Äã Zeichnen Sie die Ausgabe des folgenden Programms from turtle import * def square(): for i in range(4): forward(10) right(90) forward(30) left(90) forward(10) right(90) for i in range(3): forward(10) right(90) forward(10) left(90) forward(10) left(90) forward(10) right(90) left(90) square() SSR Struktogramm‚Äã Zeichnen Sie f√ºr folgende Ausgangslage ein Struktogramm: Die Benutzer:in wird nach ihrer Lieblingszahl gefragt. Die eingegebene Zahl wird verdoppelt und mit 3 addiert. So oft zeichnet man nun 55 Schritte vorw√§rts mit einer Drehung um 113¬∞ am Ende. Zusatz: Anstatt 113¬∞ soll soviel gedreht werden, dass eine geschlossene Figur entsteht. SSR Programmieren (am PC)‚Äã Definition Text vervielfachen‚Äã In Python kann Text verfielf√§ltigt werden, indem er mit der gew√ºnschten Anzahl wiederholungen multipliziert wird: print('Hallo' * 3) print('üå≤ ' * 24) Schreiben Sie einen Befehl dreieck, der ein Dreieck in Textform ausgibt. Die Gr√∂sse des Dreiecks soll als Parameter √ºbergeben werden k√∂nnen. Beispiele: dreieck(1) ergibt * dreieck(2) ergibt * * * dreieck(3) ergibt * * * * * * dreieck.py SSR","keywords":""},{"title":"Screencoord","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/screen-coords.nosync","content":"Screencoord Draw the screen coordinates. Screen--coordinates.py from turtle import * X = (-20, 120) Y = (-10, 40) TICK = 10 SCALE = 3 DRAW_COORD = False turtle.set_defaults( canvwidth = 2 * SCALE * (X[1] - X[0]), canvheight = 2 * SCALE * (Y[1] - Y[0]) ) speed(100) def move(x, y): penup() goto(x, y) pendown() def write_tick(tick: int | float, is_int: bool = True): if is_int: write(int(tick), font=(&quot;Arial&quot;, 8, &quot;normal&quot;), align='right') else: write(tick, font=(&quot;Arial&quot;, 8, &quot;normal&quot;), align='right') def grid(xmin: int, xmax: int, ymin: int, ymax: int, tick: int, scale: int = 1): old_pos = getturtle().pos() old_pensize = getturtle().pensize() pensize(1) old_color = getturtle().color() pencolor('lightgray') offset_x = len(str(max(xmax, xmin))) * 2 offset_y = len(str(max(ymax, ymin))) * 2 for xtick in range(scale * xmin, scale * xmax + 1, scale * tick): move(xtick + offset_x, scale * ymin - 15) pencolor('black') write_tick(xtick / scale, int(tick) == tick) # pencolor('lightgray') move(xtick, scale * ymin) goto(xtick, scale * ymax) for ytick in range(scale * ymin, scale * ymax + 1, scale * tick): move(scale * xmin - 5, ytick - offset_y + 3) pencolor('black') write_tick(ytick / scale, int(tick) == tick) # pencolor('lightgray') move(scale * xmin, ytick) goto(scale * xmax, ytick) move(*old_pos) pensize(old_pensize) color(*old_color) grid(*X, *Y, TICK, SCALE) if DRAW_COORD: dim = 250 # draw x axis backward(250) forward(500) left(150) forward(20) backward(20) right(300) forward(20) penup() goto(240, -20) write('x', font=(&quot;Arial&quot;, 24, &quot;normal&quot;)) # draw y axis home() left(90) pendown() backward(250) forward(500) left(150) forward(20) backward(20) right(300) forward(20) penup() goto(-30, 240) write('y', font=(&quot;Arial&quot;, 24, &quot;normal&quot;),) home() ","keywords":""},{"title":"6. Parameter ‚äï‚äñ","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/functions-params","content":"6. Parameter ‚äï‚äñ Ein weiteres Strukturelement eines Algorithmus sind Parameter. Die Verwendung von Parametern haben wir bereits in Aktion gesehen - im Struktogramm sind alle Parameter unterstrichen, in Python werden alle Parameter als Liste, abgetrennt mit Kommas, in den runden Klammern geschrieben. Zur Erinnerung Parameter ‚äï ‚äñ: Das Ergebnis eines Algorithmus kann variiert werden durch Werte, welche bei jeder Ausf√ºhrung neu festgelegt werden. Beispiel: Bei einem Online-Rezept kann der Parameter Anzahl Personen mit den Kn√∂pfen ‚äï und ‚äñ variiert werden - die Mengenangaben werden dann aktualisiert. Aufgabe Markieren Sie im folgenden Programm (links) wie folgt: Parameter unterstreichen Befehlsnamen gelb markieren from turtle import * goto(20, 30) for i in range(5): left(90) forward(17) right(90) forward(29) SSR Wie k√∂nnen Unterprogramme geschrieben werden, die Parameter akzeptieren? Untersuchen Sie die folgenden Unterprogramme (f√ºhren Sie diese aus!) und notieren Sie sich, was Sie feststellen. Unterprogramme mit Parametern hello.py def hallo(name): print('Hallo', name) hallo('Maria') hallo('Reto') hallo('Hans') rechnen.py def quotient(zahl1, zahl2): print(zahl1, ':', zahl2, '=', zahl1 / zahl2) quotient(2, 3) quotient(5, 9) quotient(12, 20 + 4) ‚≠êÔ∏è Was sind die Parameter bei quotient(12, 20 + 4)? In welcher Reihenfolge werden diese verrechnet? SSR Unterprogramme mit Parametern‚Äã Parameter sind also Werte, die an ein Unterprogramm √ºbergeben werden k√∂nnen. Damit der √ºbergebene Wert im Unterprogramm wiederverwendet werden kann, braucht jeder Parameter einen Namen. Der Wert ist dann √ºber diesen Namen abrufbar. Der Parametername ist frei w√§hlbar, sollte aber seine Bedeutung widerspiegeln. Beispiel: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) color('red') quadrat(50) # ein Quadrat mit der Gr√∂sse 50 zeichnen color('blue') quadrat(100) # ein Quadrat mit der Gr√∂sse 100 zeichnen Mehrere Parameter‚Äã Manchmal ist es praktisch (oder auch n√∂tig), mehrere Parameter an ein Unterprogramm zu √ºbergeben. Das haben wir etwa beim Befehl goto(x, y) bereits gesehen. Beim obigen Programm k√∂nnte etwa auch die Farbe direkt im Unterprogramm square gesetzt werden: from turtle import * def quadrat(size, farbe): color(farbe) for i in range(4): forward(size) left(90) quadrat(50, 'red') # ein rotes Quadrat mit der Gr√∂sse 50 zeichnen quadrat(100, 'blue') # ein blaues Quadrat mit der Gr√∂sse 100 zeichnen Es ist prinzipiell m√∂glich, beliebig viele Parameter nacheinander zu √ºbergeben. H√§ufige Fehler Ein h√§ufiger Fehler sind vergessene Kommas zwischen zwei Parameternamen. Dann entsteht ein SyntaxError. Parameternamen sechseck.py from turtle import * Definieren Sie das Unterprogramm sechseck(size) welches ein Sechseck mit der Gr√∂sse size zeichnet. Rufen Sie das Programm mit sechseck(20) auf. Erzeugen Sie nun 10 Sechsecke. Das kleinste Sechseck hat die Seitenl√§nge 10, das gr√∂sste die Seitenl√§ng 100. F√ºgen Sie der Funktion sechseck(size) den Parameter farbe hinzu und erzeugen Sie mit folgendes Bild: Farben: violet, indigo, blue, green, lime, lightgreen, yellow, orange, orangered, red ‚ùì In welcher Reihenfolge m√ºssen die Sechsecke gezeichnet werden, damit genau das obige Bild entsteht? Tipp: Die Stiftdicke k√∂nnen Sie mit pensize(10) auf 10 setzen. SSR Wiederholungen‚Äã Wiederholung: üîÅ Wiederholte Ausf√ºhrung Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt. from turtle import * for i in range(4): forward(50) left(90) Wozu steht eigentlich das i im for i in range(4)? Das ist fast wie ein Parameter: i enth√§lt die Anzahl bereits ausgef√ºhrter Wiederholungen. W√§hrend Wiederholung 1: i=0, keine Wiederholung abgeschlossen ist. W√§hrend Wiederholung 2: i=1, eine Wiederholung ist bereits abgeschlossen. W√§hrend Wiederholung 3: i=2, zwei Wiederholungen sind bereits abgeschlossen. W√§hrend Wiederholung 4: i=3, drei Wiederholungen sind bereits abgeschlossen. Der Wert, welcher in i steht, kann auch verwendet werden: from turtle import * def quadrat(size): for i in range(4): forward(size) left(90) for i in range(10): quadrat(i * 10 + 10) ‚≠êÔ∏è Zusatzparameter von range() Definition range(start, ende, schritt)‚Äã Der Befehl range kann mit bis zu drei Parametern arbeiten, wobei start der erste verwendete Wert, ende das obere ganzzahlige Limit angibt, welches aber selber nie erreicht wird! und schritt den Abstand zwischen zwei Zahlen angibt. for i in range(2, 11, 3): print(i) Im obigen Beispiel startet i bei 2 und wird solange um 3 erh√∂ht, bis die Zahl 11 erreicht oder √ºberschiesst. ! 11 wird nicht angenommen. Aufgabe Kopieren Sie die Definition eines Hauses aus der letzten √úbung in dieses Programm. Modifizieren Sie das Unterprogramm haus(size) so ab, dass nun die Gr√∂sse des Hauses spezifiziert werden kann. Die Wurzel einer Zahl kann mit sqrt(zahl) berechnet werden. Schreiben Sie ein Unterprogramm move(x, y), welches die Schritte Stift heben zur Position x, y gehen Stift senken zusammenfasst. Mit dem Befehl randint(min, max) aus der Bibliothek random kann eine zuf√§llige ganze Zahl erzeugt werden. Dabei muss der kleinst und der gr√∂sstm√∂gliche Wert angegeben werden. Mit move(randint(-20, 20), randint(-20, 20)) kann also die Turtle an eine beliebige Position verschoben werden. Zeichnen Sie 20 H√§user an zuf√§lligen Positionen mit der Gr√∂sse 30. Stadt W√§hlen Sie nun auch die Gr√∂sse zuf√§llig: haus(randint(10, 100)) Nun soll auch noch die Farbe zuf√§llig gew√§hlt werden. Der Befehl choice aus der Bibliothek random gibt jeweils ein zuf√§lliges Element einer Liste zur√ºck: choice([1, 3, 5, 7, 9]) etwa w√§hlt zuf√§llig eine ungerade Zahl zwischen 1 und 10 aus. Die Liste der Farben: ['violet', 'indigo', 'blue', 'green', 'lime', 'lightgreen', 'yellow', 'orange', 'orangered', 'red'] stadt.py from turtle import * from math import sqrt from random import randint, choice SSR ‚≠êÔ∏è Zusatz Zeichnen Sie folgende Quadrate. Auf wie viele Zeilen k√∂nnen Sie Ihr Programm k√ºrzen? quadrate.py from turtle import * SSR","keywords":""},{"title":"1. Einf√ºhrung Python üë£","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/intro","content":"1. Einf√ºhrung Python üë£ Programmieren heisst, einer Maschine Befehle zu erteilen und sie damit zu steuern. Die erste solche Maschine, die Sie steuern, ist eine kleine Schildkr√∂te (bzw. ein kleines Dreieck) auf dem Bildschirm: Die Turtle. Was kann diese Turtle und was musst du wissen, um sie zu steuern? Turtlebefehle werden grunds√§tzlich Englisch geschrieben und enden immer mit einem Klammerpaar. Dieses enth√§lt weitere Angaben zum Befehl. Selbst wenn keine weiteren Angaben n√∂tig sind, muss ein leeres Klammerpaar vorhanden sein. Die Klein-/Grossschreibung muss exakt eingehalten werden. Die Turtle kann sich innerhalb ihres Fensters bewegen und dabei eine Spur zeichnen. Um die Turtle zu bewegen, verwenden wir die drei Befehle forward(distanz), left(winkel) und right(winkel). Programmierkonzepte: Quellprogramm editieren, Programm ausf√ºhren, Programmsequenz Das erste Programm‚Äã Das erste Python-Programm zeichnet ein Quadrat. Damit die Befehle zum zeichnen verwendet werden k√∂nnen, muss zuerst eine Datei mit den entsprechenden Befehlen (ein sogenanntes Modul) turtle geladen werden. Quadrat from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) from turtle import * Damit Python die Befehle zum zeichnen verwenden kann, m√ºssen diese zuerst aus einer Bibliothek importiert werden. Damit beim Importieren nicht jeder einzelne Befehl angegeben werden muss, wird das Zeichen * verwendet welches alle verf√ºgbaren Befehle importiert. Befehle: forward, left Alle Befehle in Python sind nach demselben Schema aufgebaut: einen Befehlsnamen runde Klammern optional in den runden Klammern eine Auflistung* von Parametern, die auch leer sein darf. forward(90) \\_____/ \\ / Parameter (Bedeutung hier: 90 Schritte vorw√§rts) Befehlsname penup() \\___/ \\ / kein Parameter Befehlsname * werden mehrere Parameter √ºbergeben, dann werden diese mit Kommas abgetrennt, z.B. goto(20, 30) Aufgabe 1 Markieren Sie im untenstehenden Programm folgende Strukturmerkmale eines Algorithmus mit den vorgegebenen Farben: Unterprogramme Aufrufe eines Unterprogramms mit orange Parameter Verwendete Parameter mit gr√ºn SSR Aufgabe 2 √Ñndern Sie die Parameter im Programm QUADRAT.PY so ab, dass: das Quadrat doppelt so gross gezeichnet wird das Quadrat um 45¬∞ nach links gedreht gezeichnet wird quatrat.py from turtle import * left(90) forward(80) left(90) forward(80) left(90) forward(80) left(90) forward(80) ‚≠êÔ∏è Zusatz:‚Äã Die Form der Turtle kann mit dem Befehl shape ver√§ndert werden. √Ñndern Sie auf Zeile 3 die Turtleform auf eine Schildkr√∂te durch Aufrufen des Befehls shape mit dem Parameter 'turtle'. M√∂gliche Parameter f√ºr den Befehl shape 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) SSR Farben‚Äã Die Stiftfarbe kann mit dem Befehl pencolor('red') auf rot gewechselt werden. Es gibt eine vordefinierte Farbpalette f√ºr die Stiftfarben. farben from turtle import * forward(30) right(90) pencolor('red') forward(30) right(90) pencolor('blue') forward(30) right(90) pencolor('green') forward(30) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white 'string' Beachten Sie die Anf√ºhrungszeichen rund um die Farb-Namen. Damit Python die Farben als Text (eng. string) erkennt und nicht pl√∂tzlich nach einem gleichnamigen Befehl sucht, werden rund um Texte immer Anf√ºhrungszeichen verwendet. Stiftbreite‚Äã Die Stiftbreite kann mit dem Befehl pensize(2) ver√§ndert werden. Standardm√§ssig ist die Stiftbreite 1 from turtle import * forward(20) pensize(5) forward(20) pensize(10) forward(20) pensize(15) forward(20) pensize(20) forward(20) Zahlen Beachten Sie, dass bei Zahlen keine Anf√ºhrungszeichen verwendet werden. Eine Verwechslungsgefahr mit anderen Befehlen besteht nicht, da in Python keine Befehle mit einer Zahl beginnen. Aufgabe 3: Zickzack Versuchen Sie, folgendes Zickzack-Muster mit einer Stiftdicke von 5 zu zeichnen. Die Streckenl√§nge und die Winkel d√ºrfen Sie sch√§tzen. zickzack.py from turtle import * ‚≠êÔ∏è Zusatz:‚Äã Machen Sie bei jedem Richtungswechsel einen Punkt: SSR Kommentare‚Äã In Python k√∂nnen Kommentare eingef√ºgt werden, die aber auf die Ausf√ºhrung des Programms keinen Einfluss haben. Kommentare sind eine wichtige Hilfe, um Programme (Algorithmen) besser zu verstehen, oder aber um zus√§tzliche Informationen, wie den Autor des Programms, festzuhalten. # Autor: B. Hofer # Datum: 5.09.2021 from turtle import * # importiere alle Befehle der Bibliothek &quot;turtle&quot; speed(1) # verlangsame die Turtle auf die langsamste Geschwindigkeit forward(100) # 100 Schritte vorw√§rts left(120) # drehe um 120 ¬∞ nach links speed(3) # zur√ºck auf Normalgeschwindigkeit forward(100) left(120) speed(10) # Schneller... forward(100) left(120) hideturtle() # verstecke die Turtle Aufgabe 4: Programm untersuchen Versuchen Sie nachzuvollziehen, welche Zeile was macht. F√ºgen Sie auf den ersten Zeilen den Autor und das Datum hinzu. F√ºgen Sie immer dann, wenn ein Unterprogramm zum ersten Mal verwendet wird, einen Kommentar hinzu, welcher beschreibt, was dieses Unterprogramm macht und, falls vorhanden, welchen Einfluss die Parameter haben. Stift-und-Punkte from turtle import * forward(40) left(90) penup() forward(40) dot(10) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) Aufgabe 5: W√ºrfel √Ñndern Sie das Programm so ab, dass die gew√ºrfelte Zahl 5 gezeichnet wird: W√ºrfel 5 Verstecken Sie auch die Turtle am Ende! W√ºrfel__5.py from turtle import * forward(40) left(90) penup() forward(40) dot(5) right(180) forward(40) left(90) pendown() forward(40) left(90) forward(80) left(90) forward(80) left(90) forward(80) SSR Aufgaben‚Äã Aufgabe 6: Haus von Nikolaus Das &quot;Haus vom Nikolaus&quot; ist ein Zeichenspiel f√ºr Kinder. Ziel ist es, das besagte Haus in einem Linienzug aus genau acht Strecken zu zeichnen, ohne dabei eine Strecke zweimal zu durchlaufen. Zeichnen Sie das Haus vom Nikolaus. haus__nikolaus.py from turtle import * Hinweis: Diagonale Die L√§nge der Diagonale k√∂nnen Sie mithilfe von Pythagoras und einem Taschenrechner berechnen. Oder Sie verwenden den Trick, dass die Diagonale im Quadrat gerade 2\\sqrt 22‚Äã mal l√§nger ist als eine Seitenl√§nge - bei einer Seitenl√§nge von 100100100 w√§ren das also ca. 141141141. ‚≠êÔ∏è Zusatz:‚Äã Verwenden Sie f√ºr die Zeichnung Ihre Lieblingsfarbe und eine gr√∂ssere Stiftdicke. SSR Aufgabe 7: Treppe Zeichnen Sie eine Treppe mit f√ºnf Stufen, die eine Breite von 29 Pixeln und eine H√∂he von 17 Pixeln haben. treppe.py from turtle import * SSR","keywords":""},{"title":"8. Bedingte Ausf√ºhrung ‚ëÇ","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/verzweigung","content":"8. Bedingte Ausf√ºhrung ‚ëÇ Einer oder mehrere Schritte werden nur ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist. In Programmen m√∂chten wir w√§hrend der Ausf√ºhrung des Programms entscheiden k√∂nnen, ob Befehle ausgef√ºhrt werden oder nicht. Auch m√∂chten wir entscheiden k√∂nnen, ob eine Wiederholung abgebrochen werden soll. Vergleichen‚Äã Um zu entscheiden, ob Befehle ausgef√ºhrt werden sollen, wird immer eine eine Frage gestellt, die eindeutig mit &quot;Ja&quot; oder &quot;Nein&quot; beantwortet werden kann. Wird die Frage mit &quot;Ja&quot; beantwortet, so ist diese Aussage Wahr und die Bedingung ist erf√ºllt. Andernfalls ist die Aussage Falsch und die Bedingung ist nicht erf√ºllt. Ein Frage kann als Vergleich geschrieben werden. Beispielsweise wird die Frage &quot;Ist 4 kleiner als 2?&quot; als 4 &lt; 2 aufgeschrieben. Die offensichtliche Antwort ist &quot;Nein&quot; und entspricht in Python dem Wert False. Spannender sind vergleiche, wenn diese mit Variablen durchgef√ºhrt werden, da man nicht schon im Voraus weiss, welcher Wert in einer Variable enthalten ist. Die Frage von &quot;Ist x kleiner als 2&quot; (x &lt; 2) h√§ngt also davon ab, welcher Wert zur Zeit in der Variable x gespeichert ist. alter = Wie alt bist du? Ist das alter kleiner als 14? Ausgabe: Du darfst Velo fahren Sonst, ist das alter kleiner als 16? Ausgabe: Du darfst T√∂ffli fahren Sonst, ist das alter kleiner als 18? Ausgabe: Du darfst Roller fahren Sonst Ausgabe: Du darfst Auto fahren alter = int(input('Wie alt bist du?')) if alter &lt; 14: print('Du darfst Velo fahren') elif alter &lt; 16: print('Du darfst T√∂ffli fahren') elif alter &lt; 18: print('Du darfst Roller fahren') else: print('Du darfst Auto fahren') In Python k√∂nnen alle √ºblichen Fragen als Vergleiche von zwei Werten geschrieben werden. Name\tMathematisch\tPythongr√∂sser\t&lt;\\lt&lt;\t&lt; kleiner\t&gt;\\gt&gt;\t&gt; gr√∂sser\t‚â§\\leq‚â§\t&lt;= kleiner\t‚â•\\geq‚â•\t&gt;= gleich\t======\t== ungleich\t‚â†\\neqÓÄ†=\t!= Achtung Bei der √úberpr√ºfung auf Gleichheit werden zwei Gleichheitszeichen == geschrieben. Ausgabefenster‚Äã In Python lassen sich Ausgaben nicht nur mit print sondern auch mit dem Befehl alert() (aus der Bibliothek browser) in einer Ausgabebox anzeigen. Die Ausgabe mit alert wird hier verwendet, weil die Online-Version von Python die Ausgaben mit print erst am Ende des Programms anzeigt wird. Definition alert‚Äã Mit dem Befehl alert aus der Bibliothek browser k√∂nnen Ausgabeboxen erzeugt werden. from browser import alert alert('Hello!') Zufallszahlen erraten‚Äã Ratespiel Probieren Sie das Ratespiel aus: Ratespiel Starten Beschreiben Sie in eigenen Worten, wie das Ratespiel funktioniert. Zeichnen Sie mit ihrer Pultnachbar:in ein Struktogramm f√ºr das Programm. Schreiben Sie gem√§ss dem Struktogramm das Ratespiel in Python. ratespiel.py from browser import alert from random import randint Hinweis Wenn die Zahl gefunden wurde, soll die Spieler:in nicht mehr nach einer Eingabe gefragt werden. Mit dem Befehl break kann die Wiederholung abgebrochen werden. break Definition break‚Äã Mit break kann eine Wiederholter Codeblock beendet werden. Die Ausf√ºhrung geht mit der n√§chsten Zeile nach dem Codeblock weiter. Beispiel for i in range(10): print('Zahl', i) if i == 4: break print('Ende') Bemerke: Bei i == 4 wird break aufgerufen und das Programm f√ºhrt als n√§chstes die Zeile 5 aus. SSR","keywords":""},{"title":"3. Wiederholung üîÅ","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/repeat","content":"3. Wiederholung üîÅ In der Aufgabe 8 haben Sie eine Treppe gezeichnet. Ihr Programm sieht vermutlich etwa wie folgt aus: from turtle import * left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) left(90) forward(17) right(90) forward(29) Was stellen Sie beim Treppen-Programm fest? Das Programm ist lang man sieht nicht auf einen Blick, wie viele Stufen die Treppe hat ob alle Stufen gleich breit und hoch sind Um die Stufenbreite oder die Stufenh√∂he anzupassen, m√ºssen viele Zeilen ver√§ndert werden Es kommt immer wieder dieselbe Sequenz vor: left(90) forward(17) right(90) forward(29) wir sind zu faul, um immer wieder dieselbe Sequenz aufzuschreiben (oder zu Copy&amp;Pasten) Wiederholen von Sequenzen‚Äã Ein Algorithmus kann Sequenzen wiederholt ausf√ºhren. In Python wird die zu wiederholende Sequenz Codeblock genannt. from turtle import * for i in range(5): left(90) forward(17) right(90) forward(29) 5 mal wiederholen: 90¬∞ nach links 17 Schritte vorw√§rts 90¬∞ nach rechts 29 Schritte vorw√§rts Definition for i in range(n):‚Äã Mit for i in range(n): wird eine wiederholte Ausf√ºhrung vorbereitet. Der nachfolgende Codeblock wird n Mal wiederholt, bevor weitere Anweisungen ausgef√ºhrt werden.Alles, was wiederholt werden soll, muss einger√ºckt sein. Beispiel‚Äã from turtle import * for i in range(4): forward(50) left(90) Struktogramm ‚Üí Python √úbersetzen Sie das Struktogramm in ein Python Programm. Was entsteht? wiederholung.py from turtle import * 9 mal wiederholen: 100 Schritte vorw√§rts 160¬∞ nach links Turtle verstecken SSR 1. Python ‚Üí Struktogramm Zeichnen Sie f√ºr folgendes Programm ein Struktogramm auf ein Blatt Papier. Fotografieren Sie es im Anschluss und halten Sie es im untenstehenden Textfeld fest. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) SSR 2. Python ‚Üí Struktogramm Zeichnen Sie auch f√ºr folgendes Programm ein Struktogramm und halten Sie dieses fest. from turtle import * for i in range(5): left(72) for i in range(4): forward(20) left(90) forward(100) SSR 3. Treppe vol. 2 Zeichnen Sie eine Treppe mit 20 Stufen. Die Treppe soll bei den Koordinaten (-200, -200) starten. W√§hlen Sie die Stufen-Breiten so, dass der verf√ºgbare Platz m√∂glichst gut ausgenutzt wird. treppe2.py from turtle import * Hinweis Verwenden Sie den Befehl goto(x, y) um die Turtle bei -200, -200 zu positionieren. SSR 4. Schneestern Zeichnen Sie einen Stern und gehen Sie wie folgt vor: Untersuchen Sie den Stern und identifizieren Sie die wiederholten Sequenzen. Programmieren Sie eine einzelne Sequenz. Die Knacknuss ist, dass am Ende der Sequenz die Turtle so ausgerichtet ist, dass man mit der Wiederholung beginnen k√∂nnte Programmieren Sie die Wiederholung schneestern.py from turtle import * SSR 5. Weihnachtsstern Zeichnen Sie einen Weihnachtsstern mit den Drehwinkeln 140¬∞ und 80¬∞. F√ºllen Sie den Stern mit Ihrer Lieblingsfarbe. Schauen Sie sich dazu den Abschnitt &quot;F√ºllen&quot; unter üëâ Turtle Befehle an. weihnachtsstern.py from turtle import * SSR 6. Quadrate Zeichnen Sie folgende Leiter. K√∂nnen Sie das Programm mit noch weniger Zeilen Code schreiben? Schaffen Sie es, nur 6 Zeilen Code zu verwenden? leiter.py from turtle import * SSR 7. Perlenkette Zeichnen Sie eine Perlenkette in Ihrer Lieblingsfarbe, die aus 18 Perlen (dots) besteht. perlenkette.py from turtle import * Hinweis Die Turtle muss nach 18 Drehungen wieder nach rechts schauen (hat sich also insgesamt um 360¬∞ gedreht) - pro Drehung also xxx Grad Python kann auch rechnen üòã - lassen Sie die Drehung von Python berechnen. Beispiel: left(360 / 4) ist dasselbe wie left(90) SSR 8. Vogel Zeichnen Sie einen Vogel, indem Sie mehrmals nacheinander folgende Befehle wiederholen: forward(2) right(3) vogel.py from turtle import * SSR","keywords":""},{"title":"9. ‚≠êÔ∏è While","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/while","content":"9. ‚≠êÔ∏è While Wiederholen, solange die Frage mit &quot;Ja&quot; beantwortet wird‚Äã Eine Wiederholung mit einer Frage f√ºhrt einen Codeblock so lange aus, bis die Frage nicht mehr mit &quot;Ja&quot; beantwortet wird. Im folgenden Beispiel wird solange eine Spirale gezeichnet, bis die Distanz der Turtle vom Zentrum mehr als 200px betr√§gt. Unendliche Schleife Diese Art von Wiederholung kann dazu f√ºhren, dass eine Frage immer mit &quot;Ja&quot; beantwortet wird und das Programm also nie endet. Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das Programm zu Dies gelingt: Oft ist dies nicht gewollt, doch einmal gestartet, ist es dann in der Browser-Version von Python schwierig, das Programm zu stoppen und die ganze Seite reagiert nicht mehr. Um das laufende Programm zu stoppen, muss: der ganze Tab geschlossen und die Seite in einem neuen Tab ge√∂ffnet werden. (Tipp: Die URL zuerst kopieren...) (den ganzen Browser √ºber den Taskmanager schliessen) winkel = 20 setzen Ist der Abstand zum Zentrum kleiner als 200px? 5 Schritte vorw√§rts winkel¬∞ nach links winkel auf 99% des aktuellen Werts setzen from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Oft k√∂nnte man dies auch mit einer for-Schleife erreichen. Jedoch m√ºsste man dann zuerst berechnen, wie viele Schritte n√∂tig sind, bis dies der Fall ist. Im obigen Beispiel kann etwa der Schrumpf-Faktor (0.99) ver√§ndern, ohne die Frage (weniger als 200px Abstand zum Zentrum?) zu √§ndern. Aufgabe Probieren Sie es aus und spielen Sie mit dem Schrumpf-Faktor 0.99 im obigen Bispiel. Spirale.py from turtle import * winkel = 20 while distance(0, 0) &lt; 200: forward(5) left(winkel) winkel = winkel * 0.99 Wann gibt es mehr/weniger Windungen? Wann entsteht eine unendliche Schleife? Wiederholungen mit der while-Schleife‚Äã Mit der while-Schleife k√∂nnen alle Wiederholungen, die mit der for i in range(...): Syntax erzeugt wurden, ebenfalls erzeugt werden. Dabei muss aber jeweils eine Variable, z.B. i, verwendet werden, welche sich die Anzahl Wiederholungen merkt. Nat√ºrlich muss diese Variable dann bei jeder Wiederholung um eins hochgez√§hlt werden. Eine solche Variable, die bei jeder Wiederholung erh√∂ht wird, wird Schleifenz√§hler oder Laufvariable genannt. from turtle import * i = 0 while i &lt; 4: forward(100) left(90) i = i + 1 for zu while Schreiben Sie das untenstehende Programm so um, dass nur noch while Schleifen verwendet werden. from turtle import * forward(30) left(60) for i in range(5): forward(100) left(72) backward(20) to-while.py from turtle import * SSR while zu for Schreiben Sie das untenstehende Programm so um, dass nur noch for Schleifen verwendet werden. from turtle import * speed(10) def move(x, y): penup() goto(x, y) pendown() def quadrat(): i = 0 while i &lt; 4: forward(20) left(90) i = i + 1 zeile = 0 while zeile &lt; 5: spalte = 0 while spalte &lt; 3: move(zeile * 20, spalte * 20) quadrat() spalte = spalte + 1 zeile = zeile + 1 to-while.py from turtle import * SSR Anwendung‚Äã Die while-Schleife kommt oft bei Benutzerinteraktionen, Simulationen oder bei sich dynamisch √§ndernden Daten vor. Sonstige Wiederholungen lassen sich normalerweise einfacher mit einer for-Schleife umsetzen. Ratespiel √Ñndern Sie das Ratespiel aus dem Kapitel Verzweigungen so ab, dass die Spieler:in unendlich viele Versuche hat um die Zahl zu finden. Wurde die gesuchte Zahl gefunden, soll die Anzahl Versuche zur√ºckgemeldet werden. SSR","keywords":""},{"title":"7. Variablen","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/variablen","content":"7. Variablen Einf√ºhrung‚Äã Im vorhergehenden Kapitel haben Sie Quadrate gezeichnet, deren Seitenl√§nge im Programm fest eingebaut waren. Manchmal m√∂chten Sie aber die Seitenl√§nge mit einem Eingabedialog einlesen. Dazu muss das Programm die eingegebene Zahl als Variable speichern. Variablen kann man sich wie eine Z√ºgelbox vorstellen, welche mit einem Namen angeschrieben ist. Der Name beschreibt, was sich in der Box befindet, damit man den Inhalt sp√§ter auch wieder findet. Variable Zuweisen Mit der Schreibweise anzahl = 12 wird eine solche Box erstellt. In Zukunft sagen wir, dass damit die Variable anzahl definiert und ihr einen Wert zugewiesen wird. Um den Inhalt der Box zu erhalten, kann der Name (ohne Anf√ºhrungszeichen) geschrieben werden. Im Struktogramm werden alle Variablen umrahmt. anzahl = 12 Ausgabe: anzahl anzahl = 12 print(anzahl) Mit Variablen rechnen anzahl = 12 print(anzahl + 13) Mehrere Variablen anzahl = 12 gewicht = 100 print(f'{anzahl} Tafeln Schokolade sind {anzahl * gewicht} g schwer') Formatierter Text: f'{anzahl} Tafeln' Formatierter Text‚Äã Definition formatierter Text f''‚Äã Variablenwerte lassen sich mit geschweiften Klammern {} in einen Text einf√ºgen. Dazu muss zu Beginn des Textes ein kleines f (f√ºr &quot;fromatierten Text&quot;) hinzugef√ºgt werden. name = 'Alfred' print(f'Hallo {name}') √úberschreiben: Variablen neu Zuweisen‚Äã In einer Box kann immer nur ein einziges Objekt abgelegt werden. Wenn sp√§ter also ein neuer Wert in bereits beschriftete Z√ºgelbox gelegt wird, so wird der aktuelle Wert verdr√§ngt. K√ºnftig wird diese erneute Zuweisung √úberschreiben einer Variable genannt. Variablen √ºberschreiben anzahl = 12 print(f'Anzahl = {anzahl}') anzahl = 7 print(f'Anzahl = {anzahl}') Im obigen Beispiel wird der initiale Wert der Variable anzahl (12) mit dem neuen Wert 7 √ºberschrieben. Merke: G√ºltigkeitsbereich Die Variable wird nicht r√ºckwirkend ver√§ndert. Solange eine Variable nicht √ºberschrieben wird, besitzt sie den aktuell zugewiesenen Wert. Aufgabe Was geschieht im untenstehenden Programm? F√ºgen Sie bei jeder Zeile mit einem print einen Kommentar hinzu mit: ausgegebene Zahl aktuell gespeicherter Wert in der Variable anzahl variable.py anzahl = 2 print(anzahl) # =&gt; 2, anzahl=2 print(anzahl + 2) anzahl = 7 print(anzahl) print(anzahl + 2) anzahl = anzahl + 3 print(anzahl) anzahl = anzahl + 3 print(anzahl + 1) anzahl = anzahl + 3 print(anzahl) SSR Gleichheitszeichen Das Gleichheitszeichen hat also in Computerprogrammen nicht dieselbe Bedeutung wie in der Mathematik. Es ist keine Gleichung, sondern eine Variablendefinition oder eine Zuweisung. Variablenwert einlesen, ver√§ndern und ausgeben Im Programm kann mit Hilfe einer Eingabeboxen Werte eingelesen und einer Variable zugewiesen werden. from turtle import * speed(12) anzahl = input('Wie viele Strecken soll die Spirale haben?') anzahl = int(anzahl) seite = 10 for i in range(anzahl): forward(seite) left(90) seite = seite + 10 Eingabe In Python ist das Resultat einer Eingabe immer ein Text. Ein Text kann aber in eine Zahl umgewandelt werden, so dass dann auch damit gerechnet werden kann. Der Befehl int wandelt eine Eingabe in eine ganze Zahl um. Der Befehl float wandelt eine Eingabe in eine Dezimalzahl um. # Centimeter zu Meter gr√∂sse = input('Wie gross bist du [cm]?') gr√∂sse = int(gr√∂sse) print(f'Ich bin {gr√∂sse / 100} m gross') # Meter zu Centimeter gr√∂sse = input('Wie gross bist du [m]?') gr√∂sse = float(gr√∂sse) print(f'Ich bin {gr√∂sse * 100} cm gross') Eingabe - Struktogramm‚Äã Wird ein Wert √ºber eine Eingabeaufforderung eingelesen, so wird dies im Struktogramm mit einem Parallelogramm angezeigt, wobei auch die Variable, welcher das Resultat zugewiesen wird, festgehalten wird: gr√∂sse = Wie gross bist du [cm]? Ausgabe: Ich bin gr√∂sse cm gross. gr√∂sse = input('Wie gross bist du [cm]?') print(f'Ich bin {gr√∂sse} cm gross') Aufgabe 1 - BMI √úbersetzen Sie das folgende Struktogramm in Python Code: gr√∂sse = Wie gross bist du [m]? gewicht = Wie schwer bist du [kg]? bmi = gewicht geteilt durch gr√∂sse mal gr√∂sse Ausgabe: BMI: bmi bmi.py Hinweis Was ist die Bedeutung des folgenden Fehlers? TypeError: Can't multiply sequence by non-int of type 'str' ‚Üí Der eingegebene Text kann nicht multipliziert werden - zuerst m√ºssen gewicht und gr√∂sse in Dezimalzahlen (float) umgewandelt werden: gewicht = float(gewicht). SSR Aufgabe 2 ‚Äì n-Eck Nach Eingabe der Anzahl Ecken in einer Eingabebox soll die Turtle ein regelm√§ssiges n-Eck zeichnen. Beispielsweise wird nach der Eingabe 8 ein 8-Eck gezeichnet. Den passenden Drehwinkel soll das Programm berechnen. n-eck.py from turtle import * SSR Aufgabe 3 Nach der Eingabe eines Winkels in einer Eingabebox zeichnet die Turtle 30 Strecken der L√§nge 100, wobei sie nach jeder Strecke um den gegebenen Winkel nach links dreht. Experimentieren Sie mit verschiedenen Winkeln und zeichnen Sie sch√∂ne Figuren. Mit speed(10) k√∂nnen Sie das Zeichnen beschleunigen. star.py from turtle import * SSR","keywords":""},{"title":"Funktionen","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/functions","content":"Funktionen 06_functions.zip Voraussetzung‚Äã Sie haben auf jupyter.gbsl.website das Kapitel 5 bis und mit Kapitel 5.1 gelesen und bearbeitet. Zeichnen Sie ein Nikolaus-Haus. Um die L√§nge der Diagonalen zu bestimmen, m√ºssen Sie die Wurzel aus 2 berechnen. Dies k√∂nnen Sie, indem Sie die Funktion sqrt (abk√ºrzung f√ºr Squareroot, √ºbersetzt auf deutsch Quadratwurzel) aus der Bibliothek math importieren: from math import sqrt forward(100 * sqrt(2)) Verschieben Sie den Code, welche das Haus zeichnet, in eine Funktion haus() und rufen Sie die Funktion auf, damit ein Haus gezeichnet wird. Erzeugen Sie nun ein ganzes Quartier mit min. 10 H√§usern (Tipp. verwenden Sie eine Schleife). Die H√§user sollen zuf√§llig positioniert werden. Die Funktion randint(-10, 10) gibt eine zuf√§llige Zahl zwischen -10 und 10 zur√ºck. pos_x = randint(-10, 10) pos_y = randint(-10, 10) goto(pos_x, pos_y, draw=False) Die Positionen sollen zwischen -150 und 150 gesetzt werden. √Ñndern Sie die Funktion so, dass Sie die Gr√∂sse des Hauses beim Funktionsaufruf mitgeben k√∂nnen. haus(10) soll ein haus mit Seitenbreite 10 zeichnen, haus(100) eines mit Seitenbreite 100. Zeichnen Sie eine farbeige Stadt: Dazu brauchen wird die Funktion cycle(), welche eine Liste auf einem Drehteller ablegt; nachdem die letzte Farbe verwendet wurde, wird wieder die erste Farbe zur√ºckgegeben: from itertools import cycle colors = [ 'red', 'green', 'blue' ] color_cycle = cycle(colors) color = next(color_cycle) # =&gt; red color = next(color_cycle) # =&gt; green color = next(color_cycle) # =&gt; blue color = next(color_cycle) # =&gt; red Statt nur drei Farben, k√∂nnen Sie auch bspw. die Regenbogenfarben verwenden: # Regenbogenfarben: rainbow_colors = [ 'red', 'orangered', 'orange', 'yellow', 'lightgreen', 'lime', 'green', 'blue', 'indigo', 'violet' ] Zeichnungen mit Funktionen erzeugen‚Äã 5 Funktionen 6 Auf https://io.gbsl.website/controller gibt es 4 Funktionstasten. Wird eine solche geklickt, wird im Skript mit derselben DeviceID die Funktion on_f1, bzw. on_f2, on_f3 oder on_f4 aufgerufen. F1 zeichnet ein Haus F2 ein 8eck F3 einen 5er Stern F4 √§ndert die Position mit goto() zu einem zuf√§lligen neuen Punkt. 7 Auf https://io.gbsl.website/controller k√∂nnen auch die Steuertasten verwendet werden. Sobald eine solche Taste geklickt wird, wird die Funktion on_key(data) aufgerufen. In data.key steht eine der folgenden Texte drin: up right down left home Mit den Schl√ºsselw√∂rtern if, elif und else ist es m√∂glich, Codeteile nur dann auszuf√ºhren, wenn ein Vergleich zutrifft oder nicht. key = &quot;up&quot; if key == &quot;down&quot;: print(&quot;Runter&quot;) elif key == &quot;up&quot;: print(&quot;Rauf!!&quot;) elif key == &quot;right&quot;: print(&quot;Rechts!!&quot;) elif key == &quot;left&quot;: print(&quot;Links!&quot;) else: print(&quot;Unbekannte Richtung!!!&quot;) print(&quot;Fertig&quot;) Hier wird √ºberpr√ºft, ob key dem Text down entspricht (nein). Falls nicht, wird mit elif eine weitere Bedingung √ºberpr√ºft: ob key dem Text up entspricht (ja). aller einger√ºckte Code nach Zeile 5 ausgef√ºhrt - es wird also Rauf!! ausgegeben. Danach springt die Code-Ausf√ºhrung direkt zu Zeile 14. Was w√ºrde ausgegeben wenn auf Zeile 1: key = &quot;home&quot; stehen w√ºrde? Alle Bedingungen w√ºrden nicht zutreffen, weshalb der &quot;Sonst&quot;-Fall (else) eintrifft und die Zeile 12 ausgef√ºhrt wird. Schreiben Sie ein Programm, welches bei up 10 Schritt nach vorn right 45¬∞ nach rechts down 10 Schritt r√ºckw√§rts left 45¬∞ nach links home nach hause (home()) geht. 6: Bedingte Ausf√ºhrung","keywords":""},{"title":"Weihnachtskarten","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/xmas","content":"Weihnachtskarten XMAS-1.py from turtle import * XMAS-2.py from turtle import * XMAS-3.py from turtle import * XMAS-4.py from turtle import * XMAS-5.py from turtle import * SVG Bilder anschauen Animierte SVG-Dateien k√∂nnen im Browser betrachtet werden mit einem Tool https://html5animationtogif.com/svg-to-gif in ein GIF umwandeln mit einem Tool https://html5animationtogif.com/svg-to-video in ein MP4-Video umwandeln","keywords":""},{"title":"Game-Runner","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/game_runner","content":"Game-Runner Auf https://game.gbsl.website lassen sich die erstellten Games hochladen und spielen. Mit einer kleinen Modifikation k√∂nnen kann sogar der Punktestand einer Spielerin/Spielers in ein Scoreboard √ºbernommen werden. Im erstellten Spiel wurde (in den meisten F√§llen*) eine Funktion set_score definiert, √ºber welche jeweils der neue Score aktualisiert wurde. Um den Score nun auch im Scoreboard zu registrieren, muss dort device.report(new_score) aufgerufen werden. Sofern der aktuelle Wert einen neuen Punkte-H√∂chststand ist, wird er ans Scoreboard geschickt. def set_score(new_score): global score score = new_score if score &gt; 10 and level == 1: level_2() elif score &lt; 20 and level == 2: level_1() device.update_text( id='score', text=f'Score: {score}' ) device.report(score) * Falls keine set_score Funktion verwendet wurde, muss √ºberall dort, wo der score ver√§ndert wird das device.set_score(score) aufgerufen werden. Game Hochladen‚Äã Ein Game kann als .zip Ordner hochgeladen werden. Der komprimierte Ordner enth√§lt genau ein Python-Programm (z.B. game.py) und falls das Spiel Bilder und oder Sound enth√§lt, auch diese Ordner. Die Ordnerstruktur k√∂nnte also in etwa wie folgt aussehen: game.zip ‚îú‚îÄ‚îÄ game.py ‚îú‚îÄ‚îÄ Bilder ‚îÇ ‚îú‚îÄ‚îÄ hintergrund.png ‚îÇ ‚îú‚îÄ‚îÄ ghost.gif ‚îÇ ‚îî‚îÄ‚îÄ ghost_yellow.gif ‚îî‚îÄ‚îÄ Sound ‚îú‚îÄ‚îÄ booooom.mp3 ‚îî‚îÄ‚îÄ catch.mp3 Anzeigebild hinzuf√ºgen‚Äã Es kann ein Anzeigebild f√ºr das Game hochgeladen werden. Dazu wird dem Zip-Ordner ein Vorschaubild mit dem Namen preview (z.b. preview.png, preview.jpg oder preview.gif) hinzugef√ºgt. Die Ordnerstruktur sieht dann wie folgt aus: Wichtig: Das Vorschaubild muss exakt den Namen preview haben, sonst wird es nicht verwendet. game.zip ‚îú‚îÄ‚îÄ game.py ‚îú‚îÄ‚îÄ preview.png ‚îú‚îÄ‚îÄ Bilder ‚îÇ ‚îú‚îÄ‚îÄ hintergrund.png ‚îÇ ‚îú‚îÄ‚îÄ ghost.gif ‚îÇ ‚îî‚îÄ‚îÄ ghost_yellow.gif ‚îî‚îÄ‚îÄ Sound ‚îú‚îÄ‚îÄ booooom.mp3 ‚îî‚îÄ‚îÄ catch.mp3 Spieloptimierungen‚Äã Damit das Spiel schneller l√§dt, gibt es ein paar Tricks: entfernen von allen nicht verwendeten Bildern und Sound-Tracks aus den Bilder/Sound Ordnern Die Bildergr√∂sse verringern, indem die Aufl√∂sung des Bildes heruntergesetzt wird (bspw. f√ºr Hintergr√ºnde auf eine Breite von 500px, f√ºr kleine Objekte auf eine Breite von 200px). Achtung: Durch die Reduktion der Aufl√∂sung gehen Informationen verloren und das Bild kann u.U. verpixelt werden. Mac OSX: Vorschau App Windows 10: Paint 3D Die Dateigr√∂sse von Sound-Dateien reduzieren. Auch hier geht Soundqualit√§t verloren. Oft ist dies aber kaum sp√ºrbar bei Smartphone/Laptop Lautsprechern. Diese Reduktion der Dateigr√∂sse heisst Komprimierung und kann bspw. mit einem Onlinetool gemacht werden: mp3smaller -&gt; Small File Size (MP3 Bitrate 32Kbps) w√§hlen compress-mp3 -&gt; Quality: Best Compression w√§hlen Codeoptimierung‚Äã Wenn im Spiel mehrfach (daher auch an einem anderen Ort als ganz am Anfang) device.clear_playground() steht, so k√∂nnen bis auf den ersten Aufruf die Befehle zu device.clean_playground() (mit einem n statt einem r am Ende) verwendet werden. Dies bewirkt, das die Bilder und Sound-Dateien nicht gel√∂scht werden und somit nicht erneut hochgeladen werden m√ºssen. Dazu m√ºssen aber auch alle device.configure_playground() Befehle (ausser der Erste!) angepasst werden und die images= und audio_tracks= Optionen entfernt werden. (Bemerke: Die Option image= kann dennoch gesetzt werden.) Wettbewerb ü•áü•áü•á‚Äã In jeder Klasse werden Spiele und SpielerInnen pr√§miert: Das am besten bewertete Spiel der Klasse Das am meisten gespielte Spiel der Klasse Die Spielerin/Der Spieler mit dem Highscore beim (gesamthaft) am besten bewerteten Spiel Zeitraum: Montag 25.01.2021 bis Sonntag 31.01.2021","keywords":""},{"title":"Turtle Befehle","type":0,"sectionRef":"#","url":"/Programmieren-1/Turtlegrafik/turtle-commands","content":"Turtle Befehle Bewegungen‚Äã Definition forward(n) fd(n)‚Äã Bewegt die Turtle n Pixel nach vorne. from turtle import * ### PRE forward(100) Definition backward(n) back(n) bk(n)‚Äã Bewegt die Turtle n Pixel r√ºckw√§rts. from turtle import * ### PRE backward(100) Definition left(angle) lt(angle)‚Äã Dreht die Turtle angle Grad nach links. from turtle import * ### PRE left(90) Definition right(angle) rt(angle)‚Äã Dreht die Turtle angle Grad nach rechts. from turtle import * ### PRE right(90) Definition goto(x, y)‚Äã Bewegt die Turtle zur Position mit den Koordinaten (x, y). Beispiel: goto(50, 100) from turtle import * ### PRE goto(50, -50) Definition home()‚Äã Setzt die Turtle auf die Ursprungsposition (0, 0) zur√ºck und setzt die Orientierung der Turtle auf rechts ‚ñ∂Ô∏è. from turtle import * speed(0) penup() goto(20, 30) pendown() left(30) write('(20|30), 30¬∞ links', font=('Arial', 8, 'normal')) speed(1) ### PRE home() Definition setheading(to_angle) seth(to_angle)‚Äã Dreht die Turtle, bis der angegebene Winkel erreicht ist. Winkel\tAusrichtung0\t‚ñ∂Ô∏è 90\t‚ñ≤ 180\t‚óÄÔ∏è 270\t‚ñº from turtle import * ### PRE setheading(120) Stift‚Äã Definition penup() up() pu()‚Äã Hebt den Stift an - beim Bewegen der Turtle wird keine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) Definition pendown() down() pd()‚Äã Senkt den Stift - beim Bewegen der Turtle wird wieder eine Spur gezeichnet. from turtle import * ### PRE penup() forward(100) pendown() forward(100) Definition isdown()‚Äã √úberpr√ºft, ob der Stift aktuell gesenkt ist und gibt das Resultat als True (=Stift gesenkt) oder False (=Stift oben) zur√ºck. from turtle import * ### PRE if isdown(): penup() forward(100) Definition pencolor(color)‚Äã Legt die Stiftfarbe fest. Der Parameter color enth√§lt Text, die Farbe muss also mit Anf√ºhrungszeichen umgeben sein. Beispiel: from turtle import * ### PRE pencolor('red') forward(100) Farbpalette red green blue yellow gold orange red maroon violet magenta purple navy blue skyblue cyan teal turquoise lawngreen green darkgreen chocolate brown black gray white RGB-Farben RGB Rot 255 Gr√ºn 217 Blau 0 Bin√§r00000000 CSS-Farbergb(255, 217, 0) from turtle import * pencolor('rgb(255, 217, 0)') forward(100) left(120) r = 30 g = 180 b = 77 # oder variabel pencolor(f'rgb({r}, {g}, {b}') forward(100) Unterschiede zum offiziellen Turtle-Modul Das offizielle Turtle-Modul verwendet zur Anzeige von Grafiken nicht einen Browser, sonder Tkinter. Dort k√∂nnen ebenfalls RGB-Farben verwendet werden, sie werden aber mit einer anderen Syntax √ºbergeben: Mehr dazu hier üëâ https://docs.python.org/3/library/turtle.html#turtle.color Definition pensize(size)‚Äã Legt die Stiftdicke size fest. Standard: pensize(1) from turtle import * ### PRE pensize(10) forward(100) Definition dot() dot(diameter)‚Äã Zeichnet einen Punkt an der aktuellen Position mit dem angegebenen Durchmesser diameter. Wenn kein Durchmesser angegeben wird, verwendet es standardm√§ssig das doppelte der aktuellen Stiftdicke (pensize), aber mindestens einen Durchmesser von 5. from turtle import * ### PRE dot() forward(20) dot(20) Definition circle(radius)‚Äã Zeichnet einen Kreis mit dem angegebenen radius. from turtle import * ### PRE circle(100) Definition circle(radius, angle)‚Äã Zeichnet einen Kreisbogen mit dem angegebenen radius und angle. Beispiel from turtle import * ### PRE circle(50, 180) F√ºllen‚Äã Definition fillcolor(color)‚Äã Legt die color f√ºr das F√ºllen von geschlossenen Pfaden fest. Farbpalette from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition begin_fill()‚Äã Startet einen geschlossenen Pfad. from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Definition end_fill()‚Äã Endet die Aufzeichnung des Pfades und schliesst diesen. Beispiel from turtle import * ### PRE fillcolor('red') begin_fill() forward(100) left(90) forward(50) end_fill() Aussehen und Geschwindigkeit‚Äã Definition shape(form)‚Äã √Ñndert die Form der Turtle. F√ºr den Parameter form k√∂nnen folgende Werte verwendet werden: 'arrow' 'turtle' 'circle' 'square' 'triangle' 'classic' (standard) from turtle import * ### PRE shape('turtle') Definition hideturtle()‚Äã Macht die Turtle unsichtbar. ‚ö†Ô∏è Der Stift wird durch das Verstecken nicht automatisch angehoben. from turtle import * ### PRE hideturtle() forward(100) Definition showturtle()‚Äã Zeigt die Turtle wieder an. ‚ö†Ô∏è Der Stift wird durch das Anzeigen nicht automatisch wieder abgesetzt. from turtle import * speed(1) ### PRE forward(20) penup() hideturtle() forward(30) showturtle() left(90) forward(50) Definition speed(v)‚Äã Legt die Geschwindigkeit v der Turtle fest. 1 am langsamsten 3 Standard 6 schnell ... (Schnellstm√∂gliche Geschwindigkeit kann mit speed(0) festgelegt werden.) from turtle import * ### PRE speed(1) forward(100) ","keywords":""},{"title":"Sieb des Eratosthenes","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/grid","content":"Sieb des Eratosthenes 09_grid.zip Mit folgendem Programm wird auf https://io.gbsl.website/color_grid ein Gitternetz mit nummerierten Feldern erzeugt. from smartphone_connector import Connector device = Connector('https://io.gbsl.website', 'FooBar') device.setup_grid(10, 15, enumerate=True) # verbindung mit dem Ger√§t beenden device.disconnect() Mit dem Befehl device.set_grid_at(cell_number=1, color=&quot;red&quot;) kann die Farbe des ersten Feldes auf rot gesetzt werden. Als Farbe sind alle englischen Farb-Namen erlaubt. Weiter kann mit dem Befehl device.get_grid_at(cell_number=1) die aktuelle Farbe des ersten Feldes abgefragt werden. Aufgaben‚Äã Zeichnen Sie ein 10x10 grosses Gitternetz und f√§rben Sie folgenden Felder rot ein: alle Felder der 2er Reihe, ausser die 2 selbst alle Felder der 3er Reihe, ausser die 3 selbst alle Felder der 5er Reihe, ausser die 5 selbst alle Felder der 7er Reihe, ausser die 7 selbst Was f√§llt Ihnen auf? Was f√ºr Zahlen sind auf den noch weissen feldern abgebildet? Dieser Algorithmus zum Auffinden von Primzahlen wurde schon viele Jahrhunderte vor Christus entdeckt, es war aber Eratosthenes welcher ca. 300 v. Chr. dieses Verfahren &quot;Zahlensieb&quot; nannte, weshalb es bis heute noch &quot;Sieb des Eratosthenes&quot; genannt wird. Der eigentliche Algorithmus funktioniert wie folgt: Starte bei der Zahl 2 Ist das Ende des Gitters erreicht, springe zu Punkt 4. Ist das Feld rot, fahre mit Schritt 3 weiter. Ist das aktuelle Feld noch nicht rot, so ist es eine Primzahl und wird nicht rot gef√§rbt. Alle Vielfachen dieser Zahl bis zum Ende des Gitters werden rot gef√§rbt. Gehe zum n√§chsten Feld und fahre mit Schritt 2 weiter. Ende Implementieren Sie diesen Algorithmus und pr√ºfen Sie ihn mit einem 20x20 Gitter. Zusatz: Eigentlich m√ºssen nicht ganz alle Felder √ºberpr√ºft werden. Optimieren Sie ihr Programm, indem Sie nur soviele Felder √ºberpr√ºfen, wie minimal n√∂tig sind.","keywords":""},{"title":"Gr√ºfnisch","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/gruefnisch","content":"Gr√ºfnisch 05_gruefnisch.zip Gr√ºfnisch ist in der Schweiz unter Jugendlichen und Kindern eine verbreitete Spielsprache. Diese Sprache wird von vielen Kindern und Jugendlichen auch als Geheimsprache benutzt. Bei ‚ÄûGr√ºfnisch‚Äú werden die Vokale a, e, i, o, u, √§, √∂ und √º durch anafa, enefe, inifi, onofo, unufu, √§n√§f√§, √∂n√∂f√∂ und √ºn√ºf√º ersetzt (z. B.: ‚ÄûHanafallonofo‚Äú = ‚ÄûHallo‚Äú). Ausnahme: Bei Diphthongen/Zwielauten wird nur der erste verl√§ngert (z. B. ‚Äûau‚Äú ‚áí ‚Äûanafau‚Äú). 1 Beispiel‚Äã Gymnasium Biel Seeland heisst auf Gr√ºfnisch Gymnanafasinifiunufum Binifienefel-Senefeenefelanafand Aufgabe‚Äã Passe das Skript 01_gruefnisch.py so an, dass am Ende die gr√ºfnische √úbersetzung ausgegeben wird. Geben Sie am Ende die gr√ºfnische √úbersetzung als Sprache aus, wobei das folgende Beispiel zeigt, wie der Text Hallo GBSL als Sprache ausgegeben wird. satz = 'Hallo GBSL' gesprochen = gTTS(text=satz, lang='de', slow=False) gesprochen.save('speak_out.mp3') playsound('speak_out.mp3') √Ñndern Sie das Skript so ab, dass der Benutzer mit input() nach einem zu √ºbersetzenden Satz gefragt wird. Quelle: Wikipedia ‚Ü©","keywords":""},{"title":"Ein- und Ausgabe: Aufgabe","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/io","content":"Ein- und Ausgabe: Aufgabe 03_input_output.zip Tutorial Theorie: Jupyterhub 01T_Eingabe_Ausgabe_Variablen 1 . Schreiben Sie ein Skript, welches Sie zuerst nach Ihrem Vorname und dann nach ihrem Nachname fragt. 2 . Erweitern Sie Aufgabe 1. so, dass wenn der Vorname &quot;Maria&quot; und der Nachname &quot;Meier&quot; eingegeben wird, folgende Ansprache ausgegeben wird: Guten Tag Familie Meier und besonders, Hallo Maria! 3 . Erstellen Sie einen Body Mass Index (BMI) Rechner. Der BMI ist wie folgt berechnet: Masse[kg] BMI = ------------------------ Gr√∂sse[m] * Gr√∂sse[m] Der Benutzer soll zuerst sein Gewicht in kg eingeben und dann seine Gr√∂sse in Meter. Danach soll das Programm den BMI berechnen und anzeigen. √úberpr√ºfen Sie Ihre Resultate mit der Eingabe Gewicht: 70 und Gr√∂sse 1.7, was zu einem BMI von 24.22 f√ºhren sollte. Zusatz: Die Ein- und Ausgabe soll √ºber das Smartphone geschehen. 4 . Schreiben Sie ein Programm, welches Sie nach ihrem Vor- und Nachnamen fragt und Sie anschliessend mit Computer-Sprache begr√ºsst. 5 . Erweitern Sie Aufgabe 4. so, dass die Eingabe vom Vor- und Nachnamen nun √ºber Ihr Smartphone eingeben k√∂nnen.","keywords":""},{"title":"Modulo","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/modulo","content":"Modulo 11_modulo.zip 1. Kalender‚Äã Schreiben Sie ein Programm, das von einem gegebenen Datum im 21. Jahrhundert (vom 1. 1. 2001 bis 31.12.2100) den Wochentag bestimmt. Dabei muss Folgendes beachtet werden: Der 1.1.2001 war ein Montag. Schaltjahre haben 366 statt 365 Tage. Ein Schaltjahr ist... durch 4 teilbar, aber nicht durch 100 teilbar Ausnahme: Ist die Jahreszahl durch 400 teilbar, dann ist es ein Schaltjahr Zusatzaufgabe: Erweitern Sie das Programm so, dass es f√ºr alle Daten im Gregorianischen Kalender (ab Freitag 15.10.1582) funktioniert. Schritt 1Schritt 2Schritt 3Schritt 4Schritt 5 Zuerst √ºber eine Eingabe Tag, Monat und Jahr abfragen (achtung Datentyp...). tag = input('Tag') monat = input('Monat') jahr = input('Jahr') kalender.py # kalender 2. Schachbrett‚Äã Erzeugen Sie auf https://io.gbsl.website ein 8x8 Schachbrett. Schachbrett Tipps: Zeichnen Sie ein Feld 20x20 einheiten gross checker-anim Zusatz‚Äã Stellen Sie die Schach-Figuren auf: Die Bilder f√ºr die Figuren finden Sie im Ordner chess - dieser Ordner muss beim Konfigurieren des Playgrounds angegeben werden: device.configure_playground( width=180, height=180, origin_x=10, origin_y=10, color='bisque', images='chess' ) Anschliessend kann einem Objekt ein Hintergrundbild mitgegeben werden (Achtung: nur der Name des Bildes wird angegeben, keine Dateierweiterung!). device.add_square( pos_x=0, pos_y=0, size=15, image='s_dame' ) Theorie: Jupyterhub Kapitel 7.4 Tipp: Setzen Sie den Anker der Schach-Figuren auf anchor=[0.5, 0.5].","keywords":""},{"title":"Name","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/name","content":"Name 10_name.zip Voraussetzung: Theorie: Jupyterhub 07T_Playground Abgabe‚Äã Abgabe √ºber den folgenden Link in OneDrive: Namen animieren‚Äã Schreiben Sie ein Programm, welches Ihre Initialen schreibt - nicht als normalen Text sondern mit Linien, Kreisen und Rechtecken zusammengestellt. Animieren Sie ihre Initialen, indem Sie einzelne Objekte regelm√§ssig aktualisieren.","keywords":""},{"title":"Regenbogen Display","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/smartphone_rainbow","content":"Regenbogen Display 02_smartphone_rainbow.zip Mit der Python-Bibliothek smartphone-connector kann eine Verbindung mit dem Smartphone aufgebaut werden. √ñffnen Sie dazu mit dem Smartphone die Website https://io.gbsl.website und geben Sie bei der DeviceID Ihren Namen (oder einen Alias-Namen) ein. Diese DeviceID brauchen wir anschliessend, um die Befehle ans richtige Smartphone zu schicken. Es gibt aktuell drei verschiedene Interaktionsm√∂glichkeiten: Steuertasten, Farbdisplay und Farbraster. Heute verwenden wir nur das Farbdisplay. Verbindung herstellen‚Äã Mit dem Smartphone auf die Farbdisplay-Seite gehen. Das folgende Skript stellt den Bildschirm zuerst auf auf rot und nach 0.5 Sekunden dann auf orange. # Die Bibliothek laden - sie nimmt uns viel Arbeit ab from smartphone_connector import Connector # Hier die DeviceID ihres Smartphones eingeben # ‚Üì connector = Connector('https://io.gbsl.website', 'DeviceID') # die Anzeigefarbe auf dem Smartphone auf rot setzen connector.set_color('red') # 0.5 Sekunden warten connector.sleep(0.5) # die Anzeigefarbe auf dem Smartphone auf cyan setzen connector.set_color('orange') Aufgabe Skripts Herunterladen Schreiben Sie ein Skript, das jede Regenbogenfarbe eine Sekunde lang auf Ihrem Smartphone anzeigt. # Regenbogenfarben: rainbow_colors = [ 'red', 'orangered', 'orange', 'yellow', 'lightgreen', 'lime', 'green', 'blue', 'indigo', 'violet' ] Lesen Sie den Abschnitt √ºber die While-Schleife. Versuchen Sie dieses Konzept hier zu verwenden, um die Farbreihenfolge unendlich lange auf dem Smartphone abzuspielen. Sie m√ºssen dazu eine Bedingung finden, die immer Wahr bleibt. Lesen Sie den Abschnitt √ºber die For-Schleife. Passen Sie ihren Code so an, dass eine for Schleife f√ºr die verschiedenen Farben verwendet wird. Tipp: folgender zeigt nacheinander die Farben schwarz, weiss und grau an: for color in ['black', 'white', 'gray']: connector.set_color(color) connector.sleep(0.5) Spielen Sie mit der Anzeigedauer der Farben. K√∂nnen Sie ein Stroboskop erzeugen? (!!Achtung, bei Eptileptikern k√∂nnen solche Strobo-Effekte zu einem Anfall f√ºhren. Sie d√ºrfen das Strobo-Ger√§t daher niemandem ungefragt vorhalten.)","keywords":""},{"title":"Uhren","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/uhren","content":"Uhren 10_uhren.zip Voraussetzung: Theorie: Jupyterhub 7-7.2 SBB Uhr‚Äã sbb uhr Schreiben Sie ein Programm, welches die abgebildete SBB-Uhr zeichnet inkl. ihrer Uhrzeit zeichnet. In Python k√∂nnen diese Funktionen aus der math Bibliothek importiert werden. !!Achtung: cos und sin erwarten die Winkel-Angaben im Bogenmass (im Bogenmass entspricht œÄ\\piœÄ 180¬∞). Allf√§llige Grad-Angaben m√ºssen daher zuerst umgerechnet werden. Im foglenden Beispiel werden z.B. der Sinus von 15¬∞ bzw. der Kosinus von 33¬∞ berechnet und in einer Variable gespeichert: from math import cos, sin, pi sin15 = sin(15 / 180 * pi) cos33 = cos(33 / 180 * pi) Fragen Sie den Benutzer nach einer Uhrzeit (zuerst die Stunden, dann die Minuten und schliesslich die Sekunden) und stellen Sie dann diese Uhrzeit ein. Animieren Sie Ihre Uhr. Die SBB Uhr hat die Eigenheit, dass der Sekunden-Zeiger nur 59 Sekunden f√ºr eine Umdrehung hat, weil er auf 12 Uhr f√ºr 1 Sekunde stehen bleibt. Tipps: Mit device.sleep(1.0) wird die Ausf√ºhrung des Programms f√ºr eine Sekunde unterbrochen. Mit der Funktion time_ns() (aus der Bibliothek time) k√∂nnen Sie die aktuelle Systemzeit in Nanosekunden abfragen. Rechnen Sie zuerst von Nanosekunden zu Sekunden um. from time import time_ns print(f&quot;Aktuelle Systemzeit: {time_ns()}&quot;) ","keywords":""},{"title":"Zufallszahl","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/zufalls_zahl","content":"Zufallszahl 07_zufallszahl.zip Tutorial Voraussetzung‚Äã Sie haben auf jupyter.gbsl.website das Kapitel 2.1 gelesen und bearbeitet. Aufgabe‚Äã Auf einer langen Autfahrt spielen Maria und Bob das Zufallsspiel: Maria denkt sich eine Zahl zwischen 0 und 9 aus. Err√§t Bob die Zahl in den ersten 5 versuchen, so hat er gewonnen, sonst Maria. Aufgabe: Schreiben Sie ein Skript welches den Part von Maria √ºbernimmt und das Zufallsspiel mit Ihnen spielt. Um mit Python eine Zufallszahl zu erzeugen, brauchen wir die Funktion randint() aus der Bibliothek random. from random import randint zufallszahl = randint(0, 9) Merke mit 0 wird die untere Grenze, mit 9 die obere Grenze festgelegt. F√ºr eine Zufallszahl zwischen 10 und 100 w√ºrde der Aufruf also randint(10, 100) lauten. Vorgehen*‚Äã Wir brauchen eine Zufallszahl, m√ºssen immer wissen wie viele Versuche bereits gemacht wurden und welche Zahl aktuell geraten wurde. F√ºr diese drei Informationen braucht es Variablen. Weisen Sie der Variable zufallszahl eine zuf√§llige Zahl zwischen 0 und 9 zu. Fragen Sie den Bentzer nach einer Zahl und speichern Sie das Resultat in einer Variable, z.B. geraten Achtung, die Variable geraten muss noch in eine Zahl umgewandelt werden! Das war der erste Versuch! Weisen Sie der Variable versuche den Wert 1 zu. Solange die geratene Zahl nicht der Zufallszahl entspricht und die Anzahl Versuche noch kleiner als 5 sind, wird erneut nach einer Zufallszahl gefragt und dabei immer die Variable versuch um 1 erh√∂ht. √úberpr√ºfen Sie nach der Schleife, ob Sie gewonnen haben, indem mit if √ºberpr√ºft wird, ob die geratene Zahl der Zufallszahl entspricht. In diesem Fall soll Du gewinnst!! ausgegeben werden √úberpr√ºfen Sie weiter, ob die Maschine gewonnen hat, indem mit if √ºberpr√ºft wird, ob die geratene Zahl nicht der Zufallszahl entspricht. In diesem Fall soll Die Maschine gewinnt ausgegeben werden. Zusatz‚Äã Schreiben Sie das Skript so um, dass es nach einem Durchlauf wieder neu gestartet wird. Tipp Erzeugen Sie rund um das ganze Skript (aussert die import Zeilen) eine immer wahre while Schleife: while True: print(&quot;Ich bin immer wahr...&quot;) Binden Sie die Bibliothek smartphone_connector ein und schicken Sie die Fragen und die Sieger-Nachrichten ans Smartphone. Beachten Sie, dass der Verbindungs-Aufbau (phone = Connector...) nur genau ein Mal gemacht werden sollte. Da Sie bereits wissen, dass der Benutzer eine Zahl eingeben soll, kann dies auch mitgegeben werden, so dass auf dem Smartphone eine Zahlen-Tastatur angezeigt wird. Achtung der R√ºckgabewert ist dennoch ein Text. from smartphone_connector import Connector phone = Connector(&quot;https://io.gbsl.website&quot;, &quot;FooBar&quot;) geraten = phone.input(&quot;Zufallszhal? &quot;, input_type=&quot;number&quot;) Zudem soll die Gewinner-Benachrichtigung vom Benutzer best√§tigt werden m√ºssen. Dazu rufen Sie alert() statt print() auf. phone.alert(&quot;Du gewinnst!&quot;) * Falls Ihnen die erste Aufgabe nicht gelingt: hier eine Video Anleitung dazu. Achtung, versuchen Sie es zuerst mit der Anleitung. Video Anleitung","keywords":""},{"title":"Ein Python Algorithmus","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Turtles/intro","content":"Ein Python Algorithmus Was ist die Ausgabe des folgenden Algorithmus? Versuchen Sie die Ausgabe zu zeichnen. Halten Sie Abschnitte fest, die sich wiederholen Ein-Turtle-Programm from turtle import * setheading(0) forward(120) left(90) forward(120) left(90) forward(120) left(90) forward(120) left(90) penup() goto(20, 90) pendown() forward(20) left(90) forward(20) left(90) forward(20) left(90) forward(20) left(90) penup() goto(80, 90) pendown() forward(20) left(90) forward(20) left(90) forward(20) left(90) forward(20) left(90) penup() goto(10, 50) pendown() right(90) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) forward(20) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) right(90) forward(10) left(90) forward(10) right(90) ","keywords":""},{"title":"Turtle Graphics","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/turtles","content":"Turtle Graphics Skripts Herunterladen Befehle‚Äã # Muss zuoberst im Skript stehen, um alle Befehle zum # Zeichnen verf√ºgbar zu machen from gbsl_turtle import * forward(100) # 100 Schritte vorw√§rts backward(100) # 100 Schritte r√ºckw√§rts left(90) # 90¬∞ links drehen right(90) # 90¬∞ rechts drehen setheading(0) # Orientierung festlegen: nach rechts schauen ‚ñ∂Ô∏è setheading(90) # Orientierung festlegen: nach oben schauen üîº setheading(180) # Orientierung festlegen: nach links schauen ‚óÄÔ∏è setheading(-90) # Orientierung festlegen: nach unten schauen üîΩ goto(50, 10) # Springt zum Punkt (50, 10). Die Linie wird gezeichnet # Von der Mitte des Bildschirms 50 Pixel rechts # und 10 Pixel nach Oben goto(50, 10, draw=False) # Wie goto(50, 10), aber der Stift wird abgehoben done() # fertig mit Zeichnen - warte auf Klick aufs Ausgabefenster Weitere Befehle‚Äã pensize(10) # setzt die Stiftbreite auf 10 pencolor('red') # setzt die Stiftfarbe auf rot penup() # hebt den Stift ab - alle folgenden Befehle hinterlassen # keine Linie pendown() # setzt den Stift ab - alle folgenden Befehle zeichnen wieder clear() # l√∂scht alles gezeichnete home() # Springt zum Punkt (0, 0) und setzt die Orientierung # zur√ºck (schaut nach rechts) home(draw=False) # wie home(), nur dass keine Linie gezeichnet wird write('Hallo') # Schreibt 'Hallo' hideturtle() # Versteckt das Dreieck showturtle() # Zeigt das Dreieck wieder speed(0) # zeichnet so schnell wie m√∂glich speed(10) # zeichnet so langsam wie m√∂glich # Advanced Screen().tracer(2) # f√ºhrt nur jede zweite Bildschirm-Aktualisierung durch. # Sinnvoll bspw. f√ºrs Zeichnen eines Kreises Screen().tracer(1) # Standard-Einstellung Aufgaben‚Äã Skripts Herunterladen Schreiben Sie ein Programm, das ein Hochhaus zeichnet skyscraper Zusatz: zeichnen Sie die Eingangst√ºre blau. Schreiben Sie ein Programm, das eine Spirale zeichnet exercise03_helix Schreiben Sie ein Programm, das die folgenden Quadrate zeichnet exercise03_quadrat_a Tipp Beginnen Sie mit einem Quadrat mit Seitenl√§nge 100 und werden dann immer 10 Einheiten k√ºrzer. Zusatz Zeichnen Sie ein Regenbogen-Quadrat und setzen Sie die Stiftbreite auf 10 Einheiten. # Regenbogenfarben: rainbow_colors = [ 'red', 'orangered', 'orange', 'yellow', 'lightgreen', 'lime', 'green', 'blue', 'indigo', 'violet' ] quadrat_colored Schreiben Sie ein Programm, das eine Tier-√§hnliche Form zeichnet animal","keywords":""},{"title":"Game-Projekt","type":0,"sectionRef":"#","url":"/Programmieren-2/project","content":"Game-Projekt Ziel Ein Spiel selber nachbauen Das Konzept der Spieleprogrammierung verstehen Was ist ein Game-Loop? Wie lassen sich Zust√§nde darstellen, speichern und ver√§ndern? Das Spiel anpassen und allenfalls erweitern eigene Bilder und Sounds einbinden f√ºr das eigene Ger√§t optimieren (Bildschirmgr√∂sse, Tastaturbelegung, ...) Snake@ üëâ https://simplegametutorials.github.io/pygamezero/snake/ Arcanoid@ üëâ https://new.pythonforengineers.com Flappy Bird@ üëâ https://pygamezero-bird.readthedocs.io/en/latest/ Auftrag W√§hlen Sie ein Spiel aus der Liste aus und geben Sie an, welches Sie ausgew√§hlt haben: Starten Sie mit dem Tutorial und bauen Sie die einzelnen Schritte nach. Der Code soll nicht einfach kopiert werden, sondern verstanden und angepasst werden. Der geschriebene Code soll kommentiert werden. Was macht der Code? Was ist die Funktion? Was ist der Zweck? # Zur Erinnerung: In Python beginnt ein Kommentar mit einem Hashtag In jeder Doppelstunde nehmen Sie sich mindestens 10 Minuten Zeit, um im untenstehenden Tagebuch festzuhalten: Was Sie gemacht haben Welche Teile Sie umgesetzt haben Was Sie neues gelernt haben Erg√§nzungen und Verbesserungen beim Tutorial - gibt es Code-Teile, welche zus√§tzliche Kommentare brauchen? Schreiben Sie diese! ","keywords":""},{"title":"For Schleife","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Turtles/for-loop","content":"For Schleife Programmiersprachen k√∂nnen Code-Teile mehrfach nacheinander ausf√ºhren. In Python gibt es dabei zwei Konzepte. Die for Schleife und die while Schleife. Die for Schleife kann man sich wie ein Ticket-Schalter vorstellen. Der Verk√§ufer am Schalter bedient der Reihe nach jede Person in der Warteschlange und wiederholt jedesmal dieselbe Aufgabe: den Kunden bedienen Warteschlange In Python wird die Warteschleife als Liste in eckigen Klammern geschrieben: for person in ['Jack', 'Maria', 'Reto']: print(f'Guten Tag {person}, wie kann ich helfen?') print('...') print('Auf wiedersehen') Die Personen Jack, Maria und Reto werden nacheinander begr√ºsst, bedient und verabschiedet: Guten Tag Jack, wie kann ich helfen? ... Auf wiedersehen. Guten Tag Maria, wie kann ich helfen? ... Auf wiedersehen. Guten Tag Reto, wie kann ich helfen? ... Auf wiedersehen. Um einen beliebigen Code-Teil mehrfach nacheinander auszuf√ºhren, k√∂nnen wir nun auch Zahlen als Warteschleife verwenden: from turtle import * for counter in [0, 1, 2, 3]: forward(100) left(90) F√ºr jede Zahl wird der Code-Teil wiederholt: from turtle import * # 0 forward(100) left(90) # 1 forward(100) left(90) # 2 forward(100) left(90) # 3 forward(100) left(90) Oder in Kurzschreibweise: from turtle import * for counter in range(4): forward(100) left(90) wobei range(4) eine Warteschleife mit 4 Elementen erzeugt. Was ist die Ausgabe des folgenden Programms?‚Äã from turtle import * penup() goto(-30, 0) pendown() for counter in range(8): forward(60) left(45) penup() goto(-30, 100) pendown() setheading(180) # Orientierung nach links: ‚óÄÔ∏è for counter in range(8): forward(5) right(45) penup() goto(30, 100) pendown() setheading(0) # Orientierung nach rechts: ‚ñ∂Ô∏è for counter in range(8): forward(5) left(45) penup() goto(-48, 40) pendown() setheading(-45) # Orientierung nach rechts unten: ‚ÜòÔ∏è for counter in range(3): forward(40) left(45) ","keywords":""},{"title":"Wiedereinstieg","type":0,"sectionRef":"#","url":"/Programmieren-2/intro","content":"Wiedereinstieg 1. Aufgabe Das Programm zeichnet eine Sonne mit 13 Strahlen. √Ñndern Sie das Programm so ab, dass es nun eine Sonne mit 19 Strahlen zeichnet. Setzen Sie die Stiftdicke auf 5 und die Stiftfarbe auf Rot. F√ºllen Sie die Sonne mit Ihrer Lieblingsfarbe (aber nicht mit Rot) aus. aufgabe1.py from turtle import * speed(0) def bogen(distanz, drehung): for i in range(20): backward(distanz) right(drehung) def strahl(): bogen(3, 5) left(90) bogen(4, -10) right(190) for i in range(13): strahl() right(360 / 13) 2. Aufgabe def aufsummieren(zahl): summe = 0 for i in range(zahl): summe = summe + i return summe print('Summe der ersten 10 Zahlen', aufsummieren(3)) print('Summe der ersten 10 Zahlen', aufsummieren(10)) Untersuchen Sie den obigen Code, und flicken Sie ihn. Die korrekten Ausgaben f√ºr die Summen von 3 bzw. 10 lauten: aufsummieren(3) 1+2+3=61 + 2 + 3 = 61+2+3=6 aufsummieren(10) 1+2+3+4+5+6+7+8+9+10=551 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 551+2+3+4+5+6+7+8+9+10=55 Schreiben Sie eine Funktion aufmultiplizieren(zahl), welche alle nat√ºrlichen Zahlen bis und mit der angegebenen Zahl miteinander multiplizieren. √úberpr√ºfen Sie Ihre Funktion mit verschiedenen Zahlen: aufmultiplizieren(3) 1‚ãÖ2‚ãÖ3=61 \\cdot 2 \\cdot 3 = 61‚ãÖ2‚ãÖ3=6 aufmultiplizieren(10) 1‚ãÖ2‚ãÖ3‚ãÖ4‚ãÖ5‚ãÖ6‚ãÖ7‚ãÖ8‚ãÖ9‚ãÖ10=36288001 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot 5 \\cdot 6 \\cdot 7 \\cdot 8 \\cdot 9 \\cdot 10 = 36288001‚ãÖ2‚ãÖ3‚ãÖ4‚ãÖ5‚ãÖ6‚ãÖ7‚ãÖ8‚ãÖ9‚ãÖ10=3628800","keywords":""},{"title":"Notizen","type":0,"sectionRef":"#","url":"/Programmieren-2/snow/notes.nosync","content":"Notizen Mehr Zeit einrechnen f√ºr Wiedereinstieg: ca. 2 Lektionen. Fokus auf Funktionen und Wiederholungen mit Laufvariable. Listen: Weniger anschauen, nur die sp√§ter verwendete Funktionalit√§t und diese √ºben... (liste = [], liste[0] = 2, append(3)) Game-Loop an kleinem Beispiel gemeinsam anschauen und erkl√§ren. Wichtigkeit von update() und draw() hervorheben. √Ñnderung von Bild-Gr√∂ssen thematisieren. WIDTH und HEIGHT anpassen, scale() verwenden.","keywords":""},{"title":"While Schleife","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Turtles/while-loop","content":"While Schleife Programmiersprachen k√∂nnen Code-Teile mehrfach nacheinander ausf√ºhren. In Python gibt es dabei zwei Konzepte. Die for Schleife und die while Schleife. Die while Schleife kann man sich wie ein kleines Kind auf einer Wanderung vorstellen, das nach jedem Schritt wieder dieselbe Frage stellt: Sind wir schon da?. Solange das Ziel noch nicht erreicht ist, muss das Kind aber den n√§chsten Schritt machen. Die while Schleife stellt ebenfalls immerzu dieselbe Frage, die jeweils mit Ja (True) oder Nein (False) beantwortet wird. Solange die Frage mit Ja beantwortet wird, wird der Code-Teil erneut wiederholt. from turtle import * counter = 0 while counter &lt; 4: forward(100) left(90) counter = counter + 1 from turtle import * counter = 0 # counter = 0 # Bedingung: ‚úÖ (counter ist kleiner als 4) forward(100) left(90) counter = counter + 1 # counter = 1 # Bedingung: ‚úÖ (counter ist kleiner als 4) forward(100) left(90) counter = counter + 1 # counter = 2 # Bedingung: ‚úÖ (counter ist kleiner als 4) forward(100) left(90) counter = counter + 1 # counter = 3 # Bedingung: ‚úÖ (counter ist kleiner als 4) forward(100) left(90) counter = counter + 1 # counter = 4 # Bedingung: ‚ùå (counter ist nicht mehr kleiner als 4) # --&gt; wiederholung abbrechen Was ist die Ausgabe des folgenden Programms?‚Äã from turtle import * penup() goto(-30, 0) pendown() counter = 0 while counter &lt; 8: forward(60) left(45) counter = counter + 1 penup() goto(-30, 100) pendown() setheading(180) # Orientierung nach links: ‚óÄÔ∏è counter = 0 while counter &lt; 8: forward(5) right(45) counter = counter + 1 penup() goto(30, 100) pendown() setheading(0) # Orientierung nach rechts: ‚ñ∂Ô∏è counter = 0 while counter &lt; 8: forward(5) left(45) counter = counter + 1 penup() goto(-48, 40) pendown() setheading(-45) # Orientierung nach rechts unten: ‚ÜòÔ∏è counter = 0 while counter &lt; 3: forward(40) left(45) counter = counter + 1 ","keywords":""},{"title":"Projekt Schneefall","type":0,"sectionRef":"#","url":"/Programmieren-2/snow","content":"Projekt Schneefall Schneeflocken Vorbereitung‚Äã üëâ Mu Editor herunterladen, installieren und starten. Pygame Zero‚Äã Wir wollen wieder etwas zeichnen mit Pygame Zero. Hier das Grundger√ºst f√ºr ein Pygame Zero-Programm: import pgzrun TITLE = 'Fenstertitel' WIDTH = 800 HEIGHT = 600 hintergrund = Actor('hintergrundbild') def draw(): hintergrund.draw() def update(zeitdifferenz): # Anpassungen von Bild zu Bild pass pgzrun.go() Zur Erinnerung Bilder, die im Programm verwendet werden, m√ºssen in einem Unterverzeichnis images gespeichert sein. Anstelle von hintergrund wird der Dateiname ohne Endung angegeben. Der Mu-Editor √∂ffnet dieses Verzeichnis automatisch, wenn man auf Images klickt. Zeichnen mit Pygame Zero‚Äã In der draw()-Funktion k√∂nnen nicht nur Actor gezeichnet werden, es gibt auch die M√∂glichkeit, Linien, Rechtecke und Kreise zu zeichnen. Wir beschr√§nken uns hier auf ausgef√ºllte Kreise, da wir Schneeflocken so darstellen m√∂chten. screen.draw.filled_circle(position, radius, farbe) screen.draw.filled_circle([x, y], r, [r, g, b]) Dieser Aufruf zeichnet einen ausgef√ºllten Kreis mit Mittelpunkt [x, y] und Radius r in der Farbe [r, g, b] (die Werte r, g und b m√ºssen zwischen 0 und 255 liegen). Wichtig ist, dass die zus√§tzlichen Klammern bei der Position und der Farbe geschrieben werden, da die Funktion nur 3 Werte erwartet: die Position, den Radius und die Farbe. def draw(): hintergrund.draw() screen.draw.filled_circle([100, 200], 10, [255, 0, 0]) Dies zeichnet einen rot gef√ºllten Kreis mit Radius 10 bei den Koordinaten (100, 200). Aufgabe 1 ‚Äì Schneeflocke zeichnen üëâ Winterlandschaft 1@ üëâ Winterlandschaft 2@ Laden Sie eines der obigen Hintergrundbilder herunter und f√ºgen Sie es im Mu-Editor bei den Bildern hinzu. Kopieren Sie die Vorlage f√ºr das Pygame Zero-Programm und legen Sie das gew√§hlte Bild als Hintergrundbild fest. Passen Sie die Gr√∂sse des Fensters an, so dass das Bild optimal dargestellt wird. Es hat eine Aufl√∂sung von 1350x900 Pixel. Zeichnen Sie eine Schneeflocke an einer beliebigen Stelle. SSR Aufgabe 2 ‚Äì Schneeflocke bewegen Damit wir die Schneeflocke bewegen k√∂nnen, muss die Position in einer Variablen gespeichert werden, damit sie in der update()-Funktion ver√§ndert werden kann. Sp√§ter wollen wir dann 1'000 Schneeflocken darstellen und somit die Position von 1'000 Schneeflocken speichern. Dies l√§sst sich nicht mit separaten Variablen pro Schneeflocke realisieren. Listen eignen sich aber perfekt f√ºr diese Aufgabe. Vorerst begn√ºgen wir uns allerdings mit der einen Schneeflocke, die wir bereits haben. Anstatt aber die x- und y-Position als Zahl in einer Variablen zu speichern, verwenden wir bereits eine Liste. Erweitern Sie das Programm so, dass die x- und y-Koordinate der bestehenden Schneeflocke je in einer Liste gespeichert werden. Passen Sie die Codezeile zum Zeichnen der Schneeflocke so an, dass die Koordinaten der Schneeflocke aus der Liste geholt werden. F√ºge eine Zeile in die update()-Zeile ein, so dass die y-Koordinate stets ver√§ndert wird. Dabei m√ºssen Sie das Schl√ºsselwort pass entfernen (es musste dort stehen, weil eine Funktion nicht leer sein darf). Hinweis Erstellen Sie zu Beginn des Programms die Listen schnee_x und schnee_y und speichern Sie darin die Position der ersten Schneeflocke (z.B. schnee_x = [100]). Die Koordinaten stehen in beiden Listen an erster Stelle und haben somit Index 0 (schnee_x[0]). SSR Aufgabe 3 ‚Äì mehrere Schneeflocken Nun wollen wir mehrere Schneeflocken zeichnen. Dazu m√ºssen wir brauchen wir Zufallszahlen als Startposition in der Liste mit den x-Koordinaten. Zudem m√ºssen wir daf√ºr sorgen, dass s√§mtliche Schneeflocken gezeichnet werden und nicht nicht eine. Legen Sie in einer Variablen fest, wie viele Schneeflocken Sie zeichnen m√∂chten. Um die Liste mit den Startkoordinaten zu f√ºllen, brauchen wir eine Schleife, die f√ºr s√§mtliche gew√ºnschten Schneeflocken in einem sinnvollen Bereich eine Startkoordinate zuf√§llig berechnet. Lassen Sie die Liste am Anfang leer und f√ºllen Sie sie direkt anschliessend mit einer Schleife. F√ºgen Sie eine weitere Schleife zum Zeichnen der Schneeflocken ein und passen Sie die x-Koordinate an. Probieren Sie das Programm aus. Was ist jetzt noch falsch, was m√ºssen wir ebenfalls noch √§ndern? Hinweis Normalerweise schreibt man Konstanten (also Variablen, deren Werte sich nicht √§ndern) in Grossbuchstaben. Der sinnvolle Bereich f√ºr die x-Koordinate liegt zwischen 0 und der Breite des Fensters. Benutzen Sie die Variable und nicht die Zahl direkt. Ersetzen Sie schnee_x[0] durch schnee_x[i], wobei i Ihre Schleifenvariable ist. Es gibt 2 Dinge zu korrigieren. Auch die y-Koordinaten m√ºssen am Anfang zuf√§llig gesetzt, beim Zeichnen individuell verwendet und in der update()-Funktion individuell ver√§ndert werden, sonst kommt der Schnee als Linie herunter. Zudem sollten diejenigen Schneeflocken, die unten am Bildrand ankommen, sofort wieder neu von oben kommen, sonst dauert der Schneefall nur kurz. SSR ‚≠ê Zusatzaufgabe ‚Äì Schneeflocken versch√∂nern Hier einige Ideen, wie Sie die Schneefall-Animation noch verbessern k√∂nnten: Nicht alle Schneeflocken sollen gleich gross sein. Die gr√∂sseren Flocken sollen schneller fallen (dies erzeugt einen leichten 3D-Effekt). Die Schneeflocken, die neu von oben kommen, sollen eine neue zuf√§llige x-Koordinate erhalten. Die Schneeflocken vom Winde verweht werden SSR","keywords":""},{"title":"Labyrinth","type":0,"sectionRef":"#","url":"/snippets/maze","content":"Labyrinth Ausgangslage f√ºr die Programmierung eines prefekten Labyrinths‚Äã from random import choice DIM_X = 31 DIM_Y = 21 field = [] # prepare list for y in range(0, DIM_Y): row = [] for x in range(0, DIM_X): row.append(1) field.append(row) pos = [1, 1] positions = [pos] pos_pointer = 0 finished = False # set field at current position to zero field[pos[0]][pos[1]] = 0 # repeat 5 times # TODO: repeat until finished for i in range(5): # all directions for the next step options = ['UP', 'RIGHT', 'DOWN', 'LEFT'] success = False # find the next field - iterate until a new direction is found, or all # options are checked while len(options) &gt; 0 and not success: # pick a random direction from the list direction = choice(options) if direction == 'UP': if False: # TODO (a) check if new cell is on field and (b) if new cell is not already taken # TODO: mark cells as taken # update position success = True else: # remove option options.remove('UP') elif direction == 'RIGHT': # ... options.remove('RIGHT') elif direction == 'DOWN': # ... options.remove('DOWN') elif direction == 'LEFT': # ... options.remove('LEFT') if success: # add current position to the position tracker positions.append(pos) # update position pointer (where can the current location be looked up?) pos_pointer = len(positions) - 1 elif pos_pointer &gt; 0: # is there is a location, where we can look around? pos_pointer = pos_pointer - 1 pos = positions[pos_pointer] else: finished = True # print the maze # TODO: draw it with turtles for rows in field: for cell in rows: if cell == 1: print(' x ', end='') else: print(' . ', end='') print('') ","keywords":""},{"title":"Planeten mit Monden","type":0,"sectionRef":"#","url":"/snippets/turtle-planets","content":"Planeten mit Monden planeten.py import turtle as t from math import sin, cos, pi # parameter RADIUS_earth_pos = [120, 100] RADIUS_MOON = [20, 25] RADIUS_MOON2 = [34, 28] # speed factor relative to the earth... MOON_SPEED = 14.3871 MOON_SPEED2 = 18.913 STEPS = 400 ROUNDS = 2 TURTLE_SPEED = 10 # create turtles sun = t.Turtle('turtle') earth = t.Turtle('circle') moon = t.Turtle() moon2 = t.Turtle() # setup turtles sun.speed(-1) # max speed earth.speed(TURTLE_SPEED) moon.speed(TURTLE_SPEED) moon2.speed(TURTLE_SPEED) # set initial position, without drawing earth.penup() moon.penup() moon2.penup() earth.goto(RADIUS_earth_pos[0], 0) moon.goto(RADIUS_earth_pos[0] + RADIUS_MOON[0], 0) moon2.goto(RADIUS_earth_pos[0], -RADIUS_MOON2[1]) moon2.pendown() moon.pendown() def to_degree(rad): return 360 * rad / 2.0 / pi for step in range(STEPS * ROUNDS): angle = 2 * pi * step / STEPS sun.setheading(to_degree(angle) * 3) earth_pos = [cos(angle) * RADIUS_earth_pos[0], sin(angle) * RADIUS_earth_pos[1]] earth.goto(earth_pos[0], earth_pos[1]) earth.setheading(to_degree(angle) + 90) angle_moon = angle * MOON_SPEED rel_moon = [cos(angle_moon) * RADIUS_MOON[0], sin(angle_moon) * RADIUS_MOON[1]] moon.goto(earth_pos[0] + rel_moon[0], earth_pos[1] + rel_moon[1]) moon.setheading(to_degree(angle_moon) + 90) angle_moon2 = angle * MOON_SPEED2 rel_moon2 = [sin(angle_moon2) * RADIUS_MOON2[0], cos(angle_moon2) * RADIUS_MOON2[1]] moon2.goto(earth_pos[0] - rel_moon2[0], earth_pos[1] - rel_moon2[1]) moon2.setheading(180 - to_degree(angle_moon2)) # hide turtles sun.hideturtle() earth.hideturtle() moon.hideturtle() moon2.hideturtle() ","keywords":""},{"title":"Video Editieren","type":0,"sectionRef":"#","url":"/Video-Editor/video-editor","content":"Video Editieren Es ist schwierig, ein komplettes Video am St√ºck zu drehen und dabei genug schnell alles vorzuzeigen, keine Fehler zu machen und aber auch die Zuschauer:innen nicht zu langweilen. Oft gibt es zudem mehrere Szenen oder &quot;Drehorte&quot; (k√∂nnen auch &quot;Reale Welt&quot; und &quot;Screencast&quot; sein). Deshalb muss ein Video oft nachbearbeitet und zusammengeschnitten werden. Dazu kann unter Windows der Video-Editor in der Foto-App und unter Mac die iMovie App verwendet werden. Um ein Video mit mehreren Szenen zusammenzuschneiden, kann wie folgt vorgegangen werden: Video-Rohmaterial erstellen: Wichtig ist prim√§r das Bildmaterial, die Tonspur kann sp√§ter noch aufgenommen und hinzugef√ºgt werden. Videos zuschneiden: Ein Video Projekt erstellen, die verschiedenen Sequenzen hinzuf√ºgen, zuschneiden und fehlerhafte Teile entfernen. Story erz√§hlen: Videos anordnen: Die einzelnen Clips so anordnen, dass die gew√ºnschte Geschichte nachvollziehbar und spannend erz√§hlt werden kann. Langweilige/Technische Passagen schneller abspielen √úberg√§nge zwischen den Sequenzen hinzuf√ºgen - Achtung: oft lenken schlichte und relative schnelle √úbergangseffekte weniger vom Inhalt ab als pomp√∂se Effekte. im Hinblick auf die folgende Vertonung des Videos: im Hinterkopf halten, wo es viel oder wenig Erkl√§rungen braucht Tonspur hinzuf√ºgen: √úberlegen Sie sich genau, was Sie mitteilen wollen und nehmen Sie anschliessend den Text auf. Vermeiden Sie st√∂rende Hintergrundger√§usche. Wichtige Dinge k√∂nnen auch mit Text zus√§tzlich untermauert werden. F√ºr Teile ohne Sprache kann auch Musik verwendet werden. Exportieren des Videos: Die einzelnen Videosequenzen, Bilder und Tonspuren zu einem Video zusammenf√ºgen - dieser Prozess wird Rendering genannt. Hilfreiche Links inkl. weiteren Anleitungen: Windows Video-Editor iMovie Video Editor √∂ffnen‚Äã WindowsmacOS √úber die Fotos-App k√∂nnen auch Video-Projekte erstellt werden: Video-Editor Titel und Text‚Äã Zu Beginn eines Videos soll ein Titel angezeigt werden. Die mitwirkenden Personen werden entweder auch auf der Titelseite, oder aber im Abspann vermerkt. Wichtige Aussagen im Video k√∂nnen zus√§tzlich mit Text untermauert werden. Die Dauer der Texteinblendung kann jeweils eingestellt werden und sollte min. 3s dauern. WindowsmacOS Hintergrundfarbe einstellen Titel hinzuf√ºgen und Style w√§hlen Zuschneiden und Aufteilen‚Äã Das Aufteilen von Videos ist besonders hilfreich, wenn fehlerhafte Teile entfernt werden sollen oder die Geschwindigkeit einzelner Teile ver√§ndert werden muss. WindowsmacOS Video aufteilen Wiedergabegeschwindigkeit‚Äã WindowsmacOS Geschwindigkeit √§ndern Tonspur‚Äã Ein Video besitzt normalerweise bereits eine Tonspur. Das Video kann aber auch neu vertont werden, indem neue Tonspuren hinzugef√ºgt werden. F√ºr jede Tonspur kann die Lautst√§rke individuell eingestellt werden. So lassen sich auch mehrere Tonspuren unterschiedlicher Lautst√§rke √ºberlagern. Hintergrundmusik Die Tonspur mit gesprochenem Text soll immer klar und verst√§ndlich sein. Lieber verzichtet man auf eine durchgehende Hintergrundmusik, als dass dadurch die Klarheit Stimme leidet. WindowsmacOS Oben rechts &quot;Benutzerdefiniertes Audio&quot; w√§hlen und anschliessend mehrere Audiodateien hinzuf√ºgen. Die Audiospuren lassen sich durch verschieben der Regler direkt zuschneiden. Die Tonspuren k√∂nnen auch √ºberlagert werden. Durch Klicken auf das Lautsprechersymbol kann die Lautst√§rke f√ºr diese Tonspur eingestellt werden. Zudem kann eingestellt werden, ob die Tonspur direkt mit der gew√§hlten Lautst√§rke abgespielt wird, oder ein √úbergang verwendet wird. Tonspuren aufnehmen‚Äã Gesprochener Text wird am besten direkt zum Abspielen des Videos aufgenommen. WindowsmacOS Unter Windows wird zum Aufnehmen einer Tonspur das Programm Sprachrekorder ben√∂tigt. Sprache aufnehmen Die gespeicherten Aufzeichnungen k√∂nnen anschliessend als Tonspur hinzugef√ºgt werden. Exportieren‚Äã Ist das Video fertiggestellt, kann es als Videodatei exportiert werden. Beim exportieren wird die Darstellung jedes einzelnen Bildes (f√ºr eine Sekunde Film sind es 30 Bilder) berechnet, wobei Text√ºberlagerungen, Tondateien und Spezialeffekte zusammengef√ºgt werden. Dieser Prozess kann sehr lange dauern und ist abh√§ngig von der Geschwindigkeit der Grafikkarte. Dieser Prozess wird auch Rendering genannt. WindowsmacOS Oben rechts auf &quot;Fertig stellen&quot; klicken und das Video abspeichern.","keywords":""},{"title":"Listen","type":0,"sectionRef":"#","url":"/Programmieren-2/Listen","content":"Listen Zum Speichern von mehreren Werten unter einem einzigen Namen verwendet man in Python Listen. Man kann sich Listen als Tabellen mit einer Spalte vorstellen. Die Zellen in der Tabelle werden als Elemente bezeichnet und sind durchnummeriert. So kann man einzelne in der Liste gespeichert Werte unterscheiden. Die Nummer eines Elements wird als dessen Index bezeichnet. Wichtig Das erste Element in der Liste tr√§gt den Index 0. Der Index des letzten Elementes ist die L√§nge der Liste minus 1. Das folgende Bild illustriert dies f√ºr eine Liste mit 4 Noten. Die L√§nge der Liste ist 4, das letzte Element tr√§gt den Index 3. Index Wert 0 4.5 1 5 2 3.5 3 5.5 In Python kann man diese Liste mit eckigen Klammern [ ] wie folgt erzeugen: noten = [4.5, 5, 3.5, 5.5] print('Die vierte Note war eine', noten[3]) Im Beispiel wird die vierte Note mit dem Index 3 ausgegeben. Python Listen: Befehle‚Äã Definition Liste erzeugen‚Äã # Liste erzeugen und Variablen zuweisen noten = [3.5, 6, 5, 4.5] # Ganze Liste anzeigen print(noten) # Element mit Index 2 aus der Liste anzeigen print(noten[2]) Definition Leere Liste []‚Äã # Leere Liste erstellen noten = [] print(noten) Definition Liste mit Text‚Äã # Liste mit Strings noten =['gut', 'erf√ºllt', 'mangelhaft', 'erf√ºllt'] print(noten) Definition Schleife √ºber alle Elemente der Liste‚Äã noten = [3.5, 6, 5, 4.5] for note in noten: print(note) Definition Schleife √ºber Listen-Indices‚Äã noten = [3.5, 6, 5, 4.5] # (beginnt bei 0 und endet mit 1 weniger als L√§nge der Liste) for index in range(0, len(noten)): print(index, &quot;:&quot;, noten[index]) Listen Untersuchen‚Äã Definition L√§nge einer Liste: len(&lt;liste&gt;)‚Äã noten = [4.5, 5, 3.5, 5.5] print(len(noten)) Definition Maximum: max(&lt;liste&gt;)‚Äã Gibt das maximale Element einer numerischen Liste zur√ºck noten = [4.5, 5, 3.5, 5.5] print('Beste Noten', max(noten)) Definition Minimum: min(&lt;liste&gt;)‚Äã Gibt das minimale Element einer numerischen Liste zur√ºck noten = [4.5, 5, 3.5, 5.5] print('Schlechteste Noten', min(noten)) Definition Wert in einer Liste? &lt;wert&gt; in &lt;liste&gt;‚Äã √úberpr√ºft, ob sich ein Wert in einer Liste befindet noten = [4.5, 5, 3.5, 5.5] if 6 in noten: print('Gl√ºckwunsch, du hast min. einmal eine 6 geschrieben') else: print('Du hast noch keine 6 geschrieben') Definition Anzahl Elemente mit einem Wert? &lt;liste&gt;.count(&lt;wert&gt;)‚Äã Z√§hlt, wie oft sich ein Wert in einer Liste befindet. noten = [4.5, 5, 3.5, 5.5, 5] for i in [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6]: if noten.count(i) &gt; 0: print(f'Anzahl {i}: {noten.count(i)}') Elemente abfragen‚Äã Definition Erstes Element: &lt;liste&gt;[0]‚Äã noten = [4.5, 5, 3.5, 5.5] if len(noten) &gt; 0: print(noten[0]) Bemerken Sie: es wird zuerst √ºberpr√ºft, ob die Liste √ºberhaupt ein Element enth√§lt. Nur dann wird dieses Element abgerufen und ausgegeben. Definition Letztes Element &lt;liste&gt;[-1]‚Äã noten = [4.5, 5, 3.5, 5.5] if len(noten) &gt; 0: print(noten[-1]) # oder gleichbedeutend print(noten[len(noten) - 1]) Definition Fehler: IndexError‚Äã Fragt man einen Index ab, den es nicht gibt (weil es zu wenige Elemente in der Liste hat), so entsteht ein IndexError. Beispiel: noten = [3.5, 6, 5, 4.5] # Eine Liste mit 4 Elementen: Gr√∂sster Index ist 3 noten[4] = 6 Elemente Ver√§ndern‚Äã Definition Zuordnung: &lt;liste&gt;[index] = &lt;wert&gt;‚Äã Ein Element in der Liste kann durch eine Zuordnung ver√§ndert werden. Im untenstehenden Beispiel werden alle ungen√ºgenden Noten auf eine 5 gesetzt. noten = [4.5, 5, 3.5, 5.5] for i in range(len(noten)): if noten[i] &lt; 4: noten[i] = 5 print(noten) Elemente Hinzuf√ºgen/Entfernen‚Äã Definition hinzuf√ºgen: &lt;liste&gt;.append(&lt;wert&gt;)‚Äã append f√ºgt ein neues Element am Ende der Liste hinzu. noten = [4.5, 5, 3.5, 5.5] print('Urspr√ºnglich', noten) noten.append(6) print('Neu', noten) An beliebiger Stelle einf√ºgen: &lt;liste&gt;.insert(&lt;index&gt;, &lt;wert&gt;) noten = [4.5, 5, 3.5, 5.5] print('Urspr√ºnglich', noten) noten.insert(1, 6) # Bei Index 1 (2. Stelle) wird eine 6 eingef√ºgt print('Neu', noten) Definition entfernen: &lt;liste&gt;.pop(&lt;index&gt;)‚Äã Entfernt das Element an der Stelle index und gibt dieses zur√ºck: noten = [4.5, 5, 3.5, 5.5] entfernt = noten.pop(2) print('Entfernt', entfernt) print('Noten', noten) Definition Aufsteigend sortieren &lt;liste&gt;.sort()‚Äã noten = [3.5, 6, 5, 4, 4.5, 5] noten.sort() print(noten) ","keywords":""},{"title":"Phaser","type":0,"sectionRef":"#","url":"/snippets/python-phaserjs","content":"Phaser 3d-Animation‚Äã Inspired by @dwitter phaser-demo.py from browser import window, document, html import javascript from math import sin, cos, tan Phaser = window.Phaser class Game(object): def __init__(self): self.c = None self.x = None self.texture = None self.time = 0 self.frame = 0 self.game = window.Phaser.Game.new({ 'type': Phaser.CANVAS, 'parent': RESULT_DIV, 'width': 510, 'height': 540, 'backgroundColor': '#ffffff', 'scene': { 'create': self.create, 'update': self.update } }) def destroy(self, *args): self.game.destroy(True) def create(self, *args): this = javascript.this() self.texture = this.textures.createCanvas('dwitter', 1920, 1080) self.c = self.texture.getCanvas() self.x = self.c.getContext('2d') this.add.image(0, 0, 'dwitter').setOrigin(0).setScale(0.4) this.input.on('pointerdown', self.destroy, this) def update(self, *args): self.time = self.frame / 60 self.frame = self.frame + 1 if self.frame % 30 ==0: self.frame += 0.001 self.c['width'] = 1020 for i in range(0, 31, 1): for j in range(20, -21, -4): self.x.fillRect( 510+j*i*0.5*cos(i*0.2)+cos(2*self.time+i*0.2)*300, 540+j*i*0.5*sin(i*0.2)+sin(2.2*self.time+i*0.2)*200, 9, 9 ) game = Game() Starter Game: WIP‚Äã will not work at the moment, since phser is not shipped: 'https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js' from browser import window, document, html import javascript from math import sin, cos, tan Phaser = window.Phaser def set_bounce(child): print('hi',child) child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8)) class Game(object): def __init__(self): self.player = None self.stars = None self.platforms = None self.cursors = None self.score = 0 self.scoreText = None self.game = Phaser.Game.new({ 'type': Phaser.AUTO, 'parent': RESULT_DIV, 'width': 800, 'height': 600, 'physics': { 'default': 'arcade', 'arcade': { 'gravity': { 'y': 300 }, 'debug': False } }, 'scene': { 'preload': self.preload, 'create': self.create, 'update': self.update } }) def preload(self, *args): this = javascript.this() this.load.setBaseURL('http://labs.phaser.io') this.load.image('sky', 'assets/skies/sky1.png') this.load.image('ground', 'assets/rope/pipe1.png') this.load.image('star', 'assets/particles/gold.png') this.load.image('bomb', 'assets/particles/flame2.png') this.load.spritesheet('dude', 'assets/rope/pikachu.png', { 'frameWidth': 32, 'frameHeight': 48 }) def create(self, *args): this = javascript.this() this.add.image(400, 300, 'sky') platforms = this.physics.add.staticGroup() platforms.create(400, 568, 'ground').setScale(2).refreshBody() platforms.create(600, 400, 'ground') platforms.create(50, 250, 'ground') platforms.create(750, 220, 'ground') self.player = this.physics.add.sprite(100, 450, 'dude') self.player.setBounce(0.2) self.player.setCollideWorldBounds(True) this.anims.create({ 'key': 'left', 'frames': this.anims.generateFrameNumbers('dude', { 'start': 0, 'end': 3 }), 'frameRate': 10, 'repeat': -1 }) this.anims.create({ 'key': 'turn', 'frames': [ { 'key': 'dude', 'frame': 4 } ], 'frameRate': 20 }) this.anims.create({ 'key': 'right', 'frames': this.anims.generateFrameNumbers('dude', { 'start': 5, 'end': 8 }), 'frameRate': 10, 'repeat': -1 }) self.cursors = this.input.keyboard.createCursorKeys() self.stars = this.physics.add.group({ 'key': 'star', 'repeat': 11, 'setXY': { 'x': 12, 'y': 0, 'stepX': 70 } }) for i in self.stars['children']: print(i,type(i)) self.scoreText = this.add.text(16, 16, 'score: 0', { 'fontSize': '32px', 'fill': '#000' }) this.physics.add.collider(self.player, self.platforms) this.physics.add.collider(self.stars, self.platforms) this.physics.add.overlap(self.player, self.stars, self.collectStar, None, this) def update(self, *args): if self.cursors.left.isDown: self.player.setVelocityX(-160) self.player.anims.play('left', True) elif self.cursors.right.isDown: self.player.setVelocityX(160) self.player.anims.play('right', True) else: self.player.setVelocityX(0) self.player.anims.play('turn') if self.cursors.up.isDown and self.player.body.touching.down: self.player.setVelocityY(-330) def collectStar (self, player, star): star.disableBody(True, True) self.score += 10 self.scoreText.setText('Score: ' + self.score) def destroy(self, *args): self.game.destroy(True) game = Game() ","keywords":""},{"title":"Game Basics - Sterne Fangen","type":0,"sectionRef":"#","url":"/Programmieren-1/v24/Aufgaben/game_basics","content":"Game Basics - Sterne Fangen Die Funktionalit√§t der mit einem * markierten Abschnitte sollten in Eurem Spiel enthalten sein. 0. Vorbereitung *‚Äã Auf OneDrive einen neuen Ordner 12_game erstellen und diesen in VS Code √∂ffnen. Dort ein neues Programm erstellen, bspw. mit dem Namen 01_game.py 1. Spieler *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3 Das erste Spiel startet mit der bekannten Ausgangslage. wichtig: DeviceId so anpassen, dass sie mit derjenigen auf der Website https://io.gbsl.website √ºbereinstimmt. Code laufen lassen und schauen ob alles funktioniert from smartphone_connector import * device = Connector('https://io.gbsl.website', 'FooBar') device.configure_playground( width=100, height=180, origin_x=50, origin_y=0, color=Colors.BLACK ) # der weitere Code wird hier eingef√ºgt... device.disconnect() 2. Sterne *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3Schritt 4 Der Stern wird als Text-Zeichen ‚òÖ mitgegeben. Damit nur der Stern angezeigt wird, werden keine color oder border_color Parameter √ºbergeben. Der Stern soll vom oberen Rand des Bildschirms nach unten fallen. Wie? device.add_circle( text='‚òÖ', font_color=Colors.GOLD, font_size=10, pos_x=0, pos_y=180, radius=3 ) 3. Controller *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3Schritt 4 Achtung!!: F√ºr die Kontrolle werden die Beschleunigungssensoren des Smartphones ausgelesen. Deshalb sollte f√ºr diesen Schritt jeweils auf dem Smartphone https://io.gbsl.website aufgerufen werden und die Option &quot;Stream Acceleration&quot; angeschaltet werden. Nun soll das Rechteck kontrollierbar werden. Dazu schreiben wir eine √§hnliche Logik wie beim interaktiven Zeichnen mit den Turtles. Auch hier starten wir wieder eine asynchrone Subscription. Vorerst wird nur das Grundger√ºst erstellt, die Funktion tut aktuell aber noch nichts. Wichtig Der eingef√ºgte Code muss oberhalb von device.wait() eingef√ºgt werden. Aufgabe: √úberpr√ºfe ob beim Starten des Programms im Terminal in hoher Frequenz &quot;Controller Update&quot; ausgegeben wird. Verwende einen deutschen Funktionsnamen f√ºr die Update Funktion. def on_update(): print('Controller Update') device.subscribe_async(on_update, 0.05) device.wait() 4. Highscore *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3Schritt 4Schritt 5 Der aktuelle Score wird als Text angezeigt. Nach der Konfiguration des Playgrounds f√ºgen wir dem Spiel einen Highscore hinzu. device.add_text( pos_x=-40, pos_y=160, font_color='white', font_size=2, text='Score: 3' ) 4.1 Stern ber√ºhrt den Boden *‚Äã Schritt 0Schritt 1 Sobald ein Objekt den Spielfeldrand ber√ºhrt/√ºberlappt wird eine Nachricht an das laufende Python-Programm geschickt. Mit device.on('overlap', overlap_function) kann die Nachricht an die Funktion overlap_function in unserem Programm weitergeleitet werden. Jedes Mal wenn ein Stern den Boden ber√ºhrt, soll ein Punkt abgezogen werden. Aufgabe: Was passiert aktuell, wenn: ein Monster den Boden ber√ºhrt? der Spieler (weisser Balken) den Spielfeldrand ber√ºhrt? def overlap_function(data: BorderOverlapMsg): global score score = score - 1 device.update_text( id='score', text=f'Score: {score}' ) device.on('border_overlap', overlap_function) 4.2 Zuf√§llige Stern-Symbole‚Äã Kapitel 4.2.1 Schritt 0 Sollen unterschiedliche Emojis/Bilder f√ºr die Sterne zum Einsatz kommen, brauchen wir zwei Dinge: Eine Liste welche alle Sterne, Emojis oder Namen der Bilder ent√§hlt. Eine M√∂glichkeit, ein Zuf√§lliges Element aus einer Liste auszuw√§hlen. √úbrigens: Eine Liste von Symbol-Zeichen kann bspw. unter https://utf8-chartable.de gefunden werden. Bemerke: Mit choice kann ein zuf√§lliges Element einer Liste abgefragt werden. Passen Sie ihre Existierende Funktion f√ºrs Hinzuf√ºgen von Sternen an, es braucht keine neue... from random import choice star_symbols = ['‚ú©', '‚ú™', '‚ú´', '‚ú¨', '‚ú≠', '‚úÆ', '‚úØ', '‚ú∂', '‚ú∫'] def add_star(): symbol = choice(star_symbols) device.add_circle( text=symbol, font_color=Colors.GOLD, # ... ) 5. Monster *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3Schritt 4Schritt 5Schritt 6 Nun haben wir ein funktionierendes Spiel, aber es ist noch nicht so anspruchsvoll. Deshalb soll dem Spiel ein Hindernis eingebaut werden - weniger regelm√§ssig als die Sterne sollen Monster herunterfallen. Monster fallen schneller und ziehen Leben ab, wenn sie den Controller erwischen. Fallen sie aus dem Spielfeld heraus, dann entsteht kein Schaden. Versuche analog zu den Sternen, eine automatische Monster-Erzeuger zu machen. def add_monster(): ... 6. Tastensteuerung *‚Äã Schritt 0Schritt 1 Je nach Spiel ist eine Tastensteuerung besser geeignet als die Kontrolle √ºber die Beschleunigungs-Daten des Smartphones. Zudem haben viele Laptops keine Beschleunigungssensoren, so dass wir dort ohnehin eine alternative Kontroll-M√∂glichkeit brauchen. Um das zu bewerkstelligen, fangen wir die Tastenanschl√§ge ab. Vorerst erzeugen wir das Grundger√ºst: sobald eine Taste (key) empfangen wird, soll die Nachricht an eine Funktion weitergeleitet werden. Diese Funktion heisst im Beispiel on_key und mit device.on('key', on_key) wird die Weiterleitung der Nachricht festgelegt. on_key macht vorerst noch nicht mehr, als zu √ºberpr√ºfen ob die gedr√ºckte Taste left oder right war und gibt dann im Terminal einen Text aus. Aufgabe: √úberpr√ºfe ob die Tastenanschl√§ge ankommen und ob im Terminal die Texte ausgegeben werden. Wie kann nun der weisse Balken aktualisiert werden? (√úberlege selber, bevor du zum n√§chsten Schritt gehst) def on_key(data: KeyMsg): if data.key == 'left': print('Nach links') elif data.key == 'right': print('Nach rechts') device.on('key', on_key) 6.1 Tastensteuerung √ºber Kn√∂pfe‚Äã Schritt 0Schritt 1 Nicht auf jedem Ger√§t gibt es eine Tastatur (Tablet, Smartphone). Um Dennoch Tasten verf√ºgbar zu machen, k√∂nnen wir klickbare Elemente auf dem Spielfeld positionieren. Beachte: Durch clickable=True wird das Rechteck zu einem Klickbaren Knopf. Aufgabe: F√ºge auch eine Rechts-Taste mit dem Symbol ‚á® hinzu. device.add_square( id='left', pos_x=-45, pos_y=5, text='‚á¶', font_color='white', border_color='white', size=10, clickable=True ) 7. Bilder‚Äã Schritt 0Schritt 1Schritt 2Schritt 3 Damit Bilder als Hintergrund des Playgrounds oder von Objekten verwendet werden k√∂nnen, m√ºssen diese zuerst an die Website √ºbertragen werden. Dazu muss ein neuer Ordner f√ºr alle Bilder erstellt werden. Der Name dieses Ordners muss dann beim Konfigurieren des Playgrounds angegeben werden. Die Projektstruktur sollte in VS Code also etwa so aussehen: Achtung: Der Befehl device.configure_playground sollte im gesamten Programm nur einmal aufgerufen werden. Passe also den vorhanden Befehl an. Bemerke: Mit images= (Mehrzahl) wird der Name des Bilder-Ordners angegeben. Mit image= (Einzahl) wird der Name des Bildes (ohne Dateteiendung!) angegeben, welches als Hintergrund f√ºr den Playground verwendet werden soll. device.configure_playground( width=100, height=180, origin_x=50, origin_y=0, color=Colors.BLACK, images='Bilder', image='Hintergrund' ) 8. Springen‚Äã kapitel 7.14 Schritt 0Schritt 1 Um mit einer Spielfigur animiert an eine neue Position zu verschieben, kann die Funktion move_to verwendet werden. Diese Funktion kann mit der via Option gekoppelt werden, so dass bspw. auch Sprungeffekte erzeugt werden k√∂nnen. Achtung: Diese Option ist nur dann geeignet, wenn w√§hrend der Animation bzw. w√§hrend des Sprungs keine andere Positionsaktualisierung vorgenommen wird. F√ºr den Spieler (id = player) ist dies also nicht geeignet. Schaue dazu die zweite Option auf der n√§chsten Seite. Bemerke: pos= gibt die Endposition an via= gibt eine Zwischenposition an, via welcher dann zur Endposition gefahren wird. time= gibt die Zeit in Sekunden an, bis die Endposition erreicht wird. Alternativ kann auch mit speed= die Geschwindigkeit angegeben werden, mit welcher die Strecke zur√ºckgelegt wird. Im Beispiel ist die aktuelle Position mit der End-Position identisch. Durch das via entsteht aber eine Art &quot;Sprung&quot;-Effekt, da zuerst die via-Position erreicht wird. device.move_to( id='player', pos=[player_pos_x, 20], via=[player_pos_x, 50], time=1 ) 9. Sound‚Äã Schritt 0Schritt 1Schritt 2 Genau so wie bei den Bildern m√ºssen auch wieder zuerst die Soundtracks (.mp3 Dateien) an die Website geschickt werden. Lade dazu passende Soundtracks herunter (Achtung! Beachte die Lizenzen, nicht alle Lieder &amp; Effekte d√ºrfen heruntergladen werden) und verschiebe Sie in einen Ordner &quot;Sound&quot; in deinem Game-Projekt Ordner. Viele verschiedene Sound-Tracks k√∂nnen zum Beispiel unter https://www.zapsplat.com kostenlos heruntergalden werden. M√∂gliche Sounds mit direktem Download-Link finden sich hier: Die Projektstruktur sollte in VS Code also etwa so aussehen: Achtung: Der Befehl device.configure_playground sollte im gesamten Programm nur einmal aufgerufen werden. Passe also den vorhanden Befehl an. device.configure_playground( audio_tracks='Sound' ) 10. Levels *‚Äã Schritt 0Schritt 1Schritt 2Schritt 3Schritt 4 Wie beim Highscore wird zu Beginn ein neues Textfeld f√ºr das Level hinzugef√ºgt. Bereits jetzt vergeben wir eine id, damit der Text sp√§ter aktualisiert werden kann. Aufgabe: √úberpr√ºfe ob das Level angezeigt wird. device.add_text( id='level', pos_x=-40, pos_y=170, font_color='white', font_size=2, text='Level: 1' ) ","keywords":""}]