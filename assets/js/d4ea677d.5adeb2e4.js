"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[51734],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>f});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=d(r),f=a,u=c["".concat(l,".").concat(f)]||c[f]||m[f]||i;return r?t.createElement(u,o(o({ref:n},s),{},{components:r})):t.createElement(u,o({ref:n},s))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},70491:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var t=r(83117),a=(r(67294),r(3905));const i={sidebar_custom_props:{id:"194c1e32-af2c-41fd-98fd-5c709094ad25"}},o="3D Turtle",p={unversionedId:"Programmieren-1/snippets/turtle_3d",id:"Programmieren-1/snippets/turtle_3d",title:"3D Turtle",description:"Star",source:"@site/docs/Programmieren-1/snippets/turtle_3d.md",sourceDirName:"Programmieren-1/snippets",slug:"/Programmieren-1/snippets/turtle_3d",permalink:"/Programmieren-1/snippets/turtle_3d",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/edit/main/docs/Programmieren-1/snippets/turtle_3d.md",tags:[],version:"current",lastUpdatedAt:1673624052,formattedLastUpdatedAt:"13. Jan. 2023",frontMatter:{sidebar_custom_props:{id:"194c1e32-af2c-41fd-98fd-5c709094ad25"}},sidebar:"sidebar",previous:{title:"Grid",permalink:"/Programmieren-1/snippets/Grid"},next:{title:"v24",permalink:"/category/v24"}},l={},d=[{value:"Star",id:"star",level:3},{value:"Surface",id:"surface",level:3},{value:"Rotierende Pyramide",id:"rotierende-pyramide",level:2}],s=(m="Comment",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const c={toc:d};function f(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"commentable"},(0,a.kt)("h1",{parentName:"div",id:"3d-turtle"},"3D Turtle"),(0,a.kt)(s,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,a.kt)("div",{className:"commentable"},(0,a.kt)("h3",{parentName:"div",id:"star"},"Star"),(0,a.kt)(s,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"\nfrom turtle3d import *\n\nspeed(0)\nfor i in range(20):\n    for i in range(5):\n        forward(20)\n        left(2 * 360 / 5)\n    level_up()\n\nprint(gcode())\n")),(0,a.kt)("div",{className:"commentable"},(0,a.kt)("h3",{parentName:"div",id:"surface"},"Surface"),(0,a.kt)(s,{parentName:"div",type:"heading",nr:2,mdxType:"Comment"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"\nfrom turtle3d import *\n\nspeed(0)\nfor i in range(3):\n    for i in range(4):\n        forward(20)\n        left(90)\n    i = 0.3\n    while i < 20 - 0.6:\n        forward(0.3)\n        left(90)\n        if i == 0.3:\n            forward(0.3)\n        forward(19.4)\n        right(90)\n        forward(0.3)\n        right(90)\n        forward(19.4)\n        left(90)\n        i += 0.6\n    if i < 19.7:\n        forward(0.3)\n        left(90)\n        forward(19.4)\n        right(90)\n    penup()\n    goto(0,0)\n\n    level_up()\n\nprint(gcode())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"from turtle3d import *\n\nspeed(0)\nfor i in range(20):\n    for j in range(4):\n        forward(8)\n        left(90)\n    penup()\n    goto(0, -20)\n    pendown()\n    setheading(0)\n    for j in range(6):\n        forward(8)\n        left(360 / 5)\n    level_up()\n    penup()\n    goto(0,0)\n    pendown()\n    setheading(0)\n\nprint(gcode())\n")),(0,a.kt)("div",{className:"commentable"},(0,a.kt)("h2",{parentName:"div",id:"rotierende-pyramide"},"Rotierende Pyramide"),(0,a.kt)(s,{parentName:"div",type:"heading",nr:3,mdxType:"Comment"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"from turtle3d import *\nfrom turtle import *\nfrom math import sqrt\n\nSIZE = 50\n\nspeed(0)\ndef neck(size, n):\n    for i in range(n):\n        forward(size)\n        left(360 / n)\n\noffset = sqrt(2) * 0.3\nfor j in range(0, 150):\n    dt = SIZE / 150\n    size = SIZE - j * dt\n    reps = 3\n    if size < 0.3:\n        break\n    for i in range(0, reps):\n        sz = size - 0.6 * i\n        if sz < 0.3:\n            i -= 1\n            break\n        neck(sz, 4)\n        left(45)\n        forward(offset)\n        right(45)\n    penup()\n    left(45)\n    level_up()\n    forward(size / sqrt(2) - (i + 1) * offset)\n    left(0.5)\n    backward(size / sqrt(2) -  dt * sqrt(2) / 2)\n    right(45)\n    pendown()\n\nprint(gcode())\n")))}f.isMDXComponent=!0}}]);