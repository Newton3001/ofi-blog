"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[88917],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>g});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function m(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=l(r),u=i,g=p["".concat(s,".").concat(u)]||p[u]||c[u]||a;return r?t.createElement(g,o(o({ref:n},d),{},{components:r})):t.createElement(g,o({ref:n},d))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m[p]="string"==typeof e?e:i,o[1]=m;for(var l=2;l<a;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},86796:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>a,metadata:()=>m,toc:()=>l});var t=r(87462),i=(r(67294),r(3905));const a={sidebar_custom_props:{id:"45bceb63-ab37-459a-a818-48bee67b2c3c",source:{name:"sdg",ref:"https://gitlab.gbsl.website/gymbefin23/material/-/wikis/Techniken-im-Software-Engineering"}}},o="Techniken im Software Engineering",m={unversionedId:"Programmieren/Software-Engineering/Techniken",id:"version-24ef/Programmieren/Software-Engineering/Techniken",title:"Techniken im Software Engineering",description:"Es gibt einige Techniken bei der Entwicklung von Software, welche sich immer wieder bew\xe4hrt haben. Ein paar davon sollen hier vorgestellt werden.",source:"@site/versioned_docs/version-24ef/01-Programmieren/05-Software-Engineering/01-Techniken.md",sourceDirName:"01-Programmieren/05-Software-Engineering",slug:"/Programmieren/Software-Engineering/Techniken",permalink:"/24ef/Programmieren/Software-Engineering/Techniken",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/tree/main/docs",tags:[],version:"24ef",sidebarPosition:1,frontMatter:{sidebar_custom_props:{id:"45bceb63-ab37-459a-a818-48bee67b2c3c",source:{name:"sdg",ref:"https://gitlab.gbsl.website/gymbefin23/material/-/wikis/Techniken-im-Software-Engineering"}}},sidebar:"version-24ef/sidebar",previous:{title:"Software Engineering",permalink:"/24ef/Programmieren/Software-Engineering/"},next:{title:"Hangman",permalink:"/24ef/Programmieren/Software-Engineering/Hangman"}},s={},l=[{value:"Teile und herrsche - Reduktion der Komplexit\xe4t",id:"teile-und-herrsche---reduktion-der-komplexit\xe4t",level:2},{value:"Top-down und Bottom-up",id:"top-down-und-bottom-up",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},p=d("Comment"),c=d("Figure"),u=d("SourceRef"),g=d("Answer"),h={toc:l},b="wrapper";function k(e){let{components:n,...a}=e;return(0,i.kt)(b,(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h1",{parentName:"div",id:"techniken-im-software-engineering"},"Techniken im Software Engineering"),(0,i.kt)(p,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Es gibt einige Techniken bei der Entwicklung von Software, welche sich immer wieder bew\xe4hrt haben. Ein paar davon sollen hier vorgestellt werden."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"teile-und-herrsche---reduktion-der-komplexit\xe4t"},"Teile und herrsche - Reduktion der Komplexit\xe4t"),(0,i.kt)(p,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("em",{parentName:"p"},"Teile und herrsche")," ist eine Technik, welche wahrscheinlich schon im r\xf6mischen Reich praktiziert wurde. Auch Niccol\xf2 Machiavelli hat sie 1532 beschrieben. Es geht dabei um folgendes: Um eine Gruppe von Menschen zu beherrschen, ist es hilfreich diese zuvor zu entzweien, damit anschliessend jede Teilgruppe leichter beherrscht werden kann."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:1,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"In der Softwareentwicklung wollen wir nicht Menschen beherrschen, sondern Probleme l\xf6sen. Wenn nun ein Problem zu gross, oder zu komplex ist, dass man es direkt l\xf6sen kann, so sucht man nach einer Aufteilung in Teilprobleme, welche leichter zu l\xf6sen sind. Anschliessend l\xf6st man die Teilprobleme und f\xfcgt schliesslich die Teill\xf6sungen zu einer Gesamtl\xf6sung zusammen. Dies kann man \xfcber mehrere Stufen hinweg machen, bis die Teilprobleme gen\xfcgend klein sind."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:2,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("em",{parentName:"p"},"Teile und herrsche")," ist ein so fundamentales Prinzip, dass man es \xfcberall in der Informatik antrifft."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:3,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Im Bereich der Algorithmen bedeutet ",(0,i.kt)("em",{parentName:"p"},"Teile und herrsche"),' in der Regel, dass man den Umfang des grossen Problems reduziert, die Problemstellung aber die selbe bleibt.\nBeispiel: Sortieren einer grossen Menge von Daten. Die Menge wird in Teilmengen aufgeteilt, welche je f\xfcr sich sortiert werden. Das Problem "sortieren" bleibt das selbe, aber der Umfang hat abgenommen.'),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:4,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Im Bereich des Softwareengineerings sind die Teilprobleme in der Regel unterschiedlicher Art. In der prozeduralen Programmierung sucht man nach einer Aufteilung des Programms (grosses Problem) in viele kleinere Funktionen (kleine Probleme). Eine solche Aufteilung wird auch als ",(0,i.kt)("strong",{parentName:"p"},"funktionale Dekomposition")," bezeichnet. Mehr dazu im Abschnitt ",(0,i.kt)("a",{parentName:"p",href:"#top-down-und-bottom-up"},"Top-down und Bottom-up")),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:5,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)(c,{parentName:"div",options:{},mdxType:"Figure"},(0,i.kt)("img",{src:r(8270).Z,width:"651",height:"801"}),(0,i.kt)("figcaption",{parentName:"Figure"},(0,i.kt)(u,{parentName:"figcaption",bib:{author:"J. Gull",source:"http://docplayer.org/76540538-Greedy-teile-und-herrsche.html",licence:"CC 4.0",licence_url:"",edited:!1},mdxType:"SourceRef"}))),(0,i.kt)(p,{parentName:"div",type:"figure",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"top-down-und-bottom-up"},"Top-down und Bottom-up"),(0,i.kt)(p,{parentName:"div",type:"heading",nr:2,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Hier geht es nun konkret um die Frage, wie man ein Programm (grosses Problem) in einzelne Funktionen (kleinere Probleme) aufteilt, also das Prinzip des ",(0,i.kt)("em",{parentName:"p"},"Teile und herrsche")," anwendet. Wie die \xdcberschrift schon sagt, kann man dabei auf zwei Weisen vorgehen:"),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:6,mdxType:"Comment"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("div",{parentName:"li",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Man beginnt zuoberst (top) mit dem grossen Problem (das gew\xfcnschte Programm) und teilt diese in kleinere Teilprobleme auf. Jedes Teilproblem wird f\xfcr sich betrachtet und allenfalls in noch kleinere Teilprobleme aufgeteilt, bis diese so klein sind, dass man zu ihrer L\xf6sung eine einfache Funktion programmieren kann. Auf diese Weise entsteht zun\xe4chst ein ",(0,i.kt)("strong",{parentName:"p"},"Entwurf")," (englisch ",(0,i.kt)("em",{parentName:"p"},"Design"),") f\xfcr unser Programm. Jetzt kann man wieder zu den gr\xf6sseren Problemen zur\xfcckkehren und diese l\xf6sen, indem man eine Funktion schreibt, welche die Funktionen zu den kleineren Problemen nutzt."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:7,mdxType:"Comment"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("div",{parentName:"li",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Man beginnt zuunterst (bottom) und schreibt direkt Funktionen zur L\xf6sung von einfachen Teilproblemen. Diese werden nach und nach in \xfcbergeordneten Funktionen integriert, bis eine L\xf6sung f\xfcr das grosse Problem entstanden ist. Die Gefahr bei diesem Ansatz ist allerdings, dass man eine ung\xfcnstige Aufteilung in Teilprobleme erh\xe4lt."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:8,mdxType:"Comment"})))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Meist w\xe4hlt man eine Kombination von beiden Ans\xe4tzen. Am Anfang schaut man sich bestimmte Teilprobleme bottom-up an und gewinnt dabei erste Erfahrungen und Kenntnisse \xfcber einzelne Aspekte des grossen Problems. Dann geht man zu top-down \xfcber und entwirft eine m\xf6glichst optimale Aufteilung des grossen Problems."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:9,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Manchmal merkt man aber auch erst beim Programmieren einer Funktion, dass diese nochmals in Teilfunktionen aufgeteilt werden sollte, z.B. wenn gewisse Programmteile mehrfach vorkommen, oder eine Funktion zu kompliziert wird."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:10,mdxType:"Comment"})),(0,i.kt)("admonition",{title:"Software Engineering",type:"aufgabe"},(0,i.kt)(g,{type:"state",webKey:"a01ad3ca-4ff8-4380-8643-71c09930a1dd",mdxType:"Answer"}),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"\xdcberpr\xfcfen Sie Ihr Verst\xe4ndnis durch das L\xf6sen der folgenden Aufgabe. Markieren Sie die Aufgabe anschliessend als erledigt."),(0,i.kt)(p,{parentName:"div",type:"paragraph",nr:11,mdxType:"Comment"})),(0,i.kt)("iframe",{src:"https://learningapps.org/watch?v=ph40mm0vn21",style:{border:"0px",width:"100%",height:"550px"},allowFullScreen:"true",webkitallowfullscreen:"true",mozallowfullscreen:"true"}),(0,i.kt)(g,{type:"text",webKey:"7eeee228-10b9-40bf-a334-f8ed16c4187c",placeholder:"\u270d\ufe0f Notizen",mdxType:"Answer"})))}k.isMDXComponent=!0},8270:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/teile-und-herrsche-ad4c3f1add08189274bd75e4dbdc9dda.jpg"}}]);