"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[23870],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),l=d(t),u=i,g=l["".concat(s,".").concat(u)]||l[u]||c[u]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m[l]="string"==typeof e?e:i,o[1]=m;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},30903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>m,toc:()=>d});var r=t(87462),i=(t(67294),t(3905));const a={sidebar_custom_props:{id:"de19a145-7682-4850-bd3b-76e1e9bfc371"}},o="Zeitmessung",m={unversionedId:"Algorithmik/zeitmessung/index",id:"version-24ef/Algorithmik/zeitmessung/index",title:"Zeitmessung",description:"Zeitmessung in Python",source:"@site/versioned_docs/version-24ef/05-Algorithmik/03-zeitmessung/index.md",sourceDirName:"05-Algorithmik/03-zeitmessung",slug:"/Algorithmik/zeitmessung/",permalink:"/24ef/Algorithmik/zeitmessung/",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/tree/main/docs",tags:[],version:"24ef",frontMatter:{sidebar_custom_props:{id:"de19a145-7682-4850-bd3b-76e1e9bfc371"}},sidebar:"version-24ef/sidebar",previous:{title:"Merge Sort",permalink:"/24ef/Algorithmik/sortieren/merge-sort"},next:{title:"Rekursion",permalink:"/24ef/Algorithmik/zeitmessung/rekursion"}},s={},d=[{value:"Zeitmessung in Python",id:"zeitmessung-in-python",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},l=p("Comment"),c=p("Answer"),u=p("Tabs"),g=p("TabItem"),f={toc:d},k="wrapper";function y(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h1",{parentName:"div",id:"zeitmessung"},"Zeitmessung"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"zeitmessung-in-python"},"Zeitmessung in Python"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from timeit import timeit\nfrom random import shuffle\nfrom copy import deepcopy\n\ndef bogo_sort(a):\n    while True:\n        shuffle(a)\n        is_sorted = True\n        for i in range(len(a)-1):\n            if a[i] > a[i+1]:\n                is_sorted = False\n                break\n        if is_sorted:\n            return a\n\nto_sort = list(range(6))\nshuffle(to_sort)\n\nexecution_time = timeit(lambda: bogo_sort(deepcopy(to_sort)), number=100)\nprint('Zeit f\xfcr 100x Sortieren:', execution_time)\n")),(0,i.kt)("admonition",{type:"aufgabe"},(0,i.kt)(c,{type:"state",webKey:"2d7b9a0d-172d-4d30-b1ba-d14c59708239",mdxType:"Answer"}),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("dl",{parentName:"div"},(0,i.kt)("dt",{parentName:"dl"},"Dateinamen\n"),(0,i.kt)("dd",{parentName:"dl"},(0,i.kt)("strong",{parentName:"dd",className:"underline"},"EF-Informatik/docs/Algorithmen/selection_sort.py")),(0,i.kt)("dd",{parentName:"dl"},(0,i.kt)("strong",{parentName:"dd",className:"underline"},"EF-Informatik/docs/Algorithmen/insertion_sort.py")),(0,i.kt)("dd",{parentName:"dl"},(0,i.kt)("strong",{parentName:"dd",className:"underline"},"EF-Informatik/docs/Algorithmen/merge_sort.py")),(0,i.kt)("dd",{parentName:"dl"},(0,i.kt)("strong",{parentName:"dd",className:"underline"},"EF-Informatik/docs/Algorithmen/zeitmessung.md"))),(0,i.kt)(l,{parentName:"div",type:"deflist",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"F\xfchren Sie Zeitmessungen f\xfcr die drei Algorithmen durch, indem Sie die Funktion ",(0,i.kt)("inlineCode",{parentName:"p"},"timeit")," verwenden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Verwenden Sie f\xfcr ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," die Werte ",(0,i.kt)("inlineCode",{parentName:"p"},"100"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"1000"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"10000"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"15000"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"20000"),". (Ab ",(0,i.kt)("inlineCode",{parentName:"p"},"10000")," m\xfcssen Sie die Anzahl der Wiederholungen auf ",(0,i.kt)("inlineCode",{parentName:"p"},"5")," oder tiefer reduzieren.)"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:1,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Stellen Sie die Messergebnisse tabellarisch und graphisch dar, so dass ein Trend sichtbar wird."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:2,mdxType:"Comment"})),(0,i.kt)("admonition",{parentName:"admonition",type:"danger"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Damit bei der Mehrfachwiederholung stets dieselbe Eingabe verwendet wird, muss die \xfcbergebene  Liste mit ",(0,i.kt)("inlineCode",{parentName:"p"},"deepcopy")," aus dem Modul ",(0,i.kt)("inlineCode",{parentName:"p"},"copy")," kopiert werden. Wenn Sie die Liste nicht kopieren, dann wird die Liste beim Sortieren ver\xe4ndert und die Zeitmessung ist nicht mehr aussagekr\xe4ftig. "),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:3,mdxType:"Comment"}))),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Halten Sie Ihre Messergebnisse im EF Repository unter ",(0,i.kt)("strong",{parentName:"p",className:"underline"},"docs/Algorithmen/zeitmessung.md")," fest."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:4,mdxType:"Comment"})),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(g,{value:"Selection Sort",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"def selection_sort(a):\n    for j in range(len(a) - 1):\n        key = a[j]\n        index = j\n        for i in range(j + 1, len(a)):\n            if a[i] < a[index]:\n                index = i\n        a[j] = a[index]\n        a[index] = key\n    return a\n\nto_sort = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint('Unsortiert:', to_sort)\nprint('Sortiert:  ', selection_sort(to_sort))\n"))),(0,i.kt)(g,{value:"Insertion Sort",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"def insertion_sort(a):\n    for j in range(1, len(a)):\n        key = a[j]\n        i = j - 1\n        while i >= 0 and a[i] > key:\n            a[i + 1] = a[i]\n            i = i - 1\n        a[i + 1] = key\n    return a\n\nto_sort = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint('Unsortiert:', to_sort)\nprint('Sortiert:  ', insertion_sort(to_sort))\n"))),(0,i.kt)(g,{value:"Merge Sort",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"def merge(lower, upper):\n    sorted = []\n    while len(lower) > 0 and len(upper) > 0:\n        if lower[0] < upper[0]:\n            sorted.append(lower.pop(0))\n        else:\n            sorted.append(upper.pop(0))\n    if len(lower) > 0:\n        sorted.extend(lower) # liste lower an sorted anh\xe4ngen \n    elif len(upper) > 0:\n        sorted.extend(upper) # liste upper an sorted anh\xe4ngen\n\n    return sorted\n\n\ndef merge_sort(data):\n    if len(data) <= 1:\n        return data\n    else:\n        middle = len(data) // 2\n        left = data[0 : middle]\n        right = data[middle : len(data)]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\nto_sort = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint('Unsortiert:', to_sort)\nprint('Sortiert:  ', merge_sort(to_sort))\n"))))))}y.isMDXComponent=!0}}]);