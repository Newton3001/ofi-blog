"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[1086],{91086:(e,n,t)=>{t.r(n),t.d(n,{default:()=>R});var r=t(67294),i=t(86010),l=t(6645),s=t(52616),_=t(46858),a=t(46670),o=t(21314);const d=e=>{const[n,t]=r.useState(!1);return r.useEffect((()=>{document.getElementById(e.name)||t(!0)}),[]),n?r.createElement("script",{id:e.name,type:"text/python"},e.scriptSource):null},f=t(96500),c=()=>r.createElement(d,{name:"grid",scriptSource:f}),m=t(44829),p=()=>r.createElement(d,{name:"config",scriptSource:m}),u=t(60157),g=()=>r.createElement(d,{name:"game",scriptSource:u}),E=t(74656),y=()=>r.createElement(d,{name:"turtle3d",scriptSource:E}),h=t(63818),x=(0,a.Pi)((e=>{const n=(0,o.oR)("documentStore").find(e.webKey),t=`${n.precode}\n${n.code}`,i=n.precode.split(/\n/).length;return r.createElement(r.Fragment,null,r.createElement(p,null),r.createElement(g,null),s.Ww.test(t)&&r.createElement(y,null),n.hasCanvasOutput&&r.createElement(c,null),r.createElement("script",{id:s.h5.scriptSource(n.codeId),type:"text/py_disabled",className:"brython-script"},`${h}\nrun("""${(0,_.ly)(t||"")}""", '${n.codeId}', ${i})`))}));var w=t(74981);t(56604),t(4007),t(89899),t(44077),t(57787),t(82679),t(66245);const M={mpy:"python"},R=(0,a.Pi)((e=>{const n=(0,o.oR)("documentStore").find(e.webKey),t=r.useCallback((t=>(null!==t&&t.editor&&("python"===e.lang&&t.editor.commands.addCommand({name:"execute",bindKey:{win:"Ctrl-Enter",mac:"Command-Enter"},exec:()=>n.execScript(document)}),t.editor.commands.addCommand({name:"save",bindKey:{win:"Ctrl-s",mac:"Command-s"},exec:()=>{n.saveService.saveNow()}})),()=>{if(t&&t.editor){const e=t.editor.commands.commands.execute;e&&t.editor.commands.removeCommand(e,!0);const n=t.editor.commands.commands.save;n&&t.editor.commands.removeCommand(n,!0)}})),[n]);return r.createElement("div",{className:(0,i.default)(l.Z.brythonCodeBlock,l.Z.editor)},r.createElement(w.ZP,{className:(0,i.default)(l.Z.brythonEditor,!e.showLineNumbers&&l.Z.noGutter),style:{width:"100%"},onPaste:e=>{n.versioned&&(n.setPastedEdit(!0),n.saveService.saveNow())},focus:!1,navigateToFileEnd:!1,maxLines:e.maxLines||25,ref:t,mode:M[e.lang]??e.lang,theme:"dracula",onChange:e=>{n.setData({code:e})},readOnly:n.showRaw||!n.loaded,value:n.showRaw?n.rawScript:n.data.code,defaultValue:n.code,name:s.h5.aceEditor(n.codeId),editorProps:{$blockScrolling:!0},setOptions:{displayIndentGuides:!0,vScrollBarAlwaysVisible:!1,highlightGutterLine:!1},showPrintMargin:!1,highlightActiveLine:!1,enableBasicAutocompletion:!0,enableLiveAutocompletion:!1,enableSnippets:!1,showGutter:e.showLineNumbers}),"python"===e.lang&&r.createElement(x,{webKey:e.webKey}))}))},44829:e=>{e.exports="class Config():\n    PYTHON_SOURCE = ''\n    CANVAS_OUTPUT = False\n    CANVAS_ID = 'canvas_id'\n    GRAPHICS_ID = 'graphics_id'"},60157:e=>{e.exports="\nfrom browser import timer, document # type: ignore\nfrom config import Config           # type: ignore\n\nimport time\nclass Game():\n    stop_request = False\n    anim_id = None\n    timeout_id = None\n    init_time = None\n    sleep_requested: bool = False\n\n    @staticmethod\n    def reset():\n        Game.stop_request = False\n        Game.anim_id = None\n        Game.timeout_id = None\n        Game.init_time = None\n        Game.sleep_requested = False\n\n    @staticmethod\n    def sleep(ms):\n        pass\n\n    @staticmethod\n    def stop():\n        Game.stop_request = True\n        timer.clear_timeout(Game.timeout_id)\n        timer.cancel_animation_frame(Game.timeout_id)\n\n\n    @staticmethod\n    def is_running():\n        return not Game.stop_request and document[Config.PYTHON_SOURCE].attrs.get('data--start-time') == Game.init_time # type: ignore\n\ndef sleep(ms):\n    Game.sleep(ms)\n\ndef stop():\n    Game.stop()\n\ndef gameloop(func):\n    '''\n    Wrapper function for brython\n\n    ## Example\n    ```py\n    from game import gameloop, sleep, stop\n\n    @gameloop\n    def run(dt):\n        print('Time', dt)\n        if dt > 2000: # stop the game loop after 2000 ms \n            stop()\n        sleep(100) # sleeps 100 ms\n\n    \n    run()\n    ```\n    '''\n    Game.reset()\n    t0 = time.now() # type: ignore\n    Game.init_time = document[Config.PYTHON_SOURCE].attrs.get('data--start-time')\n        \n    def animation_frame():\n        Game.anim_id = timer.request_animation_frame(wrap)\n\n    def sleep(ms):\n        Game.sleep_requested = True\n        if Game.is_running():\n            Game.timeout_id = timer.set_timeout(animation_frame, ms)\n\n    Game.sleep = sleep\n    \n    def wrap(*args, **kwargs):\n        Game.sleep_requested = False\n        if func.__code__.co_argcount > 0:\n            result = func(time.now() - t0) # type: ignore\n        else:\n            result = func()\n\n        if not Game.sleep_requested and not Game.stop_request:\n            animation_frame()\n        return Game\n    return wrap"},96500:e=>{e.exports="from browser import document, html # type: ignore\nfrom browser import timer, window # type: ignore\nfrom config import Config # type: ignore\n\nclass Rectangle():\n    col: int\n    row: int\n    ctx = None\n    grid = None\n    init_draw = False\n    def __init__(self, grid, col: int, row: int, color: str = ''):\n        self.col = col\n        self.row = row\n        self.grid = grid\n        self.init_draw = False\n        try:\n            canvas = document[Config.CANVAS_ID]\n            self.ctx = canvas.getContext('2d')\n        except:\n            pass\n        self._color = color\n        \n    def get(self, offset_x: int, offset_y: int):\n        y = (self.row + offset_y) % len(self.grid) # type: ignore\n        x = (self.col + offset_x) % len(self.grid[y]) # type: ignore\n        return self.grid[y][x] # type: ignore\n\n    @property\n    def color(self):\n        return self._color\n\n    @color.setter\n    def color(self, color: str):\n        if color == '':\n            color = 'rgba(0,0,0,0)'\n\n        if self._color == color and self.init_draw:\n            return\n        self._color = color\n        self.init_draw = True\n        self.draw()\n\n    def draw(self):\n        scale = self.grid.scale # type: ignore\n        x = self.col * scale\n        y = self.row * scale\n        try:\n            self.ctx.clearRect(x, y, scale, scale) # type: ignore\n            self.ctx.lineWidth = 0 # type: ignore\n            self.ctx.fillStyle = self.color # type: ignore\n            self.ctx.fillRect(x, y, scale, scale) # type: ignore\n        except:\n            pass\n\n    def copy(self, grid):\n        return Rectangle(grid, self.col, self.row, self.color)\n\n    def __repr__(self):\n        return self.color\n\nclass RectLine():\n    line: list = []\n    n = 0\n    max = 0\n    def __init__(self, grid, row, cols: int | list, color: str = ''):\n        self.grid = grid\n        if type(cols) == list:\n            self.line = cols # type: ignore\n        else:\n            self.line = [Rectangle(grid, col, row, color) for col in range(cols)] # type: ignore\n        self.max = len(self.line) # type: ignore\n    \n    def __getitem__(self, key):\n        return self.line[key]\n\n    def __setitem__(self, key, value):\n        self.line[key].color = value\n\n    def __repr__(self):\n        return ', '.join([f'{r.color}' for r in self.line])\n\n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n < self.max:\n            result = self[self.n]\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n    \n    def __len__(self):\n        return self.max\n\n    def draw(self):\n        for rect in self.line:\n            rect.draw()\n    \n    def copy(self, grid):\n        return RectLine(grid, self.line[0].row, [l.copy(grid) for l in self.line]) # type: ignore\n\nclass Grid():\n    lines = []\n    n = 0\n    max = 0\n    CANVAS_ID = ''\n    WIDTH = 500\n    HEIGHT = 500\n    scale = 10\n    record_gif = False\n    frames = {}\n\n    def __init__(self, rows: int, cols: int, color: str = '', scale: int = -1):\n        if scale < 0:\n            if rows > 0 and cols > 0:\n                scale = min(Grid.WIDTH // cols, Grid.HEIGHT // rows)\n            else:\n                scale = 10\n        self.scale = scale\n        self.lines = [RectLine(self, row, cols, color) for row in range(rows)]\n        self.max = rows\n    \n    @staticmethod\n    def setup(width: int, height: int, record_gif: bool = False):\n        Grid.HEIGHT = height\n        Grid.WIDTH = width\n        Grid.record_gif = record_gif\n        Grid.frames = {}\n        canvas = document[Config.CANVAS_ID]\n        parent = canvas.parent\n        parent.replaceChildren()\n    \n        canv = document.createElement('canvas')\n        canv.style.display = 'block'\n        canv.id = Config.CANVAS_ID;\n        canv.attrs['height'] = height\n        canv.attrs['width'] = width\n        canv.style.width = f'{width}px'\n        canv.style.height = f'{height}px'\n        parent.appendChild(canv)\n\n    @staticmethod\n    def from_bin_text(bin_text: str, colors={'s': 'black', '1': 'black', 'x': 'black', 'bg': ''}):\n        lines = bin_text.lower().splitlines()\n        if 'bg' not in colors:\n            colors['bg'] = ''\n        while len(lines) > 0 and len(lines[0]) == 0:\n            lines.pop(0)\n        size_y = len(lines)\n        if size_y < 1:\n            raise Exception('Grid must have at least one non empty line')\n        size_x = max(map(lambda x: len(x), lines))\n\n        scale = min(Grid.WIDTH // size_x, Grid.HEIGHT // size_y)\n        grid = Grid(0, 0, colors['bg'], scale)\n        raw_grid = []\n        for line in lines:\n            raw_line = []\n            for x in range(size_x):\n                if x < len(line):\n                    raw_line.append(Rectangle(grid, x, len(raw_grid), colors.get(line[x], colors['bg'])))\n                else:\n                    raw_line.append(Rectangle(grid, x, len(raw_grid), colors['bg']))\n            raw_grid.append(RectLine(grid, len(raw_grid), raw_line))\n        grid.set_lines(raw_grid)\n        grid.draw()\n        return grid\n        \n\n    def set_lines(self, lines):\n        self.lines = lines\n        self.max = len(lines)\n\n        \n    def tolist(self):\n        return [[c.color for c in l.line] for l in self.lines]\n\n    @property\n    def color_grid(self):\n        return self.tolist()\n\n    @property\n    def grid(self):\n        return self.tolist()\n\n    @property\n    def size(self):\n        return (self.dim_y, self.dim_x)\n\n    @property\n    def dim_x(self):\n        if self.max < 1:\n            return 0\n        return len(self[0])\n\n    @property\n    def dim_y(self):\n        return len(self.lines)\n\n    @staticmethod\n    def clear_canvas():\n        try:\n            canvas = document[Config.CANVAS_ID]\n            ctx = canvas.getContext('2d')\n            ctx.clearRect(0, 0, Grid.WIDTH, Grid.HEIGHT) # type: ignore\n        except:\n            pass\n\n\n    def draw(self):\n        for line in self.lines:\n            line.draw()\n\n    @staticmethod\n    def gif_add():\n        if Grid.record_gif:\n            canvas = document[Config.CANVAS_ID]\n            frameName = 'frame_' + str(len(Grid.frames)).rjust(3, '0')\n            Grid.frames[frameName] = canvas.toDataURL('image/png');\n\n\n\n    def fill(self, color: str = ''):\n        for line in self.lines:\n            for cell in line:\n                cell.color = color\n\n    def copy(self):\n        cp = Grid(0, 0)\n        lines = [l.copy(cp) for l in self.lines]\n        cp.set_lines(lines)\n        return cp\n\n\n    def __getitem__(self, key):\n        return self.lines[key]\n\n    def __setitem__(self, key, value):\n        self.lines[key] = value\n        \n    def __repr__(self):\n        rep = ''\n        for line in self.lines:\n            rep += f'{line}'\n            rep += '\\n'\n        return rep\n    \n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n < self.max:\n            result = self[self.n]\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n\n    def __len__(self):\n        return self.max"},74656:e=>{e.exports="import turtle\nfrom math import sqrt\nfrom random import random\n\nclass Turtle3d(turtle.Turtle):\n    LAYER_HEIGHT = 0.3\n    GRBL_PRUSA_START = '''; generated by PrusaSlicer 2.5.0+win64 \n\nM73 P0 R8\nM73 Q0 S8\nM201 X1000 Y1000 Z200 E8000 ; sets maximum accelerations, mm/sec^2\nM203 X200 Y200 Z12 E120 ; sets maximum feedrates, mm / sec\nM204 P1250 R1250 T1250 ; sets acceleration (P, T) and retract acceleration (R), mm/sec^2\nM205 X8.00 Y8.00 Z0.40 E4.50 ; sets the jerk limits, mm/sec\nM205 S0 T0 ; sets the minimum extruding and travel feed rate, mm/sec\nM107\n;TYPE:Custom\nM862.3 P \"MK3SMMU2S\" ; printer model check\nM862.1 P0.4 ; nozzle diameter check\nM115 U3.11.0 ; tell printer latest fw version\nG90 ; use absolute coordinates\nM83 ; extruder relative mode\nM104 S215 ; set extruder temp\nM140 S60 ; set bed temp\nM190 S60 ; wait for bed temp\nM109 S215 ; wait for extruder temp\nG28 W ; home all without mesh bed level\nG80 ; mesh bed leveling\n\n; Send the filament type to the MMU2.0 unit.\n; E stands for extruder number, F stands for filament type (0: default; 1:flex; 2: PVA)\nM403 E0 F0\nM403 E1 F0\nM403 E2 F0\nM403 E3 F0\nM403 E4 F0\n\n\n;go outside print area\nG1 Y-3 F1000\nG1 Z0.4 F1000\n; select extruder\nT0\n; initial load\nG1 X55 E29 F1073\nG1 X5 E29 F1800\nG1 X55 E8 F2000\nM73 P1 R8\nM73 Q1 S8\nG1 Z0.3 F1000\nG92 E0\nG1 X240 E25 F2200\nG1 Y-2 F1000\nM73 P2 R7\nM73 Q2 S7\nG1 X55 E25 F1400\nG1 Z0.2 F1000\nM73 P4 R7\nM73 Q4 S7\nG1 X5 E4 F1000\nG92 E0\n\n\nM221 S95\nG92 E0\n\n; Don't change E values below. Excessive value can damage the printer.\n\nM907 E538 ; set extruder motor current\nG21 ; set units to millimeters\nG90 ; use absolute coordinates\nM83 ; use relative distances for extrusion\nM900 K0.05 ; Filament gcode LA 1.5\nM900 K30 ; Filament gcode LA 1.0\nM107\n;LAYER_CHANGE\n;Z:0.2\n;HEIGHT:0.2\n;BEFORE_LAYER_CHANGE\nG92 E0.0\n;0.2\n\n\nG1 E-.8 F2100\nG1 Z.4 F720\n;AFTER_LAYER_CHANGE\n;0.2\nG1 X91.527 Y73.241 F10800\nG1 Z.2 F720\nG1 E.8 F2100\nM204 S800\n;TYPE:Skirt/Brim\n\nG1 F2000\n'''\n    GRBL_PRUSA_PRE_END = '''\n;TYPE:Custom\n; Filament-specific end gcode\nG1 Z{z} F720 ; Move print head up\nG1 X0 Y210 F7200 ; park\nG1 Z{z_park} F720 ; Move print head further up\n'''\n    GRBL_PRUSA_END = '''\\\nG1 E2 F5000\nM73 P99 R0\nM73 Q99 S0\nG1 E2 F5500\nG1 E2 F6000\nG1 E-15 F5800\nG1 E-20 F5500\nG1 E10 F3000\nG1 E-10 F3100\nG1 E10 F3150\nG1 E-10 F3250\nG1 E10 F3300\n\n\nM140 S0 ; turn off heatbed\nM107 ; turn off fan\n\n; Unload filament\nM702 C\n\nG4 ; wait\nM221 S100 ; reset flow\nM900 K0 ; reset LA\n\nM104 S0 ; turn off temperature\nM84 ; disable motors\nM73 P100 R0\nM73 Q100 S0\n\n\n; prusaslicer_config = begin\n; avoid_crossing_perimeters = 0\n; avoid_crossing_perimeters_max_detour = 0\n; bed_custom_model = \n; bed_custom_texture = \n; bed_shape = 0x0,250x0,250x210,0x210\n; bed_temperature = 60,60,60,60,90\n; before_layer_gcode = ;BEFORE_LAYER_CHANGE\\\\nG92 E0.0\\\\n;[layer_z]\\\\n\\\\n\n; between_objects_gcode = \n; bottom_fill_pattern = monotonic\n; bottom_solid_layers = 3\n; bottom_solid_min_thickness = 0.5\n; bridge_acceleration = 1000\n; bridge_angle = 0\n; bridge_fan_speed = 100,100,100,100,50\n; bridge_flow_ratio = 0.95\n; bridge_speed = 25\n; brim_separation = 0.1\n; brim_type = outer_only\n; brim_width = 0\n; clip_multipart_objects = 1\n; color_change_gcode = M600\\\\nG1 E0.4 F1500 ; prime after color change\n; compatible_printers_condition_cummulative = \"printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK3.*/ and nozzle_diameter[0]==0.4\";\"nozzle_diameter[0]!=0.8 and nozzle_diameter[0]!=0.25 and printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK(2.5|3).*/ and single_extruder_multi_material\";\"nozzle_diameter[0]!=0.8 and nozzle_diameter[0]!=0.25 and printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK(2.5|3).*/ and single_extruder_multi_material\";\"nozzle_diameter[0]!=0.8 and nozzle_diameter[0]!=0.25 and printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK(2.5|3).*/ and single_extruder_multi_material\";\"nozzle_diameter[0]!=0.8 and nozzle_diameter[0]!=0.25 and printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK(2.5|3).*/ and single_extruder_multi_material\";\"nozzle_diameter[0]!=0.8 and nozzle_diameter[0]!=0.6 and nozzle_diameter[0]!=0.25 and printer_notes=~/.*PRINTER_VENDOR_PRUSA3D.*/ and printer_notes=~/.*PRINTER_MODEL_MK(2.5|3).*/ and single_extruder_multi_material\"\n; complete_objects = 0\n; cooling = 1,1,1,1,1\n; cooling_tube_length = 20\n; cooling_tube_retraction = 40\n; default_acceleration = 1000\n; default_filament_profile = \"Prusament PLA @MMU2\"\n; default_print_profile = 0.15mm QUALITY @MK3\n; deretract_speed = 0,0,0,0,0\n; disable_fan_first_layers = 1,1,1,1,3\n; dont_support_bridges = 0\n; draft_shield = disabled\n; duplicate_distance = 6\n; elefant_foot_compensation = 0.2\n; end_filament_gcode = \"; Filament-specific end gcode\";\"; Filament-specific end gcode\";\"; Filament-specific end gcode\";\"; Filament-specific end gcode\";\"; Filament-specific end gcode\"\n; end_gcode = {if max_layer_z < max_print_height}G1 Z{z_offset+min(max_layer_z+1, max_print_height)} F720 ; Move print head up{endif}\\\\nG1 X0 Y210 F7200 ; park\\\\n{if max_layer_z < max_print_height}G1 Z{z_offset+min(max_layer_z+49, max_print_height)} F720 ; Move print head further up{endif}\\\\n{if has_wipe_tower}\\\\nG1 E-15 F3000\\\\n{else}\\\\nG1 E2 F5000\\\\nG1 E2 F5500\\\\nG1 E2 F6000\\\\nG1 E-15 F5800\\\\nG1 E-20 F5500\\\\nG1 E10 F3000\\\\nG1 E-10 F3100\\\\nG1 E10 F3150\\\\nG1 E-10 F3250\\\\nG1 E10 F3300\\\\n{endif}\\\\n\\\\nM140 S0 ; turn off heatbed\\\\nM107 ; turn off fan\\\\n\\\\n; Unload filament\\\\nM702 C\\\\n\\\\nG4 ; wait\\\\nM221 S100 ; reset flow\\\\nM900 K0 ; reset LA\\\\n{if print_settings_id=~/.*(DETAIL @MK3|QUALITY @MK3|SOLUBLE|@0.25 nozzle MK3).*/}M907 E538 ; reset extruder motor current{endif}\\\\nM104 S0 ; turn off temperature\\\\nM84 ; disable motors\\\\n\n; ensure_vertical_shell_thickness = 1\n; external_perimeter_extrusion_width = 0.6\n; external_perimeter_speed = 35\n; external_perimeters_first = 0\n; extra_loading_move = -25\n; extra_perimeters = 0\n; extruder_clearance_height = 20\n; extruder_clearance_radius = 45\n; extruder_colour = #FF8000;#DB5182;#3EC0FF;#FF4F4F;#FBEB7D\n; extruder_offset = 0x0,0x0,0x0,0x0,0x0\n; extrusion_axis = E\n; extrusion_multiplier = 1,1,1,1,1\n; extrusion_width = 0.5\n; fan_always_on = 1,1,1,1,1\n; fan_below_layer_time = 100,100,100,100,20\n; filament_colour = #FF8000;#FF8000;#FF8000;#FF8000;#FF8000\n; filament_cooling_final_speed = 2,2,2,2,1\n; filament_cooling_initial_speed = 3,3,3,3,2\n; filament_cooling_moves = 1,1,1,1,1\n; filament_cost = 36.29,36.29,36.29,36.29,36.29\n; filament_density = 1.24,1.24,1.24,1.24,1.27\n; filament_diameter = 1.75,1.75,1.75,1.75,1.75\n; filament_load_time = 15,15,15,15,15\n; filament_loading_speed = 14,14,14,14,14\n; filament_loading_speed_start = 19,19,19,19,19\n; filament_max_volumetric_speed = 13,13,13,13,7\n; filament_minimal_purge_on_wipe_tower = 15,15,15,15,15\n; filament_notes = ;;;;\n; filament_ramming_parameters = \"130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6\";\"130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6\";\"130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6\";\"130 120 2.70968 2.93548 3.32258 3.83871 4.58065 5.54839 6.51613 7.35484 7.93548 8.16129| 0.05 2.66451 0.45 3.05805 0.95 4.05807 1.45 5.97742 1.95 7.69999 2.45 8.1936 2.95 11.342 3.45 11.4065 3.95 7.6 4.45 7.6 4.95 7.6\";\"120 140 4.70968 4.74194 4.77419 4.80645 4.83871 4.87097 4.90323 5 5.25806 5.67742 6.29032 7.06452 7.83871 8.3871| 0.05 4.72901 0.45 4.73545 0.95 4.83226 1.45 4.88067 1.95 5.05483 2.45 5.93553 2.95 7.53556 3.45 8.6323 3.95 7.6 4.45 7.6 4.95 7.6\"\n; filament_retract_length = nil,nil,nil,nil,1\n; filament_retract_lift = nil,nil,nil,nil,0.2\n; filament_settings_id = \"Prusament PLA @MMU2\";\"Prusament PLA @MMU2\";\"Prusament PLA @MMU2\";\"Prusament PLA @MMU2\";\"Prusament PETG @MMU2\"\n; filament_soluble = 0,0,0,0,0\n; filament_spool_weight = 201,201,201,201,201\n; filament_toolchange_delay = 0,0,0,0,0\n; filament_type = PLA;PLA;PLA;PLA;PETG\n; filament_unload_time = 12,12,12,12,12\n; filament_unloading_speed = 20,20,20,20,20\n; filament_unloading_speed_start = 100,100,100,100,120\n; filament_vendor = Prusa Polymers\n; fill_angle = 45\n; fill_density = 20%\n; fill_pattern = grid\n; first_layer_acceleration = 800\n; first_layer_acceleration_over_raft = 0\n; first_layer_bed_temperature = 60,60,60,60,85\n; first_layer_extrusion_width = 0.42\n; first_layer_height = 0.2\n; first_layer_speed = 20\n; first_layer_speed_over_raft = 30\n; first_layer_temperature = 215,215,215,215,230\n; full_fan_speed_layer = 4,4,4,4,5\n; fuzzy_skin = none\n; fuzzy_skin_point_dist = 0.8\n; fuzzy_skin_thickness = 0.3\n; gap_fill_enabled = 1\n; gap_fill_speed = 40\n; gcode_comments = 0\n; gcode_flavor = marlin\n; gcode_label_objects = 1\n; gcode_resolution = 0.0125\n; gcode_substitutions = \n; high_current_on_filament_swap = 0\n; host_type = octoprint\n; infill_acceleration = 1000\n; infill_anchor = 2.5\n; infill_anchor_max = 12\n; infill_every_layers = 1\n; infill_extruder = 1\n; infill_extrusion_width = 0.5\n; infill_first = 0\n; infill_only_where_needed = 0\n; infill_overlap = 25%\n; infill_speed = 85\n; interface_shells = 0\n; ironing = 0\n; ironing_flowrate = 15%\n; ironing_spacing = 0.1\n; ironing_speed = 15\n; ironing_type = top\n; layer_gcode = ;AFTER_LAYER_CHANGE\\\\n;[layer_z]\n; layer_height = 0.3\n; machine_limits_usage = emit_to_gcode\n; machine_max_acceleration_e = 8000,8000\n; machine_max_acceleration_extruding = 1250,1250\n; machine_max_acceleration_retracting = 1250,1250\n; machine_max_acceleration_travel = 1500,1250\n; machine_max_acceleration_x = 1000,960\n; machine_max_acceleration_y = 1000,960\n; machine_max_acceleration_z = 200,200\n; machine_max_feedrate_e = 120,120\n; machine_max_feedrate_x = 200,100\n; machine_max_feedrate_y = 200,100\n; machine_max_feedrate_z = 12,12\n; machine_max_jerk_e = 4.5,4.5\n; machine_max_jerk_x = 8,8\n; machine_max_jerk_y = 8,8\n; machine_max_jerk_z = 0.4,0.4\n; machine_min_extruding_rate = 0,0\n; machine_min_travel_rate = 0,0\n; max_fan_speed = 100,100,100,100,50\n; max_layer_height = 0.25,0.25,0.25,0.25,0.25\n; max_print_height = 210\n; max_print_speed = 200\n; max_volumetric_extrusion_rate_slope_negative = 0\n; max_volumetric_extrusion_rate_slope_positive = 0\n; max_volumetric_speed = 0\n; min_bead_width = 85%\n; min_fan_speed = 100,100,100,100,30\n; min_feature_size = 25%\n; min_layer_height = 0.07,0.07,0.07,0.07,0.07\n; min_print_speed = 15,15,15,15,15\n; min_skirt_length = 4\n; mmu_segmented_region_max_width = 0\n; notes = \n; nozzle_diameter = 0.4,0.4,0.4,0.4,0.4\n; only_retract_when_crossing_perimeters = 0\n; ooze_prevention = 0\n; output_filename_format = {input_filename_base}_{layer_height}mm_{initial_filament_type}_{printer_model}_{print_time}.gcode\n; overhangs = 1\n; parking_pos_retraction = 85\n; pause_print_gcode = M601\n; perimeter_acceleration = 800\n; perimeter_extruder = 1\n; perimeter_extrusion_width = 0.5\n; perimeter_generator = arachne\n; perimeter_speed = 50\n; perimeters = 2\n; physical_printer_settings_id = \n; post_process = \n; print_settings_id = 0.30mm DRAFT @MK3\n; printer_model = MK3SMMU2S\n; printer_notes = Don't remove the following keywords! These keywords are used in the \"compatible printer\" condition of the print and filament profiles to link the particular print and filament profiles to this printer profile.\\\\nPRINTER_VENDOR_PRUSA3D\\\\nPRINTER_MODEL_MK3\\\\n\n; printer_settings_id = Original Prusa i3 MK3S & MK3S+ MMU2S\n; printer_technology = FFF\n; printer_variant = 0.4\n; printer_vendor = \n; raft_contact_distance = 0.2\n; raft_expansion = 1.5\n; raft_first_layer_density = 90%\n; raft_first_layer_expansion = 3\n; raft_layers = 0\n; remaining_times = 1\n; resolution = 0\n; retract_before_travel = 1,1,1,1,1\n; retract_before_wipe = 0%,0%,0%,0%,0%\n; retract_layer_change = 1,1,1,1,1\n; retract_length = 0.8,0.8,0.8,0.8,0.8\n; retract_length_toolchange = 0,0,0,0,0\n; retract_lift = 0.4,0.4,0.4,0.4,0.4\n; retract_lift_above = 0,0,0,0,0\n; retract_lift_below = 209,209,209,209,209\n; retract_restart_extra = 0,0,0,0,0\n; retract_restart_extra_toolchange = 0,0,0,0,0\n; retract_speed = 35,35,35,35,35\n; seam_position = aligned\n; silent_mode = 1\n; single_extruder_multi_material = 1\n; single_extruder_multi_material_priming = 0\n; skirt_distance = 2\n; skirt_height = 3\n; skirts = 1\n; slice_closing_radius = 0.049\n; slicing_mode = regular\n; slowdown_below_layer_time = 15,15,15,15,15\n; small_perimeter_speed = 30\n; solid_infill_below_area = 0\n; solid_infill_every_layers = 0\n; solid_infill_extruder = 1\n; solid_infill_extrusion_width = 0.5\n; solid_infill_speed = 80\n; spiral_vase = 0\n; standby_temperature_delta = -5\n; start_filament_gcode = \"M900 K{if printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.6}0.12{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.8}0.06{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/}0.2{elsif nozzle_diameter[0]==0.8}0.01{elsif nozzle_diameter[0]==0.6}0.04{else}0.05{endif} ; Filament gcode LA 1.5\\\\n{if printer_notes=~/.*PRINTER_MODEL_MINI.*/};{elsif printer_notes=~/.*PRINTER_HAS_BOWDEN.*/}M900 K200{elsif nozzle_diameter[0]==0.6}M900 K18{elsif nozzle_diameter[0]==0.8};{else}M900 K30{endif} ; Filament gcode LA 1.0\";\"M900 K{if printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.6}0.12{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.8}0.06{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/}0.2{elsif nozzle_diameter[0]==0.8}0.01{elsif nozzle_diameter[0]==0.6}0.04{else}0.05{endif} ; Filament gcode LA 1.5\\\\n{if printer_notes=~/.*PRINTER_MODEL_MINI.*/};{elsif printer_notes=~/.*PRINTER_HAS_BOWDEN.*/}M900 K200{elsif nozzle_diameter[0]==0.6}M900 K18{elsif nozzle_diameter[0]==0.8};{else}M900 K30{endif} ; Filament gcode LA 1.0\";\"M900 K{if printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.6}0.12{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.8}0.06{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/}0.2{elsif nozzle_diameter[0]==0.8}0.01{elsif nozzle_diameter[0]==0.6}0.04{else}0.05{endif} ; Filament gcode LA 1.5\\\\n{if printer_notes=~/.*PRINTER_MODEL_MINI.*/};{elsif printer_notes=~/.*PRINTER_HAS_BOWDEN.*/}M900 K200{elsif nozzle_diameter[0]==0.6}M900 K18{elsif nozzle_diameter[0]==0.8};{else}M900 K30{endif} ; Filament gcode LA 1.0\";\"M900 K{if printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.6}0.12{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.8}0.06{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/}0.2{elsif nozzle_diameter[0]==0.8}0.01{elsif nozzle_diameter[0]==0.6}0.04{else}0.05{endif} ; Filament gcode LA 1.5\\\\n{if printer_notes=~/.*PRINTER_MODEL_MINI.*/};{elsif printer_notes=~/.*PRINTER_HAS_BOWDEN.*/}M900 K200{elsif nozzle_diameter[0]==0.6}M900 K18{elsif nozzle_diameter[0]==0.8};{else}M900 K30{endif} ; Filament gcode LA 1.0\";\"M900 K{if printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.6}0.12{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/ and nozzle_diameter[0]==0.8}0.06{elsif printer_notes=~/.*PRINTER_MODEL_MINI.*/}0.2{elsif nozzle_diameter[0]==0.8}0.02{elsif nozzle_diameter[0]==0.6}0.04{else}0.08{endif} ; Filament gcode LA 1.5\\\\n{if printer_notes=~/.*PRINTER_MODEL_MINI.*/};{elsif printer_notes=~/.*PRINTER_HAS_BOWDEN.*/}M900 K200{elsif nozzle_diameter[0]==0.6}M900 K24{elsif nozzle_diameter[0]==0.8};{else}M900 K45{endif} ; Filament gcode LA 1.0\"\n; start_gcode = M862.3 P \"[printer_model]\" ; printer model check\\\\nM862.1 P[nozzle_diameter] ; nozzle diameter check\\\\nM115 U3.11.0 ; tell printer latest fw version\\\\nG90 ; use absolute coordinates\\\\nM83 ; extruder relative mode\\\\nM104 S[first_layer_temperature] ; set extruder temp\\\\nM140 S[first_layer_bed_temperature] ; set bed temp\\\\nM190 S[first_layer_bed_temperature] ; wait for bed temp\\\\nM109 S[first_layer_temperature] ; wait for extruder temp\\\\nG28 W ; home all without mesh bed level\\\\nG80 ; mesh bed leveling\\\\n\\\\n; Send the filament type to the MMU2.0 unit.\\\\n; E stands for extruder number, F stands for filament type (0: default; 1:flex; 2: PVA)\\\\nM403 E0 F{\"\" + ((filament_type[0]==\"FLEX\") ? 1 : ((filament_type[0]==\"PVA\") ? 2 : 0))}\\\\nM403 E1 F{\"\" + ((filament_type[1]==\"FLEX\") ? 1 : ((filament_type[1]==\"PVA\") ? 2 : 0))}\\\\nM403 E2 F{\"\" + ((filament_type[2]==\"FLEX\") ? 1 : ((filament_type[2]==\"PVA\") ? 2 : 0))}\\\\nM403 E3 F{\"\" + ((filament_type[3]==\"FLEX\") ? 1 : ((filament_type[3]==\"PVA\") ? 2 : 0))}\\\\nM403 E4 F{\"\" + ((filament_type[4]==\"FLEX\") ? 1 : ((filament_type[4]==\"PVA\") ? 2 : 0))}\\\\n\\\\n{if not has_single_extruder_multi_material_priming}\\\\n;go outside print area\\\\nG1 Y-3 F1000\\\\nG1 Z0.4 F1000\\\\n; select extruder\\\\nT[initial_tool]\\\\n; initial load\\\\nG1 X55 E29 F1073\\\\nG1 X5 E29 F1800\\\\nG1 X55 E8 F2000\\\\nG1 Z0.3 F1000\\\\nG92 E0\\\\nG1 X240 E25 F2200\\\\nG1 Y-2 F1000\\\\nG1 X55 E25 F1400\\\\nG1 Z0.2 F1000\\\\nG1 X5 E4 F1000\\\\nG92 E0\\\\n{endif}\\\\n\\\\nM221 S{if layer_height<0.075}100{else}95{endif}\\\\nG92 E0\\\\n\\\\n; Don't change E values below. Excessive value can damage the printer.\\\\n{if print_settings_id=~/.*(DETAIL @MK3|QUALITY @MK3|SOLUBLE).*/}M907 E430 ; set extruder motor current{endif}\\\\n{if print_settings_id=~/.*(SPEED @MK3|DRAFT @MK3).*/}M907 E538 ; set extruder motor current{endif}\n; support_material = 0\n; support_material_angle = 0\n; support_material_auto = 1\n; support_material_bottom_contact_distance = 0\n; support_material_bottom_interface_layers = 0\n; support_material_buildplate_only = 0\n; support_material_closing_radius = 2\n; support_material_contact_distance = 0.2\n; support_material_enforce_layers = 0\n; support_material_extruder = 0\n; support_material_extrusion_width = 0.38\n; support_material_interface_contact_loops = 0\n; support_material_interface_extruder = 0\n; support_material_interface_layers = 2\n; support_material_interface_pattern = rectilinear\n; support_material_interface_spacing = 0.2\n; support_material_interface_speed = 80%\n; support_material_pattern = rectilinear\n; support_material_spacing = 2\n; support_material_speed = 45\n; support_material_style = grid\n; support_material_synchronize_layers = 0\n; support_material_threshold = 50\n; support_material_with_sheath = 0\n; support_material_xy_spacing = 60%\n; temperature = 205,205,205,205,230\n; template_custom_gcode = \n; thick_bridges = 0\n; thin_walls = 0\n; threads = 8\n; thumbnails = 160x120\n; thumbnails_format = PNG\n; toolchange_gcode = \n; top_fill_pattern = monotonic\n; top_infill_extrusion_width = 0.45\n; top_solid_infill_speed = 40\n; top_solid_layers = 4\n; top_solid_min_thickness = 0.7\n; travel_speed = 180\n; travel_speed_z = 12\n; use_firmware_retraction = 0\n; use_relative_e_distances = 1\n; use_volumetric_e = 0\n; variable_layer_height = 1\n; wall_distribution_count = 1\n; wall_transition_angle = 10\n; wall_transition_filter_deviation = 25%\n; wall_transition_length = 0.4\n; wipe = 1,1,1,1,1\n; wipe_into_infill = 0\n; wipe_into_objects = 0\n; wipe_tower = 1\n; wipe_tower_bridging = 10\n; wipe_tower_brim_width = 2\n; wipe_tower_no_sparse_layers = 0\n; wipe_tower_rotation_angle = 0\n; wipe_tower_width = 60\n; wipe_tower_x = 170\n; wipe_tower_y = 125\n; wiping_volumes_extruders = 70,70,70,70,70,70,70,70,70,70\n; wiping_volumes_matrix = 0,140,140,140,140,140,0,140,140,140,140,140,0,140,140,140,140,140,0,140,140,140,140,140,0\n; xy_size_compensation = 0\n; z_offset = 0\n; prusaslicer_config = end\n'''\n\n\n    PRUSA_OFFSET = (125, 125)\n    PRUSA_DIMENSION = (250, 250, 210)\n\n    gcodes = []\n    _elevation = LAYER_HEIGHT - 0.1\n    _elevations = [LAYER_HEIGHT - 0.1]\n\n    def __init__(self) -> None:\n        super().__init__()\n        self.gcodes = []\n        self._elevation = Turtle3d.LAYER_HEIGHT - 0.1\n        self._elevations = [self._elevation]\n\n\n    def _wipe(self, x, y, to_x, to_y, change_layer: bool = False):\n        if len(self.gcodes) == 0:\n            return\n\n        self.gcodes.append('M204 S1000')\n        self.gcodes.append(';WIPE_START')\n        self.gcodes.append(f'G1 X{x + self.PRUSA_OFFSET[0] + random() - 0.5:.3f} Y{y + self.PRUSA_OFFSET[1] +  random() - 0.5:.3f} F10800')\n        self.gcodes.append('G1 F8640')\n        for i in range(4):\n            self.gcodes.append(f'G1 X{x + self.PRUSA_OFFSET[0] + random() - 0.5:.3f} Y{y + self.PRUSA_OFFSET[1] + random() - 0.5} E-.14292')\n        self.gcodes.append(';WIPE_END')\n        self.gcodes.append('G1 E-.04 F2100')\n        self.gcodes.append(f'G1 Z{self._elevation + self.LAYER_HEIGHT} F720')\n        self.gcodes.append(f'G1 X{to_x + self.PRUSA_OFFSET[0]:.3f} Y{to_y + self.PRUSA_OFFSET[1]:.3f} F10800')\n        'after layer change'\n        if change_layer:\n            self.gcodes.append(';AFTER_LAYER_CHANGE')\n            self.gcodes.append(f';{self._elevation:.2f}')\n        self.gcodes.append(f'G1 Z{self._elevation:.2f} F720')\n        self.gcodes.append(f'G1 E.8 F2100')\n        \n        self.gcodes.append('M204 S800')\n        self.gcodes.append(';TYPE:Perimeter')\n        self.gcodes.append(':WIDTH:0.419999')\n        self.gcodes.append('G1 F2400')\n\n    def _goto(self, x, y):\n        x = float(x)\n        y = float(y)\n        ele = self._elevation * 4\n        last_x = self._x\n        last_y = self._y\n        '''CONFIG _goto call'''\n        self._x = self._x + ele\n        self._y = self._y + ele\n        super()._goto(x + ele, y + ele) # type: ignore -- brython turtle\n        self._position = (x, y)\n        '''RESET'''\n        self._x = x\n        self._y = y\n        dist = sqrt((x - last_x) ** 2 + (y - last_y) ** 2)\n        if self._drawing: # type: ignore -- brython turtle\n            if dist > 10:\n                e_val = (dist * self.LAYER_HEIGHT / 7)\n            elif dist > 5:\n                e_val = (dist * self.LAYER_HEIGHT / 10)\n            elif dist > 1:\n                e_val = (dist * self.LAYER_HEIGHT / 15)\n            else:\n                e_val = (dist * self.LAYER_HEIGHT / 30)\n            self.gcodes.append(f'G1 X{x + self.PRUSA_OFFSET[0]:.3f} Y{y + self.PRUSA_OFFSET[1]:.3f} E{e_val:.5f}')\n        else:\n            # self.gcodes.append(f'G1 X{x:.3f} Y{y:.3f} F10800')\n            self._wipe(last_x, last_y, x, y)\n\n    def elevation(self, elevation = None):\n        if elevation is None:\n            return self._elevation\n        if elevation < 0:\n            elevation = 0.0\n        if elevation == self._elevation:\n            return\n        last = self._elevations[-1]\n        self._elevation = elevation\n        self._elevations.append(elevation)\n        self.gcodes.append(';LAYER_CHANGE')\n        self.gcodes.append(f';Z:{self._elevation:.2f}')\n        self.gcodes.append(f';HEIGHT:{elevation - last}')\n        self.gcodes.append(';BEFORE_LAYER_CHANGE')\n        self.gcodes.append(';G92 E0.0')\n        self.gcodes.append(f';{self._elevation:.2f}')\n        self._wipe(self._x, self._y, self._x, self._y, True)\n\n    def level_up(self):\n        self.elevation(self._elevation + self.LAYER_HEIGHT)\n    \n    def gcode(self):\n        return '\\n'.join([self.GRBL_PRUSA_START, *self.gcodes, self.GRBL_PRUSA_PRE_END.format(z=self._elevation + 2, z_park=self._elevation + 30), self.GRBL_PRUSA_END]).replace('G1 Z0.', 'G1 Z.').replace(' E0.', ' E.')\n\n\nPen = Turtle3d\n\nScreen = turtle.Screen\n\ndef replay_scene():\n    turtle.replay_scene() # type: ignore\n\n\ndef restart():\n    turtle.restart() # type: ignore\n\ndef done():\n    turtle.done()\nshow_scene = done\n\n### Creating functions based\n\n_tg_3d_functions = ['elevation', 'level_up', 'gcodes', 'gcode']\n\n_tg_screen_functions = ['addshape', 'bgcolor', 'bgpic', 'bye',\n        'clearscreen', 'colormode', 'delay', 'exitonclick', 'getcanvas',\n        'getshapes', 'listen', 'mainloop', 'mode', 'numinput',\n        'onkey', 'onkeypress', 'onkeyrelease', 'onscreenclick', 'ontimer',\n        'register_shape', 'resetscreen', 'screensize', 'setup',\n        'setworldcoordinates', 'textinput', 'title', 'tracer', 'turtles', 'update',\n        'window_height', 'window_width']\n\n_tg_turtle_functions = ['back', 'backward', 'begin_fill', 'begin_poly', 'bk',\n        'circle', 'clear', 'clearstamp', 'clearstamps', 'clone', 'color',\n        'degrees', 'distance', 'dot', 'down', 'end_fill', 'end_poly', 'fd',\n        'fillcolor', 'filling', 'forward', 'get_poly', 'getpen', 'getscreen', 'get_shapepoly',\n        'getturtle', 'goto', 'heading', 'hideturtle', 'home', 'ht', 'isdown',\n        'isvisible', 'left', 'lt', 'onclick', 'ondrag', 'onrelease', 'pd',\n        'pen', 'pencolor', 'pendown', 'pensize', 'penup', 'pos', 'position',\n        'pu', 'radians', 'right', 'reset', 'resizemode', 'rt',\n        'seth', 'setheading', 'setpos', 'setposition', 'settiltangle',\n        'setundobuffer', 'setx', 'sety', 'shape', 'shapesize', 'shapetransform', 'shearfactor', 'showturtle',\n        'speed', 'st', 'stamp', 'tilt', 'tiltangle', 'towards',\n        'turtlesize', 'undo', 'undobufferentries', 'up', 'width',\n        'write', 'xcor', 'ycor']\n\n\n__all__ = (_tg_screen_functions + _tg_turtle_functions + _tg_3d_functions +\n           ['done', 'restart', 'replay_scene', 'Turtle3d', 'Screen']) # type: ignore\n\n\n__func_body = \"\"\"\\\ndef {name}(*args, **kw):\n    if {obj} is None:\n        {obj} = {init}\n    return {obj}.{name}(*args, **kw)\n\"\"\"\n\ndef _make_global_funcs(functions, cls, obj, init):\n    for methodname in functions:\n        try:\n            method = getattr(cls, methodname)\n        except AttributeError:\n            print(\"methodname missing:\", methodname)\n            continue\n        defstr = __func_body.format(obj=obj, init=init, name=methodname)\n        exec(defstr, globals())\n\n_make_global_funcs(_tg_3d_functions, Turtle3d, 'Turtle3d._pen', 'Turtle3d()')\n_make_global_funcs(_tg_turtle_functions, Turtle3d, 'Turtle3d._pen', 'Turtle3d()')\n\n_make_global_funcs(_tg_screen_functions, turtle.Screen, 'Turtle3d.screen', 'turtle.Screen()')\n"},63818:e=>{e.exports="from browser import document, window # type: ignore\nimport re\nimport sys\nimport time\nfrom config import Config # type: ignore\n\nhas_turtle_import = False\nlog_line_number_shift = 0\n\ndef notify(node_id, data):\n    event = window.CustomEvent.new('bry_notify', {'detail': data})\n    document[f'py_{node_id}'].dispatchEvent(event)\n\nclass EventOutput:\n    encoding = 'utf-8'\n\n    def __init__(self, node_id, out_type):\n        self.node_id = node_id\n        self.out_type = out_type\n        self.buf = ''\n\n    def write(self, data):\n        self.buf += str(data)\n        self.flush()\n\n    def flush(self):\n        if len(self.buf) > 0:\n            notify(self.node_id, {'type': self.out_type, 'output': self.buf})\n        self.buf = ''\n\n    def __len__(self):\n        return len(self.buf)\n\nclass Trace:\n    def __init__(self):\n        self.buf = \"\"\n\n    def write(self, *data):\n        self.buf += \" \".join([str(x) for x in data])\n\n    def format(self):\n        \"\"\"Remove calls to function in this script from the traceback.\"\"\"\n        return self.buf\n\ndef syntax_error(args):\n    trace = Trace()\n    info, [filename, lineno, offset, line, *extra] = args\n    line_nr = lineno - log_line_number_shift if lineno > 0 else 0\n\n    trace.write(f\"  File {filename}, line {line_nr}\\n\")\n    indent = len(line) - len(line.lstrip())\n    trace.write(\"    \" + line.strip() + \"\\n\")\n    nb_marks = 1\n    if extra:\n        end_lineno, end_offset = extra\n        if end_lineno > lineno:\n            nb_marks = len(line) - offset\n        else:\n            nb_marks = end_offset - offset\n    nb_marks = max(nb_marks, 1)\n    trace.write(\"    \" + (offset - 1) * \" \" + \"^\" * nb_marks + \"\\n\")\n    trace.write(\"SyntaxError:\", info, \"\\n\")\n    return trace.buf\n\ndef format_exc():\n    trace = Trace()\n    exc_info = sys.exc_info()\n    exc_class = exc_info[0].__name__  # type: ignore\n    exc_msg = str(exc_info[1])\n    tb = exc_info[2]\n    if exc_info[0] is SyntaxError:\n        return syntax_error(exc_info[1].args)  # type: ignore\n    trace.write(\"Traceback (most recent call last):\\n\")\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        name = code.co_name\n        filename = code.co_filename\n        line_nr = tb.tb_lineno - log_line_number_shift if tb.tb_lineno > 0 else 0\n        trace.write(f\"  File {filename}, line {line_nr}, in {name}\\n\")\n        if not filename.startswith(\"<\"):\n            src = open(filename, encoding='utf-8').read()\n            lines = src.split('\\n')\n            line = lines[tb.tb_lineno - 1]\n            trace.write(f\"    {line.strip()}\\n\")\n        tb = tb.tb_next\n    trace.write(f\"{exc_class}: {exc_msg}\\n\")\n    return trace.format()\n\ndef print_exc(file=None):\n    if file is None:\n        file = sys.stderr\n    trace = format_exc()\n    file.write(trace)\n    return trace\n\nTURTLE_IMPORTS = re.compile(r'(^from turtle import)|(^import turtle)|(^from turtle3d import)|(^import turtle3d)', re.M)\nGRID_IMPORTS = re.compile(r'(^from grid import)|(^import grid)', re.M)\nGRAPHICS_OUTPUT = re.compile(r'^(SETUP_)?GRAPHICS_OUTPUT\\s*=\\s*(True|1)', re.M)\nCANVAS_OUTPUT = re.compile(r'^(SETUP_)?CANVAS_OUTPUT\\s*=\\s*(True|1)', re.M)\nTURTLE_TEMPLATE = '''from browser import document\nimport turtle\nturtle.restart()\nturtle.set_defaults(\n  turtle_canvas_wrapper = document['{node_id}_graphics'],\n  turtle_canvas_id = '{node_id}_svg'\n)\n{py_script}\nturtle.done()\n'''\n\n\ndef run(code, node_id, line_shift):\n    global has_turtle_import, log_line_number_shift\n    has_turtle_import = not not TURTLE_IMPORTS.search(code)\n    log_line_number_shift = (7 if has_turtle_import else 0) + line_shift\n    Config.PYTHON_SOURCE = f'{node_id}_src'\n    if CANVAS_OUTPUT.search(code) or GRID_IMPORTS.search(code):\n        Config.CANVAS_ID = f'{node_id}_canvas'\n    if GRAPHICS_OUTPUT.search(code):\n        Config.GRAPHICS_ID = f'{node_id}_graphics'\n    py_script = TURTLE_TEMPLATE.format(node_id=node_id, py_script=code) if has_turtle_import else code\n\n    sys.stdout = EventOutput(node_id, 'stdout')\n    sys.stderr = EventOutput(node_id, 'stderr')\n    notify(node_id, {'type': 'start', 'time': time.time()})\n    try:\n        res_div = f'{node_id}_brython_result'\n        document[res_div].clear()\n        ns = {'__name__': node_id, 'RESULT_DIV': document[res_div]}\n        loc = {}\n        exec(py_script, ns)\n        # if len(code.splitlines()) < 10:\n        #    print('  --', '\\n'.join([f'{x}: {loc[x]}' for x in loc.keys() if not x.startswith('__')]))\n    except Exception as exc:\n        print_exc(file=sys.stderr)\n    finally:\n        notify(node_id, {'type': 'done', 'time': time.time()})\n    \n    sys.stdout.flush()\n    sys.stderr.flush()\n"}}]);