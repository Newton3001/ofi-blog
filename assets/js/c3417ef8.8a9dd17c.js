"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[64565],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>N});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),o=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},d=function(e){var n=o(e.components);return a.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=o(t),N=r,k=c["".concat(s,".").concat(N)]||c[N]||l[N]||i;return t?a.createElement(k,m(m({ref:n},d),{},{components:t})):a.createElement(k,m({ref:n},d))}));function N(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,m=new Array(i);m[0]=c;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,m[1]=p;for(var o=2;o<i;o++)m[o]=t[o];return a.createElement.apply(null,m)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},99317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>m,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var a=t(83117),r=(t(67294),t(3905));const i={sidebar_custom_props:{id:"de38c04c-c7b6-4565-8778-dffc4686b4c2",ref:"https://gitlab.gbsl.website/gymbefin23/material/-/snippets/11"}},m="Listen Erzeugen",p={unversionedId:"Programmieren/Python/Listcomprehension",id:"version-24ef/Programmieren/Python/Listcomprehension",title:"Listen Erzeugen",description:"Oft w\xfcnscht man Listen, welche schon mit bestimmten Werten abgef\xfcllt sind, man sagt initialisiert sind.",source:"@site/versioned_docs/version-24ef/01-Programmieren/04-Python/03-Listcomprehension.md",sourceDirName:"01-Programmieren/04-Python",slug:"/Programmieren/Python/Listcomprehension",permalink:"/24ef/Programmieren/Python/Listcomprehension",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/tree/main/docs",tags:[],version:"24ef",sidebarPosition:3,frontMatter:{sidebar_custom_props:{id:"de38c04c-c7b6-4565-8778-dffc4686b4c2",ref:"https://gitlab.gbsl.website/gymbefin23/material/-/snippets/11"}},sidebar:"version-24ef/sidebar",previous:{title:"Listen 2D",permalink:"/24ef/Programmieren/Python/Listen-2D"},next:{title:"Referenzen",permalink:"/24ef/Programmieren/Python/referenzen/"}},s={},o=[{value:"Listen mit <code>range</code> erzeugen",id:"listen-mit-range-erzeugen",level:3},{value:"Listen mit <em>List Comprehension</em> erzeugen",id:"listen-mit-list-comprehension-erzeugen",level:3}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},l=d("Comment"),c=d("Answer"),N=d("Solution"),k={toc:o};function g(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"commentable"},(0,r.kt)("h1",{parentName:"div",id:"listen-erzeugen"},"Listen Erzeugen"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,r.kt)("admonition",{type:"aufgabe"},(0,r.kt)(c,{type:"state",webKey:"a4fb080a-8feb-443d-bf2d-5d7ddc92f685",mdxType:"Answer"}),"Oft w\xfcnscht man Listen, welche schon mit bestimmten Werten abgef\xfcllt sind, man sagt initialisiert sind.",(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Unten sehen Sie ein paar hilfreiche Beispiele. F\xfchren Sie diese aus und bearbeiten Sie die Aufgabe."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:0,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Markieren Sie anschliessend diese Aufgabe als erledigt."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:1,mdxType:"Comment"}))),(0,r.kt)("div",{className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Hier sehen Sie, wie man auf einfache Art und Weise eine Liste erzeugen und gleich mit bestimmten Werten f\xfcllen kann, man sagt ",(0,r.kt)("strong",{parentName:"p",className:"underline"},"intialisieren"),". Der Teil zwischen den ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," wird als Listen-Abstraktion (englisch ",(0,r.kt)("strong",{parentName:"p"},"list comprehension"),") bezeichnet."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:2,mdxType:"Comment"})),(0,r.kt)("div",{className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"listen-mit-range-erzeugen"},"Listen mit ",(0,r.kt)("inlineCode",{parentName:"h3"},"range")," erzeugen"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Mit dem von Schleifen bekannten ",(0,r.kt)("inlineCode",{parentName:"p"},"range")," Befehl k\xf6nnen auch Listen erzeugt werden."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:3,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("dl",{parentName:"div"},(0,r.kt)("dt",{parentName:"dl"},(0,r.kt)("inlineCode",{parentName:"dt"},"range(max_zahl)")),(0,r.kt)("dd",{parentName:"dl"},"erzeugt einen Bereich von ",(0,r.kt)("inlineCode",{parentName:"dd"},"0")," bis (ohne mit!) ",(0,r.kt)("inlineCode",{parentName:"dd"},"max_zahl")),(0,r.kt)("dd",{parentName:"dl"},"z.B. ",(0,r.kt)("inlineCode",{parentName:"dd"},"range(5)")," => ",(0,r.kt)("inlineCode",{parentName:"dd"},"0, 1, 2, 3, 4")),(0,r.kt)("dt",{parentName:"dl"},(0,r.kt)("inlineCode",{parentName:"dt"},"range(start, m)")),(0,r.kt)("dd",{parentName:"dl"},"erzeugt einen Bereich von ",(0,r.kt)("inlineCode",{parentName:"dd"},"start")," bis (ohne mit!) ",(0,r.kt)("inlineCode",{parentName:"dd"},"m")),(0,r.kt)("dd",{parentName:"dl"},"z.B. ",(0,r.kt)("inlineCode",{parentName:"dd"},"range(3, 7)")," => ",(0,r.kt)("inlineCode",{parentName:"dd"},"3, 4, 5, 6")),(0,r.kt)("dt",{parentName:"dl"},(0,r.kt)("inlineCode",{parentName:"dt"},"range(s, m, schritt)")),(0,r.kt)("dd",{parentName:"dl"},"erzeugt einen Bereich von ",(0,r.kt)("inlineCode",{parentName:"dd"},"s")," bis (ohne mit!) ",(0,r.kt)("inlineCode",{parentName:"dd"},"m")," mit der gegebenen Schrittweite ",(0,r.kt)("inlineCode",{parentName:"dd"},"schritt")),(0,r.kt)("dd",{parentName:"dl"},"z.B. ",(0,r.kt)("inlineCode",{parentName:"dd"},"range(3, 13, 4)")," => ",(0,r.kt)("inlineCode",{parentName:"dd"},"3, 7, 11"))),(0,r.kt)(l,{parentName:"div",type:"deflist",nr:0,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Um aus einem Bereich (sog. ",(0,r.kt)("inlineCode",{parentName:"p"},"Iterator"),") eine Liste zu erzeugen, muss der Bereich mit dem Befehl ",(0,r.kt)("inlineCode",{parentName:"p"},"list()")," in eine Liste umgewandelt werden:"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:4,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"one2ten = list(range(1, 11))\nprint('1 bis 10:', one2ten)\n\nodd_numbers = list(range(1, 20, 2))\nprint('Ungerade Zahlen:', odd_numbers)\n\nten2zero = list(range(10, -1, -1))\nprint('Von Zehn r\xfcckw\xe4rts:', ten2zero)\n"))),(0,r.kt)("div",{className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"listen-mit-list-comprehension-erzeugen"},"Listen mit ",(0,r.kt)("em",{parentName:"h3"},"List Comprehension")," erzeugen"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:2,mdxType:"Comment"})),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"liste-mit-1-initialisieren"},"Liste mit ",(0,r.kt)("inlineCode",{parentName:"h3"},"1")," initialisieren"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:3,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Liste mit 10 Elementen. Alle enthalten den Wert 1."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:5,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"# Wert 1 in Liste setzen\n#     \\    ...f\xfcr alle Zahlen im Bereich 0 bis 10\n#      \\       /\nones = [1 for i in range(10)]\nprint(ones)\n"))),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"zahlen-von-0-bis-9"},"Zahlen von 0 bis 9"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:4,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Liste mit den Zahlen 0 bis 9 initialisieren:"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:6,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"#  Aktuellen Wert des Schleifenz\xe4hlers i setzen\n#       \\    ...f\xfcr alle Zahlen im Bereich 0 bis 10\n#        \\       /\nzahlen = [i for i in range(10)]\nprint(zahlen)\n"))),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"gerade-zahlen"},"Gerade Zahlen"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:5,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Liste mit 10 geraden Zahlen, beginnend bei 0."),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:7,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"gerade_zahlen = [2*i for i in range(10)]\nprint(gerade_zahlen)\n"))),(0,r.kt)("admonition",{type:"aufgabe"},(0,r.kt)(c,{type:"state",webKey:"306506df-f70e-4325-a3fd-30430288c666",mdxType:"Answer"}),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Initialisieren Sie mit ",(0,r.kt)("em",{parentName:"p"},"List Comprehension")," eine Liste mit den"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:8,mdxType:"Comment"})),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("div",{parentName:"li",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"ersten zehn Quadratzahlen"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:9,mdxType:"Comment"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("div",{parentName:"li",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"ersten zehn Zweierpotenzen"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:10,mdxType:"Comment"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("div",{parentName:"li",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"die Zweierpotenzen von ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"2"),(0,r.kt)("mn",{parentName:"msup"},"100"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^{100}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))))))))))," bis ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"2"),(0,r.kt)("mn",{parentName:"msup"},"110"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^{110}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"2"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))))))))))))),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:11,mdxType:"Comment"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("div",{parentName:"li",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"die nat\xfcrlichen Zahlen r\xfcckw\xe4rts von 20 bis und mit 10"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:12,mdxType:"Comment"})))),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py id=ab9518d2-b113-41da-9d1f-cd48f475c1fc",live_py:!0,id:"ab9518d2-b113-41da-9d1f-cd48f475c1fc"},"squares = [] # initialisierung anpassen!\npower2 = []\npower2_100 = []\ntwenty2ten = []\n\nprint(squares)\nprint(power2)\nprint(power2_100)\nprint(twenty2ten)\n")),(0,r.kt)(N,{webKey:"b54e6cc1-6863-4bcc-86a7-bfeb328b2a7b",mdxType:"Solution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"squares = [x*x for x in range(10)]\npower2 = [2**x for x in range(10)]\npower2_100 = [2**(x+100) for x in range(10)]\ntwenty2ten = [20 - x for x in range(11)]\n\nprint(squares)\nprint(power2)\nprint(power2_100)\nprint(twenty2ten)\n")))),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"5x10-matrix"},(0,r.kt)("inlineCode",{parentName:"h3"},"5x10"),"-Matrix"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:6,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"5x10"),"-Matrix von lauter ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," (5 Zeilen, 10 Spalten)"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:13,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"_print = print\ndef print(mat):\n    if type(mat).__name__ != 'list' or len(mat) < 1 or type(mat[0]).__name__ != 'list':\n        return _print(mat)\n    max_val = max([max(z) for z in mat])\n    pad_sz = len(str(max_val))\n    _print('['); [_print(f'  [{\", \".join(list(map(lambda v: str(v).rjust(pad_sz, \" \"), z)))}],') for z in mat]; _print(']')\n### PRE\nzeros_5x10 = [\n    [0 for j in range(10)] for i in range(5)\n]\nprint(zeros_5x10)\n"))),(0,r.kt)("admonition",{type:"def"},(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("h3",{parentName:"div",id:"5x10-matrix-durchnummeriert"},(0,r.kt)("inlineCode",{parentName:"h3"},"5x10"),"-Matrix, Durchnummeriert"),(0,r.kt)(l,{parentName:"div",type:"heading",nr:7,mdxType:"Comment"})),(0,r.kt)("div",{parentName:"admonition",className:"commentable"},(0,r.kt)("p",{parentName:"div"},"Elemente haben aufsteigende Werte, beginnend bei ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".\nDer"),(0,r.kt)(l,{parentName:"div",type:"paragraph",nr:14,mdxType:"Comment"})),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"_print = print\ndef print(mat):\n    if type(mat).__name__ != 'list' or len(mat) < 1 or type(mat[0]).__name__ != 'list':\n        return _print(mat)\n    max_val = max([max(z) for z in mat])\n    pad_sz = len(str(max_val))\n    _print('['); [_print(f'  [{\", \".join(list(map(lambda v: str(v).rjust(pad_sz, \" \"), z)))}],') for z in mat]; _print(']')\n### PRE\nmatrix = [\n    [i * 10 + j for j in range(10)] for i in range(5)\n]\nprint(matrix)\n"))))}g.isMDXComponent=!0}}]);