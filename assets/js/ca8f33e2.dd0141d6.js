"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[96903],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>N});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),o=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},s=function(e){var n=o(e.components);return a.createElement(d.Provider,{value:n},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=o(t),k=i,N=l["".concat(d,".").concat(k)]||l[k]||c[k]||r;return t?a.createElement(N,m(m({ref:n},s),{},{components:t})):a.createElement(N,m({ref:n},s))}));function N(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,m=new Array(r);m[0]=k;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p[l]="string"==typeof e?e:i,m[1]=p;for(var o=2;o<r;o++)m[o]=t[o];return a.createElement.apply(null,m)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},92636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>v,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_custom_props:{id:"131a3f92-27cd-437e-954c-e7856359c6e9"}},m="Strings",p={unversionedId:"Programmieren/Python/strings",id:"version-24ef/Programmieren/Python/strings",title:"Strings",description:"Texte in Python k\xf6nnen auf unterschiedliche Art und weise erzeugt werden.",source:"@site/versioned_docs/version-24ef/01-Programmieren/04-Python/13-strings.md",sourceDirName:"01-Programmieren/04-Python",slug:"/Programmieren/Python/strings",permalink:"/24ef/Programmieren/Python/strings",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/tree/main/docs",tags:[],version:"24ef",sidebarPosition:13,frontMatter:{sidebar_custom_props:{id:"131a3f92-27cd-437e-954c-e7856359c6e9"}},sidebar:"version-24ef/sidebar",previous:{title:"Python Scopes",permalink:"/24ef/Programmieren/Python/scopes"},next:{title:"Umgang mit Fehlern",permalink:"/24ef/Programmieren/Python/try-except"}},d={},o=[{value:"Ver\xe4nderbarkeit (Mutability)",id:"ver\xe4nderbarkeit-mutability",level:2},{value:"Auf Buchstaben zugreifen",id:"auf-buchstaben-zugreifen",level:2},{value:"\xdcber Buchstaben iterieren",id:"\xfcber-buchstaben-iterieren",level:3},{value:"\xdcberpr\xfcfen, ob ein Textteil in einem String vorkommt",id:"\xfcberpr\xfcfen-ob-ein-textteil-in-einem-string-vorkommt",level:3},{value:"Kurzaufgaben",id:"kurzaufgaben",level:3},{value:"Methoden von Strings",id:"methoden-von-strings",level:2},{value:"Inhalt Untersuchen",id:"inhalt-untersuchen",level:2},{value:"Inhalt ver\xe4ndern",id:"inhalt-ver\xe4ndern",level:2},{value:"Strings und Listen",id:"strings-und-listen",level:2}],s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},l=s("Comment"),c=s("Answer"),k=s("Hint"),N=s("Solution"),h={toc:o},g="wrapper";function v(e){let{components:n,...t}=e;return(0,i.kt)(g,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h1",{parentName:"div",id:"strings"},"Strings"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Texte in Python k\xf6nnen auf unterschiedliche Art und weise erzeugt werden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:0,mdxType:"Comment"})),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"text-text"},(0,i.kt)("inlineCode",{parentName:"h3"},"'text'"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},'"text"')),(0,i.kt)(l,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"ob einfache- ",(0,i.kt)("inlineCode",{parentName:"p"},"'")," oder doppelte ",(0,i.kt)("inlineCode",{parentName:"p"},'"')," Anf\xfchrungszeichen: Beides ist gleichbedeutend!"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:1,mdxType:"Comment"}))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"f-f-formatierter-text"},(0,i.kt)("inlineCode",{parentName:"h3"},"f''"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},'f""')," Formatierter Text"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:2,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Formatierter Text kann mehrere Texte zusammenf\xfcgen und dabei auch Zahlen oder Listen einf\xfcgen. Inhalt in geschweiften Klammern wird zuerst ausgewertet und dann dort abgedruckt."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:2,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"name = 'Maria'\njahrgang = 1999\nprint(f'Hallo {name}, du bist heute {2022 - jahrgang} Jahre alt')\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"--f-f-mehrzeiliger-text"},(0,i.kt)("inlineCode",{parentName:"h3"},"'''"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},'"""'),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"f'''"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},'f"""')," Mehrzeiliger Text"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:3,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"M\xf6chte man Text \xfcber mehrere Zeilen schreiben, kann entweder das Zeichen f\xfcr eine neue Zeile (",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),") verwendet werden, oder ein mehrzeiligen String mit ",(0,i.kt)("inlineCode",{parentName:"p"},"'''"),"  oder ",(0,i.kt)("inlineCode",{parentName:"p"},'"""')," starten. Ebenso k\xf6nnen mehrzeilige formatierte Bl\xf6cke aussehen. "),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:3,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"for name in ['Omi', 'Maria', 'Mami und Papi']:\n    brief = f'''Hallo {name}\n\nIch bin in den Ferien und geniesse es.\n\nLiebe Gr\xfcsse,\nReto'''\n    print(brief)\n    print('----------')\n")),(0,i.kt)("admonition",{parentName:"admonition",title:"Mehrzeilige Kommentare",type:"info"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Manchmal w\xfcnscht man sich einen Kommentar \xfcber mehrere Zeilen zu schreiben, ohne immer ein ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),' am Beginn der Zeile zu schreiben. In anderen Sprachen gibt es spezielle "Start-" und "End-Kommentar" Zeichen, so dass auch mehrere Zeilen auskommentiert werden k\xf6nnen. (Bspw. um eine ganze Funktion auszukommentieren...). In Python gibt es dies nicht. Es kann aber aus dem kommentierten Code Text gemacht werden, so dass dieser nicht ausgef\xfchrt (aber auch nirgends in eine Variable gespeichert) wird.'),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:4,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",style:{},className:"flex flex-cards"},(0,i.kt)("div",{parentName:"div",style:{},className:"item card"},(0,i.kt)("div",{parentName:"div",style:{},className:"card__image code__card card__body"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"from math import sqrt\n\n'''\ndef sqrt(zahl):\n    # berechnet die Quadratwurzel\n    return zahl ** 0.5\n'''\nprint('Wurzel 2 = ', sqrt(2))\n")))),(0,i.kt)("div",{parentName:"div",style:{},className:"item card"},(0,i.kt)("div",{parentName:"div",style:{},className:"card__body"},(0,i.kt)("div",{parentName:"div",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Beispiel"),": Urspr\xfcnglich wurde die Funktion ",(0,i.kt)("inlineCode",{parentName:"p"},"sqrt")," selber implementiert. Nun brauchen Sie diese vermutlich nicht mehr, das diese aus der Bibliothek ",(0,i.kt)("inlineCode",{parentName:"p"},"math")," importiert wird. Vorerst wollen Sie die eigene Funktion aber noch nicht l\xf6schten ",(0,i.kt)("i",{parentName:"p",className:"mdi-arrow-right mdi "})," vorerst ",(0,i.kt)("strong",{parentName:"p"},"kommentieren")," Sie diese."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:5,mdxType:"Comment"}))))))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"ver\xe4nderbarkeit-mutability"},"Ver\xe4nderbarkeit (Mutability)"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:4,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Wie im Kapitel ",(0,i.kt)("a",{parentName:"p",href:"/24ef/Programmieren/Python/referenzen/"},"Referenzen")," besprochen, haben wir unsere Vorstellung des Speichermodells in Python soweit aktualisiert, dass der Computer f\xfcr Variablen eine Etikette erstellt, die auf eine Speicherstelle zeigt, an welcher dann der effektive Wert gespeichert ist."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:6,mdxType:"Comment"})),(0,i.kt)("div",{style:{},className:"flex flex-flex"},(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("div",{parentName:"div",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Der Python Code..."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:7,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"a = 'das ist mein string'\n"))),(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("div",{parentName:"div",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"... kann dargestellt werden als"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:8,mdxType:"Comment"})),(0,i.kt)("mermaid",{parentName:"div",value:"graph LR\n  a ----\x3e c('das ist mein string')"}))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"In Python gibt es unterschiedliche Sammel-Datentypen, daher Daten, die unterschiedlich gross sein k\xf6nnen - Texte und Listen haben wir bereits kennengelernt, Dictionaries und Sets sind weitere."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:9,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Dabei macht Python einen grundlegenden Unterschied zwischen Ver\xe4nderbaren- (",(0,i.kt)("em",{parentName:"p"},"Mutable"),") und Nicht-Ver\xe4nderbaren (",(0,i.kt)("em",{parentName:"p"},"Immutable"),") Datentypen. Bei ver\xe4nderbaren Datentypen k\xf6nnen nach der Erzeugung und Zuweisung \xc4nderungen an den zugrundeliegenden Speicherstellen vorgenommen werden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:10,mdxType:"Comment"})),(0,i.kt)("admonition",{title:"Listen vs. Tupel",type:"info"},(0,i.kt)("div",{parentName:"admonition",style:{},className:"flex flex-flex"},(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("div",{parentName:"div",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Bei ",(0,i.kt)("strong",{parentName:"p"},"Listen")," k\xf6nnen nach dem Erzeugen einzelne Listenwerte ver\xe4ndert, oder gar neue Werte hinzugef\xfcgt oder entfernt werden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:11,mdxType:"Comment"}))),(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"a = [1, 2, 3] # Liste initialisieren\na.append(4)   # 4 hinzuf\xfcgen\na.pop(0)      # vorderstes Element entfernen\na[0] = 5      # erste Stelle auf 5 setzen\nprint(a)\n")))),(0,i.kt)("div",{parentName:"admonition",style:{},className:"flex flex-flex"},(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("div",{parentName:"div",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Im Gegensatz dazu gibt es das ",(0,i.kt)("strong",{parentName:"p"},"unver\xe4nderbare")," \xc4quivalent dazu: ",(0,i.kt)("strong",{parentName:"p"},"Tupel"),". Einmal initialisiert, lassen sich dessen Werte nur noch lesen, jedoch nicht mehr ver\xe4ndern. Tupel werden im Gegensatz zu Listen mit runden Klammern erzeugt (initialisiert)."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:12,mdxType:"Comment"}))),(0,i.kt)("div",{parentName:"div",style:{flexBasis:"200px"},className:"item"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"a = (1, 2, 3) # Tupel - eine unver\xe4nderbare Liste\nprint(a)\na.append(4)   # FEHLER!\na.pop(0)      # FEHLER!\na[0] = 5      # FEHLER!\n"))))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Eine \xdcbersicht \xfcber die g\xe4ngigen Datentypen in Python zeigt deren Ver\xe4nderbarkeit ",(0,i.kt)("strong",{parentName:"p"},"nach")," der Initialisierung. "),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:13,mdxType:"Comment"})),(0,i.kt)("mermaid",{value:"graph TD\n    A(<font size=6><i class='mdi mdi-language-python'/> Datentypen</font>) --\x3e B(\"<i class='mdi mdi-form-textbox-lock'/>\" Immutable)\n    A --\x3e b(\"<i class='mdi mdi-form-textbox'/>\" Mutable)\n    B --\x3e Z(Bool)\n    Z --\x3e Y(True)\n    Z --\x3e N(False)\n    B --\x3e C(Zahlen)\n    C --\x3e D(float)\n    C --\x3e E(int)\n    B --\x3e F(Strings)\n    B --\x3e G(Tuples)\n    b --\x3e c(Listen)\n    b --\x3e d(Dictionary)\n    b --\x3e e(Sets)\n    style A font-size:150%\n    style B stroke:#d8640c,fill:white,color:black,stroke-width:3px\n    style Z fill:#d8640c,color:white\n    style Y fill:#d8640c,color:white\n    style N fill:#d8640c,color:white\n    style C fill:#d8640c,color:white\n    style D fill:#d8640c,color:white\n    style E fill:#d8640c,color:white\n    style F fill:#d8640c,color:white\n    style G fill:#d8640c,color:white\n    style b stroke:#3578e5,fill:white,color:black,stroke-width:3px\n    style c fill:#3578e5,color:white\n    style d fill:#3578e5,color:white\n    style e fill:#3578e5,color:white"}),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Strings sind also auch immutable - es ist daher nicht m\xf6glich, deren Werte direkt zu ver\xe4ndern."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:14,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"auf-buchstaben-zugreifen"},"Auf Buchstaben zugreifen"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:5,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Wie bei Listen, lassen sich auch hier einzelne Buchstaben gezielt abrufen"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:15,mdxType:"Comment"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = 'Maria'\nprint(vorname[0]) # erster Buchstabe\nprint(vorname[-1]) # letzter Buchstabe\n")),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"strstartendeschrittweite-zugriff"},(0,i.kt)("inlineCode",{parentName:"h3"},"str[start:ende:schrittweite]")," Zugriff"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:6,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Es ist auch m\xf6glich, einen Bereich anzugeben. Wie beim ",(0,i.kt)("inlineCode",{parentName:"p"},"range()")," Befehl, gibt man den Startwert und die obere Grenze an, die aber selber nicht erreicht wird."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:16,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = 'Reto'\nprint(vorname[0:2]) # Buchstaben von 0 bis (ohne mit!) 2 Buchstaben\nprint(vorname[0:3]) # Buchstaben von 0 bis (ohne mit!) 3 Buchstaben\n")),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h4",{parentName:"div",id:"alle-buchstaben-ausser-der-erste"},"Alle Buchstaben ausser der erste"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:7,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = 'Reto'\nprint(vorname[1:5]) # entweder explizit \"L\xe4nge + 1\" angeben\nprint(vorname[1:])  # oder das Ende nicht angeben = bis zum Schluss\n")),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h4",{parentName:"div",id:"jeder-zweite-buchstabe"},"Jeder zweite Buchstabe"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:8,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Oder nur jeden zweiten Buchstaben"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:17,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"namen = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(namen[0::2]) # Bemerke: der Endwert wird nicht angegeben = bis zum Schluss fortfahren...\n")),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"oder ",(0,i.kt)("strong",{parentName:"p"},"r\xfcckw\xe4rts")," ",(0,i.kt)("i",{parentName:"p",className:"mdi-emoticon-cool-outline mdi "})),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:18,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = 'Reto'\n# Start beim letzten Buchstaben (-1)\n# Bis zum Ende der Textkette (Weglassen)\n# Schritt zum n\xe4chsten Buchstaben: -1\nprint(vorname[-1::-1]) \n"))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"\xfcber-buchstaben-iterieren"},"\xdcber Buchstaben iterieren"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:9,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Es kann auch \xfcber alle Buchstaben in einem String iteriert werden:"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:19,mdxType:"Comment"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"name = 'Maria'\nfor buchstabe in name:\n    print(buchstabe, end='\u2b50')\n")),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"\xfcberpr\xfcfen-ob-ein-textteil-in-einem-string-vorkommt"},"\xdcberpr\xfcfen, ob ein Textteil in einem String vorkommt"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:10,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Mit ",(0,i.kt)("inlineCode",{parentName:"p"},"in")," kann \xfcberpr\xfcft werden, ob ein String in einem anderen vorkommt."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:20,mdxType:"Comment"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"passwort = '$uperman#1'\nif '$' in passwort:\n    print('Enth\xe4lt $')\nelse:\n    print('Kein Geld')\n")),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"kurzaufgaben"},"Kurzaufgaben"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:11,mdxType:"Comment"})),(0,i.kt)("admonition",{title:"1.",type:"aufgabe"},(0,i.kt)(c,{type:"state",webKey:"c0ca7471-ffb2-4082-8d71-914cdc2fa942",mdxType:"Answer"}),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Erkl\xe4ren Sie, was die Programmierer:in hier erreichen wollten, und weshalb aber ein Fehler entsteht."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:21,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"name = 'jimmy'\nname[0] = 'J'\nprint(name)\n")),(0,i.kt)(c,{type:"text",webKey:"d0f2db5e-be9c-45ff-a056-c9f57975f7bb",mdxType:"Answer"})),(0,i.kt)("admonition",{title:"2.",type:"aufgabe"},(0,i.kt)(c,{type:"state",webKey:"218186b9-2c66-47af-98ad-08c54276934d",mdxType:"Answer"}),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("div",{parentName:"blockquote",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Why are humans known to be extremely afraid of computers?")),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:22,mdxType:"Comment"}))),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Die Antwort finden Sie, indem Sie, startend beim 3. Buchstaben, jeden 13 Buchstaben ausgeben. Versuchen Sie, die korrekte Zugriffs-Methode zu verwenden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:23,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py id=eeecc8c9-b055-4b86-9037-df97a554da6e title=riddle.py",live_py:!0,id:"eeecc8c9-b055-4b86-9037-df97a554da6e",title:"riddle.py"},"joke = 'nuPLSGJwVLMtirKryXiBwBu!JcTtoSRBppmvstCTjbXACQXVFDQSVjaGPNsSDKVNIwhbczEg!B UtAgZlFmFGgwFrOm,WyDfO,qUksDgSe,.SROAMzvhTDA .xyyDTP!myzQbFDCcfHTTwA,EecYrlbCTj,dbAcJFcnWoWFuz .anNFdVrWapauRudWtfFBLuzX!kspOrgrKyf.wXieCpI ZpmMamTn xoQfMYFsbwRhtoj MsDaEuGeWhIqetWHzV YpdepptwPMnlwULsycWvctXTdzeCv GjFgzPBRLoLnbaepuVw,l?EyByDi, ,ERD!ehLt!XmI??AWsxTaeeoShEC .Bk.S!KIQBMyM.ID'\nprint(joke)\n")),(0,i.kt)(k,{mdxType:"Hint"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Der 3. Buchstabe ist das ",(0,i.kt)("inlineCode",{parentName:"p"},"P")," in der Liste und kann mit ",(0,i.kt)("inlineCode",{parentName:"p"},"joke[2]")," abgefragt werden."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:24,mdxType:"Comment"})))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"methoden-von-strings"},"Methoden von Strings"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:12,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Im folgenden werden diverse Methoden im Umgang mit Strings vorgestellt. Wichtig dabei zu beachten ist die Terminologie. Betrachten Sie das folgende Beispiel:"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:25,mdxType:"Comment"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"index_von_welt = 'hallo, welt'.find('welt')\n")),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Hier wird die ",(0,i.kt)("strong",{parentName:"p"},"Methode")," ",(0,i.kt)("inlineCode",{parentName:"p"},".find()")," ",(0,i.kt)("em",{parentName:"p"},"auf den String")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'hallo, welt'")," aufgerufen, wobei der Kontext durch den String selbst gegeben ist. Dies ist der ",(0,i.kt)("strong",{parentName:"p"},"Unterschied")," von Methoden zu Funktionen: Funktionen kennen keinen Kontext, alles muss mit Parametern \xfcbergeben werden (bspw. bei ",(0,i.kt)("inlineCode",{parentName:"p"},"len()")," muss der String \xfcbergeben werden: ",(0,i.kt)("inlineCode",{parentName:"p"},"len('Hallo, Welt')"),"). Die Methode ",(0,i.kt)("inlineCode",{parentName:"p"},".find()")," ist hier eine vom Objekt ",(0,i.kt)("em",{parentName:"p"},"String"),' zur Verf\xfcgung gestellte "Funktion", die den eigenen Wert kennt und auf sich aufgerufen wird.'),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:26,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"inhalt-untersuchen"},"Inhalt Untersuchen"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:13,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Diese Methoden bieten Hilfestellung, wenn wir eine spezifische Information \xfcber einen String haben wollen."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:27,mdxType:"Comment"})),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"startswithwort"},(0,i.kt)("inlineCode",{parentName:"h3"},".startswith(wort)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:14,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Beantwortet die Frage ob ein String mit einem ",(0,i.kt)("inlineCode",{parentName:"p"},"wort")," (oder auch nur einem Buchstaben) ",(0,i.kt)("strong",{parentName:"p"},"beginnt")," mit einem Boolean."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:28,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Achtung"),": Gross- Kleinschreibung."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:29,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"a = 'Hallo'\nprint(a.startswith('H'))\nprint(a.startswith('h'))\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"endswithwort"},(0,i.kt)("inlineCode",{parentName:"h3"},".endswith(wort)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:15,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Beantwortet die Frage ob ein String mit einem ",(0,i.kt)("inlineCode",{parentName:"p"},"wort")," (oder auch nur einem Buchstaben) ",(0,i.kt)("strong",{parentName:"p"},"endet")," mit einem Boolean."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:30,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Achtung"),": Gross- Kleinschreibung."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:31,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"a = 'Hallo! '\nprint(a.endswith('!'))\nprint(a.endswith(' ')) # auch Leerzeichen sind Zeichen!\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"isalpha"},(0,i.kt)("inlineCode",{parentName:"h3"},".isalpha()")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:16,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Beantwortet die Frage, ob ein String ",(0,i.kt)("strong",{parentName:"p"},"nur aus Buchstaben")," besteht mit einem Boolean."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:32,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"passwort = 'p4sswort'\nif passwort.isalpha():\n    print('Schlechtes PW')\nelse:\n    print('Gutes PW')\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"isnumeric"},(0,i.kt)("inlineCode",{parentName:"h3"},".isnumeric()")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:17,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Beantwortet die Frage, ob ein String ",(0,i.kt)("strong",{parentName:"p"},"nur aus Zahlen")," besteht mit einem Boolean."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:33,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"tel = '0797001234'\nif tel.isnumeric():\n    print('K\xf6nnte Telefonnummer sein')\nelse:\n    print('M\xe4\xe4h, keine Telefonnummer :(')\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"findwort"},(0,i.kt)("inlineCode",{parentName:"h3"},".find(wort)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:18,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Findet ein ",(0,i.kt)("inlineCode",{parentName:"p"},"wort")," im String und gibt den Startindex des erstmaligen Auftretens zur\xfcck. Bei ",(0,i.kt)("inlineCode",{parentName:"p"},"'Hallo'.find('l')")," w\xe4re dies also der Startindex ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", da bei ",(0,i.kt)("inlineCode",{parentName:"p"},"'Hallo'[2]")," erstmalig ein ",(0,i.kt)("inlineCode",{parentName:"p"},"l")," vorkommt."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:34,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Wird das ",(0,i.kt)("inlineCode",{parentName:"p"},"wort")," nicht gefunden, so gibt die Method ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," zur\xfcck."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:35,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"passwort = 'p4ssw*rt'\nstern_index = passwort.find('*')\nif stern_index >= 0:\n    print('Passwort hat ein * Zeichen')\nelse:\n    print('Passwort hat kein * Zeichen')\n"))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"inhalt-ver\xe4ndern"},"Inhalt ver\xe4ndern"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:19,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Wie vorhin festgestellt, sind Strings ",(0,i.kt)("strong",{parentName:"p"},"immutable"),", k\xf6nnen daher nicht ver\xe4ndert werden. Um dennoch m\xf6glichst einfach Operationen auf Texten auszuf\xfchren, wie etwa alles gross- oder kleinzuschreiben, gibt es Methoden, welche einen ver\xe4nderten String zur\xfcckgeben, sich selber aber nicht ver\xe4ndern."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:36,mdxType:"Comment"})),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"upper"},(0,i.kt)("inlineCode",{parentName:"h3"},".upper()")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:20,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Schreibt den String in Grossbuchstaben, Sonderzeichen werden nicht ver\xe4ndert."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:37,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"original = 'Alles Grossbuchstaben im Titel!'\ngross = original.upper()\nprint(original, gross)\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"lower"},(0,i.kt)("inlineCode",{parentName:"h3"},".lower()")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:21,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Schreibt den String in Kleinbuchstaben, Sonderzeichen werden nicht ver\xe4ndert."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:38,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"original = 'Alles Kleinbuchstaben in der Fusszeile!'\nklein = original.lower()\nprint(original, klein)\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"stripzeichen"},(0,i.kt)("inlineCode",{parentName:"h3"},".strip(<zeichen>)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:22,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Entfernt jeglichen ",(0,i.kt)("em",{parentName:"p"},"White-Space"),' ("weisse Zeichen", daher Leerschl\xe4ge, Tabulatoren, Neue Zeilen)  entfernt Leerschl\xe4ge am Start und Ende des Strings. '),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:39,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = '''   \nMaria     \n\n'''\nprint(vorname)\nvorname = vorname.strip()\nprint('Vorname:', vorname)\n")),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Optional")," k\xf6nnen mit einem Parameter auch die Zeichen angegeben werden, welche am Start und Ende entfernt werden sollen. Auch die Zeichen der Standardoption (wenn also keine Optionen angegeben werden), m\xfcssen spezifiziert werden (Leerzeichen, neue Zeile ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),", Tabulator ",(0,i.kt)("inlineCode",{parentName:"p"},"\\t"),")"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:40,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"vorname = '''!!!\n\n# Reto \n# \n# '''\nprint(vorname)\nvorname = vorname.strip(' \\n\\t!#')\nprint('Vorname:', vorname)\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"replacewort-ersetzen"},(0,i.kt)("inlineCode",{parentName:"h3"},".replace(wort, ersetzen)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:23,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Ersetzt ",(0,i.kt)("strong",{parentName:"p"},"alle")," ",(0,i.kt)("inlineCode",{parentName:"p"},"wort"),"e im String mit dem Parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"ersetzen"),"."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:41,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Achtung"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"ersetzen")," muss auch ein String sein, ",(0,i.kt)("inlineCode",{parentName:"p"},".replace('f\xfcnf', 5)")," gibt einen Fehler."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:42,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"text = '''I'm at home at four or five'''\ntext = text.replace('at', '@')\ntext = text.replace('home', '\ud83c\udfda\ufe0f')\ntext = text.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4')\ntext = text.replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9')\nprint(text)\n"))),(0,i.kt)("admonition",{title:"3. Emoji-Sprache",type:"aufgabe"},(0,i.kt)(c,{type:"state",webKey:"f0c0b431-73c9-42de-bb89-71a691af676d",mdxType:"Answer"}),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Erstellen Sie eine Emoji-Sprache und ersetzen Sie typische W\xf6rter in das entsprechende Emoji. Beispiel:"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:43,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("dl",{parentName:"div"},(0,i.kt)("dt",{parentName:"dl"},"love, liebe, li\xe4b\xe4\n"),(0,i.kt)("dd",{parentName:"dl"},"\u2764\ufe0f"),(0,i.kt)("dt",{parentName:"dl"},"coffee, kaffe, kafi\n"),(0,i.kt)("dd",{parentName:"dl"},"\u2615"),(0,i.kt)("dt",{parentName:"dl"},"...\n"),(0,i.kt)("dd",{parentName:"dl"},"...")),(0,i.kt)(l,{parentName:"div",type:"deflist",nr:0,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Erweitern Sie anschliessend Ihr Programm so, dass eine Benutzer:in einen Satz eingeben kann, und der Emoji-Satz angezeigt wird."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:44,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py id=4f615b2f-cc4b-4a5b-add8-6625f15419ac title=emoji.py",live_py:!0,id:"4f615b2f-cc4b-4a5b-add8-6625f15419ac",title:"emoji.py"},""))),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("h2",{parentName:"div",id:"strings-und-listen"},"Strings und Listen"),(0,i.kt)(l,{parentName:"div",type:"heading",nr:24,mdxType:"Comment"})),(0,i.kt)("div",{className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Manchmal hilft es, Strings in Listen umzuwandeln und manchmal m\xf6chten wir eine Liste von Buchstaben oder Strings in einen String zu vereinen. "),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:45,mdxType:"Comment"})),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"joinliste"},(0,i.kt)("inlineCode",{parentName:"h3"},".join(liste)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:25,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"ben\xf6tigt als Parameter eine Liste von Strings. Diese werden dann zu einem ganzen String aneinandergeh\xe4ngt. Das Bindeglied bildet der String, auf dem die Methode aufgerufen wurde."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:46,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"tage = ['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag']\nprint('Wochentage: ', tage)\nwoche = ' '.join(tage)\nprint('Wochentage: ', woche)\n\ndatum = ['18', '11', '2022']\ndatum = '-'.join(datum)\nprint('Heute ist der ', datum)\n"))),(0,i.kt)("admonition",{type:"def"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("h3",{parentName:"div",id:"splitzeichen"},(0,i.kt)("inlineCode",{parentName:"h3"},".split(zeichen)")),(0,i.kt)(l,{parentName:"div",type:"heading",nr:26,mdxType:"Comment"})),(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},".split()")," ist die umgekehrte Aktion von ",(0,i.kt)("inlineCode",{parentName:"p"},".join()"),". Die Methode nimmt als Parameter ein ",(0,i.kt)("inlineCode",{parentName:"p"},"zeichen")," ","[typ String]"," und trennt anschliessend den String \xfcberall, wo das ",(0,i.kt)("inlineCode",{parentName:"p"},"zeichen")," vorkommt. Dabei werden die ",(0,i.kt)("inlineCode",{parentName:"p"},"zeichen")," selbst entfernt."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:47,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"datum = '05:12:2021'\ndatum_als_liste = datum.split(':')\nprint(datum_als_liste)\nmonat = datum_als_liste[1]\nprint('Monat: ', monat)\n\n# Kurzschreibweise\nprint('Tag: ', datum.split(':')[0])\n"))),(0,i.kt)("admonition",{title:"4. Zeilenweise",type:"aufgabe"},(0,i.kt)(c,{type:"state",webKey:"49b4ed69-263f-4a83-b38f-d4705162952c",mdxType:"Answer"}),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=reverse.py id=674423d1-6338-4347-b7b2-7c92b8f0d794",live_py:!0,title:"reverse.py",id:"674423d1-6338-4347-b7b2-7c92b8f0d794"},"text = '''\\\n*-----\n-*----\n--*---\n---*--\n----*-\n-----*\\\n'''\nprint(text)\n")),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("div",{parentName:"li",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Was bezwecken die beiden ",(0,i.kt)("inlineCode",{parentName:"p"},"\\")," auf Zeile 1 und 7?"),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:48,mdxType:"Comment"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("div",{parentName:"li",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Erzeugen Sie ein in obigem Programm folgende Ausgabe, ohne dabei ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," zu ver\xe4ndern."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:49,mdxType:"Comment"})),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"*----------*\n-*--------*-\n--*------*--\n---*----*---\n----*--*----\n-----**-----\n")))),(0,i.kt)(k,{mdxType:"Hint"},(0,i.kt)("div",{parentName:"admonition",className:"commentable"},(0,i.kt)("p",{parentName:"div"},"Eine neue Zeile wird mit dem Newline-Zeichen ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," (inkl. Backslash!) erzeugt."),(0,i.kt)(l,{parentName:"div",type:"paragraph",nr:50,mdxType:"Comment"}))),(0,i.kt)(N,{mdxType:"Solution"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"text = '''\\\n*-----\n-*----\n--*---\n---*--\n----*-\n-----*\\\n'''\nfor line in text.split('\\n'):\n    print(line + line[-1::-1])\n")))))}v.isMDXComponent=!0}}]);