"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[55377],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>N});var n=t(67294);function m(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){m(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,m=function(e,a){if(null==e)return{};var t,n,m={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(m[t]=e[t]);return m}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}var p=n.createContext({}),l=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=l(e.components);return n.createElement(p.Provider,{value:a},e.children)},o="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,m=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),o=l(t),h=m,N=o["".concat(p,".").concat(h)]||o[h]||d[h]||r;return t?n.createElement(N,i(i({ref:a},c),{},{components:t})):n.createElement(N,i({ref:a},c))}));function N(e,a){var t=arguments,m=a&&a.mdxType;if("string"==typeof e||m){var r=t.length,i=new Array(r);i[0]=h;var s={};for(var p in a)hasOwnProperty.call(a,p)&&(s[p]=a[p]);s.originalType=e,s[o]="string"==typeof e?e:m,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},31152:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=t(87462),m=(t(67294),t(3905));const r={sidebar_custom_props:{id:"ae25ed43-edc0-4d36-8cb7-cf6ddfdf360e",source:{name:"S. Forster, M Lehmann",ref:"https://informatik.mygymer.ch/ef2024/10-komplexitaet/01-suchen.html"}}},i="Suchen",s={unversionedId:"Algorithmik/suchen/index",id:"version-24ef/Algorithmik/suchen/index",title:"Suchen",description:"Wir erforschen die Komplexit\xe4t am Beispiel der Suche: Gegeben sei eine Liste mit Namen.",source:"@site/versioned_docs/version-24ef/05-Algorithmik/01-suchen/index.md",sourceDirName:"05-Algorithmik/01-suchen",slug:"/Algorithmik/suchen/",permalink:"/24ef/Algorithmik/suchen/",draft:!1,editUrl:"https://github.com/lebalz/ofi-blog/tree/main/docs",tags:[],version:"24ef",frontMatter:{sidebar_custom_props:{id:"ae25ed43-edc0-4d36-8cb7-cf6ddfdf360e",source:{name:"S. Forster, M Lehmann",ref:"https://informatik.mygymer.ch/ef2024/10-komplexitaet/01-suchen.html"}}},sidebar:"version-24ef/sidebar",previous:{title:"Algorithmen",permalink:"/24ef/Algorithmik/"},next:{title:"Sortieren",permalink:"/24ef/Algorithmik/sortieren/"}},p={},l=[{value:"Lineare Suche",id:"lineare-suche",level:2},{value:"Komplexit\xe4t",id:"komplexit\xe4t",level:2},{value:"Bin\xe4re Suche",id:"bin\xe4re-suche",level:2},{value:"Komplexit\xe4t",id:"komplexit\xe4t-1",level:2},{value:"experimenteller Vergleich",id:"experimenteller-vergleich",level:2},{value:"Direkt-Vergleich f\xfcr eine Liste",id:"direkt-vergleich-f\xfcr-eine-liste",level:3},{value:"Vergleich bei Zunahme der Listenl\xe4nge",id:"vergleich-bei-zunahme-der-listenl\xe4nge",level:3}],c=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.kt)("div",a)},o=c("Comment"),d=c("Figure"),h={toc:l},N="wrapper";function k(e){let{components:a,...r}=e;return(0,m.kt)(N,(0,n.Z)({},h,r,{components:a,mdxType:"MDXLayout"}),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h1",{parentName:"div",id:"suchen"},"Suchen"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:0,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir erforschen die Komplexit\xe4t am Beispiel der Suche: Gegeben sei eine Liste mit Namen."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:0,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py"},"liste = ['Finn', 'Gian', 'Philipp', 'Samantha', 'Vincent', 'Pascal',\n         'Geremia', 'Janis', 'Kenneth', 'Max', 'Roman']\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Es gibt nun \xabintelligente\xbb und \xabweniger intelligente\xbb M\xf6glichkeiten, diese Liste nach einem bestimmten Element zu durchsuchen."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:1,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h2",{parentName:"div",id:"lineare-suche"},"Lineare Suche"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:1,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir gehen die Liste Element um Element durch und vergleichen die Elemente mit dem gesuchten Element:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:2,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"liste = ['Finn', 'Gian', 'Philipp', 'Samantha', 'Vincent', 'Pascal',\n         'Geremia', 'Janis', 'Kenneth', 'Max', 'Roman']\n\ndef suche_linear(liste, begriff):\n    i = 1\n    for eintrag in liste:\n        if eintrag == begriff:\n            return i\n        i = i + 1\n\nprint(suche_linear(liste, 'Finn'))\nprint(suche_linear(liste, 'Roman'))\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir z\xe4hlen wie viele Elemente wir vergleichen m\xfcssen und geben diese Zahl aus."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:3,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Der beste Fall w\xe4re die Suche nach \xabFinn\xbb \u2013 hier k\xf6nnen wir gleich beim ersten Element die Suche abbrechen."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:4,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Der schlechteste Fall w\xe4re die Suche nach \xabRoman\xbb \u2013 hier m\xfcssen wir alle Elemente durchgehen und werden erst beim letzten f\xfcndig. (oder gleich schlecht: die Suche nach einem Namen der gar nicht vorkommt!)"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:5,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Im Durchschnitt werden wir in der H\xe4lfte der Liste f\xfcndig!"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:6,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},(0,m.kt)("strong",{parentName:"p"},"Uns interessiert aber der schlechteste Fall!")," \u2013 Wenn ein Programm im Schnitt einige Sekunden ben\xf6tigt, aber dann im schlechtesten Fall trotzdem ein Jahr, ist es nicht wirklich brauchbar!"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:7,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h2",{parentName:"div",id:"komplexit\xe4t"},"Komplexit\xe4t"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:2,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Was ist nun, wenn wir die Liste verl\xe4ngern? Dann steigt die Anzahl der Vergleiche nat\xfcrlich auch: F\xfcr eine doppelt so lange Liste m\xfcssen wir auch doppelt so viele Vergleiche anstellen."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:8,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir haben hier also ein lineares Wachstum, welches wir in der sogenannten ",(0,m.kt)("strong",{parentName:"p"},"O-Notation")," wie folgt schreiben:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:9,mdxType:"Comment"})),(0,m.kt)("hr",null),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Die ",(0,m.kt)("strong",{parentName:"p",className:"underline"},"lineare Suche")," geh\xf6rt zu den Funktionen der Klasse"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:10,mdxType:"Comment"})),(0,m.kt)("div",{className:"math math-display"},(0,m.kt)("span",{parentName:"div",className:"katex-display"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("hr",null),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h2",{parentName:"div",id:"bin\xe4re-suche"},"Bin\xe4re Suche"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:3,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Eine \xabintelligentere Suche\xbb setzt voraus, dass die Liste sortiert ist. Wir sortieren also unsere Liste und erhalten:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:11,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py"},"liste = ['Finn', 'Geremia', 'Gian', 'Janis', 'Kenneth', 'Max', 'Pascal', 'Philipp', 'Roman', 'Samantha', 'Vincent']\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir vergleichen nun unser gesuchtes Element mit dem Element in der Mitte der Liste. Kommt unser gesuchtes Element im Alphabet nach dem Element in der Mitte, so halbieren wir die Liste und gucken uns nun nur noch den zweiten Teil an. Dort wiederholen wir das Prozedere, bis wir das Element finden."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:12,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Dadurch entsteht ein bin\xe4rer Baum:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:13,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)(d,{parentName:"div",options:{},mdxType:"Figure"},(0,m.kt)("img",{alt:"\xabBin\xe4re Suche\xbb",src:t(91179).Z,width:"608",height:"455"}),(0,m.kt)("figcaption",{parentName:"Figure"},(0,m.kt)("span",{parentName:"figcaption",style:{flexGrow:1}}),"\xabBin\xe4re Suche\xbb",(0,m.kt)("span",{parentName:"figcaption",style:{flexGrow:1}}))),(0,m.kt)(o,{parentName:"div",type:"figure",nr:0,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"\xabMax\xbb ist genau in der Mitte, \xabGian\xbb und \xabRoman\xbb sind in der Mitte der beiden H\xe4lften, usw.\nMit jedem Vergleich halbieren wir also die Menge der in Frage kommenden Elemente."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:14,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir kommen in diesem Beispiel in maximal 4 Schritten zu unserem Ziel. (Der Baum hat 4 Ebenen)"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:15,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h2",{parentName:"div",id:"komplexit\xe4t-1"},"Komplexit\xe4t"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:4,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Da die Liste nach jedem Aufruf halbiert wird, haben wir nach dem ersten Teilen noch ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mn",{parentName:"mrow"},"2")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n/2")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord"},"2")))))," Elemente, nach dem zweiten Schritt ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mn",{parentName:"mrow"},"4")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n/4")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord"},"4")))))," Elemente, nach dem dritten Schritt ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mn",{parentName:"mrow"},"8")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n/8")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord"},"8")))))," Elemente, usw. Daher l\xe4sst sich allgemein sagen, dass im i-ten Schritt maximal ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("msup",{parentName:"mrow"},(0,m.kt)("mn",{parentName:"msup"},"2"),(0,m.kt)("mi",{parentName:"msup"},"i"))),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n/2^i")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0746639999999998em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},"2"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.824664em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))))))))))))," Elemente \xfcbrigbleiben. Das ergibt ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"g"),(0,m.kt)("mn",{parentName:"msub"},"2")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"log_2(n)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," Vergleiche bei der Suche."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:16,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Diese Suche hat also kein lineares Verhalten mehr, sondern ein logarithmisches. Wir notieren das in der O-Notation wie folgt:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:17,mdxType:"Comment"})),(0,m.kt)("hr",null),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Die bin\xe4re Suche geh\xf6rt zu den Funktionen der Klasse"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:18,mdxType:"Comment"})),(0,m.kt)("div",{className:"math math-display"},(0,m.kt)("span",{parentName:"div",className:"katex-display"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(n))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("hr",null),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Die bin\xe4re Suche ist also schneller als die lineare. Gerade bei l\xe4ngeren Listen macht sich das sehr stark bemerkbar:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:19,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("table",{parentName:"div"},(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:"left"},"Such-Algorithmus"),(0,m.kt)("th",{parentName:"tr",align:"left"},"10"),(0,m.kt)("th",{parentName:"tr",align:"left"},"50"),(0,m.kt)("th",{parentName:"tr",align:"left"},"n"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:"left"},"linear"),(0,m.kt)("td",{parentName:"tr",align:"left"},"10"),(0,m.kt)("td",{parentName:"tr",align:"left"},"50"),(0,m.kt)("td",{parentName:"tr",align:"left"},"n")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:"left"},"bin\xe4r"),(0,m.kt)("td",{parentName:"tr",align:"left"},"4"),(0,m.kt)("td",{parentName:"tr",align:"left"},"6"),(0,m.kt)("td",{parentName:"tr",align:"left"},"lg(n)")))),(0,m.kt)(o,{parentName:"div",type:"table",nr:0,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Eine M\xf6glichkeit, die bin\xe4re Suche zu implementieren, sieht wie folgt aus:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:20,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py slim",live_py:!0,slim:!0},"liste = ['Finn', 'Geremia', 'Gian', 'Janis', 'Kenneth', 'Max', 'Pascal',\n         'Philipp', 'Roman', 'Samantha', 'Vincent']\n\ndef suche_binaer(liste, begriff):\n    i = 1\n    min = 0\n    max = len(liste)    \n    while True:\n        index = min + (max - min) // 2\n        eintrag = liste[index]      \n        if eintrag == begriff:\n            return i\n        elif eintrag < begriff:\n            min = index\n        else:\n            max = index\n        i = i + 1\n\nprint(suche_binaer(liste, 'Gian'))\nprint(suche_binaer(liste, 'Vincent'))\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Es wird immer nur ein Teil der Liste durchsucht, der nach jedem Schritt kleiner wird. Der Teil der Liste wird durch die Variablen ",(0,m.kt)("strong",{parentName:"p",className:"underline"},"min")," und ",(0,m.kt)("strong",{parentName:"p",className:"underline"},"max")," eingegrenzt."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:21,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h2",{parentName:"div",id:"experimenteller-vergleich"},"experimenteller Vergleich"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:5,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h3",{parentName:"div",id:"direkt-vergleich-f\xfcr-eine-liste"},"Direkt-Vergleich f\xfcr eine Liste"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:6,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir w\xe4hlen 10000 Mal zuf\xe4llig ein Element der Liste aus und schauen wie viele Schritte die beiden Suchalgorithmen brauchen, um es zu finden. Den Durchschnitt geben wir aus."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:22,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py"},"import random\n\ndef test1():\n    i = 0\n    count_linear = 0\n    count_binaer = 0\n    while i < 10000:\n        eintrag = liste[random.randint(0, len(liste) - 1)]\n        count_linear = count_linear + suche_linear(liste, eintrag)\n        count_binaer = count_binaer + suche_binaer(liste, eintrag)\n        i = i + 1\n    print('Suche linear: ', count_linear / i)\n    print(' Suche bin\xe4r: ', count_binaer / i)\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("h3",{parentName:"div",id:"vergleich-bei-zunahme-der-listenl\xe4nge"},"Vergleich bei Zunahme der Listenl\xe4nge"),(0,m.kt)(o,{parentName:"div",type:"heading",nr:7,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Wir f\xfchren denselben Vergleich nun f\xfcr Listen mit unterschiedlicher L\xe4nge aus: Die \xe4ussere while-Schleife sorgt daf\xfcr, dass aus der urspr\xfcnglichen Liste, unterschiedlich lange Unterlisten erstellt werden. Dazu wird die Liste \xabzerschnitten\xbb mit ",(0,m.kt)("inlineCode",{parentName:"p"},"liste[0:x]"),". Diese Unterliste wird immer l\xe4nger, bis wir dann die Original-Liste wieder erhalten. F\xfcr jede Unterliste wird wiederum der Durchschnitt von 10000 Suchen eines zuf\xe4lligen Elementes berechnet."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:23,mdxType:"Comment"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-py"},"import matplotlib.pyplot as plt\n\ndef test2():\n    plot_x = []\n    plot_y_linear = []\n    plot_y_binaer = []\n\n    x = 1\n    while x < len(liste):\n        liste_kurz = liste[0:x]\n        i = 0\n        count_linear = 0\n        count_binaer = 0\n        while i < 10000:\n            eintrag = liste[random.randint(0, len(liste_kurz) - 1)]\n            count_linear = count_linear + suche_linear(liste_kurz, eintrag)\n            count_binaer = count_binaer + suche_binaer(liste_kurz, eintrag)\n            i = i + 1\n\n        plot_x.append(x)\n        plot_y_linear.append(count_linear / i)\n        plot_y_binaer.append(count_binaer / i)\n        x = x + 1\n        \n    plt.plot(plot_x, plot_y_linear, plot_y_binaer)\n    plt.show()\n")),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"Am Schluss sind in den Variablen ",(0,m.kt)("inlineCode",{parentName:"p"},"plot_x"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"plot_y_linear")," und ",(0,m.kt)("inlineCode",{parentName:"p"},"plot_y_binaer")," die Ergebnisse abgespeichert. Diese k\xf6nnen nun z.B. mit der matplotlib ausgegeben werden."),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:24,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)("p",{parentName:"div"},"F\xfcr eine Liste bis L\xe4nge 50 f\xfchrt dies zu folgendem Output:"),(0,m.kt)(o,{parentName:"div",type:"paragraph",nr:25,mdxType:"Comment"})),(0,m.kt)("div",{className:"commentable"},(0,m.kt)(d,{parentName:"div",options:{},mdxType:"Figure"},(0,m.kt)("img",{alt:"\xabMessung Experiment\xbb",src:t(52633).Z,width:"815",height:"632"}),(0,m.kt)("figcaption",{parentName:"Figure"},(0,m.kt)("span",{parentName:"figcaption",style:{flexGrow:1}}),"\xabMessung Experiment\xbb",(0,m.kt)("span",{parentName:"figcaption",style:{flexGrow:1}}))),(0,m.kt)(o,{parentName:"div",type:"figure",nr:1,mdxType:"Comment"})))}k.isMDXComponent=!0},91179:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/komplexitaet-baum-cc7a06b7ca7fc39b5eea1f58d3ec8ed3.svg"},52633:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/komplexitaet-experiment-0ded2d40b3261295d59ec21b40345acd.png"}}]);