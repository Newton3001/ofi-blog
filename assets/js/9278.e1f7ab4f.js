"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[9278],{9278:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var r=t(67294),i=t(86010),s=t(6645),l=t(52616),o=t(46858),a=t(71217),f=t(21314);const d=e=>{const[n,t]=r.useState(!1);return r.useEffect((()=>{document.getElementById(e.name)||t(!0)}),[]),n?r.createElement("script",{id:e.name,type:"text/python"},e.scriptSource):null},c=t(96500),_=()=>r.createElement(d,{name:"grid",scriptSource:c}),m=t(44829),p=()=>r.createElement(d,{name:"config",scriptSource:m}),u=t(60157),g=()=>r.createElement(d,{name:"game",scriptSource:u}),y=t(63818),w=(0,a.Pi)((e=>{const n=(0,f.oR)("documentStore").find(e.webKey),t=n.precode+"\n"+n.code,i=n.precode.split(/\n/).length;return r.createElement(r.Fragment,null,r.createElement(p,null),r.createElement(g,null),n.hasCanvasOutput&&r.createElement(_,null),r.createElement("script",{id:l.h5.scriptSource(n.codeId),type:"text/py_disabled",className:"brython-script"},y+'\nrun("""'+(0,o.ly)(t||"")+'""", \''+n.codeId+"', "+i+")"))}));var x=t(74981);t(56604),t(4007),t(44077),t(57787),t(82679),t(66245);const h=(0,a.Pi)((e=>{const n=(0,f.oR)("documentStore").find(e.webKey),t=r.useCallback((t=>(null!==t&&t.editor&&("python"===e.lang&&t.editor.commands.addCommand({name:"execute",bindKey:{win:"Ctrl-Enter",mac:"Command-Enter"},exec:()=>n.execScript(document)}),t.editor.commands.addCommand({name:"save",bindKey:{win:"Ctrl-s",mac:"Command-s"},exec:()=>{n.saveService.saveNow()}})),()=>{if(t&&t.editor){const e=t.editor.commands.commands.execute;e&&t.editor.commands.removeCommand(e,!0);const n=t.editor.commands.commands.save;n&&t.editor.commands.removeCommand(n,!0)}})),[n]);return r.createElement("div",{className:(0,i.default)(s.Z.brythonCodeBlock,s.Z.editor)},r.createElement(x.ZP,{className:(0,i.default)(s.Z.brythonEditor,!e.showLineNumbers&&s.Z.noGutter),style:{width:"100%"},onPaste:e=>{n.versioned&&(n.setPastedEdit(!0),n.saveService.saveNow())},focus:!1,navigateToFileEnd:!1,maxLines:e.maxLines||25,ref:t,mode:e.lang,theme:"dracula",onChange:e=>{n.setData({code:e})},readOnly:n.showRaw||!n.loaded,value:n.showRaw?n.rawScript:n.data.code,defaultValue:n.code,name:l.h5.aceEditor(n.codeId),editorProps:{$blockScrolling:!0},setOptions:{displayIndentGuides:!0,vScrollBarAlwaysVisible:!1,highlightGutterLine:!1},showPrintMargin:!1,highlightActiveLine:!1,enableBasicAutocompletion:!0,enableLiveAutocompletion:!1,enableSnippets:!1,showGutter:e.showLineNumbers}),"python"===e.lang&&r.createElement(w,{webKey:e.webKey}))}))},44829:e=>{e.exports="class Config():\n    PYTHON_SOURCE = ''\n    CANVAS_OUTPUT = False\n    CANVAS_ID = 'canvas_id'\n    GRAPHICS_ID = 'graphics_id'"},60157:e=>{e.exports="\nfrom browser import timer, document # type: ignore\nfrom config import Config           # type: ignore\nimport time\nclass Game():\n    stop_request = False\n    anim_id = None\n    timeout_id = None\n    init_time = None\n    sleep_requested: bool = False\n\n    @staticmethod\n    def reset():\n        Game.stop_request = False\n        Game.anim_id = None\n        Game.timeout_id = None\n        Game.init_time = None\n        Game.sleep_requested = False\n\n    @staticmethod\n    def sleep(ms):\n        pass\n\n    @staticmethod\n    def stop():\n        Game.stop_request = True\n        timer.clear_timeout(Game.timeout_id)\n        timer.cancel_animation_frame(Game.timeout_id)\n\n\n    @staticmethod\n    def is_running():\n        return not Game.stop_request and document[Config.PYTHON_SOURCE].attrs.get('data--start-time') == Game.init_time # type: ignore\n\ndef sleep(ms):\n    Game.sleep(ms)\n\ndef stop():\n    Game.stop()\n\ndef gameloop(func):\n    '''\n    Wrapper function for brython\n\n    ## Example\n    ```py\n    from game import gameloop, sleep, stop\n\n    @gameloop\n    def run(dt):\n        print('Time', dt)\n        if dt > 2000: # stop the game loop after 2000 ms \n            stop()\n        sleep(100) # sleeps 100 ms\n\n    \n    run()\n    ```\n    '''\n    Game.reset()\n    t0 = time.now() # type: ignore\n    Game.init_time = document[Config.PYTHON_SOURCE].attrs['data--start-time']\n        \n    def animation_frame():\n        Game.anim_id = timer.request_animation_frame(wrap)\n\n    def sleep(ms):\n        Game.sleep_requested = True\n        if Game.is_running():\n            Game.timeout_id = timer.set_timeout(animation_frame, ms)\n\n    Game.sleep = sleep\n    \n    def wrap(*args, **kwargs):\n        Game.sleep_requested = False\n        if func.__code__.co_argcount > 0:\n            result = func(time.now() - t0) # type: ignore\n        else:\n            result = func()\n\n        if not Game.sleep_requested and not Game.stop_request:\n            animation_frame()\n        return result\n    wrap()\n    return Game"},96500:e=>{e.exports="from browser import document, html # type: ignore\nfrom browser import timer, window # type: ignore\nfrom config import Config # type: ignore\n\nclass Rectangle():\n    col: int\n    row: int\n    ctx = None\n    grid = None\n    def __init__(self, grid, col: int, row: int, color: str = 'rgba(0,0,0,0)'):\n        self.col = col\n        self.row = row\n        self.grid = grid\n        canvas = document[Config.CANVAS_ID]\n        self.ctx = canvas.getContext('2d')\n        self._color = color\n        \n    def get(self, offset_x: int, offset_y: int):\n        y = (self.row + offset_y) % len(self.grid) # type: ignore\n        x = (self.col + offset_x) % len(self.grid[y]) # type: ignore\n        return self.grid[y][x] # type: ignore\n\n    @property\n    def color(self):\n        return self._color\n\n    @color.setter\n    def color(self, color: str):\n        if color == '':\n            color = 'rgba(0,0,0,0)'\n\n        if self._color == color:\n            return\n        self._color = color\n        self.draw()\n\n    def draw(self):\n        scale = self.grid.scale # type: ignore\n        x = self.col * scale\n        y = self.row * scale\n        self.ctx.clearRect(x, y, scale, scale) # type: ignore\n        self.ctx.lineWidth = 0 # type: ignore\n        self.ctx.fillStyle = self.color # type: ignore\n        self.ctx.fillRect(x, y, scale, scale) # type: ignore\n\n    def copy(self, grid):\n        return Rectangle(grid, self.col, self.row, self.color)\n\n    def __repr__(self):\n        return f'{self.color[:5].ljust(5, \" \")}'\n\nclass RectLine():\n    line: list = []\n    n = 0\n    max = 0\n    def __init__(self, grid, row, cols: int | list):\n        self.grid = grid\n        if type(cols) == list:\n            self.line = cols # type: ignore\n        else:\n            self.line = [Rectangle(grid, col, row) for col in range(cols)] # type: ignore\n        self.max = len(self.line) # type: ignore\n    \n    def __getitem__(self, key):\n        return self.line[key]\n\n    def __setitem__(self, key, value):\n        self.line[key].color = value\n\n    def __repr__(self):\n        return ', '.join([f'{r}' for r in self.line])\n\n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n < self.max:\n            result = self[self.n]\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n    \n    def __len__(self):\n        return self.max\n\n    def draw(self):\n        for rect in self.line:\n            rect.draw()\n    \n    def copy(self, grid):\n        return RectLine(grid, self.line[0].row, len(self.line), [l.copy() for l in self.line]) # type: ignore\n\nclass Grid():\n    lines = []\n    n = 0\n    max = 0\n    CANVAS_ID = ''\n    WIDTH = 500\n    HEIGHT = 500\n    scale = 10\n    record_gif = False\n    frames = {}\n\n    def __init__(self, rows: int, cols: int, scale: int = -1):\n        if scale < 0:\n            if rows > 0 and cols > 0:\n                scale = min(Grid.WIDTH // cols, Grid.HEIGHT // rows)\n            else:\n                scale = 10\n        self.scale = scale\n        self.lines = [RectLine(self, row, cols) for row in range(rows)]\n        self.max = rows\n    \n    @staticmethod\n    def setup(width: int, height: int, record_gif: bool = False):\n        Grid.HEIGHT = height\n        Grid.WIDTH = width\n        Grid.record_gif = record_gif\n        Grid.frames = {}\n        canvas = document[Config.CANVAS_ID]\n        parent = canvas.parent\n        parent.replaceChildren()\n    \n        canv = document.createElement('canvas')\n        canv.style.display = 'block'\n        canv.id = Config.CANVAS_ID;\n        canv.attrs['height'] = height\n        canv.attrs['width'] = width\n        canv.style.width = f'{width}px'\n        canv.style.height = f'{height}px'\n        parent.appendChild(canv)\n\n    @staticmethod\n    def from_bin_text(bin_text: str, colors={'s': 'black', '1': 'black', 'x': 'black', 'bg': ''}):\n        lines = bin_text.lower().splitlines()\n        if 'bg' not in colors:\n            colors['bg'] = ''\n        while len(lines) > 0 and len(lines[0]) == 0:\n            lines.pop(0)\n        size_y = len(lines)\n        if size_y < 1:\n            raise Exception('Grid must have at least one non empty line')\n        size_x = max(map(lambda x: len(x), lines))\n\n        scale = min(Grid.WIDTH // size_x, Grid.HEIGHT // size_y)\n        grid = Grid(0, 0, scale)\n        raw_grid = []\n        for line in lines:\n            raw_line = []\n            for x in range(size_x):\n                if x < len(line):\n                    raw_line.append(Rectangle(grid, x, len(raw_grid), colors.get(line[x], colors['bg'])))\n                else:\n                    raw_line.append(Rectangle(grid, x, len(raw_grid), colors['bg']))\n            raw_grid.append(RectLine(grid, len(raw_grid), raw_line))\n        grid.set_lines(raw_grid)\n        grid.draw()\n        return grid\n        \n\n    def set_lines(self, lines):\n        self.lines = lines\n        self.max = len(lines)\n\n    @property\n    def grid(self):\n        return [l.line for l in self.lines]\n\n    @property\n    def size(self):\n        if self.max < 1:\n            return (0, 0)\n        return (len(self.lines), len(self.lines[0]))\n\n    @staticmethod\n    def clear_canvas():\n        canvas = document[Config.CANVAS_ID]\n        ctx = canvas.getContext('2d')\n        ctx.clearRect(0, 0, Grid.WIDTH, Grid.HEIGHT) # type: ignore\n\n\n    def draw(self):\n        for line in self.lines:\n            line.draw()\n\n    @staticmethod\n    def gif_add():\n        if Grid.record_gif:\n            canvas = document[Config.CANVAS_ID]\n            frameName = 'frame_' + str(len(Grid.frames)).rjust(3, '0')\n            Grid.frames[frameName] = canvas.toDataURL('image/png');\n\n\n\n    def fill(self, color: str = ''):\n        for line in self.lines:\n            for cell in line:\n                cell.color = color\n\n    def copy(self):\n        cp = Grid(0, 0)\n        lines = [l.copy(cp) for l in self.lines]\n        cp.set_lines(lines)\n        return cp\n\n    def __getitem__(self, key):\n        return self.lines[key]\n\n    def __setitem__(self, key, value):\n        self.lines[key] = value\n        \n    def __repr__(self):\n        rep = ''\n        for line in self.lines:\n            rep += f'{line}'\n            rep += '\\n'\n        return rep\n    \n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n < self.max:\n            result = self[self.n]\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n\n    def __len__(self):\n        return self.max"},63818:e=>{e.exports="from browser import document, window # type: ignore\nimport re\nimport sys\nimport time\nfrom config import Config # type: ignore\n\nhas_turtle_import = False\nlog_line_number_shift = 0\n\ndef notify(node_id, data):\n    event = window.CustomEvent.new('bry_notify', {'detail': data})\n    document[f'py_{node_id}'].dispatchEvent(event)\n\nclass EventOutput:\n    encoding = 'utf-8'\n\n    def __init__(self, node_id, out_type):\n        self.node_id = node_id\n        self.out_type = out_type\n        self.buf = ''\n\n    def write(self, data):\n        self.buf += str(data)\n        self.flush()\n\n    def flush(self):\n        if len(self.buf) > 0:\n            notify(self.node_id, {'type': self.out_type, 'output': self.buf})\n        self.buf = ''\n\n    def __len__(self):\n        return len(self.buf)\n\nclass Trace:\n    def __init__(self):\n        self.buf = \"\"\n\n    def write(self, *data):\n        self.buf += \" \".join([str(x) for x in data])\n\n    def format(self):\n        \"\"\"Remove calls to function in this script from the traceback.\"\"\"\n        return self.buf\n\ndef syntax_error(args):\n    trace = Trace()\n    info, [filename, lineno, offset, line, *extra] = args\n    line_nr = lineno - log_line_number_shift if lineno > 0 else 0\n\n    trace.write(f\"  File {filename}, line {line_nr}\\n\")\n    indent = len(line) - len(line.lstrip())\n    trace.write(\"    \" + line.strip() + \"\\n\")\n    nb_marks = 1\n    if extra:\n        end_lineno, end_offset = extra\n        if end_lineno > lineno:\n            nb_marks = len(line) - offset\n        else:\n            nb_marks = end_offset - offset\n    nb_marks = max(nb_marks, 1)\n    trace.write(\"    \" + (offset - 1) * \" \" + \"^\" * nb_marks + \"\\n\")\n    trace.write(\"SyntaxError:\", info, \"\\n\")\n    return trace.buf\n\ndef format_exc():\n    trace = Trace()\n    exc_info = sys.exc_info()\n    exc_class = exc_info[0].__name__  # type: ignore\n    exc_msg = str(exc_info[1])\n    tb = exc_info[2]\n    if exc_info[0] is SyntaxError:\n        return syntax_error(exc_info[1].args)  # type: ignore\n    trace.write(\"Traceback (most recent call last):\\n\")\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        name = code.co_name\n        filename = code.co_filename\n        line_nr = tb.tb_lineno - log_line_number_shift if tb.tb_lineno > 0 else 0\n        trace.write(f\"  File {filename}, line {line_nr}, in {name}\\n\")\n        if not filename.startswith(\"<\"):\n            src = open(filename, encoding='utf-8').read()\n            lines = src.split('\\n')\n            line = lines[tb.tb_lineno - 1]\n            trace.write(f\"    {line.strip()}\\n\")\n        tb = tb.tb_next\n    trace.write(f\"{exc_class}: {exc_msg}\\n\")\n    return trace.format()\n\ndef print_exc(file=None):\n    if file is None:\n        file = sys.stderr\n    trace = format_exc()\n    file.write(trace)\n    return trace\n\nTURTLE_IMPORTS = re.compile(r'(^from turtle import)|(^import turtle)', re.M)\nGRID_IMPORTS = re.compile(r'(^from grid import)|(^import grid)', re.M)\nGRAPHICS_OUTPUT = re.compile(r'^(SETUP_)?GRAPHICS_OUTPUT\\s*=\\s*(True|1)', re.M)\nCANVAS_OUTPUT = re.compile(r'^(SETUP_)?CANVAS_OUTPUT\\s*=\\s*(True|1)', re.M)\nTURTLE_TEMPLATE = '''from browser import document\nimport turtle\nturtle.restart()\nturtle.set_defaults(\n  turtle_canvas_wrapper = document['{node_id}_graphics'],\n  turtle_canvas_id = '{node_id}_svg'\n)\n{py_script}\nturtle.done()\n'''\n\n\ndef run(code, node_id, line_shift):\n    global has_turtle_import, log_line_number_shift\n    has_turtle_import = not not TURTLE_IMPORTS.search(code)\n    log_line_number_shift = (7 if has_turtle_import else 0) + line_shift\n    Config.PYTHON_SOURCE = f'{node_id}_src'\n    if CANVAS_OUTPUT.search(code) or GRID_IMPORTS.search(code):\n        Config.CANVAS_ID = f'{node_id}_canvas'\n    if GRAPHICS_OUTPUT.search(code):\n        Config.GRAPHICS_ID = f'{node_id}_graphics'\n    py_script = TURTLE_TEMPLATE.format(node_id=node_id, py_script=code) if has_turtle_import else code\n\n    sys.stdout = EventOutput(node_id, 'stdout')\n    sys.stderr = EventOutput(node_id, 'stderr')\n    notify(node_id, {'type': 'start', 'time': time.time()})\n    try:\n        res_div = f'{node_id}_brython_result'\n        document[res_div].clear()\n        ns = {'__name__': node_id, 'RESULT_DIV': document[res_div]}\n        loc = {}\n        exec(py_script, ns)\n        # if len(code.splitlines()) < 10:\n        #    print('  --', '\\n'.join([f'{x}: {loc[x]}' for x in loc.keys() if not x.startswith('__')]))\n    except Exception as exc:\n        print_exc(file=sys.stderr)\n    finally:\n        notify(node_id, {'type': 'done', 'time': time.time()})\n    \n    sys.stdout.flush()\n    sys.stderr.flush()\n"}}]);